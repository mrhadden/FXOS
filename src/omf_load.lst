  Sat Jul 10 2021  1:15                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",0
     7                        ;/************************************************
                    ************************/
     8                        ;/*                                               
                                           */
     9                        ;/*  OMF_Load.c : Module pour le chargement/décoda
                    ge des fichiers OMF.   */
    10                        ;/*                                               
                                           */
    11                        ;/************************************************
                    ************************/
    12                        ;/*  Auteur : Olivier ZARDINI  *  Brutal Deluxe So
                    ftware  *  Avril 2013  */
    13                        ;/************************************************
                    ************************/
    14                        ;
    15                        ;#include "fxtypes.h"
    16                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    17                        	.stag	_fx_bytebits,8,1
    18                        	.member	b7,0,14,17,1
    19                        	.member	b6,1,14,17,1
    20                        	.member	b5,2,14,17,1
    21                        	.member	b4,3,14,17,1
    22                        	.member	b3,4,14,17,1
    23                        	.member	b2,5,14,17,1
    24                        	.member	b1,6,14,17,1
    25                        	.member	b0,7,14,17,1
    26                        	.eos
    27                        	.stag	_fx_node,384,2
    28                        	.member	type,0,14,8,8
    29                        	.member	Reserved0,8,14,8,8
    30                        	.member	data,16,129,8,32
    31                        	.member	last,48,138,8,32,2
    32                        	.member	next,80,138,8,32,2
    33                        	.member	name,112,110,8,0,32
    34                        	.member	Reserved1,368,16,8,16
    35                        	.eos
    36                        	.stag	_fx_nodelist,96,3
    37                        	.member	listhead,0,138,8,32,2
    38                        	.member	listData,32,129,8,32
    39                        	.member	deallocator,64,641,8,32
    40                        	.eos
    41                        	.stag	_fx_queue,80,4
    42                        	.member	count,0,5,8,16
    43                        	.member	front,16,138,8,32,2
  Sat Jul 10 2021  1:15                                                Page 2


    44                        	.member	rear,48,138,8,32,2
    45                        	.eos
    46                        	.stag	fake5_,32,5
    47                        	.member	subsystem,0,14,8,8
    48                        	.member	level,8,14,8,8
    49                        	.member	error,16,16,8,16
    50                        	.eos
    51                        	.stag	_fx_process_signal,16,6
    52                        	.member	cbSize,0,16,8,16
    53                        	.eos
    54                        	.stag	_fx_semaphore,16,7
    55                        	.member	reserved,0,5,8,16
    56                        	.eos
    57                        	.stag	_fx_fileBlock,552,8
    58                        	.member	openCount,0,16,8,16
    59                        	.member	lockCount,16,16,8,16
    60                        	.member	dirty,32,14,8,8
    61                        	.member	fileBuffer,40,110,8,0,64
    62                        	.eos
    63                        	.stag	_fx_irq_data,48,9
    64                        	.member	line,0,5,8,16
    65                        	.member	keycode,16,142,8,32
    66                        	.eos
    67                        	.stag	_task,48,10
    68                        	.member	SPL,0,14,8,8
    69                        	.member	SPH,8,14,8,8
    70                        	.member	pstack,16,142,8,32
    71                        	.eos
    72                        	.stag	_task_stack,32,11
    73                        	.member	SS,0,142,8,32
    74                        	.eos
    75                        	.stag	int_regs,104,12
    76                        	.member	PB,0,14,8,8
    77                        	.member	PH,8,14,8,8
    78                        	.member	PL,16,14,8,8
    79                        	.member	PP,24,14,8,8
    80                        	.member	DB,32,14,8,8
    81                        	.member	DH,40,14,8,8
    82                        	.member	DL,48,14,8,8
    83                        	.member	AH,56,14,8,8
    84                        	.member	AL,64,14,8,8
    85                        	.member	XH,72,14,8,8
    86                        	.member	XL,80,14,8,8
    87                        	.member	YH,88,14,8,8
    88                        	.member	YL,96,14,8,8
    89                        	.eos
    90                        	.stag	_fx_eventMessage,304,13
    91                        	.member	src,0,18,8,32
    92                        	.member	dest,32,18,8,32
    93                        	.member	type,64,16,8,16
    94                        	.member	hwnd,80,129,8,32
    95                        	.member	pheap,112,129,8,32
    96                        	.member	msgTime,144,18,8,32
    97                        	.member	data,176,110,8,0,16
    98                        	.eos
    99                        	.stag	_fx_cmdMessage,304,14
   100                        	.member	src,0,18,8,32
   101                        	.member	dest,32,18,8,32
  Sat Jul 10 2021  1:15                                                Page 3


   102                        	.member	type,64,16,8,16
   103                        	.member	hwnd,80,129,8,32
   104                        	.member	pheap,112,129,8,32
   105                        	.member	msgTime,144,18,8,32
   106                        	.member	cmdCId,176,16,8,16
   107                        	.member	cmdMId,192,16,8,16
   108                        	.member	parameter1,208,18,8,32
   109                        	.member	parameter2,240,18,8,32
   110                        	.member	parameter3,272,18,8,32
   111                        	.eos
   112                        	.stag	_fx_console_ctl,448,15
   113                        	.member	maxCols,0,5,8,16
   114                        	.member	maxRows,16,5,8,16
   115                        	.member	curX,32,5,8,16
   116                        	.member	curY,48,5,8,16
   117                        	.member	fgColor,64,5,8,16
   118                        	.member	bgColor,80,5,8,16
   119                        	.member	mode,96,14,8,8
   120                        	.member	kbBuffer,104,101,8,0,16
   121                        	.member	screenBuffer,360,142,8,32
   122                        	.member	desktopMode,392,14,8,8
   123                        	.member	lastMouseButton,400,5,8,16
   124                        	.member	lastMouseX,416,5,8,16
   125                        	.member	lastMouseY,432,5,8,16
   126                        	.eos
   127                        	.stag	_fx_desktop_ctl,392,16
   128                        	.member	desktopMode,0,14,8,8
   129                        	.member	cursorCtl,8,5,8,16
   130                        	.member	cursorState,24,5,8,16
   131                        	.member	backgroundColor,40,5,8,16
   132                        	.member	foregroundColor,56,5,8,16
   133                        	.member	menuMode,72,5,8,16
   134                        	.member	lastMouseButton,88,5,8,16
   135                        	.member	lastMouseX,104,5,8,16
   136                        	.member	lastMouseY,120,5,8,16
   137                        	.member	currentDiskName,136,142,8,32
   138                        	.member	diskNodes,168,129,8,32
   139                        	.member	titleNodes,200,129,8,32
   140                        	.member	menuNodes,232,129,8,32
   141                        	.member	iconNodes,264,129,8,32
   142                        	.member	windowNodes,296,129,8,32
   143                        	.member	fontNodes,328,129,8,32
   144                        	.member	wndProc,360,138,8,32,3
   145                        	.eos
   146                        	.stag	_fx_process,800,17
   147                        	.member	cbSize,0,5,8,16
   148                        	.member	procId,16,18,8,32
   149                        	.member	parentId,48,18,8,32
   150                        	.member	ctx,80,129,8,32
   151                        	.member	userId,112,16,8,16
   152                        	.member	status,128,16,8,16
   153                        	.member	foregroundActive,144,14,8,8
   154                        	.member	tls,152,1121,8,32,8
   155                        	.member	commandLine,408,142,8,32
   156                        	.member	semaphores,440,138,8,32,3
   157                        	.member	fileHandles,472,138,8,32,3
   158                        	.member	pathList,504,138,8,32,3
   159                        	.member	resources,536,138,8,32,3
  Sat Jul 10 2021  1:15                                                Page 4


   160                        	.member	timerAware,568,14,8,8
   161                        	.member	timerTicks,576,112,8,0,2
   162                        	.member	timerTickCount,608,112,8,0,2
   163                        	.member	kernelError,640,10,8,32,5
   164                        	.member	consoleCtl,672,138,8,32,15
   165                        	.member	desktopCtl,704,138,8,32,16
   166                        	.member	execProc,736,641,8,32
   167                        	.member	startupArgs,768,129,8,32
   168                        	.eos
   169                        	.stag	_fxProcessMessage,112,18
   170                        	.member	src,0,18,8,32
   171                        	.member	dest,32,18,8,32
   172                        	.member	type,64,16,8,16
   173                        	.member	processInfo,80,138,8,32,17
   174                        	.eos
   175                        	.stag	_k_key_state,112,19
   176                        	.member	scanCode,0,14,8,8
   177                        	.member	isShifted,8,14,8,8
   178                        	.member	isAlt,16,14,8,8
   179                        	.member	isExtended,24,14,8,8
   180                        	.member	isCapsLock,32,14,8,8
   181                        	.member	isNumLock,40,14,8,8
   182                        	.member	isScrollLock,48,14,8,8
   183                        	.member	keyChar,56,16,8,16
   184                        	.member	scanTime,72,18,8,32
   185                        	.member	ledStatus,104,14,8,8
   186                        	.eos
   187                        	.stag	_fx_property,384,20
   188                        	.member	name,0,110,8,0,16
   189                        	.member	value,128,110,8,0,32
   190                        	.eos
   191                        	.utag	_24bitPointer,32,21
   192                        	.member	address,0,142,11,32
   193                        	.member	bytes,0,110,11,0,4
   194                        	.eos
   195                        	.stag	_PointStruct,32,22
   196                        	.member	x,0,5,8,16
   197                        	.member	y,16,5,8,16
   198                        	.eos
   199                        	.stag	_RectStruct,112,23
   200                        	.member	x,0,5,8,16
   201                        	.member	y,16,5,8,16
   202                        	.member	z,32,18,8,32
   203                        	.member	width,64,5,8,16
   204                        	.member	height,80,5,8,16
   205                        	.member	attr,96,5,8,16
   206                        	.eos
   207                        	.stag	fake24_,96,24
   208                        	.member	name,0,142,8,32
   209                        	.member	topLeft,32,10,8,32,22
   210                        	.member	bottomRight,64,10,8,32,22
   211                        	.eos
   212                        	.stag	fake25_,112,25
   213                        	.member	x,0,5,8,16
   214                        	.member	y,16,5,8,16
   215                        	.member	z,32,5,8,16
   216                        	.member	width,48,5,8,16
   217                        	.member	height,64,5,8,16
  Sat Jul 10 2021  1:15                                                Page 5


   218                        	.member	data,80,18,8,32
   219                        	.eos
   220                        	.stag	_k_WindowClass,272,26
   221                        	.member	cbSize,0,16,8,16
   222                        	.member	style,16,16,8,16
   223                        	.member	styleEx,32,16,8,16
   224                        	.member	pWndProc,48,654,8,32
   225                        	.member	hInstance,80,129,8,32
   226                        	.member	hIcon,112,129,8,32
   227                        	.member	hCursor,144,129,8,32
   228                        	.member	hbrBackground,176,129,8,32
   229                        	.member	lpszMenuName,208,142,8,32
   230                        	.member	lpszClassName,240,142,8,32
   231                        	.eos
   232                        	.stag	_ClickableRect,152,27
   233                        	.member	area,0,10,8,112,23
   234                        	.member	z,112,18,8,32
   235                        	.member	enabled,144,14,8,8
   236                        	.eos
   237                        	.stag	_NCClickableRect,136,28
   238                        	.member	area,0,10,8,112,23
   239                        	.member	msgType,112,16,8,16
   240                        	.member	enabled,128,14,8,8
   241                        	.eos
   242                        	.stag	_DragData,216,29
   243                        	.member	area,0,10,8,112,23
   244                        	.member	xoffset,112,5,8,16
   245                        	.member	yoffset,128,5,8,16
   246                        	.member	msgType,144,16,8,16
   247                        	.member	ncAction,160,16,8,16
   248                        	.member	isDrag,176,14,8,8
   249                        	.member	isResize,184,14,8,8
   250                        	.member	canDrag,192,14,8,8
   251                        	.member	canDrop,200,14,8,8
   252                        	.member	didDrag,208,14,8,8
   253                        	.eos
   254                        	.stag	_k_WindowStruct,3904,30
   255                        	.member	cbSize,0,16,8,16
   256                        	.member	style,16,18,8,32
   257                        	.member	styleEx,48,18,8,32
   258                        	.member	win_id,80,5,8,16
   259                        	.member	win_x,96,5,8,16
   260                        	.member	win_y,112,5,8,16
   261                        	.member	win_width,128,5,8,16
   262                        	.member	win_height,144,5,8,16
   263                        	.member	win_xoffset,160,5,8,16
   264                        	.member	win_yoffset,176,5,8,16
   265                        	.member	win_cxoffset,192,5,8,16
   266                        	.member	win_cyoffset,208,5,8,16
   267                        	.member	wndRect,224,10,8,112,23
   268                        	.member	clientRect,336,10,8,112,23
   269                        	.member	nonclientGadgets,448,106,8,0,28,16
   270                        	.member	clickable,2624,129,8,32
   271                        	.member	win_title,2656,110,8,0,32
   272                        	.member	Reserved0,2912,16,8,16
   273                        	.member	win_class,2928,110,8,0,16
   274                        	.member	win_class_name,3056,110,8,0,32
   275                        	.member	nBitmapLayer,3312,16,8,16
  Sat Jul 10 2021  1:15                                                Page 6


   276                        	.member	bgRegion,3328,129,8,32
   277                        	.member	procid,3360,18,8,32
   278                        	.member	pWndClass,3392,138,8,32,26
   279                        	.member	pParentWindow,3424,129,8,32
   280                        	.member	hMenu,3456,129,8,32
   281                        	.member	hPointer,3488,129,8,32
   282                        	.member	hBackground,3520,129,8,32
   283                        	.member	pChildWindows,3552,138,8,32,3
   284                        	.member	pChildHitList,3584,138,8,32,3
   285                        	.member	isVisible,3616,14,8,8
   286                        	.member	windowData,3624,129,8,32
   287                        	.member	clientData,3656,1121,8,32,6
   288                        	.member	isClosed,3848,14,8,8
   289                        	.member	isClosing,3856,14,8,8
   290                        	.member	isDesktop,3864,14,8,8
   291                        	.member	clickableNode,3872,138,8,32,2
   292                        	.eos
   293                        	.stag	_k_WindowStructEx,3880,31
   294                        	.member	cbSize,0,16,8,16
   295                        	.member	style,16,18,8,32
   296                        	.member	styleEx,48,18,8,32
   297                        	.member	win_id,80,5,8,16
   298                        	.member	win_x,96,5,8,16
   299                        	.member	win_y,112,5,8,16
   300                        	.member	win_width,128,5,8,16
   301                        	.member	win_height,144,5,8,16
   302                        	.member	win_xoffset,160,5,8,16
   303                        	.member	win_yoffset,176,5,8,16
   304                        	.member	win_cxoffset,192,5,8,16
   305                        	.member	win_cyoffset,208,5,8,16
   306                        	.member	wndRect,224,10,8,112,23
   307                        	.member	clientRect,336,10,8,112,23
   308                        	.member	nonclientGadgets,448,106,8,0,28,16
   309                        	.member	clickable,2624,129,8,32
   310                        	.member	win_title,2656,110,8,0,32
   311                        	.member	Reserved0,2912,16,8,16
   312                        	.member	win_class,2928,110,8,0,16
   313                        	.member	nBitmapLayer,3056,16,8,16
   314                        	.member	procid,3072,18,8,32
   315                        	.member	pWndClass,3104,138,8,32,26
   316                        	.member	pParentWindow,3136,129,8,32
   317                        	.member	hMenu,3168,129,8,32
   318                        	.member	hPointer,3200,129,8,32
   319                        	.member	hBackground,3232,129,8,32
   320                        	.member	pChildWindows,3264,138,8,32,3
   321                        	.member	pChildHitList,3296,138,8,32,3
   322                        	.member	isVisible,3328,14,8,8
   323                        	.member	windowData,3336,129,8,32
   324                        	.member	clientData,3368,1121,8,32,4
   325                        	.member	isClosed,3496,14,8,8
   326                        	.member	hWnd,3504,129,8,32
   327                        	.member	localRect,3536,10,8,112,23
   328                        	.member	globalRect,3648,10,8,112,23
   329                        	.member	clientOffsetRect,3760,10,8,112,23
   330                        	.member	isDesktop,3872,14,8,8
   331                        	.eos
   332                        	.stag	_FontMetric,32,32
   333                        	.member	width,0,5,8,16
  Sat Jul 10 2021  1:15                                                Page 7


   334                        	.member	height,16,5,8,16
   335                        	.eos
   336                        	.stag	_MenuStruct,280,33
   337                        	.member	cx,0,5,8,16
   338                        	.member	cy,16,5,8,16
   339                        	.member	width,32,5,8,16
   340                        	.member	height,48,5,8,16
   341                        	.member	fcolor,64,14,8,8
   342                        	.member	bcolor,72,14,8,8
   343                        	.member	chromeLeft,80,14,8,8
   344                        	.member	chromeRight1,88,14,8,8
   345                        	.member	chromeRight2,96,14,8,8
   346                        	.member	hFont,104,129,8,32
   347                        	.member	itemId,136,16,8,16
   348                        	.member	pCaption,152,142,8,32
   349                        	.member	subMenus,184,138,8,32,3
   350                        	.member	pBackground,216,129,8,32
   351                        	.member	hWndOwner,248,129,8,32
   352                        	.eos
   353                        	.stag	fake34_,160,34
   354                        	.member	menuId,0,16,8,16
   355                        	.member	caption,16,142,8,32
   356                        	.member	rect,48,10,8,112,23
   357                        	.eos
   358                        	.stag	fake35_,5152,35
   359                        	.member	pParent,0,138,8,32,30
   360                        	.member	rect,32,10,8,112,23
   361                        	.member	captions,144,1134,8,32,24
   362                        	.member	chrome,912,110,8,0,24
   363                        	.member	ids,1104,112,8,0,24
   364                        	.member	clickable,1488,106,8,0,27,24
   365                        	.member	selected,5136,16,8,16
   366                        	.eos
   367                        	.stag	_fx_button_t,96,36
   368                        	.member	pCaption,0,142,8,32
   369                        	.member	cCaption,32,16,8,16
   370                        	.member	data,48,129,8,32
   371                        	.member	captionPixelWidth,80,16,8,16
   372                        	.eos
   373                        	.stag	_fx_scrollbar_t,240,37
   374                        	.member	min,0,16,8,16
   375                        	.member	max,16,16,8,16
   376                        	.member	increment,32,16,8,16
   377                        	.member	stopsize,48,16,8,16
   378                        	.member	location,64,5,8,16
   379                        	.member	state,80,5,8,16
   380                        	.member	rectThumb,96,10,8,112,23
   381                        	.member	data,208,129,8,32
   382                        	.eos
   383                        	.stag	_fx_listbox_t,240,38
   384                        	.member	pos,0,5,8,16
   385                        	.member	selected,16,16,8,16
   386                        	.member	offsetX,32,5,8,16
   387                        	.member	offsetY,48,5,8,16
   388                        	.member	inc,64,5,8,16
   389                        	.member	direction,80,5,8,16
   390                        	.member	top,96,5,8,16
   391                        	.member	bottom,112,5,8,16
  Sat Jul 10 2021  1:15                                                Page 8


   392                        	.member	indexTop,128,5,8,16
   393                        	.member	indexBottom,144,5,8,16
   394                        	.member	maxItems,160,16,8,16
   395                        	.member	fontSet,176,142,8,32
   396                        	.member	data,208,129,8,32
   397                        	.eos
   398                        	.stag	_fx_textbox_t,144,39
   399                        	.member	pos,0,5,8,16
   400                        	.member	selected,16,16,8,16
   401                        	.member	offsetX,32,5,8,16
   402                        	.member	offsetY,48,5,8,16
   403                        	.member	isShifted,64,14,8,8
   404                        	.member	cursorState,72,14,8,8
   405                        	.member	fontSet,80,142,8,32
   406                        	.member	data,112,129,8,32
   407                        	.eos
   408                        	.stag	_fx_msgbox_t,144,40
   409                        	.member	pos,0,5,8,16
   410                        	.member	selected,16,16,8,16
   411                        	.member	offsetX,32,5,8,16
   412                        	.member	offsetY,48,5,8,16
   413                        	.member	isShifted,64,14,8,8
   414                        	.member	cursorState,72,14,8,8
   415                        	.member	fontSet,80,142,8,32
   416                        	.member	data,112,129,8,32
   417                        	.eos
   418                        	.stag	_fx_menuAnchor_t,272,41
   419                        	.member	pCaption,0,142,8,32
   420                        	.member	renderLayoutX,32,16,8,16
   421                        	.member	renderLayoutY,48,16,8,16
   422                        	.member	captionPixelWidth,64,16,8,16
   423                        	.member	data,80,129,8,32
   424                        	.member	droppedWindow,112,138,8,32,30
   425                        	.member	bytes,144,110,8,0,16
   426                        	.eos
   427                        	.stag	_SubMenuStruct,64,42
   428                        	.member	caption,0,142,8,32
   429                        	.member	action,32,641,8,32
   430                        	.eos
   431                        	.stag	_SubMenuListStruct,40,43
   432                        	.member	cMenus,0,14,8,8
   433                        	.member	psubmenus,8,9354,8,32,42
   434                        	.eos
   435                        	.stag	_fx_ComBuffer,2080,44
   436                        	.member	cbSize,0,16,8,16
   437                        	.member	cbBuffer,16,16,8,16
   438                        	.member	buffer,32,110,8,0,256
   439                        	.eos
   440                        	.stag	_fx_resource_header,72,45
   441                        	.member	magic,0,110,8,0,4
   442                        	.member	major,32,14,8,8
   443                        	.member	minor,40,14,8,8
   444                        	.member	type,48,14,8,8
   445                        	.member	reserved,56,14,8,8
   446                        	.member	resheaderSize,64,14,8,8
   447                        	.eos
   448                        	.stag	_fx_resource_header_font,144,46
   449                        	.member	title,0,110,8,0,16
  Sat Jul 10 2021  1:15                                                Page 9


   450                        	.member	height,128,14,8,8
   451                        	.member	width,136,14,8,8
   452                        	.eos
   453                        	.line	1010
   454                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",9
   455                        ;#include "fxmemorymanager.h"
   456                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   457                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   458                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   459                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
   460                        	.line	88
   461                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
   462                        	.stag	fake47_,32,47
   463                        	.member	quot,0,5,8,16
   464                        	.member	rem,16,5,8,16
   465                        	.eos
   466                        	.stag	fake48_,64,48
   467                        	.member	quot,0,7,8,32
   468                        	.member	rem,32,7,8,32
   469                        	.eos
   470                        	.stag	int_sqrt,32,49
   471                        	.member	sqrt,0,16,8,16
   472                        	.member	frac,16,16,8,16
   473                        	.eos
   474                        	.line	205
   475                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
   476                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   477                        	.line	134
   478                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
   479                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
   480                        	.line	103
   481                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
   482                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   483                        	.line	1010
   484                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   485                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   486                        	.line	89
   487                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   488                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   489                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   490                        	.line	1010
  Sat Jul 10 2021  1:15                                                Page 10


   491                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",5
   492                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   493                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   494                        	.line	1010
   495                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   496                        	.line	72
   497                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",6
   498                        	.line	1960
   499                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",16
   500                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   501                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   502                        	.line	30
   503                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   504                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   505                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   506                        	.line	1010
   507                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",11
   508                        	.line	114
   509                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   510                        	.stag	_fx_api_call_table,8192,50
   511                        	.member	call_table,0,1121,8,32,256
   512                        	.eos
   513                        	.stag	_fx_zero_page,824,51
   514                        	.member	fxos_mouse_byte_0,0,14,8,8
   515                        	.member	fxos_mouse_byte_1,8,14,8,8
   516                        	.member	fxos_mouse_byte_2,16,14,8,8
   517                        	.member	fxos_mouse_byte_t,24,14,8,8
   518                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   519                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   520                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   521                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   522                        	.member	fxos_key_byte_0,64,14,8,8
   523                        	.member	fxos_key_byte_1,72,14,8,8
   524                        	.member	fxos_key_byte_2,80,14,8,8
   525                        	.member	fxos_mouse_ctl,88,14,8,8
   526                        	.member	fxos_mouse_index,96,14,8,8
   527                        	.member	fxos_mouse_status,104,14,8,8
   528                        	.member	fxos_mouse_dbg_1,112,18,8,32
   529                        	.member	fxos_mouse_dbg_2,144,18,8,32
   530                        	.member	fxos_mouse_dbg_3,176,18,8,32
   531                        	.member	fxos_vicky_byte_0,208,14,8,8
   532                        	.member	fxos_vicky_byte_1,216,14,8,8
   533                        	.member	fxos_vicky_byte_2,224,14,8,8
   534                        	.member	VersionMajor,232,16,8,16
   535                        	.member	VersionMinor,248,16,8,16
  Sat Jul 10 2021  1:15                                                Page 11


   536                        	.member	VersionRelease,264,16,8,16
   537                        	.member	topMemory,280,18,8,32
   538                        	.member	bottomMemory,312,18,8,32
   539                        	.member	availableMemory,344,18,8,32
   540                        	.member	availableMemoryK,376,18,8,32
   541                        	.member	availableHeapMemory,408,18,8,32
   542                        	.member	availableHeapMemoryK,440,18,8,32
   543                        	.member	fxos_console_row,472,16,8,16
   544                        	.member	fxos_console_col,488,16,8,16
   545                        	.member	executive,504,129,8,32
   546                        	.member	eventmanager,536,129,8,32
   547                        	.member	devicemanager,568,129,8,32
   548                        	.member	windowmanager,600,129,8,32
   549                        	.member	fxos_kernel_api,632,138,8,32,50
   550                        	.member	fxos_dos_api,664,138,8,32,50
   551                        	.member	fxos_gfx_api,696,138,8,32,50
   552                        	.member	fxos_gui_api,728,138,8,32,50
   553                        	.member	fxos_con_api,760,138,8,32,50
   554                        	.member	fxos_reserved_2_api,792,138,8,32,50
   555                        	.eos
   556                        	.stag	_fx_environment,96,52
   557                        	.member	variables,0,142,8,32
   558                        	.member	reserved1,32,5,8,16
   559                        	.member	reserved2,48,5,8,16
   560                        	.member	reserved3,64,5,8,16
   561                        	.member	reserved4,80,5,8,16
   562                        	.eos
   563                        	.stag	_debug_byte_bits,8,53
   564                        	.member	bit7,0,14,17,1
   565                        	.member	bit6,1,14,17,1
   566                        	.member	bit5,2,14,17,1
   567                        	.member	bit4,3,14,17,1
   568                        	.member	bit3,4,14,17,1
   569                        	.member	bit2,5,14,17,1
   570                        	.member	bit1,6,14,17,1
   571                        	.member	bit0,7,14,17,1
   572                        	.eos
   573                        	.stag	_k_segmentheader,160,54
   574                        	.member	version_major,0,14,8,8
   575                        	.member	version_minor,8,14,8,8
   576                        	.member	length,16,5,8,16
   577                        	.member	segment_start_addr,32,7,8,32
   578                        	.member	segment_end_addr,64,7,8,32
   579                        	.member	segment_size,96,7,8,32
   580                        	.member	main_entry_addr,128,7,8,32
   581                        	.eos
   582                        	.stag	_fx_device_driver,776,55
   583                        	.member	name,0,110,8,0,32
   584                        	.member	version,256,110,8,0,16
   585                        	.member	hmajor,384,110,8,0,8
   586                        	.member	hminor,448,110,8,0,8
   587                        	.member	type,512,14,8,8
   588                        	.member	designation,520,110,8,0,6
   589                        	.member	reserved_1,568,16,8,16
   590                        	.member	f_driver_irq,584,129,8,32
   591                        	.member	driver_context,616,129,8,32
   592                        	.member	f_driver_load,648,129,8,32
   593                        	.member	f_driver_read,680,129,8,32
  Sat Jul 10 2021  1:15                                                Page 12


   594                        	.member	f_driver_write,712,129,8,32
   595                        	.member	f_driver_unload,744,129,8,32
   596                        	.eos
   597                        	.stag	_fx_block_device_driver,808,56
   598                        	.member	name,0,110,8,0,32
   599                        	.member	version,256,110,8,0,16
   600                        	.member	hmajor,384,110,8,0,8
   601                        	.member	hminor,448,110,8,0,8
   602                        	.member	type,512,14,8,8
   603                        	.member	designation,520,110,8,0,6
   604                        	.member	reserved_1,568,16,8,16
   605                        	.member	f_driver_irq,584,129,8,32
   606                        	.member	driver_context,616,129,8,32
   607                        	.member	f_driver_load,648,129,8,32
   608                        	.member	f_driver_read,680,129,8,32
   609                        	.member	f_driver_write,712,129,8,32
   610                        	.member	f_driver_unload,744,129,8,32
   611                        	.member	f_driver_command,776,129,8,32
   612                        	.eos
   613                        	.line	400
   614                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   615                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   616                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   617                        	.line	134
   618                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   619                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   620                        	.line	205
   621                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   622                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   623                        	.line	1010
   624                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   625                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   626                        	.line	1960
   627                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",12
   628                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   629                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   630                        	.line	205
   631                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   632                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   633                        	.line	134
   634                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   635                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
  Sat Jul 10 2021  1:15                                                Page 13


   636                        	.line	1010
   637                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   638                        	.stag	_fx_string,64,57
   639                        	.member	size,0,16,8,16
   640                        	.member	pos,16,5,8,16
   641                        	.member	buffer,32,142,8,32
   642                        	.eos
   643                        	.line	139
   644                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",17
   645                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   646                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   647                        	.line	30
   648                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   649                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   650                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   651                        	.line	1010
   652                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   653                        	.stag	_fxos_executive_vtable,128,58
   654                        	.member	Init,0,8833,8,32
   655                        	.member	Configure,32,656,8,32
   656                        	.member	Query,64,656,8,32
   657                        	.member	Uninit,96,641,8,32
   658                        	.eos
   659                        	.line	86
   660                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   661                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   662                        	.line	114
   663                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   664                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   665                        	.line	208
   666                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   667                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   668                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   669                        	.line	30
   670                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   671                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   672                        	.line	105
   673                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   674                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
  Sat Jul 10 2021  1:15                                                Page 14


   675                        	.line	564
   676                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   677                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   678                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   679                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   680                        	.line	1010
   681                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   682                        	.line	74
   683                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",5
   684                        	.stag	_click_detected,64,59
   685                        	.member	window,0,138,8,32,30
   686                        	.member	handler,32,641,8,32
   687                        	.eos
   688                        	.stag	_current_palette_map,400,60
   689                        	.member	CUR_DESKTOP,0,5,8,16
   690                        	.member	CUR_BACKGROUND,16,5,8,16
   691                        	.member	CUR_FONT,32,5,8,16
   692                        	.member	CUR_SELECTED_FONT,48,5,8,16
   693                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   694                        	.member	CUR_WINDOWFRAME,80,5,8,16
   695                        	.member	CUR_WINDOWBORDER,96,5,8,16
   696                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   697                        	.member	CUR_MENU,128,5,8,16
   698                        	.member	CUR_GADGET,144,5,8,16
   699                        	.member	CUR_COLOR,160,101,8,0,15
   700                        	.eos
   701                        	.line	359
   702                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",8
   703                        	.stag	_fxos_winman_vtable,160,61
   704                        	.member	Events,0,641,8,32
   705                        	.member	ConfigureWindowManager,32,656,8,32
   706                        	.member	ProcessWindowEvent,64,8833,8,32
   707                        	.member	QueryWindowManager,96,656,8,32
   708                        	.member	DoWndProcs,128,641,8,32
   709                        	.eos
   710                        	.stag	fake62_,64,62
   711                        	.member	type,0,16,8,16
   712                        	.member	size,16,16,8,16
   713                        	.member	desktopAction,32,129,8,32
   714                        	.eos
   715                        	.stag	fake63_,96,63
   716                        	.member	type,0,16,8,16
   717                        	.member	caption,16,138,8,32,57
   718                        	.member	buttonType,48,16,8,16
   719                        	.member	x,64,5,8,16
   720                        	.member	y,80,5,8,16
   721                        	.eos
   722                        	.stag	_childMessage_t,64,64
   723                        	.member	msgType,0,16,8,16
   724                        	.member	msgData,16,129,8,32
   725                        	.member	dataSize,48,16,8,16
  Sat Jul 10 2021  1:15                                                Page 15


   726                        	.eos
   727                        	.line	581
   728                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   729                        	.stag	_fx_main_loopvars,16,65
   730                        	.member	dummy,0,5,8,16
   731                        	.eos
   732                        	.stag	_fxMouseMessageData,64,66
   733                        	.member	button1,0,14,8,8
   734                        	.member	button2,8,14,8,8
   735                        	.member	button3,16,14,8,8
   736                        	.member	button4,24,14,8,8
   737                        	.member	x,32,16,8,16
   738                        	.member	y,48,16,8,16
   739                        	.eos
   740                        	.utag	marshalled_data,32,67
   741                        	.member	byteValue,0,14,11,8
   742                        	.member	verbValue,0,110,11,0,2
   743                        	.member	intValue,0,16,11,16
   744                        	.member	longValue,0,18,11,32
   745                        	.member	pointerValue,0,129,11,32
   746                        	.eos
   747                        	.stag	_fx_eventProcess,64,68
   748                        	.member	process,0,138,8,32,17
   749                        	.member	eventProc,32,641,8,32
   750                        	.eos
   751                        	.stag	_mouse_msg_state,184,69
   752                        	.member	lastEvent,0,18,8,32
   753                        	.member	buttonLeftDown,32,14,8,8
   754                        	.member	lastLeftDown,40,18,8,32
   755                        	.member	buttonRightDown,72,14,8,8
   756                        	.member	lastRightDown,80,18,8,32
   757                        	.member	buttonMiddleDown,112,14,8,8
   758                        	.member	lastMiddleDown,120,18,8,32
   759                        	.member	lastX,152,16,8,16
   760                        	.member	lastY,168,16,8,16
   761                        	.eos
   762                        	.stag	_fxos_eventmanager_vtable,192,70
   763                        	.member	EventQueue,0,138,8,32,4
   764                        	.member	Init,32,8833,8,32
   765                        	.member	Run,64,656,8,32
   766                        	.member	Configure,96,656,8,32
   767                        	.member	Query,128,656,8,32
   768                        	.member	Uninit,160,641,8,32
   769                        	.eos
   770                        	.stag	_k_clipboard_data,168,71
   771                        	.member	type,0,14,8,8
   772                        	.member	readable,8,110,8,0,16
   773                        	.member	data,136,129,8,32
   774                        	.eos
   775                        	.line	564
   776                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",18
   777                        	.stag	_fx_spinner_ctx,48,72
   778                        	.member	index,0,5,8,16
   779                        	.member	spinner,16,142,8,32
   780                        	.eos
   781                        	.stag	_fx_console_ctx,1144,73
  Sat Jul 10 2021  1:15                                                Page 16


   782                        	.member	lineBufferIndex,0,5,8,16
   783                        	.member	lineBuffer,16,110,8,0,128
   784                        	.member	isShifted,1040,14,8,8
   785                        	.member	userData,1048,129,8,32
   786                        	.member	screenBuffer,1080,129,8,32
   787                        	.member	Reserved1,1112,129,8,32
   788                        	.eos
   789                        	.stag	_token,64,74
   790                        	.member	type,0,5,8,16
   791                        	.member	depth,16,16,8,16
   792                        	.member	text,32,142,8,32
   793                        	.eos
   794                        	.stag	_command_args,64,75
   795                        	.member	proc,0,656,8,32
   796                        	.member	tokens,32,138,8,32,2
   797                        	.eos
   798                        	.line	208
   799                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",23
   800                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   801                        	.line	139
   802                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",24
   803                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   804                        	.line	114
   805                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",25
   806                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
   807                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ffconf.h",0
   808                        	.line	298
   809                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",29
   810                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   811                        	.line	1010
   812                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",30
   813                        	.stag	fake76_,4504,76
   814                        	.member	fs_type,0,14,8,8
   815                        	.member	pdrv,8,14,8,8
   816                        	.member	n_fats,16,14,8,8
   817                        	.member	wflag,24,14,8,8
   818                        	.member	fsi_flag,32,14,8,8
   819                        	.member	id,40,5,8,16
   820                        	.member	n_rootdir,56,5,8,16
   821                        	.member	csize,72,5,8,16
   822                        	.member	lfnbuf,88,144,8,32
   823                        	.member	last_clst,120,18,8,32
   824                        	.member	free_clst,152,18,8,32
   825                        	.member	n_fatent,184,18,8,32
   826                        	.member	fsize,216,18,8,32
   827                        	.member	volbase,248,18,8,32
   828                        	.member	fatbase,280,18,8,32
   829                        	.member	dirbase,312,18,8,32
  Sat Jul 10 2021  1:15                                                Page 17


   830                        	.member	database,344,18,8,32
   831                        	.member	winsect,376,18,8,32
   832                        	.member	win,408,110,8,0,512
   833                        	.eos
   834                        	.stag	fake77_,128,77
   835                        	.member	fs,0,138,8,32,76
   836                        	.member	id,32,5,8,16
   837                        	.member	attr,48,14,8,8
   838                        	.member	stat,56,14,8,8
   839                        	.member	sclust,64,18,8,32
   840                        	.member	objsize,96,18,8,32
   841                        	.eos
   842                        	.stag	fake78_,4400,78
   843                        	.member	obj,0,10,8,128,77
   844                        	.member	flag,128,14,8,8
   845                        	.member	err,136,14,8,8
   846                        	.member	fptr,144,18,8,32
   847                        	.member	clust,176,18,8,32
   848                        	.member	sect,208,18,8,32
   849                        	.member	dir_sect,240,18,8,32
   850                        	.member	dir_ptr,272,142,8,32
   851                        	.member	buf,304,110,8,0,512
   852                        	.eos
   853                        	.stag	fake79_,416,79
   854                        	.member	obj,0,10,8,128,77
   855                        	.member	dptr,128,18,8,32
   856                        	.member	clust,160,18,8,32
   857                        	.member	sect,192,18,8,32
   858                        	.member	dir,224,142,8,32
   859                        	.member	fn,256,110,8,0,12
   860                        	.member	blk_ofs,352,18,8,32
   861                        	.member	pat,384,142,8,32
   862                        	.eos
   863                        	.stag	fake80_,2224,80
   864                        	.member	fsize,0,18,8,32
   865                        	.member	fdate,32,5,8,16
   866                        	.member	ftime,48,5,8,16
   867                        	.member	fattrib,64,14,8,8
   868                        	.member	altname,72,110,8,0,13
   869                        	.member	fname,176,110,8,0,256
   870                        	.eos
   871                        	.stag	fake81_,80,81
   872                        	.member	fmt,0,14,8,8
   873                        	.member	n_fat,8,14,8,8
   874                        	.member	align,16,16,8,16
   875                        	.member	n_root,32,16,8,16
   876                        	.member	au_size,48,18,8,32
   877                        	.eos
   878                        	.line	429
   879                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",26
   880                        	.line	30
   881                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   882                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   883                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
  Sat Jul 10 2021  1:15                                                Page 18


   884                        	.line	35
   885                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
   886                        	.stag	UMM_HEAP_INFO_t,256,82
   887                        	.member	totalEntries,0,18,8,32
   888                        	.member	usedEntries,32,18,8,32
   889                        	.member	freeEntries,64,18,8,32
   890                        	.member	totalBlocks,96,18,8,32
   891                        	.member	usedBlocks,128,18,8,32
   892                        	.member	freeBlocks,160,18,8,32
   893                        	.member	maxFreeContiguousBlocks,192,18,8,32
   894                        	.member	blockSize,224,18,8,32
   895                        	.eos
   896                        	.line	199
   897                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   898                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
   899                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   900                        	.line	1010
   901                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   902                        	.line	24
   903                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   904                        	.stag	_fx_memory_map,2072,83
   905                        	.member	availableMemory,0,18,8,32
   906                        	.member	valid_segments,32,110,8,0,255
   907                        	.eos
   908                        	.stag	_fx_ipc_port,144,84
   909                        	.member	id,0,18,8,32
   910                        	.member	type,32,14,8,8
   911                        	.member	name,40,138,8,32,57
   912                        	.member	time,72,18,8,32
   913                        	.member	queue,104,138,8,32,4
   914                        	.member	reserved_1,136,14,8,8
   915                        	.eos
   916                        	.line	105
   917                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",10
   918                        ;/*
   919                        ;#include <stdlib.h>
   920                        ;#include <string.h>
   921                        ;*/
   922                        ;
   923                        ;
   924                        ;#include "OMF_Dc_Memory.h"
   925                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Dc_Memory.h",0
   926                        	.line	24
   927                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",17
   928                        ;#include "OMF_Dc_Shared.h"
   929                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Dc_Shared.h",0
   930                        	.line	18
   931                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 19


                    space\FXOSv1\src\OMF_Load.c",18
   932                        ;#include "OMF_Record.h"
   933                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Record.h",0
   934                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   935                        	.line	1010
   936                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Record.h",8
   937                        	.stag	omf_body_record,168,85
   938                        	.member	FileOffset,0,18,8,32
   939                        	.member	SegmentOffset,32,18,8,32
   940                        	.member	operation_code,64,14,8,8
   941                        	.member	length,72,5,8,16
   942                        	.member	record_data,88,129,8,32
   943                        	.member	processed,120,5,8,16
   944                        	.member	next,136,138,8,32,85
   945                        	.eos
   946                        	.stag	subrecord_SuperReloc2,16520,86
   947                        	.member	FileOffset,0,18,8,32
   948                        	.member	SegmentOffset,32,18,8,32
   949                        	.member	Count,64,14,8,8
   950                        	.member	ByteCnt,72,14,8,8
   951                        	.member	BitShiftCnt,80,14,8,8
   952                        	.member	nb_address,88,5,8,16
   953                        	.member	OffsetPatch,104,114,8,0,256
   954                        	.member	OffsetReference,8296,114,8,0,256
   955                        	.member	next,16488,138,8,32,86
   956                        	.eos
   957                        	.stag	subrecord_SuperReloc3,16520,87
   958                        	.member	FileOffset,0,18,8,32
   959                        	.member	SegmentOffset,32,18,8,32
   960                        	.member	Count,64,14,8,8
   961                        	.member	ByteCnt,72,14,8,8
   962                        	.member	BitShiftCnt,80,14,8,8
   963                        	.member	nb_address,88,5,8,16
   964                        	.member	OffsetPatch,104,114,8,0,256
   965                        	.member	OffsetReference,8296,114,8,0,256
   966                        	.member	next,16488,138,8,32,87
   967                        	.eos
   968                        	.stag	subrecord_SuperInterseg1,20632,88
   969                        	.member	FileOffset,0,18,8,32
   970                        	.member	SegmentOffset,32,18,8,32
   971                        	.member	Count,64,14,8,8
   972                        	.member	ByteCnt,72,14,8,8
   973                        	.member	BitShiftCnt,80,14,8,8
   974                        	.member	FileNum,88,5,8,16
   975                        	.member	nb_address,104,5,8,16
   976                        	.member	OffsetPatch,120,114,8,0,256
   977                        	.member	OffsetReference,8312,114,8,0,256
   978                        	.member	SegNum,16504,101,8,0,256
   979                        	.member	next,20600,138,8,32,88
   980                        	.eos
   981                        	.stag	subrecord_SuperInterseg212,20632,89
   982                        	.member	FileOffset,0,18,8,32
   983                        	.member	SegmentOffset,32,18,8,32
   984                        	.member	Count,64,14,8,8
   985                        	.member	ByteCnt,72,14,8,8
  Sat Jul 10 2021  1:15                                                Page 20


   986                        	.member	BitShiftCnt,80,14,8,8
   987                        	.member	FileNum,88,5,8,16
   988                        	.member	nb_address,104,5,8,16
   989                        	.member	OffsetPatch,120,114,8,0,256
   990                        	.member	OffsetReference,8312,114,8,0,256
   991                        	.member	SegNum,16504,101,8,0,256
   992                        	.member	next,20600,138,8,32,89
   993                        	.eos
   994                        	.stag	subrecord_SuperInterseg1324,16544,90
   995                        	.member	FileOffset,0,18,8,32
   996                        	.member	SegmentOffset,32,18,8,32
   997                        	.member	Count,64,14,8,8
   998                        	.member	ByteCnt,72,14,8,8
   999                        	.member	BitShiftCnt,80,14,8,8
  1000                        	.member	SegNum,88,14,8,8
  1001                        	.member	FileNum,96,5,8,16
  1002                        	.member	nb_address,112,5,8,16
  1003                        	.member	OffsetPatch,128,114,8,0,256
  1004                        	.member	OffsetReference,8320,114,8,0,256
  1005                        	.member	next,16512,138,8,32,90
  1006                        	.eos
  1007                        	.stag	subrecord_SuperInterseg2536,16544,91
  1008                        	.member	FileOffset,0,18,8,32
  1009                        	.member	SegmentOffset,32,18,8,32
  1010                        	.member	Count,64,14,8,8
  1011                        	.member	ByteCnt,72,14,8,8
  1012                        	.member	BitShiftCnt,80,14,8,8
  1013                        	.member	SegNum,88,14,8,8
  1014                        	.member	FileNum,96,5,8,16
  1015                        	.member	nb_address,112,5,8,16
  1016                        	.member	OffsetPatch,128,114,8,0,256
  1017                        	.member	OffsetReference,8320,114,8,0,256
  1018                        	.member	next,16512,138,8,32,91
  1019                        	.eos
  1020                        	.stag	record_END,72,92
  1021                        	.member	FileOffset,0,18,8,32
  1022                        	.member	SegmentOffset,32,18,8,32
  1023                        	.member	operation_code,64,14,8,8
  1024                        	.eos
  1025                        	.stag	record_CONST,112,93
  1026                        	.member	FileOffset,0,18,8,32
  1027                        	.member	SegmentOffset,32,18,8,32
  1028                        	.member	operation_code,64,14,8,8
  1029                        	.member	ByteCnt,72,14,8,8
  1030                        	.member	data,80,142,8,32
  1031                        	.eos
  1032                        	.stag	record_ALIGN,72,94
  1033                        	.member	FileOffset,0,18,8,32
  1034                        	.member	SegmentOffset,32,18,8,32
  1035                        	.member	operation_code,64,14,8,8
  1036                        	.eos
  1037                        	.stag	record_ORG,72,95
  1038                        	.member	FileOffset,0,18,8,32
  1039                        	.member	SegmentOffset,32,18,8,32
  1040                        	.member	operation_code,64,14,8,8
  1041                        	.eos
  1042                        	.stag	record_RELOC,152,96
  1043                        	.member	FileOffset,0,18,8,32
  Sat Jul 10 2021  1:15                                                Page 21


  1044                        	.member	SegmentOffset,32,18,8,32
  1045                        	.member	operation_code,64,14,8,8
  1046                        	.member	ByteCnt,72,14,8,8
  1047                        	.member	BitShiftCnt,80,14,8,8
  1048                        	.member	OffsetPatch,88,18,8,32
  1049                        	.member	OffsetReference,120,18,8,32
  1050                        	.eos
  1051                        	.stag	record_INTERSEG,184,97
  1052                        	.member	FileOffset,0,18,8,32
  1053                        	.member	SegmentOffset,32,18,8,32
  1054                        	.member	operation_code,64,14,8,8
  1055                        	.member	ByteCnt,72,14,8,8
  1056                        	.member	BitShiftCnt,80,14,8,8
  1057                        	.member	OffsetPatch,88,18,8,32
  1058                        	.member	FileNum,120,5,8,16
  1059                        	.member	SegNum,136,5,8,16
  1060                        	.member	OffsetReference,152,18,8,32
  1061                        	.eos
  1062                        	.stag	record_USING,72,98
  1063                        	.member	FileOffset,0,18,8,32
  1064                        	.member	SegmentOffset,32,18,8,32
  1065                        	.member	operation_code,64,14,8,8
  1066                        	.eos
  1067                        	.stag	record_STRONG,72,99
  1068                        	.member	FileOffset,0,18,8,32
  1069                        	.member	SegmentOffset,32,18,8,32
  1070                        	.member	operation_code,64,14,8,8
  1071                        	.eos
  1072                        	.stag	record_GLOBAL,72,100
  1073                        	.member	FileOffset,0,18,8,32
  1074                        	.member	SegmentOffset,32,18,8,32
  1075                        	.member	operation_code,64,14,8,8
  1076                        	.eos
  1077                        	.stag	record_GEQU,72,101
  1078                        	.member	FileOffset,0,18,8,32
  1079                        	.member	SegmentOffset,32,18,8,32
  1080                        	.member	operation_code,64,14,8,8
  1081                        	.eos
  1082                        	.stag	record_MEM,72,102
  1083                        	.member	FileOffset,0,18,8,32
  1084                        	.member	SegmentOffset,32,18,8,32
  1085                        	.member	operation_code,64,14,8,8
  1086                        	.eos
  1087                        	.stag	record_EXPR,72,103
  1088                        	.member	FileOffset,0,18,8,32
  1089                        	.member	SegmentOffset,32,18,8,32
  1090                        	.member	operation_code,64,14,8,8
  1091                        	.eos
  1092                        	.stag	record_ZEXPR,72,104
  1093                        	.member	FileOffset,0,18,8,32
  1094                        	.member	SegmentOffset,32,18,8,32
  1095                        	.member	operation_code,64,14,8,8
  1096                        	.eos
  1097                        	.stag	record_BEXPR,72,105
  1098                        	.member	FileOffset,0,18,8,32
  1099                        	.member	SegmentOffset,32,18,8,32
  1100                        	.member	operation_code,64,14,8,8
  1101                        	.eos
  Sat Jul 10 2021  1:15                                                Page 22


  1102                        	.stag	record_RELEXPR,72,106
  1103                        	.member	FileOffset,0,18,8,32
  1104                        	.member	SegmentOffset,32,18,8,32
  1105                        	.member	operation_code,64,14,8,8
  1106                        	.eos
  1107                        	.stag	record_LOCAL,72,107
  1108                        	.member	FileOffset,0,18,8,32
  1109                        	.member	SegmentOffset,32,18,8,32
  1110                        	.member	operation_code,64,14,8,8
  1111                        	.eos
  1112                        	.stag	record_EQU,72,108
  1113                        	.member	FileOffset,0,18,8,32
  1114                        	.member	SegmentOffset,32,18,8,32
  1115                        	.member	operation_code,64,14,8,8
  1116                        	.eos
  1117                        	.stag	record_DS,104,109
  1118                        	.member	FileOffset,0,18,8,32
  1119                        	.member	SegmentOffset,32,18,8,32
  1120                        	.member	operation_code,64,14,8,8
  1121                        	.member	nb_zero_byte,72,18,8,32
  1122                        	.eos
  1123                        	.stag	record_LCONST,136,110
  1124                        	.member	FileOffset,0,18,8,32
  1125                        	.member	SegmentOffset,32,18,8,32
  1126                        	.member	operation_code,64,14,8,8
  1127                        	.member	ByteCnt,72,18,8,32
  1128                        	.member	data,104,142,8,32
  1129                        	.eos
  1130                        	.stag	record_LEXPR,72,111
  1131                        	.member	FileOffset,0,18,8,32
  1132                        	.member	SegmentOffset,32,18,8,32
  1133                        	.member	operation_code,64,14,8,8
  1134                        	.eos
  1135                        	.stag	record_ENTRY,72,112
  1136                        	.member	FileOffset,0,18,8,32
  1137                        	.member	SegmentOffset,32,18,8,32
  1138                        	.member	operation_code,64,14,8,8
  1139                        	.eos
  1140                        	.stag	record_cRELOC,152,113
  1141                        	.member	FileOffset,0,18,8,32
  1142                        	.member	SegmentOffset,32,18,8,32
  1143                        	.member	operation_code,64,14,8,8
  1144                        	.member	ByteCnt,72,14,8,8
  1145                        	.member	BitShiftCnt,80,14,8,8
  1146                        	.member	OffsetPatch,88,18,8,32
  1147                        	.member	OffsetReference,120,18,8,32
  1148                        	.eos
  1149                        	.stag	record_cINTERSEG,176,114
  1150                        	.member	FileOffset,0,18,8,32
  1151                        	.member	SegmentOffset,32,18,8,32
  1152                        	.member	operation_code,64,14,8,8
  1153                        	.member	ByteCnt,72,14,8,8
  1154                        	.member	BitShiftCnt,80,14,8,8
  1155                        	.member	OffsetPatch,88,18,8,32
  1156                        	.member	FileNum,120,5,8,16
  1157                        	.member	SegNum,136,14,8,8
  1158                        	.member	OffsetReference,144,18,8,32
  1159                        	.eos
  Sat Jul 10 2021  1:15                                                Page 23


  1160                        	.stag	record_SUPER,592,115
  1161                        	.member	FileOffset,0,18,8,32
  1162                        	.member	SegmentOffset,32,18,8,32
  1163                        	.member	operation_code,64,14,8,8
  1164                        	.member	ByteCnt,72,18,8,32
  1165                        	.member	RecordType,104,14,8,8
  1166                        	.member	nb_SuperReloc2,112,5,8,16
  1167                        	.member	first_SuperReloc2,128,138,8,32,86
  1168                        	.member	last_SuperReloc2,160,138,8,32,86
  1169                        	.member	nb_SuperReloc3,192,5,8,16
  1170                        	.member	first_SuperReloc3,208,138,8,32,87
  1171                        	.member	last_SuperReloc3,240,138,8,32,87
  1172                        	.member	nb_SuperInterseg1,272,5,8,16
  1173                        	.member	first_SuperInterseg1,288,138,8,32,88
  1174                        	.member	last_SuperInterseg1,320,138,8,32,88
  1175                        	.member	nb_SuperInterseg212,352,5,8,16
  1176                        	.member	first_SuperInterseg212,368,138,8,32,89
  1177                        	.member	last_SuperInterseg212,400,138,8,32,89
  1178                        	.member	nb_SuperInterseg1324,432,5,8,16
  1179                        	.member	first_SuperInterseg1324,448,138,8,32,90
  1180                        	.member	last_SuperInterseg1324,480,138,8,32,90
  1181                        	.member	nb_SuperInterseg2536,512,5,8,16
  1182                        	.member	first_SuperInterseg2536,528,138,8,32,91
  1183                        	.member	last_SuperInterseg2536,560,138,8,32,91
  1184                        	.eos
  1185                        	.stag	record_General,72,116
  1186                        	.member	FileOffset,0,18,8,32
  1187                        	.member	SegmentOffset,32,18,8,32
  1188                        	.member	operation_code,64,14,8,8
  1189                        	.eos
  1190                        	.stag	record_Experimental,72,117
  1191                        	.member	FileOffset,0,18,8,32
  1192                        	.member	SegmentOffset,32,18,8,32
  1193                        	.member	operation_code,64,14,8,8
  1194                        	.eos
  1195                        	.stag	omf_reloc,128,118
  1196                        	.member	ByteCnt,0,14,8,8
  1197                        	.member	BitShiftCnt,8,14,8,8
  1198                        	.member	OffsetPatch,16,18,8,32
  1199                        	.member	OffsetReference,48,18,8,32
  1200                        	.member	origin,80,5,8,16
  1201                        	.member	next,96,138,8,32,118
  1202                        	.eos
  1203                        	.stag	omf_interseg,160,119
  1204                        	.member	ByteCnt,0,14,8,8
  1205                        	.member	BitShiftCnt,8,14,8,8
  1206                        	.member	OffsetPatch,16,18,8,32
  1207                        	.member	OffsetReference,48,18,8,32
  1208                        	.member	FileNum,80,5,8,16
  1209                        	.member	SegNum,96,5,8,16
  1210                        	.member	origin,112,5,8,16
  1211                        	.member	next,128,138,8,32,119
  1212                        	.eos
  1213                        	.line	458
  1214                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",19
  1215                        ;#include "OMF_Load.h"
  1216                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 24


                    space\FXOSv1\src\OMF_Load.h",0
  1217                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
  1218                        	.line	1010
  1219                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.h",9
  1220                        	.stag	omf_segment_header,20984,120
  1221                        	.member	FileOffset,0,18,8,32
  1222                        	.member	SegmentOffset,32,18,8,32
  1223                        	.member	BlockCnt,64,18,8,32
  1224                        	.member	ByteCnt,96,18,8,32
  1225                        	.member	ResSpc,128,18,8,32
  1226                        	.member	Length,160,18,8,32
  1227                        	.member	Type,192,14,8,8
  1228                        	.member	undefine_1,200,14,8,8
  1229                        	.member	LabLen,208,14,8,8
  1230                        	.member	NumLen,216,14,8,8
  1231                        	.member	Version,224,14,8,8
  1232                        	.member	BankSize,232,18,8,32
  1233                        	.member	Kind,264,5,8,16
  1234                        	.member	undefine_2,280,14,8,8
  1235                        	.member	undefine_3,288,14,8,8
  1236                        	.member	Org,296,18,8,32
  1237                        	.member	Align,328,18,8,32
  1238                        	.member	NumSEx,360,14,8,8
  1239                        	.member	LCBank,368,14,8,8
  1240                        	.member	undefine_4,376,14,8,8
  1241                        	.member	SegNum,384,5,8,16
  1242                        	.member	EntryPointOffset,400,18,8,32
  1243                        	.member	DispNameOffset,432,5,8,16
  1244                        	.member	DispDataOffset,448,5,8,16
  1245                        	.member	TempOrgLength,464,5,8,16
  1246                        	.member	TempOrg,480,110,8,0,2048
  1247                        	.member	LoadName,16864,110,8,0,256
  1248                        	.member	SegName,18912,110,8,0,256
  1249                        	.member	undefine_5,20960,14,8,8
  1250                        	.member	undefine_6,20968,14,8,8
  1251                        	.member	undefine_7,20976,14,8,8
  1252                        	.eos
  1253                        	.stag	omf_segment,21288,121
  1254                        	.member	header,0,10,8,20984,120
  1255                        	.member	nb_record,20984,5,8,16
  1256                        	.member	first_record,21000,138,8,32,85
  1257                        	.member	last_record,21032,138,8,32,85
  1258                        	.member	data_offset,21064,5,8,16
  1259                        	.member	data_length,21080,5,8,16
  1260                        	.member	data,21096,142,8,32
  1261                        	.member	reloc_offset,21128,5,8,16
  1262                        	.member	reloc_length,21144,5,8,16
  1263                        	.member	nb_reloc,21160,5,8,16
  1264                        	.member	tab_reloc,21176,1162,8,32,118
  1265                        	.member	nb_interseg,21208,5,8,16
  1266                        	.member	tab_interseg,21224,1162,8,32,119
  1267                        	.member	next,21256,138,8,32,121
  1268                        	.eos
  1269                        	.stag	omf_file,192,122
  1270                        	.member	file_path,0,142,8,32
  1271                        	.member	file_name,32,142,8,32
  Sat Jul 10 2021  1:15                                                Page 25


  1272                        	.member	data_length,64,5,8,16
  1273                        	.member	data,80,142,8,32
  1274                        	.member	nb_segment,112,5,8,16
  1275                        	.member	first_segment,128,138,8,32,121
  1276                        	.member	last_segment,160,138,8,32,121
  1277                        	.eos
  1278                        	.line	113
  1279                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",20
  1280                        ;
  1281                        ;static int DecodeOMFFile(struct omf_file *f);
  1282                        ;static struct omf_segment *DecodeOneSegment(struc
                    t omf_file *f,int i,int *ii);
  1283                        ;static int DecodeSegmentHeader(struct omf_file *f
                    ,int i,struct omf_segment_header *sh);
  1284                        ;static int DecodeSegmentHeaderV0(struct omf_file 
                    *f,int i,struct omf_segment_header *sh);
  1285                        ;static int DecodeSegmentHeaderV1(struct omf_file 
                    *f,int i,struct omf_segment_header *sh);
  1286                        ;static int DecodeSegmentHeaderV2(struct omf_file 
                    *f,int i,struct omf_segment_header *sh);
  1287                        ;static int DecodeSegmentBody(struct omf_file *f,i
                    nt i,struct omf_segment *s);
  1288                        ;static void mem_free_segment(struct omf_segment *
                    s);
  1289                        ;
  1290                        ;#pragma section CODE=LOADER,offset $9:B1CE
  1291                        LOADER	section	offset $9:B1CE
  1292 09:B1CE:              	ends
  1293                        ;
  1294                        ;/************************************************
                    ***********/
  1295                        ;/*  LoadOMFFile() :  Chargement/Décodage d'un fic
                    hier OMF. */
  1296                        ;/************************************************
                    ***********/
  1297                        ;struct omf_file *LoadOMFFile(char *file_path)
  1298                        ;{
  1299                        	.line	36
  1300                        	.line	37
  1301                        	LOADER
  1302                        	xdef	~~LoadOMFFile
  1303                        	func
  1304                        	.function	37
  1305                        ~~LoadOMFFile:
  1306                        	longa	on
  1307                        	longi	on
  1308 09:B1CE: 3B           	tsc
  1309 09:B1CF: 38           	sec
  1310 09:B1D0: E9 10 00     	sbc	#L2
  1311 09:B1D3: 1B           	tcs
  1312 09:B1D4: 0B           	phd
  1313 09:B1D5: 5B           	tcd
  1314             00000004   file_path_0	set	4
  1315                        	.block	37
  1316                        ;  int i, result;
  1317                        ;  struct omf_file *current_file;
  1318                        ;
  Sat Jul 10 2021  1:15                                                Page 26


  1319                        ;  k_debug_string("LoadOMFFile enter... \r\n");
  1320             00000000   i_1	set	0
  1321             00000002   result_1	set	2
  1322             00000004   current_file_1	set	4
  1323                        	.sym	i,0,5,1,16
  1324                        	.sym	result,2,5,1,16
  1325                        	.sym	current_file,4,138,1,32,122
  1326                        	.sym	file_path,4,142,6,32
  1327                        	.line	41
  1328 09:B1D6: F4 xx xx     	pea	#^L1
  1329 09:B1D9: F4 xx xx     	pea	#<L1
  1330 09:B1DC: 22 xx xx xx  	jsl	~~k_debug_string
  1331                        ;
  1332                        ;  /* Allocation mémoire */
  1333                        ;  current_file = (struct omf_file *) k_calloc(1,s
                    izeof(struct omf_file));
  1334                        	.line	44
  1335 09:B1E0: F4 18 00     	pea	#<$18
  1336 09:B1E3: F4 01 00     	pea	#<$1
  1337 09:B1E6: 22 xx xx xx  	jsl	~~k_calloc
  1338 09:B1EA: 85 0D        	sta	<L3+current_file_1
  1339 09:B1EC: 86 0F        	stx	<L3+current_file_1+2
  1340                        ;  if(current_file == NULL)
  1341                        	.line	45
  1342                        ;    {
  1343 09:B1EE: A5 0D        	lda	<L3+current_file_1
  1344 09:B1F0: 05 0F        	ora	<L3+current_file_1+2
  1345 09:B1F2: F0 03        	beq	L5
  1346 09:B1F4: 82 19 00     	brl	L10001
  1347                        L5:
  1348                        	.line	46
  1349                        ;      //printf("  Error : Impossible to allocate 
                    memory to process OMF file.\n");
  1350                        ;      return(NULL);
  1351                        	.line	48
  1352 09:B1F7: A9 00 00     	lda	#$0
  1353 09:B1FA: AA           	tax
  1354 09:B1FB: A9 00 00     	lda	#$0
  1355                        L6:
  1356 09:B1FE: A8           	tay
  1357 09:B1FF: A5 12        	lda	<L2+2
  1358 09:B201: 85 16        	sta	<L2+2+4
  1359 09:B203: A5 11        	lda	<L2+1
  1360 09:B205: 85 15        	sta	<L2+1+4
  1361 09:B207: 2B           	pld
  1362 09:B208: 3B           	tsc
  1363 09:B209: 18           	clc
  1364 09:B20A: 69 14 00     	adc	#L2+4
  1365 09:B20D: 1B           	tcs
  1366 09:B20E: 98           	tya
  1367 09:B20F: 6B           	rtl
  1368                        ;    }
  1369                        	.line	49
  1370                        ;
  1371                        ;  /* Conservation du nom */
  1372                        ;  current_file->file_path = k_string_copy_string(
                    file_path);
  1373                        L10001:
  Sat Jul 10 2021  1:15                                                Page 27


  1374                        	.line	52
  1375 09:B210: D4 16        	pei	<L2+file_path_0+2
  1376 09:B212: D4 14        	pei	<L2+file_path_0
  1377 09:B214: 22 xx xx xx  	jsl	~~k_string_copy_string
  1378 09:B218: 85 01        	sta	<R0
  1379 09:B21A: 86 03        	stx	<R0+2
  1380 09:B21C: A5 01        	lda	<R0
  1381 09:B21E: 87 0D        	sta	[<L3+current_file_1]
  1382 09:B220: A5 03        	lda	<R0+2
  1383 09:B222: A0 02 00     	ldy	#$2
  1384 09:B225: 97 0D        	sta	[<L3+current_file_1],Y
  1385                        ;  if(current_file->file_path == NULL)
  1386                        	.line	53
  1387                        ;    {
  1388 09:B227: A7 0D        	lda	[<L3+current_file_1]
  1389 09:B229: A0 02 00     	ldy	#$2
  1390 09:B22C: 17 0D        	ora	[<L3+current_file_1],Y
  1391 09:B22E: F0 03        	beq	L7
  1392 09:B230: 82 12 00     	brl	L10002
  1393                        L7:
  1394                        	.line	54
  1395                        ;      mem_free_omf(current_file);
  1396                        	.line	55
  1397 09:B233: D4 0F        	pei	<L3+current_file_1+2
  1398 09:B235: D4 0D        	pei	<L3+current_file_1
  1399 09:B237: 22 C0 D5 09  	jsl	~~mem_free_omf
  1400                        ;      //printf("  Error : Impossible to allocate 
                    memory to process OMF file.\n");
  1401                        ;      return(NULL);
  1402                        	.line	57
  1403 09:B23B: A9 00 00     	lda	#$0
  1404 09:B23E: AA           	tax
  1405 09:B23F: A9 00 00     	lda	#$0
  1406 09:B242: 82 B9 FF     	brl	L6
  1407                        ;    }
  1408                        	.line	58
  1409                        ;
  1410                        ;  k_debug_strings("LoadOMFFile current_file->file
                    _path:",current_file->file_path);
  1411                        L10002:
  1412                        	.line	60
  1413 09:B245: A0 02 00     	ldy	#$2
  1414 09:B248: B7 0D        	lda	[<L3+current_file_1],Y
  1415 09:B24A: 48           	pha
  1416 09:B24B: A7 0D        	lda	[<L3+current_file_1]
  1417 09:B24D: 48           	pha
  1418 09:B24E: F4 xx xx     	pea	#^L1+24
  1419 09:B251: F4 xx xx     	pea	#<L1+24
  1420 09:B254: 22 xx xx xx  	jsl	~~k_debug_strings
  1421                        ;
  1422                        ;  for(i=(int)strlen(current_file->file_path); i>=
                    0; i--)
  1423                        	.line	62
  1424 09:B258: A0 02 00     	ldy	#$2
  1425 09:B25B: B7 0D        	lda	[<L3+current_file_1],Y
  1426 09:B25D: 48           	pha
  1427 09:B25E: A7 0D        	lda	[<L3+current_file_1]
  1428 09:B260: 48           	pha
  Sat Jul 10 2021  1:15                                                Page 28


  1429 09:B261: 22 xx xx xx  	jsl	~~strlen
  1430 09:B265: 85 09        	sta	<L3+i_1
  1431 09:B267: 82 68 00     	brl	L10006
  1432                        L10005:
  1433                        ;    if(current_file->file_path[i] == '\\' || curr
                    ent_file->file_path[i] == '/')
  1434                        	.line	63
  1435                        ;      {
  1436 09:B26A: A7 0D        	lda	[<L3+current_file_1]
  1437 09:B26C: 85 01        	sta	<R0
  1438 09:B26E: A0 02 00     	ldy	#$2
  1439 09:B271: B7 0D        	lda	[<L3+current_file_1],Y
  1440 09:B273: 85 03        	sta	<R0+2
  1441 09:B275: E2 20        	sep	#$20
  1442                        	longa	off
  1443 09:B277: A4 09        	ldy	<L3+i_1
  1444 09:B279: B7 01        	lda	[<R0],Y
  1445 09:B27B: C9 5C        	cmp	#<$5c
  1446 09:B27D: C2 20        	rep	#$20
  1447                        	longa	on
  1448 09:B27F: D0 03        	bne	L9
  1449 09:B281: 82 1A 00     	brl	L8
  1450                        L9:
  1451 09:B284: A7 0D        	lda	[<L3+current_file_1]
  1452 09:B286: 85 01        	sta	<R0
  1453 09:B288: A0 02 00     	ldy	#$2
  1454 09:B28B: B7 0D        	lda	[<L3+current_file_1],Y
  1455 09:B28D: 85 03        	sta	<R0+2
  1456 09:B28F: E2 20        	sep	#$20
  1457                        	longa	off
  1458 09:B291: A4 09        	ldy	<L3+i_1
  1459 09:B293: B7 01        	lda	[<R0],Y
  1460 09:B295: C9 2F        	cmp	#<$2f
  1461 09:B297: C2 20        	rep	#$20
  1462                        	longa	on
  1463 09:B299: F0 03        	beq	L10
  1464 09:B29B: 82 32 00     	brl	L10007
  1465                        L10:
  1466                        L8:
  1467                        	.line	64
  1468                        ;        current_file->file_name = &current_file->
                    file_path[i+1];
  1469                        	.line	65
  1470 09:B29E: A5 09        	lda	<L3+i_1
  1471 09:B2A0: 1A           	ina
  1472 09:B2A1: 85 01        	sta	<R0
  1473 09:B2A3: A0 00 00     	ldy	#$0
  1474 09:B2A6: A5 01        	lda	<R0
  1475 09:B2A8: 10 01        	bpl	L11
  1476 09:B2AA: 88           	dey
  1477                        L11:
  1478 09:B2AB: 85 01        	sta	<R0
  1479 09:B2AD: 84 03        	sty	<R0+2
  1480 09:B2AF: 18           	clc
  1481 09:B2B0: A7 0D        	lda	[<L3+current_file_1]
  1482 09:B2B2: 65 01        	adc	<R0
  1483 09:B2B4: 85 05        	sta	<R1
  1484 09:B2B6: A0 02 00     	ldy	#$2
  Sat Jul 10 2021  1:15                                                Page 29


  1485 09:B2B9: B7 0D        	lda	[<L3+current_file_1],Y
  1486 09:B2BB: 65 03        	adc	<R0+2
  1487 09:B2BD: 85 07        	sta	<R1+2
  1488 09:B2BF: A5 05        	lda	<R1
  1489 09:B2C1: A0 04 00     	ldy	#$4
  1490 09:B2C4: 97 0D        	sta	[<L3+current_file_1],Y
  1491 09:B2C6: A5 07        	lda	<R1+2
  1492 09:B2C8: A0 06 00     	ldy	#$6
  1493 09:B2CB: 97 0D        	sta	[<L3+current_file_1],Y
  1494                        ;        break;
  1495                        	.line	66
  1496 09:B2CD: 82 09 00     	brl	L10004
  1497                        ;      }
  1498                        	.line	67
  1499                        ;  if(current_file->file_name == NULL)
  1500                        L10007:
  1501                        L10003:
  1502 09:B2D0: C6 09        	dec	<L3+i_1
  1503                        L10006:
  1504 09:B2D2: A5 09        	lda	<L3+i_1
  1505 09:B2D4: 30 03        	bmi	L12
  1506 09:B2D6: 82 91 FF     	brl	L10005
  1507                        L12:
  1508                        L10004:
  1509                        	.line	68
  1510                        ;    current_file->file_name = current_file->file_
                    path;
  1511 09:B2D9: A0 04 00     	ldy	#$4
  1512 09:B2DC: B7 0D        	lda	[<L3+current_file_1],Y
  1513 09:B2DE: A0 06 00     	ldy	#$6
  1514 09:B2E1: 17 0D        	ora	[<L3+current_file_1],Y
  1515 09:B2E3: F0 03        	beq	L13
  1516 09:B2E5: 82 11 00     	brl	L10008
  1517                        L13:
  1518                        	.line	69
  1519 09:B2E8: A7 0D        	lda	[<L3+current_file_1]
  1520 09:B2EA: A0 04 00     	ldy	#$4
  1521 09:B2ED: 97 0D        	sta	[<L3+current_file_1],Y
  1522 09:B2EF: A0 02 00     	ldy	#$2
  1523 09:B2F2: B7 0D        	lda	[<L3+current_file_1],Y
  1524 09:B2F4: A0 06 00     	ldy	#$6
  1525 09:B2F7: 97 0D        	sta	[<L3+current_file_1],Y
  1526                        ;
  1527                        ;  /* Chargement des Data du fichier OMF */
  1528                        ;  current_file->data = LoadFileData(file_path,&cu
                    rrent_file->data_length);
  1529                        L10008:
  1530                        	.line	72
  1531 09:B2F9: 18           	clc
  1532 09:B2FA: A9 08 00     	lda	#$8
  1533 09:B2FD: 65 0D        	adc	<L3+current_file_1
  1534 09:B2FF: 85 01        	sta	<R0
  1535 09:B301: A9 00 00     	lda	#$0
  1536 09:B304: 65 0F        	adc	<L3+current_file_1+2
  1537 09:B306: 85 03        	sta	<R0+2
  1538 09:B308: D4 03        	pei	<R0+2
  1539 09:B30A: D4 01        	pei	<R0
  1540 09:B30C: D4 16        	pei	<L2+file_path_0+2
  Sat Jul 10 2021  1:15                                                Page 30


  1541 09:B30E: D4 14        	pei	<L2+file_path_0
  1542 09:B310: 22 xx xx xx  	jsl	~~LoadFileData
  1543 09:B314: 85 05        	sta	<R1
  1544 09:B316: 86 07        	stx	<R1+2
  1545 09:B318: A5 05        	lda	<R1
  1546 09:B31A: A0 0A 00     	ldy	#$a
  1547 09:B31D: 97 0D        	sta	[<L3+current_file_1],Y
  1548 09:B31F: A5 07        	lda	<R1+2
  1549 09:B321: A0 0C 00     	ldy	#$c
  1550 09:B324: 97 0D        	sta	[<L3+current_file_1],Y
  1551                        ;  if(current_file->data == NULL)
  1552                        	.line	73
  1553                        ;    {
  1554 09:B326: A0 0A 00     	ldy	#$a
  1555 09:B329: B7 0D        	lda	[<L3+current_file_1],Y
  1556 09:B32B: A0 0C 00     	ldy	#$c
  1557 09:B32E: 17 0D        	ora	[<L3+current_file_1],Y
  1558 09:B330: F0 03        	beq	L14
  1559 09:B332: 82 12 00     	brl	L10009
  1560                        L14:
  1561                        	.line	74
  1562                        ;      mem_free_omf(current_file);
  1563                        	.line	75
  1564 09:B335: D4 0F        	pei	<L3+current_file_1+2
  1565 09:B337: D4 0D        	pei	<L3+current_file_1
  1566 09:B339: 22 C0 D5 09  	jsl	~~mem_free_omf
  1567                        ;      //printf("  Error : Impossible to load OMF 
                    file '%s'.\n",file_path);
  1568                        ;      return(NULL);
  1569                        	.line	77
  1570 09:B33D: A9 00 00     	lda	#$0
  1571 09:B340: AA           	tax
  1572 09:B341: A9 00 00     	lda	#$0
  1573 09:B344: 82 B7 FE     	brl	L6
  1574                        ;    }
  1575                        	.line	78
  1576                        ;
  1577                        ;  /** Décodage du contenu du fichier OMF **/
  1578                        ;  result = DecodeOMFFile(current_file);
  1579                        L10009:
  1580                        	.line	81
  1581 09:B347: D4 0F        	pei	<L3+current_file_1+2
  1582 09:B349: D4 0D        	pei	<L3+current_file_1
  1583 09:B34B: 22 62 B3 09  	jsl	~~DecodeOMFFile
  1584 09:B34F: 85 0B        	sta	<L3+result_1
  1585                        ;
  1586                        ;  k_debug_string("LoadOMFFile exit... \r\n");
  1587                        	.line	83
  1588 09:B351: F4 xx xx     	pea	#^L1+61
  1589 09:B354: F4 xx xx     	pea	#<L1+61
  1590 09:B357: 22 xx xx xx  	jsl	~~k_debug_string
  1591                        ;
  1592                        ;  /* Renvoie la structure */
  1593                        ;  return(current_file);
  1594                        	.line	86
  1595 09:B35B: A6 0F        	ldx	<L3+current_file_1+2
  1596 09:B35D: A5 0D        	lda	<L3+current_file_1
  1597 09:B35F: 82 9C FE     	brl	L6
  Sat Jul 10 2021  1:15                                                Page 31


  1598                        ;}
  1599                        	.line	87
  1600                        	.endblock	87
  1601             00000010   L2	equ	16
  1602             00000009   L3	equ	9
  1603 09:B362:              	ends
  1604                        	efunc
  1605                        	.endfunc	87,9,16
  1606                        	.line	87
  1607                        	data
  1608                        L1:
  1609 00:0000: 4C 6F 61 64  	db	$4C,$6F,$61,$64,$4F,$4D,$46,$46,$69,$6C,
                    $65,$20,$65,$6E,$74
       00:0004: 4F 4D 46 46 
       00:0008: 69 6C 65 20 
       00:000C: 65 6E 74 
  1610 00:000F: 65 72 2E 2E  	db	$65,$72,$2E,$2E,$2E,$20,$0D,$0A,$00,$4C,
                    $6F,$61,$64,$4F,$4D
       00:0013: 2E 20 0D 0A 
       00:0017: 00 4C 6F 61 
       00:001B: 64 4F 4D 
  1611 00:001E: 46 46 69 6C  	db	$46,$46,$69,$6C,$65,$20,$63,$75,$72,$72,
                    $65,$6E,$74,$5F,$66
       00:0022: 65 20 63 75 
       00:0026: 72 72 65 6E 
       00:002A: 74 5F 66 
  1612 00:002D: 69 6C 65 2D  	db	$69,$6C,$65,$2D,$3E,$66,$69,$6C,$65,$5F,
                    $70,$61,$74,$68,$3A
       00:0031: 3E 66 69 6C 
       00:0035: 65 5F 70 61 
       00:0039: 74 68 3A 
  1613 00:003C: 00 4C 6F 61  	db	$00,$4C,$6F,$61,$64,$4F,$4D,$46,$46,$69,
                    $6C,$65,$20,$65,$78
       00:0040: 64 4F 4D 46 
       00:0044: 46 69 6C 65 
       00:0048: 20 65 78 
  1614 00:004B: 69 74 2E 2E  	db	$69,$74,$2E,$2E,$2E,$20,$0D,$0A,$00
       00:004F: 2E 20 0D 0A 
       00:0053: 00 
  1615 00:0054:              	ends
  1616                        ;
  1617                        ;
  1618                        ;/************************************************
                    ***************/
  1619                        ;/*  DecodeOMFFile() :  Décodage des structures du
                     fichier OMF. */
  1620                        ;/************************************************
                    ***************/
  1621                        ;static int DecodeOMFFile(struct omf_file *current
                    _file)
  1622                        ;{
  1623                        	.line	93
  1624                        	.line	94
  1625                        	LOADER
  1626                        	func
  1627                        	.function	94
  1628                        ~~DecodeOMFFile:
  1629                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 32


  1630                        	longi	on
  1631 09:B362: 3B           	tsc
  1632 09:B363: 38           	sec
  1633 09:B364: E9 0C 00     	sbc	#L16
  1634 09:B367: 1B           	tcs
  1635 09:B368: 0B           	phd
  1636 09:B369: 5B           	tcd
  1637             00000004   current_file_0	set	4
  1638                        	.block	94
  1639                        ;  int file_offset, segment_length;
  1640                        ;  struct omf_segment *current_segment;
  1641                        ;
  1642                        ;  /* Init */
  1643                        ;  file_offset = 0;
  1644             00000000   file_offset_1	set	0
  1645             00000002   segment_length_1	set	2
  1646             00000004   current_segment_1	set	4
  1647                        	.sym	file_offset,0,5,1,16
  1648                        	.sym	segment_length,2,5,1,16
  1649                        	.sym	current_segment,4,138,1,32,121
  1650                        	.sym	current_file,4,138,6,32,122
  1651                        	.line	99
  1652 09:B36A: 64 05        	stz	<L17+file_offset_1
  1653                        ;
  1654                        ;  /** On va itérer sur tous les segments **/
  1655                        ;  while(1)
  1656                        	.line	102
  1657                        L10010:
  1658                        ;    {
  1659                        	.line	103
  1660                        ;      /** Décode 1 segment **/
  1661                        ;      current_segment = DecodeOneSegment(current_
                    file,file_offset,&segment_length);
  1662                        	.line	105
  1663 09:B36C: F4 00 00     	pea	#0
  1664 09:B36F: 18           	clc
  1665 09:B370: 7B           	tdc
  1666 09:B371: 69 07 00     	adc	#<L17+segment_length_1
  1667 09:B374: 48           	pha
  1668 09:B375: D4 05        	pei	<L17+file_offset_1
  1669 09:B377: D4 12        	pei	<L16+current_file_0+2
  1670 09:B379: D4 10        	pei	<L16+current_file_0
  1671 09:B37B: 22 12 B4 09  	jsl	~~DecodeOneSegment
  1672 09:B37F: 85 09        	sta	<L17+current_segment_1
  1673 09:B381: 86 0B        	stx	<L17+current_segment_1+2
  1674                        ;      if(current_segment == NULL)
  1675                        	.line	106
  1676                        ;        {
  1677 09:B383: A5 09        	lda	<L17+current_segment_1
  1678 09:B385: 05 0B        	ora	<L17+current_segment_1+2
  1679 09:B387: F0 03        	beq	L19
  1680 09:B389: 82 15 00     	brl	L10012
  1681                        L19:
  1682                        	.line	107
  1683                        ;          /* Erreur */
  1684                        ;          return(1);
  1685                        	.line	109
  1686 09:B38C: A9 01 00     	lda	#$1
  Sat Jul 10 2021  1:15                                                Page 33


  1687                        L20:
  1688 09:B38F: A8           	tay
  1689 09:B390: A5 0E        	lda	<L16+2
  1690 09:B392: 85 12        	sta	<L16+2+4
  1691 09:B394: A5 0D        	lda	<L16+1
  1692 09:B396: 85 11        	sta	<L16+1+4
  1693 09:B398: 2B           	pld
  1694 09:B399: 3B           	tsc
  1695 09:B39A: 18           	clc
  1696 09:B39B: 69 10 00     	adc	#L16+4
  1697 09:B39E: 1B           	tcs
  1698 09:B39F: 98           	tya
  1699 09:B3A0: 6B           	rtl
  1700                        ;        }
  1701                        	.line	110
  1702                        ;
  1703                        ;      /* Rattache ce segment au fichier OMF */
  1704                        ;      if(current_file->first_segment == NULL)
  1705                        L10012:
  1706                        	.line	113
  1707                        ;        current_file->first_segment = current_seg
                    ment;
  1708 09:B3A1: A0 10 00     	ldy	#$10
  1709 09:B3A4: B7 10        	lda	[<L16+current_file_0],Y
  1710 09:B3A6: A0 12 00     	ldy	#$12
  1711 09:B3A9: 17 10        	ora	[<L16+current_file_0],Y
  1712 09:B3AB: F0 03        	beq	L21
  1713 09:B3AD: 82 11 00     	brl	L10013
  1714                        L21:
  1715                        	.line	114
  1716 09:B3B0: A5 09        	lda	<L17+current_segment_1
  1717 09:B3B2: A0 10 00     	ldy	#$10
  1718 09:B3B5: 97 10        	sta	[<L16+current_file_0],Y
  1719 09:B3B7: A5 0B        	lda	<L17+current_segment_1+2
  1720 09:B3B9: A0 12 00     	ldy	#$12
  1721 09:B3BC: 97 10        	sta	[<L16+current_file_0],Y
  1722                        ;      else
  1723 09:B3BE: 82 1C 00     	brl	L10014
  1724                        L10013:
  1725                        ;        current_file->last_segment->next = curren
                    t_segment;
  1726                        	.line	116
  1727 09:B3C1: A0 14 00     	ldy	#$14
  1728 09:B3C4: B7 10        	lda	[<L16+current_file_0],Y
  1729 09:B3C6: 85 01        	sta	<R0
  1730 09:B3C8: A0 16 00     	ldy	#$16
  1731 09:B3CB: B7 10        	lda	[<L16+current_file_0],Y
  1732 09:B3CD: 85 03        	sta	<R0+2
  1733 09:B3CF: A5 09        	lda	<L17+current_segment_1
  1734 09:B3D1: A0 61 0A     	ldy	#$a61
  1735 09:B3D4: 97 01        	sta	[<R0],Y
  1736 09:B3D6: A5 0B        	lda	<L17+current_segment_1+2
  1737 09:B3D8: A0 63 0A     	ldy	#$a63
  1738 09:B3DB: 97 01        	sta	[<R0],Y
  1739                        L10014:
  1740                        ;      current_file->last_segment = current_segmen
                    t;
  1741                        	.line	117
  Sat Jul 10 2021  1:15                                                Page 34


  1742 09:B3DD: A5 09        	lda	<L17+current_segment_1
  1743 09:B3DF: A0 14 00     	ldy	#$14
  1744 09:B3E2: 97 10        	sta	[<L16+current_file_0],Y
  1745 09:B3E4: A5 0B        	lda	<L17+current_segment_1+2
  1746 09:B3E6: A0 16 00     	ldy	#$16
  1747 09:B3E9: 97 10        	sta	[<L16+current_file_0],Y
  1748                        ;      current_file->nb_segment++;
  1749                        	.line	118
  1750 09:B3EB: A0 0E 00     	ldy	#$e
  1751 09:B3EE: B7 10        	lda	[<L16+current_file_0],Y
  1752 09:B3F0: 1A           	ina
  1753 09:B3F1: A0 0E 00     	ldy	#$e
  1754 09:B3F4: 97 10        	sta	[<L16+current_file_0],Y
  1755                        ;
  1756                        ;      /* Segment suivant */
  1757                        ;      file_offset += segment_length;
  1758                        	.line	121
  1759 09:B3F6: 18           	clc
  1760 09:B3F7: A5 05        	lda	<L17+file_offset_1
  1761 09:B3F9: 65 07        	adc	<L17+segment_length_1
  1762 09:B3FB: 85 05        	sta	<L17+file_offset_1
  1763                        ;
  1764                        ;      /* Fin de fichier */
  1765                        ;      if(file_offset == current_file->data_length
                    )
  1766                        	.line	124
  1767                        ;        break;
  1768 09:B3FD: A5 05        	lda	<L17+file_offset_1
  1769 09:B3FF: A0 08 00     	ldy	#$8
  1770 09:B402: D7 10        	cmp	[<L16+current_file_0],Y
  1771 09:B404: D0 03        	bne	L22
  1772 09:B406: 82 03 00     	brl	L10011
  1773                        L22:
  1774                        ;    }
  1775                        	.line	126
  1776 09:B409: 82 60 FF     	brl	L10010
  1777                        L10011:
  1778                        ;
  1779                        ;  /* OK */
  1780                        ;  return(0);
  1781                        	.line	129
  1782 09:B40C: A9 00 00     	lda	#$0
  1783 09:B40F: 82 7D FF     	brl	L20
  1784                        ;}
  1785                        	.line	130
  1786                        	.endblock	130
  1787             0000000C   L16	equ	12
  1788             00000005   L17	equ	5
  1789 09:B412:              	ends
  1790                        	efunc
  1791                        	.endfunc	130,5,12
  1792                        	.line	130
  1793                        ;
  1794                        ;
  1795                        ;/************************************************
                    ****************/
  1796                        ;/*  DecodeOneSegment() :  Décodage d'un Segment d
                    u fichier OMF. */
  Sat Jul 10 2021  1:15                                                Page 35


  1797                        ;/************************************************
                    ****************/
  1798                        ;static struct omf_segment *DecodeOneSegment(struc
                    t omf_file *current_file, int data_offset, int *segment_leng
                    th_rtn)
  1799                        ;{
  1800                        	.line	136
  1801                        	.line	137
  1802                        	LOADER
  1803                        	func
  1804                        	.function	137
  1805                        ~~DecodeOneSegment:
  1806                        	longa	on
  1807                        	longi	on
  1808 09:B412: 3B           	tsc
  1809 09:B413: 38           	sec
  1810 09:B414: E9 0A 00     	sbc	#L23
  1811 09:B417: 1B           	tcs
  1812 09:B418: 0B           	phd
  1813 09:B419: 5B           	tcd
  1814             00000004   current_file_0	set	4
  1815             00000008   data_offset_0	set	8
  1816             0000000A   segment_length_rtn_0	set	10
  1817                        	.block	137
  1818                        ;  int result;
  1819                        ;  struct omf_segment *current_segment;
  1820                        ;
  1821                        ;  /* Allocation mémoire */
  1822                        ;  current_segment = (struct omf_segment *) k_call
                    oc(1,sizeof(struct omf_segment));
  1823             00000000   result_1	set	0
  1824             00000002   current_segment_1	set	2
  1825                        	.sym	result,0,5,1,16
  1826                        	.sym	current_segment,2,138,1,32,121
  1827                        	.sym	current_file,4,138,6,32,122
  1828                        	.sym	data_offset,8,5,6,16
  1829                        	.sym	segment_length_rtn,10,133,6,32
  1830                        	.line	142
  1831 09:B41A: F4 65 0A     	pea	#<$a65
  1832 09:B41D: F4 01 00     	pea	#<$1
  1833 09:B420: 22 xx xx xx  	jsl	~~k_calloc
  1834 09:B424: 85 07        	sta	<L24+current_segment_1
  1835 09:B426: 86 09        	stx	<L24+current_segment_1+2
  1836                        ;  if(current_segment == NULL)
  1837                        	.line	143
  1838                        ;    {
  1839 09:B428: A5 07        	lda	<L24+current_segment_1
  1840 09:B42A: 05 09        	ora	<L24+current_segment_1+2
  1841 09:B42C: F0 03        	beq	L26
  1842 09:B42E: 82 19 00     	brl	L10015
  1843                        L26:
  1844                        	.line	144
  1845                        ;      //printf("  Error : Impossible to allocate 
                    memory to process Segment #%d.\n",current_file->nb_segment+1
                    );
  1846                        ;      return(NULL);
  1847                        	.line	146
  1848 09:B431: A9 00 00     	lda	#$0
  Sat Jul 10 2021  1:15                                                Page 36


  1849 09:B434: AA           	tax
  1850 09:B435: A9 00 00     	lda	#$0
  1851                        L27:
  1852 09:B438: A8           	tay
  1853 09:B439: A5 0C        	lda	<L23+2
  1854 09:B43B: 85 16        	sta	<L23+2+10
  1855 09:B43D: A5 0B        	lda	<L23+1
  1856 09:B43F: 85 15        	sta	<L23+1+10
  1857 09:B441: 2B           	pld
  1858 09:B442: 3B           	tsc
  1859 09:B443: 18           	clc
  1860 09:B444: 69 14 00     	adc	#L23+10
  1861 09:B447: 1B           	tcs
  1862 09:B448: 98           	tya
  1863 09:B449: 6B           	rtl
  1864                        ;    }
  1865                        	.line	147
  1866                        ;
  1867                        ;  /** Décodage du Segment Header **/
  1868                        ;  result = DecodeSegmentHeader(current_file,data_
                    offset,&current_segment->header);
  1869                        L10015:
  1870                        	.line	150
  1871 09:B44A: D4 09        	pei	<L24+current_segment_1+2
  1872 09:B44C: D4 07        	pei	<L24+current_segment_1
  1873 09:B44E: D4 12        	pei	<L23+data_offset_0
  1874 09:B450: D4 10        	pei	<L23+current_file_0+2
  1875 09:B452: D4 0E        	pei	<L23+current_file_0
  1876 09:B454: 22 D8 B4 09  	jsl	~~DecodeSegmentHeader
  1877 09:B458: 85 05        	sta	<L24+result_1
  1878                        ;  if(result)
  1879                        	.line	151
  1880                        ;    {
  1881 09:B45A: A5 05        	lda	<L24+result_1
  1882 09:B45C: D0 03        	bne	L28
  1883 09:B45E: 82 12 00     	brl	L10016
  1884                        L28:
  1885                        	.line	152
  1886                        ;      mem_free_segment(current_segment);
  1887                        	.line	153
  1888 09:B461: D4 09        	pei	<L24+current_segment_1+2
  1889 09:B463: D4 07        	pei	<L24+current_segment_1
  1890 09:B465: 22 59 D6 09  	jsl	~~mem_free_segment
  1891                        ;      return(NULL);
  1892                        	.line	154
  1893 09:B469: A9 00 00     	lda	#$0
  1894 09:B46C: AA           	tax
  1895 09:B46D: A9 00 00     	lda	#$0
  1896 09:B470: 82 C5 FF     	brl	L27
  1897                        ;    }
  1898                        	.line	155
  1899                        ;  current_segment->header.FileOffset = data_offse
                    t;
  1900                        L10016:
  1901                        	.line	156
  1902 09:B473: A0 00 00     	ldy	#$0
  1903 09:B476: A5 12        	lda	<L23+data_offset_0
  1904 09:B478: 10 01        	bpl	L29
  Sat Jul 10 2021  1:15                                                Page 37


  1905 09:B47A: 88           	dey
  1906                        L29:
  1907 09:B47B: 85 01        	sta	<R0
  1908 09:B47D: 84 03        	sty	<R0+2
  1909 09:B47F: A5 01        	lda	<R0
  1910 09:B481: 87 07        	sta	[<L24+current_segment_1]
  1911 09:B483: A5 03        	lda	<R0+2
  1912 09:B485: A0 02 00     	ldy	#$2
  1913 09:B488: 97 07        	sta	[<L24+current_segment_1],Y
  1914                        ;  current_segment->header.SegmentOffset = 0;
  1915                        	.line	157
  1916 09:B48A: A9 00 00     	lda	#$0
  1917 09:B48D: A0 04 00     	ldy	#$4
  1918 09:B490: 97 07        	sta	[<L24+current_segment_1],Y
  1919 09:B492: A9 00 00     	lda	#$0
  1920 09:B495: A0 06 00     	ldy	#$6
  1921 09:B498: 97 07        	sta	[<L24+current_segment_1],Y
  1922                        ;
  1923                        ;  /** Décodage du Segment Body **/
  1924                        ;  result = DecodeSegmentBody(current_file,data_of
                    fset+current_segment->header.DispDataOffset,current_segment)
                    ;
  1925                        	.line	160
  1926 09:B49A: D4 09        	pei	<L24+current_segment_1+2
  1927 09:B49C: D4 07        	pei	<L24+current_segment_1
  1928 09:B49E: 18           	clc
  1929 09:B49F: A5 12        	lda	<L23+data_offset_0
  1930 09:B4A1: A0 38 00     	ldy	#$38
  1931 09:B4A4: 77 07        	adc	[<L24+current_segment_1],Y
  1932 09:B4A6: 48           	pha
  1933 09:B4A7: D4 10        	pei	<L23+current_file_0+2
  1934 09:B4A9: D4 0E        	pei	<L23+current_file_0
  1935 09:B4AB: 22 5F CF 09  	jsl	~~DecodeSegmentBody
  1936 09:B4AF: 85 05        	sta	<L24+result_1
  1937                        ;  if(result)
  1938                        	.line	161
  1939                        ;    {
  1940 09:B4B1: A5 05        	lda	<L24+result_1
  1941 09:B4B3: D0 03        	bne	L30
  1942 09:B4B5: 82 12 00     	brl	L10017
  1943                        L30:
  1944                        	.line	162
  1945                        ;      mem_free_segment(current_segment);
  1946                        	.line	163
  1947 09:B4B8: D4 09        	pei	<L24+current_segment_1+2
  1948 09:B4BA: D4 07        	pei	<L24+current_segment_1
  1949 09:B4BC: 22 59 D6 09  	jsl	~~mem_free_segment
  1950                        ;      return(NULL);
  1951                        	.line	164
  1952 09:B4C0: A9 00 00     	lda	#$0
  1953 09:B4C3: AA           	tax
  1954 09:B4C4: A9 00 00     	lda	#$0
  1955 09:B4C7: 82 6E FF     	brl	L27
  1956                        ;    }
  1957                        	.line	165
  1958                        ;
  1959                        ;  /* Renvoie le segment */
  1960                        ;  *segment_length_rtn = (int) current_segment->he
  Sat Jul 10 2021  1:15                                                Page 38


                    ader.ByteCnt;
  1961                        L10017:
  1962                        	.line	168
  1963 09:B4CA: A0 0C 00     	ldy	#$c
  1964 09:B4CD: B7 07        	lda	[<L24+current_segment_1],Y
  1965 09:B4CF: 87 14        	sta	[<L23+segment_length_rtn_0]
  1966                        ;  return(current_segment);
  1967                        	.line	169
  1968 09:B4D1: A6 09        	ldx	<L24+current_segment_1+2
  1969 09:B4D3: A5 07        	lda	<L24+current_segment_1
  1970 09:B4D5: 82 60 FF     	brl	L27
  1971                        ;}
  1972                        	.line	170
  1973                        	.endblock	170
  1974             0000000A   L23	equ	10
  1975             00000005   L24	equ	5
  1976 09:B4D8:              	ends
  1977                        	efunc
  1978                        	.endfunc	170,5,10
  1979                        	.line	170
  1980                        ;
  1981                        ;
  1982                        ;/************************************************
                    **********/
  1983                        ;/*  DecodeSegmentHeader() :  Décode le Header du 
                    Segment. */
  1984                        ;/************************************************
                    **********/
  1985                        ;static int DecodeSegmentHeader(struct omf_file *c
                    urrent_file, int data_offset, struct omf_segment_header *cur
                    rent_header)
  1986                        ;{
  1987                        	.line	176
  1988                        	.line	177
  1989                        	LOADER
  1990                        	func
  1991                        	.function	177
  1992                        ~~DecodeSegmentHeader:
  1993                        	longa	on
  1994                        	longi	on
  1995 09:B4D8: 3B           	tsc
  1996 09:B4D9: 38           	sec
  1997 09:B4DA: E9 0A 00     	sbc	#L31
  1998 09:B4DD: 1B           	tcs
  1999 09:B4DE: 0B           	phd
  2000 09:B4DF: 5B           	tcd
  2001             00000004   current_file_0	set	4
  2002             00000008   data_offset_0	set	8
  2003             0000000A   current_header_0	set	10
  2004                        	.block	177
  2005                        ;  int error;
  2006                        ;
  2007                        ;  /* Vérifie la taille */
  2008                        ;  if(data_offset + SEGMENT_HEADER_VERSION_OFFSET 
                    > current_file->data_length)
  2009             00000000   error_1	set	0
  2010                        	.sym	error,0,5,1,16
  2011                        	.sym	current_file,4,138,6,32,122
  Sat Jul 10 2021  1:15                                                Page 39


  2012                        	.sym	data_offset,8,5,6,16
  2013                        	.sym	current_header,10,138,6,32,120
  2014                        	.line	181
  2015                        ;    {
  2016 09:B4E0: 18           	clc
  2017 09:B4E1: A9 0F 00     	lda	#$f
  2018 09:B4E4: 65 12        	adc	<L31+data_offset_0
  2019 09:B4E6: 85 01        	sta	<R0
  2020 09:B4E8: 38           	sec
  2021 09:B4E9: A0 08 00     	ldy	#$8
  2022 09:B4EC: B7 0E        	lda	[<L31+current_file_0],Y
  2023 09:B4EE: E5 01        	sbc	<R0
  2024 09:B4F0: 70 03        	bvs	L34
  2025 09:B4F2: 49 00 80     	eor	#$8000
  2026                        L34:
  2027 09:B4F5: 10 03        	bpl	L35
  2028 09:B4F7: 82 15 00     	brl	L10018
  2029                        L35:
  2030                        	.line	182
  2031                        ;      //printf("  Error : Not enough data to enco
                    de a Segment Header (offset=%d, Segment #%d).\n",data_offset
                    ,current_file->nb_segment+1);
  2032                        ;      return(1);
  2033                        	.line	184
  2034 09:B4FA: A9 01 00     	lda	#$1
  2035                        L36:
  2036 09:B4FD: A8           	tay
  2037 09:B4FE: A5 0C        	lda	<L31+2
  2038 09:B500: 85 16        	sta	<L31+2+10
  2039 09:B502: A5 0B        	lda	<L31+1
  2040 09:B504: 85 15        	sta	<L31+1+10
  2041 09:B506: 2B           	pld
  2042 09:B507: 3B           	tsc
  2043 09:B508: 18           	clc
  2044 09:B509: 69 14 00     	adc	#L31+10
  2045 09:B50C: 1B           	tcs
  2046 09:B50D: 98           	tya
  2047 09:B50E: 6B           	rtl
  2048                        ;    }
  2049                        	.line	185
  2050                        ;
  2051                        ;  /**  On va déterminer la version de l'OMF utili
                    sé  **/
  2052                        ;  memcpy(&current_header->Version,&current_file->
                    data[data_offset+SEGMENT_HEADER_VERSION_OFFSET],sizeof(BYTE)
                    );
  2053                        L10018:
  2054                        	.line	188
  2055 09:B50F: F4 01 00     	pea	#<$1
  2056 09:B512: 18           	clc
  2057 09:B513: A9 0F 00     	lda	#$f
  2058 09:B516: 65 12        	adc	<L31+data_offset_0
  2059 09:B518: 85 01        	sta	<R0
  2060 09:B51A: A0 00 00     	ldy	#$0
  2061 09:B51D: A5 01        	lda	<R0
  2062 09:B51F: 10 01        	bpl	L37
  2063 09:B521: 88           	dey
  2064                        L37:
  Sat Jul 10 2021  1:15                                                Page 40


  2065 09:B522: 85 01        	sta	<R0
  2066 09:B524: 84 03        	sty	<R0+2
  2067 09:B526: 18           	clc
  2068 09:B527: A0 0A 00     	ldy	#$a
  2069 09:B52A: B7 0E        	lda	[<L31+current_file_0],Y
  2070 09:B52C: 65 01        	adc	<R0
  2071 09:B52E: 85 05        	sta	<R1
  2072 09:B530: A0 0C 00     	ldy	#$c
  2073 09:B533: B7 0E        	lda	[<L31+current_file_0],Y
  2074 09:B535: 65 03        	adc	<R0+2
  2075 09:B537: 85 07        	sta	<R1+2
  2076 09:B539: D4 07        	pei	<R1+2
  2077 09:B53B: D4 05        	pei	<R1
  2078 09:B53D: 18           	clc
  2079 09:B53E: A9 1C 00     	lda	#$1c
  2080 09:B541: 65 14        	adc	<L31+current_header_0
  2081 09:B543: 85 01        	sta	<R0
  2082 09:B545: A9 00 00     	lda	#$0
  2083 09:B548: 65 16        	adc	<L31+current_header_0+2
  2084 09:B54A: 85 03        	sta	<R0+2
  2085 09:B54C: D4 03        	pei	<R0+2
  2086 09:B54E: D4 01        	pei	<R0
  2087 09:B550: 22 xx xx xx  	jsl	~~memcpy
  2088                        ;
  2089                        ;  /** On décode selon le type **/
  2090                        ;  if(current_header->Version == 0x00)
  2091                        	.line	191
  2092                        ;    error = DecodeSegmentHeaderV0(current_file,da
                    ta_offset,current_header);
  2093 09:B554: A0 1C 00     	ldy	#$1c
  2094 09:B557: B7 14        	lda	[<L31+current_header_0],Y
  2095 09:B559: 29 FF 00     	and	#$ff
  2096 09:B55C: F0 03        	beq	L38
  2097 09:B55E: 82 13 00     	brl	L10019
  2098                        L38:
  2099                        	.line	192
  2100 09:B561: D4 16        	pei	<L31+current_header_0+2
  2101 09:B563: D4 14        	pei	<L31+current_header_0
  2102 09:B565: D4 12        	pei	<L31+data_offset_0
  2103 09:B567: D4 10        	pei	<L31+current_file_0+2
  2104 09:B569: D4 0E        	pei	<L31+current_file_0
  2105 09:B56B: 22 C5 B5 09  	jsl	~~DecodeSegmentHeaderV0
  2106 09:B56F: 85 09        	sta	<L32+error_1
  2107                        ;  else if(current_header->Version == 0x01)
  2108 09:B571: 82 4C 00     	brl	L10020
  2109                        L10019:
  2110                        	.line	193
  2111                        ;    error = DecodeSegmentHeaderV1(current_file,da
                    ta_offset,current_header);
  2112 09:B574: E2 20        	sep	#$20
  2113                        	longa	off
  2114 09:B576: A0 1C 00     	ldy	#$1c
  2115 09:B579: B7 14        	lda	[<L31+current_header_0],Y
  2116 09:B57B: C9 01        	cmp	#<$1
  2117 09:B57D: C2 20        	rep	#$20
  2118                        	longa	on
  2119 09:B57F: F0 03        	beq	L39
  2120 09:B581: 82 13 00     	brl	L10021
  Sat Jul 10 2021  1:15                                                Page 41


  2121                        L39:
  2122                        	.line	194
  2123 09:B584: D4 16        	pei	<L31+current_header_0+2
  2124 09:B586: D4 14        	pei	<L31+current_header_0
  2125 09:B588: D4 12        	pei	<L31+data_offset_0
  2126 09:B58A: D4 10        	pei	<L31+current_file_0+2
  2127 09:B58C: D4 0E        	pei	<L31+current_file_0
  2128 09:B58E: 22 E2 BC 09  	jsl	~~DecodeSegmentHeaderV1
  2129 09:B592: 85 09        	sta	<L32+error_1
  2130                        ;  else if(current_header->Version == 0x02)
  2131 09:B594: 82 29 00     	brl	L10022
  2132                        L10021:
  2133                        	.line	195
  2134                        ;    error = DecodeSegmentHeaderV2(current_file,da
                    ta_offset,current_header);
  2135 09:B597: E2 20        	sep	#$20
  2136                        	longa	off
  2137 09:B599: A0 1C 00     	ldy	#$1c
  2138 09:B59C: B7 14        	lda	[<L31+current_header_0],Y
  2139 09:B59E: C9 02        	cmp	#<$2
  2140 09:B5A0: C2 20        	rep	#$20
  2141                        	longa	on
  2142 09:B5A2: F0 03        	beq	L40
  2143 09:B5A4: 82 13 00     	brl	L10023
  2144                        L40:
  2145                        	.line	196
  2146 09:B5A7: D4 16        	pei	<L31+current_header_0+2
  2147 09:B5A9: D4 14        	pei	<L31+current_header_0
  2148 09:B5AB: D4 12        	pei	<L31+data_offset_0
  2149 09:B5AD: D4 10        	pei	<L31+current_file_0+2
  2150 09:B5AF: D4 0E        	pei	<L31+current_file_0
  2151 09:B5B1: 22 21 C6 09  	jsl	~~DecodeSegmentHeaderV2
  2152 09:B5B5: 85 09        	sta	<L32+error_1
  2153                        ;  else
  2154 09:B5B7: 82 06 00     	brl	L10024
  2155                        L10023:
  2156                        ;    {
  2157                        	.line	198
  2158                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'Version' value (the value should be 0, 1 or 2 for the A
                    pple IIgs).\n",current_file->nb_segment+1);
  2159                        ;      return(1);
  2160                        	.line	200
  2161 09:B5BA: A9 01 00     	lda	#$1
  2162 09:B5BD: 82 3D FF     	brl	L36
  2163                        ;    }
  2164                        	.line	201
  2165                        L10024:
  2166                        L10022:
  2167                        L10020:
  2168                        ;
  2169                        ;  /* Code d'erreur */
  2170                        ;  return(error);
  2171                        	.line	204
  2172 09:B5C0: A5 09        	lda	<L32+error_1
  2173 09:B5C2: 82 38 FF     	brl	L36
  2174                        ;}
  2175                        	.line	205
  Sat Jul 10 2021  1:15                                                Page 42


  2176                        	.endblock	205
  2177             0000000A   L31	equ	10
  2178             00000009   L32	equ	9
  2179 09:B5C5:              	ends
  2180                        	efunc
  2181                        	.endfunc	205,9,10
  2182                        	.line	205
  2183                        ;
  2184                        ;
  2185                        ;/************************************************
                    ************/
  2186                        ;/*  DecodeSegmentHeaderV0() :  Décode le Header d
                    u Segment. */
  2187                        ;/************************************************
                    ************/
  2188                        ;static int DecodeSegmentHeaderV0(struct omf_file 
                    *current_file, int data_offset, struct omf_segment_header *c
                    urrent_header)
  2189                        ;{
  2190                        	.line	211
  2191                        	.line	212
  2192                        	LOADER
  2193                        	func
  2194                        	.function	212
  2195                        ~~DecodeSegmentHeaderV0:
  2196                        	longa	on
  2197                        	longi	on
  2198 09:B5C5: 3B           	tsc
  2199 09:B5C6: 38           	sec
  2200 09:B5C7: E9 08 00     	sbc	#L41
  2201 09:B5CA: 1B           	tcs
  2202 09:B5CB: 0B           	phd
  2203 09:B5CC: 5B           	tcd
  2204             00000004   current_file_0	set	4
  2205             00000008   data_offset_0	set	8
  2206             0000000A   current_header_0	set	10
  2207                        	.block	212
  2208                        ;  /* Vérifie la taille */
  2209                        ;  if(data_offset + SEGMENT_HEADER_SIZE_V0 > curre
                    nt_file->data_length)
  2210                        	.sym	current_file,4,138,6,32,122
  2211                        	.sym	data_offset,8,5,6,16
  2212                        	.sym	current_header,10,138,6,32,120
  2213                        	.line	214
  2214                        ;    {
  2215 09:B5CD: 18           	clc
  2216 09:B5CE: A9 2E 00     	lda	#$2e
  2217 09:B5D1: 65 10        	adc	<L41+data_offset_0
  2218 09:B5D3: 85 01        	sta	<R0
  2219 09:B5D5: 38           	sec
  2220 09:B5D6: A0 08 00     	ldy	#$8
  2221 09:B5D9: B7 0C        	lda	[<L41+current_file_0],Y
  2222 09:B5DB: E5 01        	sbc	<R0
  2223 09:B5DD: 70 03        	bvs	L44
  2224 09:B5DF: 49 00 80     	eor	#$8000
  2225                        L44:
  2226 09:B5E2: 10 03        	bpl	L45
  2227 09:B5E4: 82 15 00     	brl	L10025
  Sat Jul 10 2021  1:15                                                Page 43


  2228                        L45:
  2229                        	.line	215
  2230                        ;      //printf("  Error : Not enough data to enco
                    de a Segment Header (offset=%d, Segment #%d).\n",data_offset
                    ,current_file->nb_segment+1);
  2231                        ;      return(1);
  2232                        	.line	217
  2233 09:B5E7: A9 01 00     	lda	#$1
  2234                        L46:
  2235 09:B5EA: A8           	tay
  2236 09:B5EB: A5 0A        	lda	<L41+2
  2237 09:B5ED: 85 14        	sta	<L41+2+10
  2238 09:B5EF: A5 09        	lda	<L41+1
  2239 09:B5F1: 85 13        	sta	<L41+1+10
  2240 09:B5F3: 2B           	pld
  2241 09:B5F4: 3B           	tsc
  2242 09:B5F5: 18           	clc
  2243 09:B5F6: 69 12 00     	adc	#L41+10
  2244 09:B5F9: 1B           	tcs
  2245 09:B5FA: 98           	tya
  2246 09:B5FB: 6B           	rtl
  2247                        ;    }
  2248                        	.line	218
  2249                        ;
  2250                        ;  /**********************************************
                    *********/
  2251                        ;  /**  On va décoder tous les éléments fixes du H
                    eader  **/
  2252                        ;  /**********************************************
                    *********/
  2253                        ;  memcpy(&current_header->BlockCnt,&current_file-
                    >data[data_offset+0x00],sizeof(DWORD));     /* Block Count *
                     512 = ByteCount */
  2254                        L10025:
  2255                        	.line	223
  2256 09:B5FC: F4 04 00     	pea	#<$4
  2257 09:B5FF: A0 00 00     	ldy	#$0
  2258 09:B602: A5 10        	lda	<L41+data_offset_0
  2259 09:B604: 10 01        	bpl	L47
  2260 09:B606: 88           	dey
  2261                        L47:
  2262 09:B607: 85 01        	sta	<R0
  2263 09:B609: 84 03        	sty	<R0+2
  2264 09:B60B: 18           	clc
  2265 09:B60C: A0 0A 00     	ldy	#$a
  2266 09:B60F: B7 0C        	lda	[<L41+current_file_0],Y
  2267 09:B611: 65 01        	adc	<R0
  2268 09:B613: 85 05        	sta	<R1
  2269 09:B615: A0 0C 00     	ldy	#$c
  2270 09:B618: B7 0C        	lda	[<L41+current_file_0],Y
  2271 09:B61A: 65 03        	adc	<R0+2
  2272 09:B61C: 85 07        	sta	<R1+2
  2273 09:B61E: D4 07        	pei	<R1+2
  2274 09:B620: D4 05        	pei	<R1
  2275 09:B622: 18           	clc
  2276 09:B623: A9 08 00     	lda	#$8
  2277 09:B626: 65 12        	adc	<L41+current_header_0
  2278 09:B628: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 44


  2279 09:B62A: A9 00 00     	lda	#$0
  2280 09:B62D: 65 14        	adc	<L41+current_header_0+2
  2281 09:B62F: 85 03        	sta	<R0+2
  2282 09:B631: D4 03        	pei	<R0+2
  2283 09:B633: D4 01        	pei	<R0
  2284 09:B635: 22 xx xx xx  	jsl	~~memcpy
  2285                        ;  current_header->ByteCnt = 512*current_header->B
                    lockCnt;
  2286                        	.line	224
  2287 09:B639: A0 0A 00     	ldy	#$a
  2288 09:B63C: B7 12        	lda	[<L41+current_header_0],Y
  2289 09:B63E: 48           	pha
  2290 09:B63F: A0 08 00     	ldy	#$8
  2291 09:B642: B7 12        	lda	[<L41+current_header_0],Y
  2292 09:B644: 48           	pha
  2293 09:B645: A9 09 00     	lda	#$9
  2294                        	xref	~~~lasl
  2295 09:B648: 22 xx xx xx  	jsl	~~~lasl
  2296 09:B64C: 85 01        	sta	<R0
  2297 09:B64E: 86 03        	stx	<R0+2
  2298 09:B650: A5 01        	lda	<R0
  2299 09:B652: A0 0C 00     	ldy	#$c
  2300 09:B655: 97 12        	sta	[<L41+current_header_0],Y
  2301 09:B657: A5 03        	lda	<R0+2
  2302 09:B659: A0 0E 00     	ldy	#$e
  2303 09:B65C: 97 12        	sta	[<L41+current_header_0],Y
  2304                        ;  memcpy(&current_header->ResSpc,&current_file->d
                    ata[data_offset+0x04],sizeof(DWORD));
  2305                        	.line	225
  2306 09:B65E: F4 04 00     	pea	#<$4
  2307 09:B661: 18           	clc
  2308 09:B662: A9 04 00     	lda	#$4
  2309 09:B665: 65 10        	adc	<L41+data_offset_0
  2310 09:B667: 85 01        	sta	<R0
  2311 09:B669: A0 00 00     	ldy	#$0
  2312 09:B66C: A5 01        	lda	<R0
  2313 09:B66E: 10 01        	bpl	L48
  2314 09:B670: 88           	dey
  2315                        L48:
  2316 09:B671: 85 01        	sta	<R0
  2317 09:B673: 84 03        	sty	<R0+2
  2318 09:B675: 18           	clc
  2319 09:B676: A0 0A 00     	ldy	#$a
  2320 09:B679: B7 0C        	lda	[<L41+current_file_0],Y
  2321 09:B67B: 65 01        	adc	<R0
  2322 09:B67D: 85 05        	sta	<R1
  2323 09:B67F: A0 0C 00     	ldy	#$c
  2324 09:B682: B7 0C        	lda	[<L41+current_file_0],Y
  2325 09:B684: 65 03        	adc	<R0+2
  2326 09:B686: 85 07        	sta	<R1+2
  2327 09:B688: D4 07        	pei	<R1+2
  2328 09:B68A: D4 05        	pei	<R1
  2329 09:B68C: 18           	clc
  2330 09:B68D: A9 10 00     	lda	#$10
  2331 09:B690: 65 12        	adc	<L41+current_header_0
  2332 09:B692: 85 01        	sta	<R0
  2333 09:B694: A9 00 00     	lda	#$0
  2334 09:B697: 65 14        	adc	<L41+current_header_0+2
  Sat Jul 10 2021  1:15                                                Page 45


  2335 09:B699: 85 03        	sta	<R0+2
  2336 09:B69B: D4 03        	pei	<R0+2
  2337 09:B69D: D4 01        	pei	<R0
  2338 09:B69F: 22 xx xx xx  	jsl	~~memcpy
  2339                        ;  memcpy(&current_header->Length,&current_file->d
                    ata[data_offset+0x08],sizeof(DWORD));
  2340                        	.line	226
  2341 09:B6A3: F4 04 00     	pea	#<$4
  2342 09:B6A6: 18           	clc
  2343 09:B6A7: A9 08 00     	lda	#$8
  2344 09:B6AA: 65 10        	adc	<L41+data_offset_0
  2345 09:B6AC: 85 01        	sta	<R0
  2346 09:B6AE: A0 00 00     	ldy	#$0
  2347 09:B6B1: A5 01        	lda	<R0
  2348 09:B6B3: 10 01        	bpl	L49
  2349 09:B6B5: 88           	dey
  2350                        L49:
  2351 09:B6B6: 85 01        	sta	<R0
  2352 09:B6B8: 84 03        	sty	<R0+2
  2353 09:B6BA: 18           	clc
  2354 09:B6BB: A0 0A 00     	ldy	#$a
  2355 09:B6BE: B7 0C        	lda	[<L41+current_file_0],Y
  2356 09:B6C0: 65 01        	adc	<R0
  2357 09:B6C2: 85 05        	sta	<R1
  2358 09:B6C4: A0 0C 00     	ldy	#$c
  2359 09:B6C7: B7 0C        	lda	[<L41+current_file_0],Y
  2360 09:B6C9: 65 03        	adc	<R0+2
  2361 09:B6CB: 85 07        	sta	<R1+2
  2362 09:B6CD: D4 07        	pei	<R1+2
  2363 09:B6CF: D4 05        	pei	<R1
  2364 09:B6D1: 18           	clc
  2365 09:B6D2: A9 14 00     	lda	#$14
  2366 09:B6D5: 65 12        	adc	<L41+current_header_0
  2367 09:B6D7: 85 01        	sta	<R0
  2368 09:B6D9: A9 00 00     	lda	#$0
  2369 09:B6DC: 65 14        	adc	<L41+current_header_0+2
  2370 09:B6DE: 85 03        	sta	<R0+2
  2371 09:B6E0: D4 03        	pei	<R0+2
  2372 09:B6E2: D4 01        	pei	<R0
  2373 09:B6E4: 22 xx xx xx  	jsl	~~memcpy
  2374                        ;  memcpy(&current_header->Type,&current_file->dat
                    a[data_offset+0x0C],sizeof(BYTE));
  2375                        	.line	227
  2376 09:B6E8: F4 01 00     	pea	#<$1
  2377 09:B6EB: 18           	clc
  2378 09:B6EC: A9 0C 00     	lda	#$c
  2379 09:B6EF: 65 10        	adc	<L41+data_offset_0
  2380 09:B6F1: 85 01        	sta	<R0
  2381 09:B6F3: A0 00 00     	ldy	#$0
  2382 09:B6F6: A5 01        	lda	<R0
  2383 09:B6F8: 10 01        	bpl	L50
  2384 09:B6FA: 88           	dey
  2385                        L50:
  2386 09:B6FB: 85 01        	sta	<R0
  2387 09:B6FD: 84 03        	sty	<R0+2
  2388 09:B6FF: 18           	clc
  2389 09:B700: A0 0A 00     	ldy	#$a
  2390 09:B703: B7 0C        	lda	[<L41+current_file_0],Y
  Sat Jul 10 2021  1:15                                                Page 46


  2391 09:B705: 65 01        	adc	<R0
  2392 09:B707: 85 05        	sta	<R1
  2393 09:B709: A0 0C 00     	ldy	#$c
  2394 09:B70C: B7 0C        	lda	[<L41+current_file_0],Y
  2395 09:B70E: 65 03        	adc	<R0+2
  2396 09:B710: 85 07        	sta	<R1+2
  2397 09:B712: D4 07        	pei	<R1+2
  2398 09:B714: D4 05        	pei	<R1
  2399 09:B716: 18           	clc
  2400 09:B717: A9 18 00     	lda	#$18
  2401 09:B71A: 65 12        	adc	<L41+current_header_0
  2402 09:B71C: 85 01        	sta	<R0
  2403 09:B71E: A9 00 00     	lda	#$0
  2404 09:B721: 65 14        	adc	<L41+current_header_0+2
  2405 09:B723: 85 03        	sta	<R0+2
  2406 09:B725: D4 03        	pei	<R0+2
  2407 09:B727: D4 01        	pei	<R0
  2408 09:B729: 22 xx xx xx  	jsl	~~memcpy
  2409                        ;  memcpy(&current_header->LabLen,&current_file->d
                    ata[data_offset+0x0D],sizeof(BYTE));
  2410                        	.line	228
  2411 09:B72D: F4 01 00     	pea	#<$1
  2412 09:B730: 18           	clc
  2413 09:B731: A9 0D 00     	lda	#$d
  2414 09:B734: 65 10        	adc	<L41+data_offset_0
  2415 09:B736: 85 01        	sta	<R0
  2416 09:B738: A0 00 00     	ldy	#$0
  2417 09:B73B: A5 01        	lda	<R0
  2418 09:B73D: 10 01        	bpl	L51
  2419 09:B73F: 88           	dey
  2420                        L51:
  2421 09:B740: 85 01        	sta	<R0
  2422 09:B742: 84 03        	sty	<R0+2
  2423 09:B744: 18           	clc
  2424 09:B745: A0 0A 00     	ldy	#$a
  2425 09:B748: B7 0C        	lda	[<L41+current_file_0],Y
  2426 09:B74A: 65 01        	adc	<R0
  2427 09:B74C: 85 05        	sta	<R1
  2428 09:B74E: A0 0C 00     	ldy	#$c
  2429 09:B751: B7 0C        	lda	[<L41+current_file_0],Y
  2430 09:B753: 65 03        	adc	<R0+2
  2431 09:B755: 85 07        	sta	<R1+2
  2432 09:B757: D4 07        	pei	<R1+2
  2433 09:B759: D4 05        	pei	<R1
  2434 09:B75B: 18           	clc
  2435 09:B75C: A9 1A 00     	lda	#$1a
  2436 09:B75F: 65 12        	adc	<L41+current_header_0
  2437 09:B761: 85 01        	sta	<R0
  2438 09:B763: A9 00 00     	lda	#$0
  2439 09:B766: 65 14        	adc	<L41+current_header_0+2
  2440 09:B768: 85 03        	sta	<R0+2
  2441 09:B76A: D4 03        	pei	<R0+2
  2442 09:B76C: D4 01        	pei	<R0
  2443 09:B76E: 22 xx xx xx  	jsl	~~memcpy
  2444                        ;  memcpy(&current_header->NumLen,&current_file->d
                    ata[data_offset+0x0E],sizeof(BYTE));
  2445                        	.line	229
  2446 09:B772: F4 01 00     	pea	#<$1
  Sat Jul 10 2021  1:15                                                Page 47


  2447 09:B775: 18           	clc
  2448 09:B776: A9 0E 00     	lda	#$e
  2449 09:B779: 65 10        	adc	<L41+data_offset_0
  2450 09:B77B: 85 01        	sta	<R0
  2451 09:B77D: A0 00 00     	ldy	#$0
  2452 09:B780: A5 01        	lda	<R0
  2453 09:B782: 10 01        	bpl	L52
  2454 09:B784: 88           	dey
  2455                        L52:
  2456 09:B785: 85 01        	sta	<R0
  2457 09:B787: 84 03        	sty	<R0+2
  2458 09:B789: 18           	clc
  2459 09:B78A: A0 0A 00     	ldy	#$a
  2460 09:B78D: B7 0C        	lda	[<L41+current_file_0],Y
  2461 09:B78F: 65 01        	adc	<R0
  2462 09:B791: 85 05        	sta	<R1
  2463 09:B793: A0 0C 00     	ldy	#$c
  2464 09:B796: B7 0C        	lda	[<L41+current_file_0],Y
  2465 09:B798: 65 03        	adc	<R0+2
  2466 09:B79A: 85 07        	sta	<R1+2
  2467 09:B79C: D4 07        	pei	<R1+2
  2468 09:B79E: D4 05        	pei	<R1
  2469 09:B7A0: 18           	clc
  2470 09:B7A1: A9 1B 00     	lda	#$1b
  2471 09:B7A4: 65 12        	adc	<L41+current_header_0
  2472 09:B7A6: 85 01        	sta	<R0
  2473 09:B7A8: A9 00 00     	lda	#$0
  2474 09:B7AB: 65 14        	adc	<L41+current_header_0+2
  2475 09:B7AD: 85 03        	sta	<R0+2
  2476 09:B7AF: D4 03        	pei	<R0+2
  2477 09:B7B1: D4 01        	pei	<R0
  2478 09:B7B3: 22 xx xx xx  	jsl	~~memcpy
  2479                        ;  /* Version Byte */
  2480                        ;  memcpy(&current_header->BankSize,&current_file-
                    >data[data_offset+0x10],sizeof(DWORD));
  2481                        	.line	231
  2482 09:B7B7: F4 04 00     	pea	#<$4
  2483 09:B7BA: 18           	clc
  2484 09:B7BB: A9 10 00     	lda	#$10
  2485 09:B7BE: 65 10        	adc	<L41+data_offset_0
  2486 09:B7C0: 85 01        	sta	<R0
  2487 09:B7C2: A0 00 00     	ldy	#$0
  2488 09:B7C5: A5 01        	lda	<R0
  2489 09:B7C7: 10 01        	bpl	L53
  2490 09:B7C9: 88           	dey
  2491                        L53:
  2492 09:B7CA: 85 01        	sta	<R0
  2493 09:B7CC: 84 03        	sty	<R0+2
  2494 09:B7CE: 18           	clc
  2495 09:B7CF: A0 0A 00     	ldy	#$a
  2496 09:B7D2: B7 0C        	lda	[<L41+current_file_0],Y
  2497 09:B7D4: 65 01        	adc	<R0
  2498 09:B7D6: 85 05        	sta	<R1
  2499 09:B7D8: A0 0C 00     	ldy	#$c
  2500 09:B7DB: B7 0C        	lda	[<L41+current_file_0],Y
  2501 09:B7DD: 65 03        	adc	<R0+2
  2502 09:B7DF: 85 07        	sta	<R1+2
  2503 09:B7E1: D4 07        	pei	<R1+2
  Sat Jul 10 2021  1:15                                                Page 48


  2504 09:B7E3: D4 05        	pei	<R1
  2505 09:B7E5: 18           	clc
  2506 09:B7E6: A9 1D 00     	lda	#$1d
  2507 09:B7E9: 65 12        	adc	<L41+current_header_0
  2508 09:B7EB: 85 01        	sta	<R0
  2509 09:B7ED: A9 00 00     	lda	#$0
  2510 09:B7F0: 65 14        	adc	<L41+current_header_0+2
  2511 09:B7F2: 85 03        	sta	<R0+2
  2512 09:B7F4: D4 03        	pei	<R0+2
  2513 09:B7F6: D4 01        	pei	<R0
  2514 09:B7F8: 22 xx xx xx  	jsl	~~memcpy
  2515                        ;  memcpy(&current_header->Org,&current_file->data
                    [data_offset+0x14],sizeof(DWORD));
  2516                        	.line	232
  2517 09:B7FC: F4 04 00     	pea	#<$4
  2518 09:B7FF: 18           	clc
  2519 09:B800: A9 14 00     	lda	#$14
  2520 09:B803: 65 10        	adc	<L41+data_offset_0
  2521 09:B805: 85 01        	sta	<R0
  2522 09:B807: A0 00 00     	ldy	#$0
  2523 09:B80A: A5 01        	lda	<R0
  2524 09:B80C: 10 01        	bpl	L54
  2525 09:B80E: 88           	dey
  2526                        L54:
  2527 09:B80F: 85 01        	sta	<R0
  2528 09:B811: 84 03        	sty	<R0+2
  2529 09:B813: 18           	clc
  2530 09:B814: A0 0A 00     	ldy	#$a
  2531 09:B817: B7 0C        	lda	[<L41+current_file_0],Y
  2532 09:B819: 65 01        	adc	<R0
  2533 09:B81B: 85 05        	sta	<R1
  2534 09:B81D: A0 0C 00     	ldy	#$c
  2535 09:B820: B7 0C        	lda	[<L41+current_file_0],Y
  2536 09:B822: 65 03        	adc	<R0+2
  2537 09:B824: 85 07        	sta	<R1+2
  2538 09:B826: D4 07        	pei	<R1+2
  2539 09:B828: D4 05        	pei	<R1
  2540 09:B82A: 18           	clc
  2541 09:B82B: A9 25 00     	lda	#$25
  2542 09:B82E: 65 12        	adc	<L41+current_header_0
  2543 09:B830: 85 01        	sta	<R0
  2544 09:B832: A9 00 00     	lda	#$0
  2545 09:B835: 65 14        	adc	<L41+current_header_0+2
  2546 09:B837: 85 03        	sta	<R0+2
  2547 09:B839: D4 03        	pei	<R0+2
  2548 09:B83B: D4 01        	pei	<R0
  2549 09:B83D: 22 xx xx xx  	jsl	~~memcpy
  2550                        ;  memcpy(&current_header->Align,&current_file->da
                    ta[data_offset+0x18],sizeof(DWORD));
  2551                        	.line	233
  2552 09:B841: F4 04 00     	pea	#<$4
  2553 09:B844: 18           	clc
  2554 09:B845: A9 18 00     	lda	#$18
  2555 09:B848: 65 10        	adc	<L41+data_offset_0
  2556 09:B84A: 85 01        	sta	<R0
  2557 09:B84C: A0 00 00     	ldy	#$0
  2558 09:B84F: A5 01        	lda	<R0
  2559 09:B851: 10 01        	bpl	L55
  Sat Jul 10 2021  1:15                                                Page 49


  2560 09:B853: 88           	dey
  2561                        L55:
  2562 09:B854: 85 01        	sta	<R0
  2563 09:B856: 84 03        	sty	<R0+2
  2564 09:B858: 18           	clc
  2565 09:B859: A0 0A 00     	ldy	#$a
  2566 09:B85C: B7 0C        	lda	[<L41+current_file_0],Y
  2567 09:B85E: 65 01        	adc	<R0
  2568 09:B860: 85 05        	sta	<R1
  2569 09:B862: A0 0C 00     	ldy	#$c
  2570 09:B865: B7 0C        	lda	[<L41+current_file_0],Y
  2571 09:B867: 65 03        	adc	<R0+2
  2572 09:B869: 85 07        	sta	<R1+2
  2573 09:B86B: D4 07        	pei	<R1+2
  2574 09:B86D: D4 05        	pei	<R1
  2575 09:B86F: 18           	clc
  2576 09:B870: A9 29 00     	lda	#$29
  2577 09:B873: 65 12        	adc	<L41+current_header_0
  2578 09:B875: 85 01        	sta	<R0
  2579 09:B877: A9 00 00     	lda	#$0
  2580 09:B87A: 65 14        	adc	<L41+current_header_0+2
  2581 09:B87C: 85 03        	sta	<R0+2
  2582 09:B87E: D4 03        	pei	<R0+2
  2583 09:B880: D4 01        	pei	<R0
  2584 09:B882: 22 xx xx xx  	jsl	~~memcpy
  2585                        ;  memcpy(&current_header->NumSEx,&current_file->d
                    ata[data_offset+0x1C],sizeof(BYTE));
  2586                        	.line	234
  2587 09:B886: F4 01 00     	pea	#<$1
  2588 09:B889: 18           	clc
  2589 09:B88A: A9 1C 00     	lda	#$1c
  2590 09:B88D: 65 10        	adc	<L41+data_offset_0
  2591 09:B88F: 85 01        	sta	<R0
  2592 09:B891: A0 00 00     	ldy	#$0
  2593 09:B894: A5 01        	lda	<R0
  2594 09:B896: 10 01        	bpl	L56
  2595 09:B898: 88           	dey
  2596                        L56:
  2597 09:B899: 85 01        	sta	<R0
  2598 09:B89B: 84 03        	sty	<R0+2
  2599 09:B89D: 18           	clc
  2600 09:B89E: A0 0A 00     	ldy	#$a
  2601 09:B8A1: B7 0C        	lda	[<L41+current_file_0],Y
  2602 09:B8A3: 65 01        	adc	<R0
  2603 09:B8A5: 85 05        	sta	<R1
  2604 09:B8A7: A0 0C 00     	ldy	#$c
  2605 09:B8AA: B7 0C        	lda	[<L41+current_file_0],Y
  2606 09:B8AC: 65 03        	adc	<R0+2
  2607 09:B8AE: 85 07        	sta	<R1+2
  2608 09:B8B0: D4 07        	pei	<R1+2
  2609 09:B8B2: D4 05        	pei	<R1
  2610 09:B8B4: 18           	clc
  2611 09:B8B5: A9 2D 00     	lda	#$2d
  2612 09:B8B8: 65 12        	adc	<L41+current_header_0
  2613 09:B8BA: 85 01        	sta	<R0
  2614 09:B8BC: A9 00 00     	lda	#$0
  2615 09:B8BF: 65 14        	adc	<L41+current_header_0+2
  2616 09:B8C1: 85 03        	sta	<R0+2
  Sat Jul 10 2021  1:15                                                Page 50


  2617 09:B8C3: D4 03        	pei	<R0+2
  2618 09:B8C5: D4 01        	pei	<R0
  2619 09:B8C7: 22 xx xx xx  	jsl	~~memcpy
  2620                        ;  memcpy(&current_header->undefine_1,&current_fil
                    e->data[data_offset+0x1D],sizeof(BYTE));
  2621                        	.line	235
  2622 09:B8CB: F4 01 00     	pea	#<$1
  2623 09:B8CE: 18           	clc
  2624 09:B8CF: A9 1D 00     	lda	#$1d
  2625 09:B8D2: 65 10        	adc	<L41+data_offset_0
  2626 09:B8D4: 85 01        	sta	<R0
  2627 09:B8D6: A0 00 00     	ldy	#$0
  2628 09:B8D9: A5 01        	lda	<R0
  2629 09:B8DB: 10 01        	bpl	L57
  2630 09:B8DD: 88           	dey
  2631                        L57:
  2632 09:B8DE: 85 01        	sta	<R0
  2633 09:B8E0: 84 03        	sty	<R0+2
  2634 09:B8E2: 18           	clc
  2635 09:B8E3: A0 0A 00     	ldy	#$a
  2636 09:B8E6: B7 0C        	lda	[<L41+current_file_0],Y
  2637 09:B8E8: 65 01        	adc	<R0
  2638 09:B8EA: 85 05        	sta	<R1
  2639 09:B8EC: A0 0C 00     	ldy	#$c
  2640 09:B8EF: B7 0C        	lda	[<L41+current_file_0],Y
  2641 09:B8F1: 65 03        	adc	<R0+2
  2642 09:B8F3: 85 07        	sta	<R1+2
  2643 09:B8F5: D4 07        	pei	<R1+2
  2644 09:B8F7: D4 05        	pei	<R1
  2645 09:B8F9: 18           	clc
  2646 09:B8FA: A9 19 00     	lda	#$19
  2647 09:B8FD: 65 12        	adc	<L41+current_header_0
  2648 09:B8FF: 85 01        	sta	<R0
  2649 09:B901: A9 00 00     	lda	#$0
  2650 09:B904: 65 14        	adc	<L41+current_header_0+2
  2651 09:B906: 85 03        	sta	<R0+2
  2652 09:B908: D4 03        	pei	<R0+2
  2653 09:B90A: D4 01        	pei	<R0
  2654 09:B90C: 22 xx xx xx  	jsl	~~memcpy
  2655                        ;  memcpy(&current_header->undefine_2,&current_fil
                    e->data[data_offset+0x1E],sizeof(BYTE));
  2656                        	.line	236
  2657 09:B910: F4 01 00     	pea	#<$1
  2658 09:B913: 18           	clc
  2659 09:B914: A9 1E 00     	lda	#$1e
  2660 09:B917: 65 10        	adc	<L41+data_offset_0
  2661 09:B919: 85 01        	sta	<R0
  2662 09:B91B: A0 00 00     	ldy	#$0
  2663 09:B91E: A5 01        	lda	<R0
  2664 09:B920: 10 01        	bpl	L58
  2665 09:B922: 88           	dey
  2666                        L58:
  2667 09:B923: 85 01        	sta	<R0
  2668 09:B925: 84 03        	sty	<R0+2
  2669 09:B927: 18           	clc
  2670 09:B928: A0 0A 00     	ldy	#$a
  2671 09:B92B: B7 0C        	lda	[<L41+current_file_0],Y
  2672 09:B92D: 65 01        	adc	<R0
  Sat Jul 10 2021  1:15                                                Page 51


  2673 09:B92F: 85 05        	sta	<R1
  2674 09:B931: A0 0C 00     	ldy	#$c
  2675 09:B934: B7 0C        	lda	[<L41+current_file_0],Y
  2676 09:B936: 65 03        	adc	<R0+2
  2677 09:B938: 85 07        	sta	<R1+2
  2678 09:B93A: D4 07        	pei	<R1+2
  2679 09:B93C: D4 05        	pei	<R1
  2680 09:B93E: 18           	clc
  2681 09:B93F: A9 23 00     	lda	#$23
  2682 09:B942: 65 12        	adc	<L41+current_header_0
  2683 09:B944: 85 01        	sta	<R0
  2684 09:B946: A9 00 00     	lda	#$0
  2685 09:B949: 65 14        	adc	<L41+current_header_0+2
  2686 09:B94B: 85 03        	sta	<R0+2
  2687 09:B94D: D4 03        	pei	<R0+2
  2688 09:B94F: D4 01        	pei	<R0
  2689 09:B951: 22 xx xx xx  	jsl	~~memcpy
  2690                        ;  memcpy(&current_header->undefine_3,&current_fil
                    e->data[data_offset+0x1F],sizeof(BYTE));
  2691                        	.line	237
  2692 09:B955: F4 01 00     	pea	#<$1
  2693 09:B958: 18           	clc
  2694 09:B959: A9 1F 00     	lda	#$1f
  2695 09:B95C: 65 10        	adc	<L41+data_offset_0
  2696 09:B95E: 85 01        	sta	<R0
  2697 09:B960: A0 00 00     	ldy	#$0
  2698 09:B963: A5 01        	lda	<R0
  2699 09:B965: 10 01        	bpl	L59
  2700 09:B967: 88           	dey
  2701                        L59:
  2702 09:B968: 85 01        	sta	<R0
  2703 09:B96A: 84 03        	sty	<R0+2
  2704 09:B96C: 18           	clc
  2705 09:B96D: A0 0A 00     	ldy	#$a
  2706 09:B970: B7 0C        	lda	[<L41+current_file_0],Y
  2707 09:B972: 65 01        	adc	<R0
  2708 09:B974: 85 05        	sta	<R1
  2709 09:B976: A0 0C 00     	ldy	#$c
  2710 09:B979: B7 0C        	lda	[<L41+current_file_0],Y
  2711 09:B97B: 65 03        	adc	<R0+2
  2712 09:B97D: 85 07        	sta	<R1+2
  2713 09:B97F: D4 07        	pei	<R1+2
  2714 09:B981: D4 05        	pei	<R1
  2715 09:B983: 18           	clc
  2716 09:B984: A9 24 00     	lda	#$24
  2717 09:B987: 65 12        	adc	<L41+current_header_0
  2718 09:B989: 85 01        	sta	<R0
  2719 09:B98B: A9 00 00     	lda	#$0
  2720 09:B98E: 65 14        	adc	<L41+current_header_0+2
  2721 09:B990: 85 03        	sta	<R0+2
  2722 09:B992: D4 03        	pei	<R0+2
  2723 09:B994: D4 01        	pei	<R0
  2724 09:B996: 22 xx xx xx  	jsl	~~memcpy
  2725                        ;  memcpy(&current_header->undefine_4,&current_fil
                    e->data[data_offset+0x20],sizeof(BYTE));
  2726                        	.line	238
  2727 09:B99A: F4 01 00     	pea	#<$1
  2728 09:B99D: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 52


  2729 09:B99E: A9 20 00     	lda	#$20
  2730 09:B9A1: 65 10        	adc	<L41+data_offset_0
  2731 09:B9A3: 85 01        	sta	<R0
  2732 09:B9A5: A0 00 00     	ldy	#$0
  2733 09:B9A8: A5 01        	lda	<R0
  2734 09:B9AA: 10 01        	bpl	L60
  2735 09:B9AC: 88           	dey
  2736                        L60:
  2737 09:B9AD: 85 01        	sta	<R0
  2738 09:B9AF: 84 03        	sty	<R0+2
  2739 09:B9B1: 18           	clc
  2740 09:B9B2: A0 0A 00     	ldy	#$a
  2741 09:B9B5: B7 0C        	lda	[<L41+current_file_0],Y
  2742 09:B9B7: 65 01        	adc	<R0
  2743 09:B9B9: 85 05        	sta	<R1
  2744 09:B9BB: A0 0C 00     	ldy	#$c
  2745 09:B9BE: B7 0C        	lda	[<L41+current_file_0],Y
  2746 09:B9C0: 65 03        	adc	<R0+2
  2747 09:B9C2: 85 07        	sta	<R1+2
  2748 09:B9C4: D4 07        	pei	<R1+2
  2749 09:B9C6: D4 05        	pei	<R1
  2750 09:B9C8: 18           	clc
  2751 09:B9C9: A9 2F 00     	lda	#$2f
  2752 09:B9CC: 65 12        	adc	<L41+current_header_0
  2753 09:B9CE: 85 01        	sta	<R0
  2754 09:B9D0: A9 00 00     	lda	#$0
  2755 09:B9D3: 65 14        	adc	<L41+current_header_0+2
  2756 09:B9D5: 85 03        	sta	<R0+2
  2757 09:B9D7: D4 03        	pei	<R0+2
  2758 09:B9D9: D4 01        	pei	<R0
  2759 09:B9DB: 22 xx xx xx  	jsl	~~memcpy
  2760                        ;  memcpy(&current_header->undefine_5,&current_fil
                    e->data[data_offset+0x21],sizeof(BYTE));
  2761                        	.line	239
  2762 09:B9DF: F4 01 00     	pea	#<$1
  2763 09:B9E2: 18           	clc
  2764 09:B9E3: A9 21 00     	lda	#$21
  2765 09:B9E6: 65 10        	adc	<L41+data_offset_0
  2766 09:B9E8: 85 01        	sta	<R0
  2767 09:B9EA: A0 00 00     	ldy	#$0
  2768 09:B9ED: A5 01        	lda	<R0
  2769 09:B9EF: 10 01        	bpl	L61
  2770 09:B9F1: 88           	dey
  2771                        L61:
  2772 09:B9F2: 85 01        	sta	<R0
  2773 09:B9F4: 84 03        	sty	<R0+2
  2774 09:B9F6: 18           	clc
  2775 09:B9F7: A0 0A 00     	ldy	#$a
  2776 09:B9FA: B7 0C        	lda	[<L41+current_file_0],Y
  2777 09:B9FC: 65 01        	adc	<R0
  2778 09:B9FE: 85 05        	sta	<R1
  2779 09:BA00: A0 0C 00     	ldy	#$c
  2780 09:BA03: B7 0C        	lda	[<L41+current_file_0],Y
  2781 09:BA05: 65 03        	adc	<R0+2
  2782 09:BA07: 85 07        	sta	<R1+2
  2783 09:BA09: D4 07        	pei	<R1+2
  2784 09:BA0B: D4 05        	pei	<R1
  2785 09:BA0D: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 53


  2786 09:BA0E: A9 3C 0A     	lda	#$a3c
  2787 09:BA11: 65 12        	adc	<L41+current_header_0
  2788 09:BA13: 85 01        	sta	<R0
  2789 09:BA15: A9 00 00     	lda	#$0
  2790 09:BA18: 65 14        	adc	<L41+current_header_0+2
  2791 09:BA1A: 85 03        	sta	<R0+2
  2792 09:BA1C: D4 03        	pei	<R0+2
  2793 09:BA1E: D4 01        	pei	<R0
  2794 09:BA20: 22 xx xx xx  	jsl	~~memcpy
  2795                        ;  memcpy(&current_header->undefine_6,&current_fil
                    e->data[data_offset+0x22],sizeof(BYTE));
  2796                        	.line	240
  2797 09:BA24: F4 01 00     	pea	#<$1
  2798 09:BA27: 18           	clc
  2799 09:BA28: A9 22 00     	lda	#$22
  2800 09:BA2B: 65 10        	adc	<L41+data_offset_0
  2801 09:BA2D: 85 01        	sta	<R0
  2802 09:BA2F: A0 00 00     	ldy	#$0
  2803 09:BA32: A5 01        	lda	<R0
  2804 09:BA34: 10 01        	bpl	L62
  2805 09:BA36: 88           	dey
  2806                        L62:
  2807 09:BA37: 85 01        	sta	<R0
  2808 09:BA39: 84 03        	sty	<R0+2
  2809 09:BA3B: 18           	clc
  2810 09:BA3C: A0 0A 00     	ldy	#$a
  2811 09:BA3F: B7 0C        	lda	[<L41+current_file_0],Y
  2812 09:BA41: 65 01        	adc	<R0
  2813 09:BA43: 85 05        	sta	<R1
  2814 09:BA45: A0 0C 00     	ldy	#$c
  2815 09:BA48: B7 0C        	lda	[<L41+current_file_0],Y
  2816 09:BA4A: 65 03        	adc	<R0+2
  2817 09:BA4C: 85 07        	sta	<R1+2
  2818 09:BA4E: D4 07        	pei	<R1+2
  2819 09:BA50: D4 05        	pei	<R1
  2820 09:BA52: 18           	clc
  2821 09:BA53: A9 3D 0A     	lda	#$a3d
  2822 09:BA56: 65 12        	adc	<L41+current_header_0
  2823 09:BA58: 85 01        	sta	<R0
  2824 09:BA5A: A9 00 00     	lda	#$0
  2825 09:BA5D: 65 14        	adc	<L41+current_header_0+2
  2826 09:BA5F: 85 03        	sta	<R0+2
  2827 09:BA61: D4 03        	pei	<R0+2
  2828 09:BA63: D4 01        	pei	<R0
  2829 09:BA65: 22 xx xx xx  	jsl	~~memcpy
  2830                        ;  memcpy(&current_header->undefine_7,&current_fil
                    e->data[data_offset+0x23],sizeof(BYTE));
  2831                        	.line	241
  2832 09:BA69: F4 01 00     	pea	#<$1
  2833 09:BA6C: 18           	clc
  2834 09:BA6D: A9 23 00     	lda	#$23
  2835 09:BA70: 65 10        	adc	<L41+data_offset_0
  2836 09:BA72: 85 01        	sta	<R0
  2837 09:BA74: A0 00 00     	ldy	#$0
  2838 09:BA77: A5 01        	lda	<R0
  2839 09:BA79: 10 01        	bpl	L63
  2840 09:BA7B: 88           	dey
  2841                        L63:
  Sat Jul 10 2021  1:15                                                Page 54


  2842 09:BA7C: 85 01        	sta	<R0
  2843 09:BA7E: 84 03        	sty	<R0+2
  2844 09:BA80: 18           	clc
  2845 09:BA81: A0 0A 00     	ldy	#$a
  2846 09:BA84: B7 0C        	lda	[<L41+current_file_0],Y
  2847 09:BA86: 65 01        	adc	<R0
  2848 09:BA88: 85 05        	sta	<R1
  2849 09:BA8A: A0 0C 00     	ldy	#$c
  2850 09:BA8D: B7 0C        	lda	[<L41+current_file_0],Y
  2851 09:BA8F: 65 03        	adc	<R0+2
  2852 09:BA91: 85 07        	sta	<R1+2
  2853 09:BA93: D4 07        	pei	<R1+2
  2854 09:BA95: D4 05        	pei	<R1
  2855 09:BA97: 18           	clc
  2856 09:BA98: A9 3E 0A     	lda	#$a3e
  2857 09:BA9B: 65 12        	adc	<L41+current_header_0
  2858 09:BA9D: 85 01        	sta	<R0
  2859 09:BA9F: A9 00 00     	lda	#$0
  2860 09:BAA2: 65 14        	adc	<L41+current_header_0+2
  2861 09:BAA4: 85 03        	sta	<R0+2
  2862 09:BAA6: D4 03        	pei	<R0+2
  2863 09:BAA8: D4 01        	pei	<R0
  2864 09:BAAA: 22 xx xx xx  	jsl	~~memcpy
  2865                        ;
  2866                        ;  /********************************************/
  2867                        ;  /**  On va valider les données récupérées  **/
  2868                        ;  /********************************************/
  2869                        ;  /* Taille du Segment */
  2870                        ;  if((int)(data_offset + current_header->ByteCnt)
                     > (int) current_file->data_length)
  2871                        	.line	247
  2872                        ;    {
  2873 09:BAAE: A0 00 00     	ldy	#$0
  2874 09:BAB1: A5 10        	lda	<L41+data_offset_0
  2875 09:BAB3: 10 01        	bpl	L64
  2876 09:BAB5: 88           	dey
  2877                        L64:
  2878 09:BAB6: 85 01        	sta	<R0
  2879 09:BAB8: 84 03        	sty	<R0+2
  2880 09:BABA: 18           	clc
  2881 09:BABB: A5 01        	lda	<R0
  2882 09:BABD: A0 0C 00     	ldy	#$c
  2883 09:BAC0: 77 12        	adc	[<L41+current_header_0],Y
  2884 09:BAC2: 85 05        	sta	<R1
  2885 09:BAC4: A5 03        	lda	<R0+2
  2886 09:BAC6: A0 0E 00     	ldy	#$e
  2887 09:BAC9: 77 12        	adc	[<L41+current_header_0],Y
  2888 09:BACB: 85 07        	sta	<R1+2
  2889 09:BACD: 38           	sec
  2890 09:BACE: A0 08 00     	ldy	#$8
  2891 09:BAD1: B7 0C        	lda	[<L41+current_file_0],Y
  2892 09:BAD3: E5 05        	sbc	<R1
  2893 09:BAD5: 70 03        	bvs	L65
  2894 09:BAD7: 49 00 80     	eor	#$8000
  2895                        L65:
  2896 09:BADA: 10 03        	bpl	L66
  2897 09:BADC: 82 06 00     	brl	L10026
  2898                        L66:
  Sat Jul 10 2021  1:15                                                Page 55


  2899                        	.line	248
  2900                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'BlockCnt' value (the segment size can't be larger than 
                    the OMF file).\n",current_file->nb_segment+1);
  2901                        ;      return(1);
  2902                        	.line	250
  2903 09:BADF: A9 01 00     	lda	#$1
  2904 09:BAE2: 82 05 FB     	brl	L46
  2905                        ;    }
  2906                        	.line	251
  2907                        ;  if(current_header->ByteCnt < SEGMENT_HEADER_SIZ
                    E_V1)
  2908                        L10026:
  2909                        	.line	252
  2910                        ;    {
  2911 09:BAE5: A0 0C 00     	ldy	#$c
  2912 09:BAE8: B7 12        	lda	[<L41+current_header_0],Y
  2913 09:BAEA: C9 40 00     	cmp	#<$40
  2914 09:BAED: A0 0E 00     	ldy	#$e
  2915 09:BAF0: B7 12        	lda	[<L41+current_header_0],Y
  2916 09:BAF2: E9 00 00     	sbc	#^$40
  2917 09:BAF5: 90 03        	bcc	L67
  2918 09:BAF7: 82 06 00     	brl	L10027
  2919                        L67:
  2920                        	.line	253
  2921                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'BlockCnt' value (the segment size can't be smaller than
                     the Sgement Header size).\n",current_file->nb_segment+1);
  2922                        ;      return(1);
  2923                        	.line	255
  2924 09:BAFA: A9 01 00     	lda	#$1
  2925 09:BAFD: 82 EA FA     	brl	L46
  2926                        ;    }
  2927                        	.line	256
  2928                        ;
  2929                        ;  /* Nombre de 0x00 à ajouter à la fin */
  2930                        ;  if(current_header->ResSpc >= 0x010000)
  2931                        L10027:
  2932                        	.line	259
  2933                        ;    {
  2934 09:BB00: A0 10 00     	ldy	#$10
  2935 09:BB03: B7 12        	lda	[<L41+current_header_0],Y
  2936 09:BB05: C9 00 00     	cmp	#<$10000
  2937 09:BB08: A0 12 00     	ldy	#$12
  2938 09:BB0B: B7 12        	lda	[<L41+current_header_0],Y
  2939 09:BB0D: E9 01 00     	sbc	#^$10000
  2940 09:BB10: B0 03        	bcs	L68
  2941 09:BB12: 82 06 00     	brl	L10028
  2942                        L68:
  2943                        	.line	260
  2944                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'ResSpc' value (the size can't be larger than 64 KB).\n"
                    ,current_file->nb_segment+1);
  2945                        ;      return(1);
  2946                        	.line	262
  2947 09:BB15: A9 01 00     	lda	#$1
  2948 09:BB18: 82 CF FA     	brl	L46
  2949                        ;    }
  Sat Jul 10 2021  1:15                                                Page 56


  2950                        	.line	263
  2951                        ;
  2952                        ;  /* La taille d'un Segment en mémoire ne peut pa
                    s dépasser 64 KB */
  2953                        ;  if(current_header->Length >= 0x010000)
  2954                        L10028:
  2955                        	.line	266
  2956                        ;    //printf("  Segment #%d Header Warning : Weir
                    d 'Length' value (the segment size is usually < 64 KB).\n",c
                    urrent_file->nb_segment+1);
  2957                        ;
  2958                        ;  /* Type */
  2959                        ;  if((current_header->Type & 0x1F) != 0x00 && (cu
                    rrent_header->Type & 0x1F) != 0x01 && (current_header->Type 
                    & 0x1F) != 0x02 &&
  2960 09:BB1B: A0 14 00     	ldy	#$14
  2961 09:BB1E: B7 12        	lda	[<L41+current_header_0],Y
  2962 09:BB20: C9 00 00     	cmp	#<$10000
  2963 09:BB23: A0 16 00     	ldy	#$16
  2964 09:BB26: B7 12        	lda	[<L41+current_header_0],Y
  2965 09:BB28: E9 01 00     	sbc	#^$10000
  2966 09:BB2B: B0 03        	bcs	L69
  2967 09:BB2D: 82 A2 00     	brl	L10029
  2968                        L69:
  2969                        	.line	270
  2970                        ;     (current_header->Type & 0x1F) != 0x04 && (cu
                    rrent_header->Type & 0x1F) != 0x08 && (current_header->Type 
                    & 0x1F) != 0x10 &&
  2971                        ;     (current_header->Type & 0x1F) != 0x11 && (cu
                    rrent_header->Type & 0x1F) != 0x12)
  2972                        ;    {
  2973 09:BB30: E2 20        	sep	#$20
  2974                        	longa	off
  2975 09:BB32: A0 18 00     	ldy	#$18
  2976 09:BB35: B7 12        	lda	[<L41+current_header_0],Y
  2977 09:BB37: 29 1F        	and	#<$1f
  2978 09:BB39: C2 20        	rep	#$20
  2979                        	longa	on
  2980 09:BB3B: D0 03        	bne	L70
  2981 09:BB3D: 82 92 00     	brl	L10030
  2982                        L70:
  2983 09:BB40: A0 18 00     	ldy	#$18
  2984 09:BB43: B7 12        	lda	[<L41+current_header_0],Y
  2985 09:BB45: 29 1F 00     	and	#<$1f
  2986 09:BB48: 85 01        	sta	<R0
  2987 09:BB4A: A5 01        	lda	<R0
  2988 09:BB4C: C9 01 00     	cmp	#<$1
  2989 09:BB4F: D0 03        	bne	L71
  2990 09:BB51: 82 7E 00     	brl	L10030
  2991                        L71:
  2992 09:BB54: A0 18 00     	ldy	#$18
  2993 09:BB57: B7 12        	lda	[<L41+current_header_0],Y
  2994 09:BB59: 29 1F 00     	and	#<$1f
  2995 09:BB5C: 85 01        	sta	<R0
  2996 09:BB5E: A5 01        	lda	<R0
  2997 09:BB60: C9 02 00     	cmp	#<$2
  2998 09:BB63: D0 03        	bne	L72
  2999 09:BB65: 82 6A 00     	brl	L10030
  Sat Jul 10 2021  1:15                                                Page 57


  3000                        L72:
  3001 09:BB68: A0 18 00     	ldy	#$18
  3002 09:BB6B: B7 12        	lda	[<L41+current_header_0],Y
  3003 09:BB6D: 29 1F 00     	and	#<$1f
  3004 09:BB70: 85 01        	sta	<R0
  3005 09:BB72: A5 01        	lda	<R0
  3006 09:BB74: C9 04 00     	cmp	#<$4
  3007 09:BB77: D0 03        	bne	L73
  3008 09:BB79: 82 56 00     	brl	L10030
  3009                        L73:
  3010 09:BB7C: A0 18 00     	ldy	#$18
  3011 09:BB7F: B7 12        	lda	[<L41+current_header_0],Y
  3012 09:BB81: 29 1F 00     	and	#<$1f
  3013 09:BB84: 85 01        	sta	<R0
  3014 09:BB86: A5 01        	lda	<R0
  3015 09:BB88: C9 08 00     	cmp	#<$8
  3016 09:BB8B: D0 03        	bne	L74
  3017 09:BB8D: 82 42 00     	brl	L10030
  3018                        L74:
  3019 09:BB90: A0 18 00     	ldy	#$18
  3020 09:BB93: B7 12        	lda	[<L41+current_header_0],Y
  3021 09:BB95: 29 1F 00     	and	#<$1f
  3022 09:BB98: 85 01        	sta	<R0
  3023 09:BB9A: A5 01        	lda	<R0
  3024 09:BB9C: C9 10 00     	cmp	#<$10
  3025 09:BB9F: D0 03        	bne	L75
  3026 09:BBA1: 82 2E 00     	brl	L10030
  3027                        L75:
  3028 09:BBA4: A0 18 00     	ldy	#$18
  3029 09:BBA7: B7 12        	lda	[<L41+current_header_0],Y
  3030 09:BBA9: 29 1F 00     	and	#<$1f
  3031 09:BBAC: 85 01        	sta	<R0
  3032 09:BBAE: A5 01        	lda	<R0
  3033 09:BBB0: C9 11 00     	cmp	#<$11
  3034 09:BBB3: D0 03        	bne	L76
  3035 09:BBB5: 82 1A 00     	brl	L10030
  3036                        L76:
  3037 09:BBB8: A0 18 00     	ldy	#$18
  3038 09:BBBB: B7 12        	lda	[<L41+current_header_0],Y
  3039 09:BBBD: 29 1F 00     	and	#<$1f
  3040 09:BBC0: 85 01        	sta	<R0
  3041 09:BBC2: A5 01        	lda	<R0
  3042 09:BBC4: C9 12 00     	cmp	#<$12
  3043 09:BBC7: D0 03        	bne	L77
  3044 09:BBC9: 82 06 00     	brl	L10030
  3045                        L77:
  3046                        	.line	273
  3047                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'Type' value (possible values are $0,$1,$2,$4,$8,$10,$11
                     or $12).\n",current_file->nb_segment+1);
  3048                        ;      return(1);
  3049                        	.line	275
  3050 09:BBCC: A9 01 00     	lda	#$1
  3051 09:BBCF: 82 18 FA     	brl	L46
  3052                        ;    }
  3053                        	.line	276
  3054                        ;
  3055                        ;  /* LabLen : 0 ou 10 */
  Sat Jul 10 2021  1:15                                                Page 58


  3056                        ;  if(current_header->LabLen != 0x00 && current_he
                    ader->LabLen != 0x0A)
  3057                        L10030:
  3058                        L10029:
  3059                        	.line	279
  3060                        ;    {
  3061 09:BBD2: A0 1A 00     	ldy	#$1a
  3062 09:BBD5: B7 12        	lda	[<L41+current_header_0],Y
  3063 09:BBD7: 29 FF 00     	and	#$ff
  3064 09:BBDA: D0 03        	bne	L78
  3065 09:BBDC: 82 16 00     	brl	L10031
  3066                        L78:
  3067 09:BBDF: E2 20        	sep	#$20
  3068                        	longa	off
  3069 09:BBE1: A0 1A 00     	ldy	#$1a
  3070 09:BBE4: B7 12        	lda	[<L41+current_header_0],Y
  3071 09:BBE6: C9 0A        	cmp	#<$a
  3072 09:BBE8: C2 20        	rep	#$20
  3073                        	longa	on
  3074 09:BBEA: D0 03        	bne	L79
  3075 09:BBEC: 82 06 00     	brl	L10031
  3076                        L79:
  3077                        	.line	280
  3078                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'LabLen' value (the value should be 0 or 10 for the Appl
                    e IIgs).\n",current_file->nb_segment+1);
  3079                        ;      return(1);
  3080                        	.line	282
  3081 09:BBEF: A9 01 00     	lda	#$1
  3082 09:BBF2: 82 F5 F9     	brl	L46
  3083                        ;    }
  3084                        	.line	283
  3085                        ;
  3086                        ;  /* Num Len : Tjs à 4 pour le IIgs */
  3087                        ;  if(current_header->NumLen != 0x04)
  3088                        L10031:
  3089                        	.line	286
  3090                        ;    {
  3091 09:BBF5: E2 20        	sep	#$20
  3092                        	longa	off
  3093 09:BBF7: A0 1B 00     	ldy	#$1b
  3094 09:BBFA: B7 12        	lda	[<L41+current_header_0],Y
  3095 09:BBFC: C9 04        	cmp	#<$4
  3096 09:BBFE: C2 20        	rep	#$20
  3097                        	longa	on
  3098 09:BC00: D0 03        	bne	L80
  3099 09:BC02: 82 06 00     	brl	L10032
  3100                        L80:
  3101                        	.line	287
  3102                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'NumLen' value (the value should be 4 for the Apple IIgs
                    ).\n",current_file->nb_segment+1);
  3103                        ;      return(1);
  3104                        	.line	289
  3105 09:BC05: A9 01 00     	lda	#$1
  3106 09:BC08: 82 DF F9     	brl	L46
  3107                        ;    }
  3108                        	.line	290
  Sat Jul 10 2021  1:15                                                Page 59


  3109                        ;
  3110                        ;  /* BankSize : <= 64 KB */
  3111                        ;  if(current_header->BankSize > 0x010000)
  3112                        L10032:
  3113                        	.line	293
  3114                        ;    {
  3115 09:BC0B: A9 00 00     	lda	#$0
  3116 09:BC0E: A0 1D 00     	ldy	#$1d
  3117 09:BC11: D7 12        	cmp	[<L41+current_header_0],Y
  3118 09:BC13: A9 01 00     	lda	#$1
  3119 09:BC16: A0 1F 00     	ldy	#$1f
  3120 09:BC19: F7 12        	sbc	[<L41+current_header_0],Y
  3121 09:BC1B: 90 03        	bcc	L81
  3122 09:BC1D: 82 06 00     	brl	L10033
  3123                        L81:
  3124                        	.line	294
  3125                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'BankSize' value (the value can't be larger than 64 KB).
                    \n",current_file->nb_segment+1);
  3126                        ;      return(1);
  3127                        	.line	296
  3128 09:BC20: A9 01 00     	lda	#$1
  3129 09:BC23: 82 C4 F9     	brl	L46
  3130                        ;    }
  3131                        	.line	297
  3132                        ;
  3133                        ;  /* Org : < 64 KB */
  3134                        ;  if(current_header->Org >= 0x010000)
  3135                        L10033:
  3136                        	.line	300
  3137                        ;    //printf("  Segment #%d Header Warning : Unus
                    ual 'Org' value (the value in usually < 64 KB).\n",current_f
                    ile->nb_segment+1);
  3138                        ;
  3139                        ;  /* Align : 0, 0x0100 ou 0x010000 */
  3140                        ;  if(current_header->Align != 0x00 && current_hea
                    der->Align != 0x0100 && current_header->Align != 0x010000)
  3141 09:BC26: A0 25 00     	ldy	#$25
  3142 09:BC29: B7 12        	lda	[<L41+current_header_0],Y
  3143 09:BC2B: C9 00 00     	cmp	#<$10000
  3144 09:BC2E: A0 27 00     	ldy	#$27
  3145 09:BC31: B7 12        	lda	[<L41+current_header_0],Y
  3146 09:BC33: E9 01 00     	sbc	#^$10000
  3147 09:BC36: B0 03        	bcs	L82
  3148 09:BC38: 82 43 00     	brl	L10034
  3149                        L82:
  3150                        	.line	304
  3151                        ;    {
  3152 09:BC3B: A0 29 00     	ldy	#$29
  3153 09:BC3E: B7 12        	lda	[<L41+current_header_0],Y
  3154 09:BC40: A0 2B 00     	ldy	#$2b
  3155 09:BC43: 17 12        	ora	[<L41+current_header_0],Y
  3156 09:BC45: D0 03        	bne	L83
  3157 09:BC47: 82 34 00     	brl	L10035
  3158                        L83:
  3159 09:BC4A: A0 29 00     	ldy	#$29
  3160 09:BC4D: B7 12        	lda	[<L41+current_header_0],Y
  3161 09:BC4F: C9 00 01     	cmp	#<$100
  Sat Jul 10 2021  1:15                                                Page 60


  3162 09:BC52: D0 08        	bne	L84
  3163 09:BC54: A0 2B 00     	ldy	#$2b
  3164 09:BC57: B7 12        	lda	[<L41+current_header_0],Y
  3165 09:BC59: C9 00 00     	cmp	#^$100
  3166                        L84:
  3167 09:BC5C: D0 03        	bne	L85
  3168 09:BC5E: 82 1D 00     	brl	L10035
  3169                        L85:
  3170 09:BC61: A0 29 00     	ldy	#$29
  3171 09:BC64: B7 12        	lda	[<L41+current_header_0],Y
  3172 09:BC66: C9 00 00     	cmp	#<$10000
  3173 09:BC69: D0 08        	bne	L86
  3174 09:BC6B: A0 2B 00     	ldy	#$2b
  3175 09:BC6E: B7 12        	lda	[<L41+current_header_0],Y
  3176 09:BC70: C9 01 00     	cmp	#^$10000
  3177                        L86:
  3178 09:BC73: D0 03        	bne	L87
  3179 09:BC75: 82 06 00     	brl	L10035
  3180                        L87:
  3181                        	.line	305
  3182                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'Align' value (the value should be 0, 256 or 64KB or for
                     the Apple IIgs).\n",current_file->nb_segment+1);
  3183                        ;      return(1);
  3184                        	.line	307
  3185 09:BC78: A9 01 00     	lda	#$1
  3186 09:BC7B: 82 6C F9     	brl	L46
  3187                        ;    }
  3188                        	.line	308
  3189                        ;
  3190                        ;  /* NumSEx : Tjs à 0 */
  3191                        ;  if(current_header->NumSEx != 0x00)
  3192                        L10035:
  3193                        L10034:
  3194                        	.line	311
  3195                        ;    {
  3196 09:BC7E: A0 2D 00     	ldy	#$2d
  3197 09:BC81: B7 12        	lda	[<L41+current_header_0],Y
  3198 09:BC83: 29 FF 00     	and	#$ff
  3199 09:BC86: D0 03        	bne	L88
  3200 09:BC88: 82 06 00     	brl	L10036
  3201                        L88:
  3202                        	.line	312
  3203                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'NumSEx' value (the value should be 0 for the Apple IIgs
                    ).\n",current_file->nb_segment+1);
  3204                        ;      return(1);
  3205                        	.line	314
  3206 09:BC8B: A9 01 00     	lda	#$1
  3207 09:BC8E: 82 59 F9     	brl	L46
  3208                        ;    }
  3209                        	.line	315
  3210                        ;
  3211                        ;  /* Noms */
  3212                        ;  memcpy(current_header->SegName,&current_file->d
                    ata[data_offset+0x24],current_header->LabLen);
  3213                        L10036:
  3214                        	.line	318
  Sat Jul 10 2021  1:15                                                Page 61


  3215 09:BC91: A0 1A 00     	ldy	#$1a
  3216 09:BC94: B7 12        	lda	[<L41+current_header_0],Y
  3217 09:BC96: 29 FF 00     	and	#$ff
  3218 09:BC99: 48           	pha
  3219 09:BC9A: 18           	clc
  3220 09:BC9B: A9 24 00     	lda	#$24
  3221 09:BC9E: 65 10        	adc	<L41+data_offset_0
  3222 09:BCA0: 85 01        	sta	<R0
  3223 09:BCA2: A0 00 00     	ldy	#$0
  3224 09:BCA5: A5 01        	lda	<R0
  3225 09:BCA7: 10 01        	bpl	L89
  3226 09:BCA9: 88           	dey
  3227                        L89:
  3228 09:BCAA: 85 01        	sta	<R0
  3229 09:BCAC: 84 03        	sty	<R0+2
  3230 09:BCAE: 18           	clc
  3231 09:BCAF: A0 0A 00     	ldy	#$a
  3232 09:BCB2: B7 0C        	lda	[<L41+current_file_0],Y
  3233 09:BCB4: 65 01        	adc	<R0
  3234 09:BCB6: 85 05        	sta	<R1
  3235 09:BCB8: A0 0C 00     	ldy	#$c
  3236 09:BCBB: B7 0C        	lda	[<L41+current_file_0],Y
  3237 09:BCBD: 65 03        	adc	<R0+2
  3238 09:BCBF: 85 07        	sta	<R1+2
  3239 09:BCC1: D4 07        	pei	<R1+2
  3240 09:BCC3: D4 05        	pei	<R1
  3241 09:BCC5: 18           	clc
  3242 09:BCC6: A9 3C 09     	lda	#$93c
  3243 09:BCC9: 65 12        	adc	<L41+current_header_0
  3244 09:BCCB: 85 01        	sta	<R0
  3245 09:BCCD: A9 00 00     	lda	#$0
  3246 09:BCD0: 65 14        	adc	<L41+current_header_0+2
  3247 09:BCD2: 85 03        	sta	<R0+2
  3248 09:BCD4: D4 03        	pei	<R0+2
  3249 09:BCD6: D4 01        	pei	<R0
  3250 09:BCD8: 22 xx xx xx  	jsl	~~memcpy
  3251                        ;
  3252                        ;  /* OK */
  3253                        ;  return(0);
  3254                        	.line	321
  3255 09:BCDC: A9 00 00     	lda	#$0
  3256 09:BCDF: 82 08 F9     	brl	L46
  3257                        ;}
  3258                        	.line	322
  3259                        	.endblock	322
  3260             00000008   L41	equ	8
  3261             00000009   L42	equ	9
  3262 09:BCE2:              	ends
  3263                        	efunc
  3264                        	.endfunc	322,9,8
  3265                        	.line	322
  3266                        ;
  3267                        ;
  3268                        ;/************************************************
                    ************/
  3269                        ;/*  DecodeSegmentHeaderV1() :  Décode le Header d
                    u Segment. */
  3270                        ;/************************************************
  Sat Jul 10 2021  1:15                                                Page 62


                    ************/
  3271                        ;static int DecodeSegmentHeaderV1(struct omf_file 
                    *current_file, int data_offset, struct omf_segment_header *c
                    urrent_header)
  3272                        ;{
  3273                        	.line	328
  3274                        	.line	329
  3275                        	LOADER
  3276                        	func
  3277                        	.function	329
  3278                        ~~DecodeSegmentHeaderV1:
  3279                        	longa	on
  3280                        	longi	on
  3281 09:BCE2: 3B           	tsc
  3282 09:BCE3: 38           	sec
  3283 09:BCE4: E9 0A 00     	sbc	#L90
  3284 09:BCE7: 1B           	tcs
  3285 09:BCE8: 0B           	phd
  3286 09:BCE9: 5B           	tcd
  3287             00000004   current_file_0	set	4
  3288             00000008   data_offset_0	set	8
  3289             0000000A   current_header_0	set	10
  3290                        	.block	329
  3291                        ;  int length;
  3292                        ;
  3293                        ;  /* Vérifie la taille */
  3294                        ;  if(data_offset + SEGMENT_HEADER_SIZE_V1 > curre
                    nt_file->data_length)
  3295             00000000   length_1	set	0
  3296                        	.sym	length,0,5,1,16
  3297                        	.sym	current_file,4,138,6,32,122
  3298                        	.sym	data_offset,8,5,6,16
  3299                        	.sym	current_header,10,138,6,32,120
  3300                        	.line	333
  3301                        ;    {
  3302 09:BCEA: 18           	clc
  3303 09:BCEB: A9 40 00     	lda	#$40
  3304 09:BCEE: 65 12        	adc	<L90+data_offset_0
  3305 09:BCF0: 85 01        	sta	<R0
  3306 09:BCF2: 38           	sec
  3307 09:BCF3: A0 08 00     	ldy	#$8
  3308 09:BCF6: B7 0E        	lda	[<L90+current_file_0],Y
  3309 09:BCF8: E5 01        	sbc	<R0
  3310 09:BCFA: 70 03        	bvs	L93
  3311 09:BCFC: 49 00 80     	eor	#$8000
  3312                        L93:
  3313 09:BCFF: 10 03        	bpl	L94
  3314 09:BD01: 82 15 00     	brl	L10037
  3315                        L94:
  3316                        	.line	334
  3317                        ;      //printf("  Error : Not enough data to enco
                    de a Segment Header (offset=%d, Segment #%d).\n",data_offset
                    ,current_file->nb_segment+1);
  3318                        ;      return(1);
  3319                        	.line	336
  3320 09:BD04: A9 01 00     	lda	#$1
  3321                        L95:
  3322 09:BD07: A8           	tay
  Sat Jul 10 2021  1:15                                                Page 63


  3323 09:BD08: A5 0C        	lda	<L90+2
  3324 09:BD0A: 85 16        	sta	<L90+2+10
  3325 09:BD0C: A5 0B        	lda	<L90+1
  3326 09:BD0E: 85 15        	sta	<L90+1+10
  3327 09:BD10: 2B           	pld
  3328 09:BD11: 3B           	tsc
  3329 09:BD12: 18           	clc
  3330 09:BD13: 69 14 00     	adc	#L90+10
  3331 09:BD16: 1B           	tcs
  3332 09:BD17: 98           	tya
  3333 09:BD18: 6B           	rtl
  3334                        ;    }
  3335                        	.line	337
  3336                        ;
  3337                        ;  /**********************************************
                    *********/
  3338                        ;  /**  On va décoder tous les éléments fixes du H
                    eader  **/
  3339                        ;  /**********************************************
                    *********/
  3340                        ;  memcpy(&current_header->BlockCnt,&current_file-
                    >data[data_offset+0x00],sizeof(DWORD));     /* Block Count *
                     512 = ByteCount */
  3341                        L10037:
  3342                        	.line	342
  3343 09:BD19: F4 04 00     	pea	#<$4
  3344 09:BD1C: A0 00 00     	ldy	#$0
  3345 09:BD1F: A5 12        	lda	<L90+data_offset_0
  3346 09:BD21: 10 01        	bpl	L96
  3347 09:BD23: 88           	dey
  3348                        L96:
  3349 09:BD24: 85 01        	sta	<R0
  3350 09:BD26: 84 03        	sty	<R0+2
  3351 09:BD28: 18           	clc
  3352 09:BD29: A0 0A 00     	ldy	#$a
  3353 09:BD2C: B7 0E        	lda	[<L90+current_file_0],Y
  3354 09:BD2E: 65 01        	adc	<R0
  3355 09:BD30: 85 05        	sta	<R1
  3356 09:BD32: A0 0C 00     	ldy	#$c
  3357 09:BD35: B7 0E        	lda	[<L90+current_file_0],Y
  3358 09:BD37: 65 03        	adc	<R0+2
  3359 09:BD39: 85 07        	sta	<R1+2
  3360 09:BD3B: D4 07        	pei	<R1+2
  3361 09:BD3D: D4 05        	pei	<R1
  3362 09:BD3F: 18           	clc
  3363 09:BD40: A9 08 00     	lda	#$8
  3364 09:BD43: 65 14        	adc	<L90+current_header_0
  3365 09:BD45: 85 01        	sta	<R0
  3366 09:BD47: A9 00 00     	lda	#$0
  3367 09:BD4A: 65 16        	adc	<L90+current_header_0+2
  3368 09:BD4C: 85 03        	sta	<R0+2
  3369 09:BD4E: D4 03        	pei	<R0+2
  3370 09:BD50: D4 01        	pei	<R0
  3371 09:BD52: 22 xx xx xx  	jsl	~~memcpy
  3372                        ;  current_header->ByteCnt = 512*current_header->B
                    lockCnt;
  3373                        	.line	343
  3374 09:BD56: A0 0A 00     	ldy	#$a
  Sat Jul 10 2021  1:15                                                Page 64


  3375 09:BD59: B7 14        	lda	[<L90+current_header_0],Y
  3376 09:BD5B: 48           	pha
  3377 09:BD5C: A0 08 00     	ldy	#$8
  3378 09:BD5F: B7 14        	lda	[<L90+current_header_0],Y
  3379 09:BD61: 48           	pha
  3380 09:BD62: A9 09 00     	lda	#$9
  3381                        	xref	~~~lasl
  3382 09:BD65: 22 xx xx xx  	jsl	~~~lasl
  3383 09:BD69: 85 01        	sta	<R0
  3384 09:BD6B: 86 03        	stx	<R0+2
  3385 09:BD6D: A5 01        	lda	<R0
  3386 09:BD6F: A0 0C 00     	ldy	#$c
  3387 09:BD72: 97 14        	sta	[<L90+current_header_0],Y
  3388 09:BD74: A5 03        	lda	<R0+2
  3389 09:BD76: A0 0E 00     	ldy	#$e
  3390 09:BD79: 97 14        	sta	[<L90+current_header_0],Y
  3391                        ;  memcpy(&current_header->ResSpc,&current_file->d
                    ata[data_offset+0x04],sizeof(DWORD));
  3392                        	.line	344
  3393 09:BD7B: F4 04 00     	pea	#<$4
  3394 09:BD7E: 18           	clc
  3395 09:BD7F: A9 04 00     	lda	#$4
  3396 09:BD82: 65 12        	adc	<L90+data_offset_0
  3397 09:BD84: 85 01        	sta	<R0
  3398 09:BD86: A0 00 00     	ldy	#$0
  3399 09:BD89: A5 01        	lda	<R0
  3400 09:BD8B: 10 01        	bpl	L97
  3401 09:BD8D: 88           	dey
  3402                        L97:
  3403 09:BD8E: 85 01        	sta	<R0
  3404 09:BD90: 84 03        	sty	<R0+2
  3405 09:BD92: 18           	clc
  3406 09:BD93: A0 0A 00     	ldy	#$a
  3407 09:BD96: B7 0E        	lda	[<L90+current_file_0],Y
  3408 09:BD98: 65 01        	adc	<R0
  3409 09:BD9A: 85 05        	sta	<R1
  3410 09:BD9C: A0 0C 00     	ldy	#$c
  3411 09:BD9F: B7 0E        	lda	[<L90+current_file_0],Y
  3412 09:BDA1: 65 03        	adc	<R0+2
  3413 09:BDA3: 85 07        	sta	<R1+2
  3414 09:BDA5: D4 07        	pei	<R1+2
  3415 09:BDA7: D4 05        	pei	<R1
  3416 09:BDA9: 18           	clc
  3417 09:BDAA: A9 10 00     	lda	#$10
  3418 09:BDAD: 65 14        	adc	<L90+current_header_0
  3419 09:BDAF: 85 01        	sta	<R0
  3420 09:BDB1: A9 00 00     	lda	#$0
  3421 09:BDB4: 65 16        	adc	<L90+current_header_0+2
  3422 09:BDB6: 85 03        	sta	<R0+2
  3423 09:BDB8: D4 03        	pei	<R0+2
  3424 09:BDBA: D4 01        	pei	<R0
  3425 09:BDBC: 22 xx xx xx  	jsl	~~memcpy
  3426                        ;  memcpy(&current_header->Length,&current_file->d
                    ata[data_offset+0x08],sizeof(DWORD));
  3427                        	.line	345
  3428 09:BDC0: F4 04 00     	pea	#<$4
  3429 09:BDC3: 18           	clc
  3430 09:BDC4: A9 08 00     	lda	#$8
  Sat Jul 10 2021  1:15                                                Page 65


  3431 09:BDC7: 65 12        	adc	<L90+data_offset_0
  3432 09:BDC9: 85 01        	sta	<R0
  3433 09:BDCB: A0 00 00     	ldy	#$0
  3434 09:BDCE: A5 01        	lda	<R0
  3435 09:BDD0: 10 01        	bpl	L98
  3436 09:BDD2: 88           	dey
  3437                        L98:
  3438 09:BDD3: 85 01        	sta	<R0
  3439 09:BDD5: 84 03        	sty	<R0+2
  3440 09:BDD7: 18           	clc
  3441 09:BDD8: A0 0A 00     	ldy	#$a
  3442 09:BDDB: B7 0E        	lda	[<L90+current_file_0],Y
  3443 09:BDDD: 65 01        	adc	<R0
  3444 09:BDDF: 85 05        	sta	<R1
  3445 09:BDE1: A0 0C 00     	ldy	#$c
  3446 09:BDE4: B7 0E        	lda	[<L90+current_file_0],Y
  3447 09:BDE6: 65 03        	adc	<R0+2
  3448 09:BDE8: 85 07        	sta	<R1+2
  3449 09:BDEA: D4 07        	pei	<R1+2
  3450 09:BDEC: D4 05        	pei	<R1
  3451 09:BDEE: 18           	clc
  3452 09:BDEF: A9 14 00     	lda	#$14
  3453 09:BDF2: 65 14        	adc	<L90+current_header_0
  3454 09:BDF4: 85 01        	sta	<R0
  3455 09:BDF6: A9 00 00     	lda	#$0
  3456 09:BDF9: 65 16        	adc	<L90+current_header_0+2
  3457 09:BDFB: 85 03        	sta	<R0+2
  3458 09:BDFD: D4 03        	pei	<R0+2
  3459 09:BDFF: D4 01        	pei	<R0
  3460 09:BE01: 22 xx xx xx  	jsl	~~memcpy
  3461                        ;  memcpy(&current_header->Type,&current_file->dat
                    a[data_offset+0x0C],sizeof(BYTE));
  3462                        	.line	346
  3463 09:BE05: F4 01 00     	pea	#<$1
  3464 09:BE08: 18           	clc
  3465 09:BE09: A9 0C 00     	lda	#$c
  3466 09:BE0C: 65 12        	adc	<L90+data_offset_0
  3467 09:BE0E: 85 01        	sta	<R0
  3468 09:BE10: A0 00 00     	ldy	#$0
  3469 09:BE13: A5 01        	lda	<R0
  3470 09:BE15: 10 01        	bpl	L99
  3471 09:BE17: 88           	dey
  3472                        L99:
  3473 09:BE18: 85 01        	sta	<R0
  3474 09:BE1A: 84 03        	sty	<R0+2
  3475 09:BE1C: 18           	clc
  3476 09:BE1D: A0 0A 00     	ldy	#$a
  3477 09:BE20: B7 0E        	lda	[<L90+current_file_0],Y
  3478 09:BE22: 65 01        	adc	<R0
  3479 09:BE24: 85 05        	sta	<R1
  3480 09:BE26: A0 0C 00     	ldy	#$c
  3481 09:BE29: B7 0E        	lda	[<L90+current_file_0],Y
  3482 09:BE2B: 65 03        	adc	<R0+2
  3483 09:BE2D: 85 07        	sta	<R1+2
  3484 09:BE2F: D4 07        	pei	<R1+2
  3485 09:BE31: D4 05        	pei	<R1
  3486 09:BE33: 18           	clc
  3487 09:BE34: A9 18 00     	lda	#$18
  Sat Jul 10 2021  1:15                                                Page 66


  3488 09:BE37: 65 14        	adc	<L90+current_header_0
  3489 09:BE39: 85 01        	sta	<R0
  3490 09:BE3B: A9 00 00     	lda	#$0
  3491 09:BE3E: 65 16        	adc	<L90+current_header_0+2
  3492 09:BE40: 85 03        	sta	<R0+2
  3493 09:BE42: D4 03        	pei	<R0+2
  3494 09:BE44: D4 01        	pei	<R0
  3495 09:BE46: 22 xx xx xx  	jsl	~~memcpy
  3496                        ;  memcpy(&current_header->LabLen,&current_file->d
                    ata[data_offset+0x0D],sizeof(BYTE));
  3497                        	.line	347
  3498 09:BE4A: F4 01 00     	pea	#<$1
  3499 09:BE4D: 18           	clc
  3500 09:BE4E: A9 0D 00     	lda	#$d
  3501 09:BE51: 65 12        	adc	<L90+data_offset_0
  3502 09:BE53: 85 01        	sta	<R0
  3503 09:BE55: A0 00 00     	ldy	#$0
  3504 09:BE58: A5 01        	lda	<R0
  3505 09:BE5A: 10 01        	bpl	L100
  3506 09:BE5C: 88           	dey
  3507                        L100:
  3508 09:BE5D: 85 01        	sta	<R0
  3509 09:BE5F: 84 03        	sty	<R0+2
  3510 09:BE61: 18           	clc
  3511 09:BE62: A0 0A 00     	ldy	#$a
  3512 09:BE65: B7 0E        	lda	[<L90+current_file_0],Y
  3513 09:BE67: 65 01        	adc	<R0
  3514 09:BE69: 85 05        	sta	<R1
  3515 09:BE6B: A0 0C 00     	ldy	#$c
  3516 09:BE6E: B7 0E        	lda	[<L90+current_file_0],Y
  3517 09:BE70: 65 03        	adc	<R0+2
  3518 09:BE72: 85 07        	sta	<R1+2
  3519 09:BE74: D4 07        	pei	<R1+2
  3520 09:BE76: D4 05        	pei	<R1
  3521 09:BE78: 18           	clc
  3522 09:BE79: A9 1A 00     	lda	#$1a
  3523 09:BE7C: 65 14        	adc	<L90+current_header_0
  3524 09:BE7E: 85 01        	sta	<R0
  3525 09:BE80: A9 00 00     	lda	#$0
  3526 09:BE83: 65 16        	adc	<L90+current_header_0+2
  3527 09:BE85: 85 03        	sta	<R0+2
  3528 09:BE87: D4 03        	pei	<R0+2
  3529 09:BE89: D4 01        	pei	<R0
  3530 09:BE8B: 22 xx xx xx  	jsl	~~memcpy
  3531                        ;  memcpy(&current_header->NumLen,&current_file->d
                    ata[data_offset+0x0E],sizeof(BYTE));
  3532                        	.line	348
  3533 09:BE8F: F4 01 00     	pea	#<$1
  3534 09:BE92: 18           	clc
  3535 09:BE93: A9 0E 00     	lda	#$e
  3536 09:BE96: 65 12        	adc	<L90+data_offset_0
  3537 09:BE98: 85 01        	sta	<R0
  3538 09:BE9A: A0 00 00     	ldy	#$0
  3539 09:BE9D: A5 01        	lda	<R0
  3540 09:BE9F: 10 01        	bpl	L101
  3541 09:BEA1: 88           	dey
  3542                        L101:
  3543 09:BEA2: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 67


  3544 09:BEA4: 84 03        	sty	<R0+2
  3545 09:BEA6: 18           	clc
  3546 09:BEA7: A0 0A 00     	ldy	#$a
  3547 09:BEAA: B7 0E        	lda	[<L90+current_file_0],Y
  3548 09:BEAC: 65 01        	adc	<R0
  3549 09:BEAE: 85 05        	sta	<R1
  3550 09:BEB0: A0 0C 00     	ldy	#$c
  3551 09:BEB3: B7 0E        	lda	[<L90+current_file_0],Y
  3552 09:BEB5: 65 03        	adc	<R0+2
  3553 09:BEB7: 85 07        	sta	<R1+2
  3554 09:BEB9: D4 07        	pei	<R1+2
  3555 09:BEBB: D4 05        	pei	<R1
  3556 09:BEBD: 18           	clc
  3557 09:BEBE: A9 1B 00     	lda	#$1b
  3558 09:BEC1: 65 14        	adc	<L90+current_header_0
  3559 09:BEC3: 85 01        	sta	<R0
  3560 09:BEC5: A9 00 00     	lda	#$0
  3561 09:BEC8: 65 16        	adc	<L90+current_header_0+2
  3562 09:BECA: 85 03        	sta	<R0+2
  3563 09:BECC: D4 03        	pei	<R0+2
  3564 09:BECE: D4 01        	pei	<R0
  3565 09:BED0: 22 xx xx xx  	jsl	~~memcpy
  3566                        ;  /* Version Byte */
  3567                        ;  memcpy(&current_header->BankSize,&current_file-
                    >data[data_offset+0x10],sizeof(DWORD));
  3568                        	.line	350
  3569 09:BED4: F4 04 00     	pea	#<$4
  3570 09:BED7: 18           	clc
  3571 09:BED8: A9 10 00     	lda	#$10
  3572 09:BEDB: 65 12        	adc	<L90+data_offset_0
  3573 09:BEDD: 85 01        	sta	<R0
  3574 09:BEDF: A0 00 00     	ldy	#$0
  3575 09:BEE2: A5 01        	lda	<R0
  3576 09:BEE4: 10 01        	bpl	L102
  3577 09:BEE6: 88           	dey
  3578                        L102:
  3579 09:BEE7: 85 01        	sta	<R0
  3580 09:BEE9: 84 03        	sty	<R0+2
  3581 09:BEEB: 18           	clc
  3582 09:BEEC: A0 0A 00     	ldy	#$a
  3583 09:BEEF: B7 0E        	lda	[<L90+current_file_0],Y
  3584 09:BEF1: 65 01        	adc	<R0
  3585 09:BEF3: 85 05        	sta	<R1
  3586 09:BEF5: A0 0C 00     	ldy	#$c
  3587 09:BEF8: B7 0E        	lda	[<L90+current_file_0],Y
  3588 09:BEFA: 65 03        	adc	<R0+2
  3589 09:BEFC: 85 07        	sta	<R1+2
  3590 09:BEFE: D4 07        	pei	<R1+2
  3591 09:BF00: D4 05        	pei	<R1
  3592 09:BF02: 18           	clc
  3593 09:BF03: A9 1D 00     	lda	#$1d
  3594 09:BF06: 65 14        	adc	<L90+current_header_0
  3595 09:BF08: 85 01        	sta	<R0
  3596 09:BF0A: A9 00 00     	lda	#$0
  3597 09:BF0D: 65 16        	adc	<L90+current_header_0+2
  3598 09:BF0F: 85 03        	sta	<R0+2
  3599 09:BF11: D4 03        	pei	<R0+2
  3600 09:BF13: D4 01        	pei	<R0
  Sat Jul 10 2021  1:15                                                Page 68


  3601 09:BF15: 22 xx xx xx  	jsl	~~memcpy
  3602                        ;  memcpy(&current_header->undefine_1,&current_fil
                    e->data[data_offset+0x14],sizeof(BYTE));
  3603                        	.line	351
  3604 09:BF19: F4 01 00     	pea	#<$1
  3605 09:BF1C: 18           	clc
  3606 09:BF1D: A9 14 00     	lda	#$14
  3607 09:BF20: 65 12        	adc	<L90+data_offset_0
  3608 09:BF22: 85 01        	sta	<R0
  3609 09:BF24: A0 00 00     	ldy	#$0
  3610 09:BF27: A5 01        	lda	<R0
  3611 09:BF29: 10 01        	bpl	L103
  3612 09:BF2B: 88           	dey
  3613                        L103:
  3614 09:BF2C: 85 01        	sta	<R0
  3615 09:BF2E: 84 03        	sty	<R0+2
  3616 09:BF30: 18           	clc
  3617 09:BF31: A0 0A 00     	ldy	#$a
  3618 09:BF34: B7 0E        	lda	[<L90+current_file_0],Y
  3619 09:BF36: 65 01        	adc	<R0
  3620 09:BF38: 85 05        	sta	<R1
  3621 09:BF3A: A0 0C 00     	ldy	#$c
  3622 09:BF3D: B7 0E        	lda	[<L90+current_file_0],Y
  3623 09:BF3F: 65 03        	adc	<R0+2
  3624 09:BF41: 85 07        	sta	<R1+2
  3625 09:BF43: D4 07        	pei	<R1+2
  3626 09:BF45: D4 05        	pei	<R1
  3627 09:BF47: 18           	clc
  3628 09:BF48: A9 19 00     	lda	#$19
  3629 09:BF4B: 65 14        	adc	<L90+current_header_0
  3630 09:BF4D: 85 01        	sta	<R0
  3631 09:BF4F: A9 00 00     	lda	#$0
  3632 09:BF52: 65 16        	adc	<L90+current_header_0+2
  3633 09:BF54: 85 03        	sta	<R0+2
  3634 09:BF56: D4 03        	pei	<R0+2
  3635 09:BF58: D4 01        	pei	<R0
  3636 09:BF5A: 22 xx xx xx  	jsl	~~memcpy
  3637                        ;  memcpy(&current_header->undefine_2,&current_fil
                    e->data[data_offset+0x15],sizeof(BYTE));
  3638                        	.line	352
  3639 09:BF5E: F4 01 00     	pea	#<$1
  3640 09:BF61: 18           	clc
  3641 09:BF62: A9 15 00     	lda	#$15
  3642 09:BF65: 65 12        	adc	<L90+data_offset_0
  3643 09:BF67: 85 01        	sta	<R0
  3644 09:BF69: A0 00 00     	ldy	#$0
  3645 09:BF6C: A5 01        	lda	<R0
  3646 09:BF6E: 10 01        	bpl	L104
  3647 09:BF70: 88           	dey
  3648                        L104:
  3649 09:BF71: 85 01        	sta	<R0
  3650 09:BF73: 84 03        	sty	<R0+2
  3651 09:BF75: 18           	clc
  3652 09:BF76: A0 0A 00     	ldy	#$a
  3653 09:BF79: B7 0E        	lda	[<L90+current_file_0],Y
  3654 09:BF7B: 65 01        	adc	<R0
  3655 09:BF7D: 85 05        	sta	<R1
  3656 09:BF7F: A0 0C 00     	ldy	#$c
  Sat Jul 10 2021  1:15                                                Page 69


  3657 09:BF82: B7 0E        	lda	[<L90+current_file_0],Y
  3658 09:BF84: 65 03        	adc	<R0+2
  3659 09:BF86: 85 07        	sta	<R1+2
  3660 09:BF88: D4 07        	pei	<R1+2
  3661 09:BF8A: D4 05        	pei	<R1
  3662 09:BF8C: 18           	clc
  3663 09:BF8D: A9 23 00     	lda	#$23
  3664 09:BF90: 65 14        	adc	<L90+current_header_0
  3665 09:BF92: 85 01        	sta	<R0
  3666 09:BF94: A9 00 00     	lda	#$0
  3667 09:BF97: 65 16        	adc	<L90+current_header_0+2
  3668 09:BF99: 85 03        	sta	<R0+2
  3669 09:BF9B: D4 03        	pei	<R0+2
  3670 09:BF9D: D4 01        	pei	<R0
  3671 09:BF9F: 22 xx xx xx  	jsl	~~memcpy
  3672                        ;  memcpy(&current_header->undefine_3,&current_fil
                    e->data[data_offset+0x16],sizeof(BYTE));
  3673                        	.line	353
  3674 09:BFA3: F4 01 00     	pea	#<$1
  3675 09:BFA6: 18           	clc
  3676 09:BFA7: A9 16 00     	lda	#$16
  3677 09:BFAA: 65 12        	adc	<L90+data_offset_0
  3678 09:BFAC: 85 01        	sta	<R0
  3679 09:BFAE: A0 00 00     	ldy	#$0
  3680 09:BFB1: A5 01        	lda	<R0
  3681 09:BFB3: 10 01        	bpl	L105
  3682 09:BFB5: 88           	dey
  3683                        L105:
  3684 09:BFB6: 85 01        	sta	<R0
  3685 09:BFB8: 84 03        	sty	<R0+2
  3686 09:BFBA: 18           	clc
  3687 09:BFBB: A0 0A 00     	ldy	#$a
  3688 09:BFBE: B7 0E        	lda	[<L90+current_file_0],Y
  3689 09:BFC0: 65 01        	adc	<R0
  3690 09:BFC2: 85 05        	sta	<R1
  3691 09:BFC4: A0 0C 00     	ldy	#$c
  3692 09:BFC7: B7 0E        	lda	[<L90+current_file_0],Y
  3693 09:BFC9: 65 03        	adc	<R0+2
  3694 09:BFCB: 85 07        	sta	<R1+2
  3695 09:BFCD: D4 07        	pei	<R1+2
  3696 09:BFCF: D4 05        	pei	<R1
  3697 09:BFD1: 18           	clc
  3698 09:BFD2: A9 24 00     	lda	#$24
  3699 09:BFD5: 65 14        	adc	<L90+current_header_0
  3700 09:BFD7: 85 01        	sta	<R0
  3701 09:BFD9: A9 00 00     	lda	#$0
  3702 09:BFDC: 65 16        	adc	<L90+current_header_0+2
  3703 09:BFDE: 85 03        	sta	<R0+2
  3704 09:BFE0: D4 03        	pei	<R0+2
  3705 09:BFE2: D4 01        	pei	<R0
  3706 09:BFE4: 22 xx xx xx  	jsl	~~memcpy
  3707                        ;  memcpy(&current_header->undefine_4,&current_fil
                    e->data[data_offset+0x17],sizeof(BYTE));
  3708                        	.line	354
  3709 09:BFE8: F4 01 00     	pea	#<$1
  3710 09:BFEB: 18           	clc
  3711 09:BFEC: A9 17 00     	lda	#$17
  3712 09:BFEF: 65 12        	adc	<L90+data_offset_0
  Sat Jul 10 2021  1:15                                                Page 70


  3713 09:BFF1: 85 01        	sta	<R0
  3714 09:BFF3: A0 00 00     	ldy	#$0
  3715 09:BFF6: A5 01        	lda	<R0
  3716 09:BFF8: 10 01        	bpl	L106
  3717 09:BFFA: 88           	dey
  3718                        L106:
  3719 09:BFFB: 85 01        	sta	<R0
  3720 09:BFFD: 84 03        	sty	<R0+2
  3721 09:BFFF: 18           	clc
  3722 09:C000: A0 0A 00     	ldy	#$a
  3723 09:C003: B7 0E        	lda	[<L90+current_file_0],Y
  3724 09:C005: 65 01        	adc	<R0
  3725 09:C007: 85 05        	sta	<R1
  3726 09:C009: A0 0C 00     	ldy	#$c
  3727 09:C00C: B7 0E        	lda	[<L90+current_file_0],Y
  3728 09:C00E: 65 03        	adc	<R0+2
  3729 09:C010: 85 07        	sta	<R1+2
  3730 09:C012: D4 07        	pei	<R1+2
  3731 09:C014: D4 05        	pei	<R1
  3732 09:C016: 18           	clc
  3733 09:C017: A9 2F 00     	lda	#$2f
  3734 09:C01A: 65 14        	adc	<L90+current_header_0
  3735 09:C01C: 85 01        	sta	<R0
  3736 09:C01E: A9 00 00     	lda	#$0
  3737 09:C021: 65 16        	adc	<L90+current_header_0+2
  3738 09:C023: 85 03        	sta	<R0+2
  3739 09:C025: D4 03        	pei	<R0+2
  3740 09:C027: D4 01        	pei	<R0
  3741 09:C029: 22 xx xx xx  	jsl	~~memcpy
  3742                        ;  memcpy(&current_header->Org,&current_file->data
                    [data_offset+0x18],sizeof(DWORD));
  3743                        	.line	355
  3744 09:C02D: F4 04 00     	pea	#<$4
  3745 09:C030: 18           	clc
  3746 09:C031: A9 18 00     	lda	#$18
  3747 09:C034: 65 12        	adc	<L90+data_offset_0
  3748 09:C036: 85 01        	sta	<R0
  3749 09:C038: A0 00 00     	ldy	#$0
  3750 09:C03B: A5 01        	lda	<R0
  3751 09:C03D: 10 01        	bpl	L107
  3752 09:C03F: 88           	dey
  3753                        L107:
  3754 09:C040: 85 01        	sta	<R0
  3755 09:C042: 84 03        	sty	<R0+2
  3756 09:C044: 18           	clc
  3757 09:C045: A0 0A 00     	ldy	#$a
  3758 09:C048: B7 0E        	lda	[<L90+current_file_0],Y
  3759 09:C04A: 65 01        	adc	<R0
  3760 09:C04C: 85 05        	sta	<R1
  3761 09:C04E: A0 0C 00     	ldy	#$c
  3762 09:C051: B7 0E        	lda	[<L90+current_file_0],Y
  3763 09:C053: 65 03        	adc	<R0+2
  3764 09:C055: 85 07        	sta	<R1+2
  3765 09:C057: D4 07        	pei	<R1+2
  3766 09:C059: D4 05        	pei	<R1
  3767 09:C05B: 18           	clc
  3768 09:C05C: A9 25 00     	lda	#$25
  3769 09:C05F: 65 14        	adc	<L90+current_header_0
  Sat Jul 10 2021  1:15                                                Page 71


  3770 09:C061: 85 01        	sta	<R0
  3771 09:C063: A9 00 00     	lda	#$0
  3772 09:C066: 65 16        	adc	<L90+current_header_0+2
  3773 09:C068: 85 03        	sta	<R0+2
  3774 09:C06A: D4 03        	pei	<R0+2
  3775 09:C06C: D4 01        	pei	<R0
  3776 09:C06E: 22 xx xx xx  	jsl	~~memcpy
  3777                        ;  memcpy(&current_header->Align,&current_file->da
                    ta[data_offset+0x1C],sizeof(DWORD));
  3778                        	.line	356
  3779 09:C072: F4 04 00     	pea	#<$4
  3780 09:C075: 18           	clc
  3781 09:C076: A9 1C 00     	lda	#$1c
  3782 09:C079: 65 12        	adc	<L90+data_offset_0
  3783 09:C07B: 85 01        	sta	<R0
  3784 09:C07D: A0 00 00     	ldy	#$0
  3785 09:C080: A5 01        	lda	<R0
  3786 09:C082: 10 01        	bpl	L108
  3787 09:C084: 88           	dey
  3788                        L108:
  3789 09:C085: 85 01        	sta	<R0
  3790 09:C087: 84 03        	sty	<R0+2
  3791 09:C089: 18           	clc
  3792 09:C08A: A0 0A 00     	ldy	#$a
  3793 09:C08D: B7 0E        	lda	[<L90+current_file_0],Y
  3794 09:C08F: 65 01        	adc	<R0
  3795 09:C091: 85 05        	sta	<R1
  3796 09:C093: A0 0C 00     	ldy	#$c
  3797 09:C096: B7 0E        	lda	[<L90+current_file_0],Y
  3798 09:C098: 65 03        	adc	<R0+2
  3799 09:C09A: 85 07        	sta	<R1+2
  3800 09:C09C: D4 07        	pei	<R1+2
  3801 09:C09E: D4 05        	pei	<R1
  3802 09:C0A0: 18           	clc
  3803 09:C0A1: A9 29 00     	lda	#$29
  3804 09:C0A4: 65 14        	adc	<L90+current_header_0
  3805 09:C0A6: 85 01        	sta	<R0
  3806 09:C0A8: A9 00 00     	lda	#$0
  3807 09:C0AB: 65 16        	adc	<L90+current_header_0+2
  3808 09:C0AD: 85 03        	sta	<R0+2
  3809 09:C0AF: D4 03        	pei	<R0+2
  3810 09:C0B1: D4 01        	pei	<R0
  3811 09:C0B3: 22 xx xx xx  	jsl	~~memcpy
  3812                        ;  memcpy(&current_header->NumSEx,&current_file->d
                    ata[data_offset+0x20],sizeof(BYTE));
  3813                        	.line	357
  3814 09:C0B7: F4 01 00     	pea	#<$1
  3815 09:C0BA: 18           	clc
  3816 09:C0BB: A9 20 00     	lda	#$20
  3817 09:C0BE: 65 12        	adc	<L90+data_offset_0
  3818 09:C0C0: 85 01        	sta	<R0
  3819 09:C0C2: A0 00 00     	ldy	#$0
  3820 09:C0C5: A5 01        	lda	<R0
  3821 09:C0C7: 10 01        	bpl	L109
  3822 09:C0C9: 88           	dey
  3823                        L109:
  3824 09:C0CA: 85 01        	sta	<R0
  3825 09:C0CC: 84 03        	sty	<R0+2
  Sat Jul 10 2021  1:15                                                Page 72


  3826 09:C0CE: 18           	clc
  3827 09:C0CF: A0 0A 00     	ldy	#$a
  3828 09:C0D2: B7 0E        	lda	[<L90+current_file_0],Y
  3829 09:C0D4: 65 01        	adc	<R0
  3830 09:C0D6: 85 05        	sta	<R1
  3831 09:C0D8: A0 0C 00     	ldy	#$c
  3832 09:C0DB: B7 0E        	lda	[<L90+current_file_0],Y
  3833 09:C0DD: 65 03        	adc	<R0+2
  3834 09:C0DF: 85 07        	sta	<R1+2
  3835 09:C0E1: D4 07        	pei	<R1+2
  3836 09:C0E3: D4 05        	pei	<R1
  3837 09:C0E5: 18           	clc
  3838 09:C0E6: A9 2D 00     	lda	#$2d
  3839 09:C0E9: 65 14        	adc	<L90+current_header_0
  3840 09:C0EB: 85 01        	sta	<R0
  3841 09:C0ED: A9 00 00     	lda	#$0
  3842 09:C0F0: 65 16        	adc	<L90+current_header_0+2
  3843 09:C0F2: 85 03        	sta	<R0+2
  3844 09:C0F4: D4 03        	pei	<R0+2
  3845 09:C0F6: D4 01        	pei	<R0
  3846 09:C0F8: 22 xx xx xx  	jsl	~~memcpy
  3847                        ;  memcpy(&current_header->LCBank,&current_file->d
                    ata[data_offset+0x21],sizeof(BYTE));               /* Langua
                    ge Card */
  3848                        	.line	358
  3849 09:C0FC: F4 01 00     	pea	#<$1
  3850 09:C0FF: 18           	clc
  3851 09:C100: A9 21 00     	lda	#$21
  3852 09:C103: 65 12        	adc	<L90+data_offset_0
  3853 09:C105: 85 01        	sta	<R0
  3854 09:C107: A0 00 00     	ldy	#$0
  3855 09:C10A: A5 01        	lda	<R0
  3856 09:C10C: 10 01        	bpl	L110
  3857 09:C10E: 88           	dey
  3858                        L110:
  3859 09:C10F: 85 01        	sta	<R0
  3860 09:C111: 84 03        	sty	<R0+2
  3861 09:C113: 18           	clc
  3862 09:C114: A0 0A 00     	ldy	#$a
  3863 09:C117: B7 0E        	lda	[<L90+current_file_0],Y
  3864 09:C119: 65 01        	adc	<R0
  3865 09:C11B: 85 05        	sta	<R1
  3866 09:C11D: A0 0C 00     	ldy	#$c
  3867 09:C120: B7 0E        	lda	[<L90+current_file_0],Y
  3868 09:C122: 65 03        	adc	<R0+2
  3869 09:C124: 85 07        	sta	<R1+2
  3870 09:C126: D4 07        	pei	<R1+2
  3871 09:C128: D4 05        	pei	<R1
  3872 09:C12A: 18           	clc
  3873 09:C12B: A9 2E 00     	lda	#$2e
  3874 09:C12E: 65 14        	adc	<L90+current_header_0
  3875 09:C130: 85 01        	sta	<R0
  3876 09:C132: A9 00 00     	lda	#$0
  3877 09:C135: 65 16        	adc	<L90+current_header_0+2
  3878 09:C137: 85 03        	sta	<R0+2
  3879 09:C139: D4 03        	pei	<R0+2
  3880 09:C13B: D4 01        	pei	<R0
  3881 09:C13D: 22 xx xx xx  	jsl	~~memcpy
  Sat Jul 10 2021  1:15                                                Page 73


  3882                        ;  memcpy(&current_header->SegNum,&current_file->d
                    ata[data_offset+0x22],sizeof(WORD));
  3883                        	.line	359
  3884 09:C141: F4 02 00     	pea	#<$2
  3885 09:C144: 18           	clc
  3886 09:C145: A9 22 00     	lda	#$22
  3887 09:C148: 65 12        	adc	<L90+data_offset_0
  3888 09:C14A: 85 01        	sta	<R0
  3889 09:C14C: A0 00 00     	ldy	#$0
  3890 09:C14F: A5 01        	lda	<R0
  3891 09:C151: 10 01        	bpl	L111
  3892 09:C153: 88           	dey
  3893                        L111:
  3894 09:C154: 85 01        	sta	<R0
  3895 09:C156: 84 03        	sty	<R0+2
  3896 09:C158: 18           	clc
  3897 09:C159: A0 0A 00     	ldy	#$a
  3898 09:C15C: B7 0E        	lda	[<L90+current_file_0],Y
  3899 09:C15E: 65 01        	adc	<R0
  3900 09:C160: 85 05        	sta	<R1
  3901 09:C162: A0 0C 00     	ldy	#$c
  3902 09:C165: B7 0E        	lda	[<L90+current_file_0],Y
  3903 09:C167: 65 03        	adc	<R0+2
  3904 09:C169: 85 07        	sta	<R1+2
  3905 09:C16B: D4 07        	pei	<R1+2
  3906 09:C16D: D4 05        	pei	<R1
  3907 09:C16F: 18           	clc
  3908 09:C170: A9 30 00     	lda	#$30
  3909 09:C173: 65 14        	adc	<L90+current_header_0
  3910 09:C175: 85 01        	sta	<R0
  3911 09:C177: A9 00 00     	lda	#$0
  3912 09:C17A: 65 16        	adc	<L90+current_header_0+2
  3913 09:C17C: 85 03        	sta	<R0+2
  3914 09:C17E: D4 03        	pei	<R0+2
  3915 09:C180: D4 01        	pei	<R0
  3916 09:C182: 22 xx xx xx  	jsl	~~memcpy
  3917                        ;  memcpy(&current_header->EntryPointOffset,&curre
                    nt_file->data[data_offset+0x24],sizeof(DWORD));
  3918                        	.line	360
  3919 09:C186: F4 04 00     	pea	#<$4
  3920 09:C189: 18           	clc
  3921 09:C18A: A9 24 00     	lda	#$24
  3922 09:C18D: 65 12        	adc	<L90+data_offset_0
  3923 09:C18F: 85 01        	sta	<R0
  3924 09:C191: A0 00 00     	ldy	#$0
  3925 09:C194: A5 01        	lda	<R0
  3926 09:C196: 10 01        	bpl	L112
  3927 09:C198: 88           	dey
  3928                        L112:
  3929 09:C199: 85 01        	sta	<R0
  3930 09:C19B: 84 03        	sty	<R0+2
  3931 09:C19D: 18           	clc
  3932 09:C19E: A0 0A 00     	ldy	#$a
  3933 09:C1A1: B7 0E        	lda	[<L90+current_file_0],Y
  3934 09:C1A3: 65 01        	adc	<R0
  3935 09:C1A5: 85 05        	sta	<R1
  3936 09:C1A7: A0 0C 00     	ldy	#$c
  3937 09:C1AA: B7 0E        	lda	[<L90+current_file_0],Y
  Sat Jul 10 2021  1:15                                                Page 74


  3938 09:C1AC: 65 03        	adc	<R0+2
  3939 09:C1AE: 85 07        	sta	<R1+2
  3940 09:C1B0: D4 07        	pei	<R1+2
  3941 09:C1B2: D4 05        	pei	<R1
  3942 09:C1B4: 18           	clc
  3943 09:C1B5: A9 32 00     	lda	#$32
  3944 09:C1B8: 65 14        	adc	<L90+current_header_0
  3945 09:C1BA: 85 01        	sta	<R0
  3946 09:C1BC: A9 00 00     	lda	#$0
  3947 09:C1BF: 65 16        	adc	<L90+current_header_0+2
  3948 09:C1C1: 85 03        	sta	<R0+2
  3949 09:C1C3: D4 03        	pei	<R0+2
  3950 09:C1C5: D4 01        	pei	<R0
  3951 09:C1C7: 22 xx xx xx  	jsl	~~memcpy
  3952                        ;  memcpy(&current_header->DispNameOffset,&current
                    _file->data[data_offset+0x28],sizeof(WORD));       /* Load N
                    ame Offset */
  3953                        	.line	361
  3954 09:C1CB: F4 02 00     	pea	#<$2
  3955 09:C1CE: 18           	clc
  3956 09:C1CF: A9 28 00     	lda	#$28
  3957 09:C1D2: 65 12        	adc	<L90+data_offset_0
  3958 09:C1D4: 85 01        	sta	<R0
  3959 09:C1D6: A0 00 00     	ldy	#$0
  3960 09:C1D9: A5 01        	lda	<R0
  3961 09:C1DB: 10 01        	bpl	L113
  3962 09:C1DD: 88           	dey
  3963                        L113:
  3964 09:C1DE: 85 01        	sta	<R0
  3965 09:C1E0: 84 03        	sty	<R0+2
  3966 09:C1E2: 18           	clc
  3967 09:C1E3: A0 0A 00     	ldy	#$a
  3968 09:C1E6: B7 0E        	lda	[<L90+current_file_0],Y
  3969 09:C1E8: 65 01        	adc	<R0
  3970 09:C1EA: 85 05        	sta	<R1
  3971 09:C1EC: A0 0C 00     	ldy	#$c
  3972 09:C1EF: B7 0E        	lda	[<L90+current_file_0],Y
  3973 09:C1F1: 65 03        	adc	<R0+2
  3974 09:C1F3: 85 07        	sta	<R1+2
  3975 09:C1F5: D4 07        	pei	<R1+2
  3976 09:C1F7: D4 05        	pei	<R1
  3977 09:C1F9: 18           	clc
  3978 09:C1FA: A9 36 00     	lda	#$36
  3979 09:C1FD: 65 14        	adc	<L90+current_header_0
  3980 09:C1FF: 85 01        	sta	<R0
  3981 09:C201: A9 00 00     	lda	#$0
  3982 09:C204: 65 16        	adc	<L90+current_header_0+2
  3983 09:C206: 85 03        	sta	<R0+2
  3984 09:C208: D4 03        	pei	<R0+2
  3985 09:C20A: D4 01        	pei	<R0
  3986 09:C20C: 22 xx xx xx  	jsl	~~memcpy
  3987                        ;  memcpy(&current_header->DispDataOffset,&current
                    _file->data[data_offset+0x2A],sizeof(WORD));       /* Segmen
                    t Name Offset */
  3988                        	.line	362
  3989 09:C210: F4 02 00     	pea	#<$2
  3990 09:C213: 18           	clc
  3991 09:C214: A9 2A 00     	lda	#$2a
  Sat Jul 10 2021  1:15                                                Page 75


  3992 09:C217: 65 12        	adc	<L90+data_offset_0
  3993 09:C219: 85 01        	sta	<R0
  3994 09:C21B: A0 00 00     	ldy	#$0
  3995 09:C21E: A5 01        	lda	<R0
  3996 09:C220: 10 01        	bpl	L114
  3997 09:C222: 88           	dey
  3998                        L114:
  3999 09:C223: 85 01        	sta	<R0
  4000 09:C225: 84 03        	sty	<R0+2
  4001 09:C227: 18           	clc
  4002 09:C228: A0 0A 00     	ldy	#$a
  4003 09:C22B: B7 0E        	lda	[<L90+current_file_0],Y
  4004 09:C22D: 65 01        	adc	<R0
  4005 09:C22F: 85 05        	sta	<R1
  4006 09:C231: A0 0C 00     	ldy	#$c
  4007 09:C234: B7 0E        	lda	[<L90+current_file_0],Y
  4008 09:C236: 65 03        	adc	<R0+2
  4009 09:C238: 85 07        	sta	<R1+2
  4010 09:C23A: D4 07        	pei	<R1+2
  4011 09:C23C: D4 05        	pei	<R1
  4012 09:C23E: 18           	clc
  4013 09:C23F: A9 38 00     	lda	#$38
  4014 09:C242: 65 14        	adc	<L90+current_header_0
  4015 09:C244: 85 01        	sta	<R0
  4016 09:C246: A9 00 00     	lda	#$0
  4017 09:C249: 65 16        	adc	<L90+current_header_0+2
  4018 09:C24B: 85 03        	sta	<R0+2
  4019 09:C24D: D4 03        	pei	<R0+2
  4020 09:C24F: D4 01        	pei	<R0
  4021 09:C251: 22 xx xx xx  	jsl	~~memcpy
  4022                        ;
  4023                        ;  /********************************************/
  4024                        ;  /**  On va valider les données récupérées  **/
  4025                        ;  /********************************************/
  4026                        ;  /* Taille du Segment */
  4027                        ;  if((int)(data_offset + current_header->ByteCnt)
                     > (int) current_file->data_length)
  4028                        	.line	368
  4029                        ;    {
  4030 09:C255: A0 00 00     	ldy	#$0
  4031 09:C258: A5 12        	lda	<L90+data_offset_0
  4032 09:C25A: 10 01        	bpl	L115
  4033 09:C25C: 88           	dey
  4034                        L115:
  4035 09:C25D: 85 01        	sta	<R0
  4036 09:C25F: 84 03        	sty	<R0+2
  4037 09:C261: 18           	clc
  4038 09:C262: A5 01        	lda	<R0
  4039 09:C264: A0 0C 00     	ldy	#$c
  4040 09:C267: 77 14        	adc	[<L90+current_header_0],Y
  4041 09:C269: 85 05        	sta	<R1
  4042 09:C26B: A5 03        	lda	<R0+2
  4043 09:C26D: A0 0E 00     	ldy	#$e
  4044 09:C270: 77 14        	adc	[<L90+current_header_0],Y
  4045 09:C272: 85 07        	sta	<R1+2
  4046 09:C274: 38           	sec
  4047 09:C275: A0 08 00     	ldy	#$8
  4048 09:C278: B7 0E        	lda	[<L90+current_file_0],Y
  Sat Jul 10 2021  1:15                                                Page 76


  4049 09:C27A: E5 05        	sbc	<R1
  4050 09:C27C: 70 03        	bvs	L116
  4051 09:C27E: 49 00 80     	eor	#$8000
  4052                        L116:
  4053 09:C281: 10 03        	bpl	L117
  4054 09:C283: 82 06 00     	brl	L10038
  4055                        L117:
  4056                        	.line	369
  4057                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'BlockCnt' value (the segment size can't be larger than 
                    the OMF file).\n",current_file->nb_segment+1);
  4058                        ;      return(1);
  4059                        	.line	371
  4060 09:C286: A9 01 00     	lda	#$1
  4061 09:C289: 82 7B FA     	brl	L95
  4062                        ;    }
  4063                        	.line	372
  4064                        ;  if(current_header->ByteCnt < SEGMENT_HEADER_SIZ
                    E_V1)
  4065                        L10038:
  4066                        	.line	373
  4067                        ;    {
  4068 09:C28C: A0 0C 00     	ldy	#$c
  4069 09:C28F: B7 14        	lda	[<L90+current_header_0],Y
  4070 09:C291: C9 40 00     	cmp	#<$40
  4071 09:C294: A0 0E 00     	ldy	#$e
  4072 09:C297: B7 14        	lda	[<L90+current_header_0],Y
  4073 09:C299: E9 00 00     	sbc	#^$40
  4074 09:C29C: 90 03        	bcc	L118
  4075 09:C29E: 82 06 00     	brl	L10039
  4076                        L118:
  4077                        	.line	374
  4078                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'BlockCnt' value (the segment size can't be smaller than
                     the Sgement Header size).\n",current_file->nb_segment+1);
  4079                        ;      return(1);
  4080                        	.line	376
  4081 09:C2A1: A9 01 00     	lda	#$1
  4082 09:C2A4: 82 60 FA     	brl	L95
  4083                        ;    }
  4084                        	.line	377
  4085                        ;
  4086                        ;  /* Nombre de 0x00 à ajouter à la fin */
  4087                        ;  if(current_header->ResSpc >= 0x010000)
  4088                        L10039:
  4089                        	.line	380
  4090                        ;    {
  4091 09:C2A7: A0 10 00     	ldy	#$10
  4092 09:C2AA: B7 14        	lda	[<L90+current_header_0],Y
  4093 09:C2AC: C9 00 00     	cmp	#<$10000
  4094 09:C2AF: A0 12 00     	ldy	#$12
  4095 09:C2B2: B7 14        	lda	[<L90+current_header_0],Y
  4096 09:C2B4: E9 01 00     	sbc	#^$10000
  4097 09:C2B7: B0 03        	bcs	L119
  4098 09:C2B9: 82 06 00     	brl	L10040
  4099                        L119:
  4100                        	.line	381
  4101                        ;      //printf("  Segment #%d Header Error : Inva
  Sat Jul 10 2021  1:15                                                Page 77


                    lid 'ResSpc' value (the size can't be larger than 64 KB).\n"
                    ,current_file->nb_segment+1);
  4102                        ;      return(1);
  4103                        	.line	383
  4104 09:C2BC: A9 01 00     	lda	#$1
  4105 09:C2BF: 82 45 FA     	brl	L95
  4106                        ;    }
  4107                        	.line	384
  4108                        ;
  4109                        ;  /* La taille d'un Segment en mémoire ne peut pa
                    s dépasser 64 KB */
  4110                        ;  if(current_header->Length >= 0x010000)
  4111                        L10040:
  4112                        	.line	387
  4113                        ;    //printf("  Segment #%d Header Warning : Weir
                    d 'Length' value (the segment size is usually < 64 KB).\n",c
                    urrent_file->nb_segment+1);
  4114                        ;
  4115                        ;  /* Type */
  4116                        ;  if((current_header->Type & 0x1F) != 0x00 && (cu
                    rrent_header->Type & 0x1F) != 0x01 && (current_header->Type 
                    & 0x1F) != 0x02 &&
  4117 09:C2C2: A0 14 00     	ldy	#$14
  4118 09:C2C5: B7 14        	lda	[<L90+current_header_0],Y
  4119 09:C2C7: C9 00 00     	cmp	#<$10000
  4120 09:C2CA: A0 16 00     	ldy	#$16
  4121 09:C2CD: B7 14        	lda	[<L90+current_header_0],Y
  4122 09:C2CF: E9 01 00     	sbc	#^$10000
  4123 09:C2D2: B0 03        	bcs	L120
  4124 09:C2D4: 82 A2 00     	brl	L10041
  4125                        L120:
  4126                        	.line	391
  4127                        ;     (current_header->Type & 0x1F) != 0x04 && (cu
                    rrent_header->Type & 0x1F) != 0x08 && (current_header->Type 
                    & 0x1F) != 0x10 &&
  4128                        ;     (current_header->Type & 0x1F) != 0x11 && (cu
                    rrent_header->Type & 0x1F) != 0x12)
  4129                        ;    {
  4130 09:C2D7: E2 20        	sep	#$20
  4131                        	longa	off
  4132 09:C2D9: A0 18 00     	ldy	#$18
  4133 09:C2DC: B7 14        	lda	[<L90+current_header_0],Y
  4134 09:C2DE: 29 1F        	and	#<$1f
  4135 09:C2E0: C2 20        	rep	#$20
  4136                        	longa	on
  4137 09:C2E2: D0 03        	bne	L121
  4138 09:C2E4: 82 92 00     	brl	L10042
  4139                        L121:
  4140 09:C2E7: A0 18 00     	ldy	#$18
  4141 09:C2EA: B7 14        	lda	[<L90+current_header_0],Y
  4142 09:C2EC: 29 1F 00     	and	#<$1f
  4143 09:C2EF: 85 01        	sta	<R0
  4144 09:C2F1: A5 01        	lda	<R0
  4145 09:C2F3: C9 01 00     	cmp	#<$1
  4146 09:C2F6: D0 03        	bne	L122
  4147 09:C2F8: 82 7E 00     	brl	L10042
  4148                        L122:
  4149 09:C2FB: A0 18 00     	ldy	#$18
  Sat Jul 10 2021  1:15                                                Page 78


  4150 09:C2FE: B7 14        	lda	[<L90+current_header_0],Y
  4151 09:C300: 29 1F 00     	and	#<$1f
  4152 09:C303: 85 01        	sta	<R0
  4153 09:C305: A5 01        	lda	<R0
  4154 09:C307: C9 02 00     	cmp	#<$2
  4155 09:C30A: D0 03        	bne	L123
  4156 09:C30C: 82 6A 00     	brl	L10042
  4157                        L123:
  4158 09:C30F: A0 18 00     	ldy	#$18
  4159 09:C312: B7 14        	lda	[<L90+current_header_0],Y
  4160 09:C314: 29 1F 00     	and	#<$1f
  4161 09:C317: 85 01        	sta	<R0
  4162 09:C319: A5 01        	lda	<R0
  4163 09:C31B: C9 04 00     	cmp	#<$4
  4164 09:C31E: D0 03        	bne	L124
  4165 09:C320: 82 56 00     	brl	L10042
  4166                        L124:
  4167 09:C323: A0 18 00     	ldy	#$18
  4168 09:C326: B7 14        	lda	[<L90+current_header_0],Y
  4169 09:C328: 29 1F 00     	and	#<$1f
  4170 09:C32B: 85 01        	sta	<R0
  4171 09:C32D: A5 01        	lda	<R0
  4172 09:C32F: C9 08 00     	cmp	#<$8
  4173 09:C332: D0 03        	bne	L125
  4174 09:C334: 82 42 00     	brl	L10042
  4175                        L125:
  4176 09:C337: A0 18 00     	ldy	#$18
  4177 09:C33A: B7 14        	lda	[<L90+current_header_0],Y
  4178 09:C33C: 29 1F 00     	and	#<$1f
  4179 09:C33F: 85 01        	sta	<R0
  4180 09:C341: A5 01        	lda	<R0
  4181 09:C343: C9 10 00     	cmp	#<$10
  4182 09:C346: D0 03        	bne	L126
  4183 09:C348: 82 2E 00     	brl	L10042
  4184                        L126:
  4185 09:C34B: A0 18 00     	ldy	#$18
  4186 09:C34E: B7 14        	lda	[<L90+current_header_0],Y
  4187 09:C350: 29 1F 00     	and	#<$1f
  4188 09:C353: 85 01        	sta	<R0
  4189 09:C355: A5 01        	lda	<R0
  4190 09:C357: C9 11 00     	cmp	#<$11
  4191 09:C35A: D0 03        	bne	L127
  4192 09:C35C: 82 1A 00     	brl	L10042
  4193                        L127:
  4194 09:C35F: A0 18 00     	ldy	#$18
  4195 09:C362: B7 14        	lda	[<L90+current_header_0],Y
  4196 09:C364: 29 1F 00     	and	#<$1f
  4197 09:C367: 85 01        	sta	<R0
  4198 09:C369: A5 01        	lda	<R0
  4199 09:C36B: C9 12 00     	cmp	#<$12
  4200 09:C36E: D0 03        	bne	L128
  4201 09:C370: 82 06 00     	brl	L10042
  4202                        L128:
  4203                        	.line	394
  4204                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'Type' value (possible values are $0,$1,$2,$4,$8,$10,$11
                     or $12).\n",current_file->nb_segment+1);
  4205                        ;      return(1);
  Sat Jul 10 2021  1:15                                                Page 79


  4206                        	.line	396
  4207 09:C373: A9 01 00     	lda	#$1
  4208 09:C376: 82 8E F9     	brl	L95
  4209                        ;    }
  4210                        	.line	397
  4211                        ;
  4212                        ;  /* LabLen : 0 ou 10 */
  4213                        ;  if(current_header->LabLen != 0x00 && current_he
                    ader->LabLen != 0x0A)
  4214                        L10042:
  4215                        L10041:
  4216                        	.line	400
  4217                        ;    {
  4218 09:C379: A0 1A 00     	ldy	#$1a
  4219 09:C37C: B7 14        	lda	[<L90+current_header_0],Y
  4220 09:C37E: 29 FF 00     	and	#$ff
  4221 09:C381: D0 03        	bne	L129
  4222 09:C383: 82 16 00     	brl	L10043
  4223                        L129:
  4224 09:C386: E2 20        	sep	#$20
  4225                        	longa	off
  4226 09:C388: A0 1A 00     	ldy	#$1a
  4227 09:C38B: B7 14        	lda	[<L90+current_header_0],Y
  4228 09:C38D: C9 0A        	cmp	#<$a
  4229 09:C38F: C2 20        	rep	#$20
  4230                        	longa	on
  4231 09:C391: D0 03        	bne	L130
  4232 09:C393: 82 06 00     	brl	L10043
  4233                        L130:
  4234                        	.line	401
  4235                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'LabLen' value (the value should be 0 or 10 for the Appl
                    e IIgs).\n",current_file->nb_segment+1);
  4236                        ;      return(1);
  4237                        	.line	403
  4238 09:C396: A9 01 00     	lda	#$1
  4239 09:C399: 82 6B F9     	brl	L95
  4240                        ;    }
  4241                        	.line	404
  4242                        ;
  4243                        ;  /* Num Len : Tjs à 4 pour le IIgs */
  4244                        ;  if(current_header->NumLen != 0x04)
  4245                        L10043:
  4246                        	.line	407
  4247                        ;    {
  4248 09:C39C: E2 20        	sep	#$20
  4249                        	longa	off
  4250 09:C39E: A0 1B 00     	ldy	#$1b
  4251 09:C3A1: B7 14        	lda	[<L90+current_header_0],Y
  4252 09:C3A3: C9 04        	cmp	#<$4
  4253 09:C3A5: C2 20        	rep	#$20
  4254                        	longa	on
  4255 09:C3A7: D0 03        	bne	L131
  4256 09:C3A9: 82 06 00     	brl	L10044
  4257                        L131:
  4258                        	.line	408
  4259                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'NumLen' value (the value should be 4 for the Apple IIgs
  Sat Jul 10 2021  1:15                                                Page 80


                    ).\n",current_file->nb_segment+1);
  4260                        ;      return(1);
  4261                        	.line	410
  4262 09:C3AC: A9 01 00     	lda	#$1
  4263 09:C3AF: 82 55 F9     	brl	L95
  4264                        ;    }
  4265                        	.line	411
  4266                        ;
  4267                        ;  /* BankSize : <= 64 KB */
  4268                        ;  if(current_header->BankSize > 0x010000)
  4269                        L10044:
  4270                        	.line	414
  4271                        ;    {
  4272 09:C3B2: A9 00 00     	lda	#$0
  4273 09:C3B5: A0 1D 00     	ldy	#$1d
  4274 09:C3B8: D7 14        	cmp	[<L90+current_header_0],Y
  4275 09:C3BA: A9 01 00     	lda	#$1
  4276 09:C3BD: A0 1F 00     	ldy	#$1f
  4277 09:C3C0: F7 14        	sbc	[<L90+current_header_0],Y
  4278 09:C3C2: 90 03        	bcc	L132
  4279 09:C3C4: 82 06 00     	brl	L10045
  4280                        L132:
  4281                        	.line	415
  4282                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'BankSize' value (the value can't be larger than 64 KB).
                    \n",current_file->nb_segment+1);
  4283                        ;      return(1);
  4284                        	.line	417
  4285 09:C3C7: A9 01 00     	lda	#$1
  4286 09:C3CA: 82 3A F9     	brl	L95
  4287                        ;    }
  4288                        	.line	418
  4289                        ;
  4290                        ;  /* Org : < 64 KB */
  4291                        ;  if(current_header->Org >= 0x010000)
  4292                        L10045:
  4293                        	.line	421
  4294                        ;    //printf("  Segment #%d Header Warning : Unus
                    ual 'Org' value (the value is usually < 64 KB) and it is set
                     to 0x%X.\n",current_file->nb_segment+1,current_header->Org)
                    ;
  4295                        ;
  4296                        ;  /* Align : 0, 0x0100 ou 0x010000 (0x200 avec Gs
                    Basic) */
  4297                        ;  if(current_header->Align != 0x00 && current_hea
                    der->Align != 0x0100 && current_header->Align != 0x010000)
  4298 09:C3CD: A0 25 00     	ldy	#$25
  4299 09:C3D0: B7 14        	lda	[<L90+current_header_0],Y
  4300 09:C3D2: C9 00 00     	cmp	#<$10000
  4301 09:C3D5: A0 27 00     	ldy	#$27
  4302 09:C3D8: B7 14        	lda	[<L90+current_header_0],Y
  4303 09:C3DA: E9 01 00     	sbc	#^$10000
  4304 09:C3DD: B0 03        	bcs	L133
  4305 09:C3DF: 82 50 00     	brl	L10046
  4306                        L133:
  4307                        	.line	425
  4308                        ;    //printf("  Segment #%d Header Warning : Unus
                    ual 'Align' value (the value should be 0, 256 or 64KB or for
  Sat Jul 10 2021  1:15                                                Page 81


                     the Apple IIgs) and it is set to 0x%X.\n",current_file->nb_
                    segment+1,current_header->Align);
  4309                        ;
  4310                        ;  /* NumSEx : Tjs à 0 */
  4311                        ;  if(current_header->NumSEx != 0x00)
  4312 09:C3E2: A0 29 00     	ldy	#$29
  4313 09:C3E5: B7 14        	lda	[<L90+current_header_0],Y
  4314 09:C3E7: A0 2B 00     	ldy	#$2b
  4315 09:C3EA: 17 14        	ora	[<L90+current_header_0],Y
  4316 09:C3EC: D0 03        	bne	L134
  4317 09:C3EE: 82 41 00     	brl	L10047
  4318                        L134:
  4319 09:C3F1: A0 29 00     	ldy	#$29
  4320 09:C3F4: B7 14        	lda	[<L90+current_header_0],Y
  4321 09:C3F6: C9 00 01     	cmp	#<$100
  4322 09:C3F9: D0 08        	bne	L135
  4323 09:C3FB: A0 2B 00     	ldy	#$2b
  4324 09:C3FE: B7 14        	lda	[<L90+current_header_0],Y
  4325 09:C400: C9 00 00     	cmp	#^$100
  4326                        L135:
  4327 09:C403: D0 03        	bne	L136
  4328 09:C405: 82 2A 00     	brl	L10047
  4329                        L136:
  4330 09:C408: A0 29 00     	ldy	#$29
  4331 09:C40B: B7 14        	lda	[<L90+current_header_0],Y
  4332 09:C40D: C9 00 00     	cmp	#<$10000
  4333 09:C410: D0 08        	bne	L137
  4334 09:C412: A0 2B 00     	ldy	#$2b
  4335 09:C415: B7 14        	lda	[<L90+current_header_0],Y
  4336 09:C417: C9 01 00     	cmp	#^$10000
  4337                        L137:
  4338 09:C41A: D0 03        	bne	L138
  4339 09:C41C: 82 13 00     	brl	L10047
  4340                        L138:
  4341                        	.line	429
  4342                        ;    {
  4343 09:C41F: A0 2D 00     	ldy	#$2d
  4344 09:C422: B7 14        	lda	[<L90+current_header_0],Y
  4345 09:C424: 29 FF 00     	and	#$ff
  4346 09:C427: D0 03        	bne	L139
  4347 09:C429: 82 06 00     	brl	L10048
  4348                        L139:
  4349                        	.line	430
  4350                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'NumSEx' value (the value should be 0 for the Apple IIgs
                    ).\n",current_file->nb_segment+1);
  4351                        ;      return(1);
  4352                        	.line	432
  4353 09:C42C: A9 01 00     	lda	#$1
  4354 09:C42F: 82 D5 F8     	brl	L95
  4355                        ;    }
  4356                        	.line	433
  4357                        ;
  4358                        ;  /* SegNum : 1 -> N */
  4359                        ;  if(current_header->SegNum != (WORD) current_fil
                    e->nb_segment+1)
  4360                        L10048:
  4361                        L10047:
  Sat Jul 10 2021  1:15                                                Page 82


  4362                        L10046:
  4363                        	.line	436
  4364                        ;    {
  4365 09:C432: A0 0E 00     	ldy	#$e
  4366 09:C435: B7 0E        	lda	[<L90+current_file_0],Y
  4367 09:C437: 1A           	ina
  4368 09:C438: 85 01        	sta	<R0
  4369 09:C43A: A5 01        	lda	<R0
  4370 09:C43C: A0 30 00     	ldy	#$30
  4371 09:C43F: D7 14        	cmp	[<L90+current_header_0],Y
  4372 09:C441: D0 03        	bne	L140
  4373 09:C443: 82 06 00     	brl	L10049
  4374                        L140:
  4375                        	.line	437
  4376                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'SegNum' value (the value should be %d and we have %d fo
                    r the Apple IIgs).\n",current_file->nb_segment+1,current_fil
                    e->nb_segment+1,current_header->SegNum);
  4377                        ;      return(1);
  4378                        	.line	439
  4379 09:C446: A9 01 00     	lda	#$1
  4380 09:C449: 82 BB F8     	brl	L95
  4381                        ;    }
  4382                        	.line	440
  4383                        ;
  4384                        ;  /* Entry Point */
  4385                        ;  if(current_header->EntryPointOffset > current_h
                    eader->Length)
  4386                        L10049:
  4387                        	.line	443
  4388                        ;    {
  4389 09:C44C: A0 14 00     	ldy	#$14
  4390 09:C44F: B7 14        	lda	[<L90+current_header_0],Y
  4391 09:C451: A0 32 00     	ldy	#$32
  4392 09:C454: D7 14        	cmp	[<L90+current_header_0],Y
  4393 09:C456: A0 16 00     	ldy	#$16
  4394 09:C459: B7 14        	lda	[<L90+current_header_0],Y
  4395 09:C45B: A0 34 00     	ldy	#$34
  4396 09:C45E: F7 14        	sbc	[<L90+current_header_0],Y
  4397 09:C460: 90 03        	bcc	L141
  4398 09:C462: 82 06 00     	brl	L10050
  4399                        L141:
  4400                        	.line	444
  4401                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'EntryPointOffset' value (the value can't be larger than
                     the Segment size).\n",current_file->nb_segment+1);
  4402                        ;      return(1);
  4403                        	.line	446
  4404 09:C465: A9 01 00     	lda	#$1
  4405 09:C468: 82 9C F8     	brl	L95
  4406                        ;    }
  4407                        	.line	447
  4408                        ;
  4409                        ;  /* DispName offset devrait être 44 ($2C) */
  4410                        ;  if(current_header->DispNameOffset < SEGMENT_HEA
                    DER_MIN_SIZE_V1)
  4411                        L10050:
  4412                        	.line	450
  Sat Jul 10 2021  1:15                                                Page 83


  4413                        ;    {
  4414 09:C46B: 38           	sec
  4415 09:C46C: A0 36 00     	ldy	#$36
  4416 09:C46F: B7 14        	lda	[<L90+current_header_0],Y
  4417 09:C471: E9 2C 00     	sbc	#<$2c
  4418 09:C474: 70 03        	bvs	L142
  4419 09:C476: 49 00 80     	eor	#$8000
  4420                        L142:
  4421 09:C479: 10 03        	bpl	L143
  4422 09:C47B: 82 06 00     	brl	L10051
  4423                        L143:
  4424                        	.line	451
  4425                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispNameOffset' value (the value can't be smaller than 
                    the Segment Header size).\n",current_file->nb_segment+1);
  4426                        ;      return(1);
  4427                        	.line	453
  4428 09:C47E: A9 01 00     	lda	#$1
  4429 09:C481: 82 83 F8     	brl	L95
  4430                        ;    }
  4431                        	.line	454
  4432                        ;  if(current_header->DispNameOffset > current_hea
                    der->ByteCnt)
  4433                        L10051:
  4434                        	.line	455
  4435                        ;    {
  4436 09:C484: A0 00 00     	ldy	#$0
  4437 09:C487: 5A           	phy
  4438 09:C488: A0 36 00     	ldy	#$36
  4439 09:C48B: B7 14        	lda	[<L90+current_header_0],Y
  4440 09:C48D: 7A           	ply
  4441 09:C48E: 2A           	rol	A
  4442 09:C48F: 6A           	ror	A
  4443 09:C490: 10 01        	bpl	L144
  4444 09:C492: 88           	dey
  4445                        L144:
  4446 09:C493: 85 01        	sta	<R0
  4447 09:C495: 84 03        	sty	<R0+2
  4448 09:C497: A0 0C 00     	ldy	#$c
  4449 09:C49A: B7 14        	lda	[<L90+current_header_0],Y
  4450 09:C49C: C5 01        	cmp	<R0
  4451 09:C49E: A0 0E 00     	ldy	#$e
  4452 09:C4A1: B7 14        	lda	[<L90+current_header_0],Y
  4453 09:C4A3: E5 03        	sbc	<R0+2
  4454 09:C4A5: 90 03        	bcc	L145
  4455 09:C4A7: 82 06 00     	brl	L10052
  4456                        L145:
  4457                        	.line	456
  4458                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispNameOffset' value (the value can't be larger than t
                    he Segment size).\n",current_file->nb_segment+1);
  4459                        ;      return(1);
  4460                        	.line	458
  4461 09:C4AA: A9 01 00     	lda	#$1
  4462 09:C4AD: 82 57 F8     	brl	L95
  4463                        ;    }
  4464                        	.line	459
  4465                        ;
  Sat Jul 10 2021  1:15                                                Page 84


  4466                        ;  /* DispData offset devrait être 64 ($40) */
  4467                        ;  if(current_header->DispDataOffset < SEGMENT_HEA
                    DER_MIN_SIZE_V1)
  4468                        L10052:
  4469                        	.line	462
  4470                        ;    {
  4471 09:C4B0: 38           	sec
  4472 09:C4B1: A0 38 00     	ldy	#$38
  4473 09:C4B4: B7 14        	lda	[<L90+current_header_0],Y
  4474 09:C4B6: E9 2C 00     	sbc	#<$2c
  4475 09:C4B9: 70 03        	bvs	L146
  4476 09:C4BB: 49 00 80     	eor	#$8000
  4477                        L146:
  4478 09:C4BE: 10 03        	bpl	L147
  4479 09:C4C0: 82 06 00     	brl	L10053
  4480                        L147:
  4481                        	.line	463
  4482                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispDataOffset' value (the value can't be smaller than 
                    the Segment Header size).\n",current_file->nb_segment+1);
  4483                        ;      return(1);
  4484                        	.line	465
  4485 09:C4C3: A9 01 00     	lda	#$1
  4486 09:C4C6: 82 3E F8     	brl	L95
  4487                        ;    }
  4488                        	.line	466
  4489                        ;  if(current_header->DispNameOffset > current_hea
                    der->ByteCnt)
  4490                        L10053:
  4491                        	.line	467
  4492                        ;    {
  4493 09:C4C9: A0 00 00     	ldy	#$0
  4494 09:C4CC: 5A           	phy
  4495 09:C4CD: A0 36 00     	ldy	#$36
  4496 09:C4D0: B7 14        	lda	[<L90+current_header_0],Y
  4497 09:C4D2: 7A           	ply
  4498 09:C4D3: 2A           	rol	A
  4499 09:C4D4: 6A           	ror	A
  4500 09:C4D5: 10 01        	bpl	L148
  4501 09:C4D7: 88           	dey
  4502                        L148:
  4503 09:C4D8: 85 01        	sta	<R0
  4504 09:C4DA: 84 03        	sty	<R0+2
  4505 09:C4DC: A0 0C 00     	ldy	#$c
  4506 09:C4DF: B7 14        	lda	[<L90+current_header_0],Y
  4507 09:C4E1: C5 01        	cmp	<R0
  4508 09:C4E3: A0 0E 00     	ldy	#$e
  4509 09:C4E6: B7 14        	lda	[<L90+current_header_0],Y
  4510 09:C4E8: E5 03        	sbc	<R0+2
  4511 09:C4EA: 90 03        	bcc	L149
  4512 09:C4EC: 82 06 00     	brl	L10054
  4513                        L149:
  4514                        	.line	468
  4515                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispDataOffset' value (the value can't be larger than t
                    he Segment size).\n",current_file->nb_segment+1);
  4516                        ;      return(1);
  4517                        	.line	470
  Sat Jul 10 2021  1:15                                                Page 85


  4518 09:C4EF: A9 01 00     	lda	#$1
  4519 09:C4F2: 82 12 F8     	brl	L95
  4520                        ;    }
  4521                        	.line	471
  4522                        ;
  4523                        ;  /*********************************************/
  4524                        ;  /**  On va récupérer les données variables  **/
  4525                        ;  /*********************************************/
  4526                        ;  /* Noms */
  4527                        ;  memcpy(current_header->LoadName,&current_file->
                    data[data_offset+current_header->DispNameOffset],10);
  4528                        L10054:
  4529                        	.line	477
  4530 09:C4F5: F4 0A 00     	pea	#<$a
  4531 09:C4F8: 18           	clc
  4532 09:C4F9: A5 12        	lda	<L90+data_offset_0
  4533 09:C4FB: A0 36 00     	ldy	#$36
  4534 09:C4FE: 77 14        	adc	[<L90+current_header_0],Y
  4535 09:C500: 85 01        	sta	<R0
  4536 09:C502: A0 00 00     	ldy	#$0
  4537 09:C505: A5 01        	lda	<R0
  4538 09:C507: 10 01        	bpl	L150
  4539 09:C509: 88           	dey
  4540                        L150:
  4541 09:C50A: 85 01        	sta	<R0
  4542 09:C50C: 84 03        	sty	<R0+2
  4543 09:C50E: 18           	clc
  4544 09:C50F: A0 0A 00     	ldy	#$a
  4545 09:C512: B7 0E        	lda	[<L90+current_file_0],Y
  4546 09:C514: 65 01        	adc	<R0
  4547 09:C516: 85 05        	sta	<R1
  4548 09:C518: A0 0C 00     	ldy	#$c
  4549 09:C51B: B7 0E        	lda	[<L90+current_file_0],Y
  4550 09:C51D: 65 03        	adc	<R0+2
  4551 09:C51F: 85 07        	sta	<R1+2
  4552 09:C521: D4 07        	pei	<R1+2
  4553 09:C523: D4 05        	pei	<R1
  4554 09:C525: 18           	clc
  4555 09:C526: A9 3C 08     	lda	#$83c
  4556 09:C529: 65 14        	adc	<L90+current_header_0
  4557 09:C52B: 85 01        	sta	<R0
  4558 09:C52D: A9 00 00     	lda	#$0
  4559 09:C530: 65 16        	adc	<L90+current_header_0+2
  4560 09:C532: 85 03        	sta	<R0+2
  4561 09:C534: D4 03        	pei	<R0+2
  4562 09:C536: D4 01        	pei	<R0
  4563 09:C538: 22 xx xx xx  	jsl	~~memcpy
  4564                        ;  if(current_header->LabLen > 0)
  4565                        	.line	478
  4566                        ;    memcpy(current_header->SegName,&current_file-
                    >data[data_offset+current_header->DispNameOffset+10],current
                    _header->LabLen);
  4567 09:C53C: E2 20        	sep	#$20
  4568                        	longa	off
  4569 09:C53E: A9 00        	lda	#$0
  4570 09:C540: A0 1A 00     	ldy	#$1a
  4571 09:C543: D7 14        	cmp	[<L90+current_header_0],Y
  4572 09:C545: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 86


  4573                        	longa	on
  4574 09:C547: 90 03        	bcc	L151
  4575 09:C549: 82 58 00     	brl	L10055
  4576                        L151:
  4577                        	.line	479
  4578 09:C54C: A0 1A 00     	ldy	#$1a
  4579 09:C54F: B7 14        	lda	[<L90+current_header_0],Y
  4580 09:C551: 29 FF 00     	and	#$ff
  4581 09:C554: 48           	pha
  4582 09:C555: 18           	clc
  4583 09:C556: A5 12        	lda	<L90+data_offset_0
  4584 09:C558: A0 36 00     	ldy	#$36
  4585 09:C55B: 77 14        	adc	[<L90+current_header_0],Y
  4586 09:C55D: 85 01        	sta	<R0
  4587 09:C55F: 18           	clc
  4588 09:C560: A9 0A 00     	lda	#$a
  4589 09:C563: 65 01        	adc	<R0
  4590 09:C565: 85 05        	sta	<R1
  4591 09:C567: A0 00 00     	ldy	#$0
  4592 09:C56A: A5 05        	lda	<R1
  4593 09:C56C: 10 01        	bpl	L152
  4594 09:C56E: 88           	dey
  4595                        L152:
  4596 09:C56F: 85 01        	sta	<R0
  4597 09:C571: 84 03        	sty	<R0+2
  4598 09:C573: 18           	clc
  4599 09:C574: A0 0A 00     	ldy	#$a
  4600 09:C577: B7 0E        	lda	[<L90+current_file_0],Y
  4601 09:C579: 65 01        	adc	<R0
  4602 09:C57B: 85 05        	sta	<R1
  4603 09:C57D: A0 0C 00     	ldy	#$c
  4604 09:C580: B7 0E        	lda	[<L90+current_file_0],Y
  4605 09:C582: 65 03        	adc	<R0+2
  4606 09:C584: 85 07        	sta	<R1+2
  4607 09:C586: D4 07        	pei	<R1+2
  4608 09:C588: D4 05        	pei	<R1
  4609 09:C58A: 18           	clc
  4610 09:C58B: A9 3C 09     	lda	#$93c
  4611 09:C58E: 65 14        	adc	<L90+current_header_0
  4612 09:C590: 85 01        	sta	<R0
  4613 09:C592: A9 00 00     	lda	#$0
  4614 09:C595: 65 16        	adc	<L90+current_header_0+2
  4615 09:C597: 85 03        	sta	<R0+2
  4616 09:C599: D4 03        	pei	<R0+2
  4617 09:C59B: D4 01        	pei	<R0
  4618 09:C59D: 22 xx xx xx  	jsl	~~memcpy
  4619                        ;  else
  4620 09:C5A1: 82 77 00     	brl	L10056
  4621                        L10055:
  4622                        ;    {
  4623                        	.line	481
  4624                        ;      /* La longueur est codée au début */
  4625                        ;      length = (int) current_file->data[data_offs
                    et+current_header->DispNameOffset+10];
  4626                        	.line	483
  4627 09:C5A4: 18           	clc
  4628 09:C5A5: A5 12        	lda	<L90+data_offset_0
  4629 09:C5A7: A0 36 00     	ldy	#$36
  Sat Jul 10 2021  1:15                                                Page 87


  4630 09:C5AA: 77 14        	adc	[<L90+current_header_0],Y
  4631 09:C5AC: 85 01        	sta	<R0
  4632 09:C5AE: 18           	clc
  4633 09:C5AF: A9 0A 00     	lda	#$a
  4634 09:C5B2: 65 01        	adc	<R0
  4635 09:C5B4: 85 05        	sta	<R1
  4636 09:C5B6: A0 0A 00     	ldy	#$a
  4637 09:C5B9: B7 0E        	lda	[<L90+current_file_0],Y
  4638 09:C5BB: 85 01        	sta	<R0
  4639 09:C5BD: A0 0C 00     	ldy	#$c
  4640 09:C5C0: B7 0E        	lda	[<L90+current_file_0],Y
  4641 09:C5C2: 85 03        	sta	<R0+2
  4642 09:C5C4: A4 05        	ldy	<R1
  4643 09:C5C6: B7 01        	lda	[<R0],Y
  4644 09:C5C8: 29 FF 00     	and	#$ff
  4645 09:C5CB: 85 09        	sta	<L91+length_1
  4646                        ;      memcpy(&current_header->SegName,&current_fi
                    le->data[data_offset+current_header->DispNameOffset+10+1],le
                    ngth);
  4647                        	.line	484
  4648 09:C5CD: D4 09        	pei	<L91+length_1
  4649 09:C5CF: 18           	clc
  4650 09:C5D0: A5 12        	lda	<L90+data_offset_0
  4651 09:C5D2: A0 36 00     	ldy	#$36
  4652 09:C5D5: 77 14        	adc	[<L90+current_header_0],Y
  4653 09:C5D7: 85 01        	sta	<R0
  4654 09:C5D9: 18           	clc
  4655 09:C5DA: A9 0B 00     	lda	#$b
  4656 09:C5DD: 65 01        	adc	<R0
  4657 09:C5DF: 85 05        	sta	<R1
  4658 09:C5E1: A0 00 00     	ldy	#$0
  4659 09:C5E4: A5 05        	lda	<R1
  4660 09:C5E6: 10 01        	bpl	L153
  4661 09:C5E8: 88           	dey
  4662                        L153:
  4663 09:C5E9: 85 01        	sta	<R0
  4664 09:C5EB: 84 03        	sty	<R0+2
  4665 09:C5ED: 18           	clc
  4666 09:C5EE: A0 0A 00     	ldy	#$a
  4667 09:C5F1: B7 0E        	lda	[<L90+current_file_0],Y
  4668 09:C5F3: 65 01        	adc	<R0
  4669 09:C5F5: 85 05        	sta	<R1
  4670 09:C5F7: A0 0C 00     	ldy	#$c
  4671 09:C5FA: B7 0E        	lda	[<L90+current_file_0],Y
  4672 09:C5FC: 65 03        	adc	<R0+2
  4673 09:C5FE: 85 07        	sta	<R1+2
  4674 09:C600: D4 07        	pei	<R1+2
  4675 09:C602: D4 05        	pei	<R1
  4676 09:C604: 18           	clc
  4677 09:C605: A9 3C 09     	lda	#$93c
  4678 09:C608: 65 14        	adc	<L90+current_header_0
  4679 09:C60A: 85 01        	sta	<R0
  4680 09:C60C: A9 00 00     	lda	#$0
  4681 09:C60F: 65 16        	adc	<L90+current_header_0+2
  4682 09:C611: 85 03        	sta	<R0+2
  4683 09:C613: D4 03        	pei	<R0+2
  4684 09:C615: D4 01        	pei	<R0
  4685 09:C617: 22 xx xx xx  	jsl	~~memcpy
  Sat Jul 10 2021  1:15                                                Page 88


  4686                        ;    }
  4687                        	.line	485
  4688                        L10056:
  4689                        ;
  4690                        ;  /* OK */
  4691                        ;  return(0);
  4692                        	.line	488
  4693 09:C61B: A9 00 00     	lda	#$0
  4694 09:C61E: 82 E6 F6     	brl	L95
  4695                        ;}
  4696                        	.line	489
  4697                        	.endblock	489
  4698             0000000A   L90	equ	10
  4699             00000009   L91	equ	9
  4700 09:C621:              	ends
  4701                        	efunc
  4702                        	.endfunc	489,9,10
  4703                        	.line	489
  4704                        ;
  4705                        ;
  4706                        ;/************************************************
                    ************/
  4707                        ;/*  DecodeSegmentHeaderV2() :  Décode le Header d
                    u Segment. */
  4708                        ;/************************************************
                    ************/
  4709                        ;static int DecodeSegmentHeaderV2(struct omf_file 
                    *current_file, int data_offset, struct omf_segment_header *c
                    urrent_header)
  4710                        ;{
  4711                        	.line	495
  4712                        	.line	496
  4713                        	LOADER
  4714                        	func
  4715                        	.function	496
  4716                        ~~DecodeSegmentHeaderV2:
  4717                        	longa	on
  4718                        	longi	on
  4719 09:C621: 3B           	tsc
  4720 09:C622: 38           	sec
  4721 09:C623: E9 0A 00     	sbc	#L154
  4722 09:C626: 1B           	tcs
  4723 09:C627: 0B           	phd
  4724 09:C628: 5B           	tcd
  4725             00000004   current_file_0	set	4
  4726             00000008   data_offset_0	set	8
  4727             0000000A   current_header_0	set	10
  4728                        	.block	496
  4729                        ;  int length;
  4730                        ;
  4731                        ;  /* Vérifie la taille */
  4732                        ;  if(data_offset + SEGMENT_HEADER_SIZE_V2 > curre
                    nt_file->data_length)
  4733             00000000   length_1	set	0
  4734                        	.sym	length,0,5,1,16
  4735                        	.sym	current_file,4,138,6,32,122
  4736                        	.sym	data_offset,8,5,6,16
  4737                        	.sym	current_header,10,138,6,32,120
  Sat Jul 10 2021  1:15                                                Page 89


  4738                        	.line	500
  4739                        ;    {
  4740 09:C629: 18           	clc
  4741 09:C62A: A9 40 00     	lda	#$40
  4742 09:C62D: 65 12        	adc	<L154+data_offset_0
  4743 09:C62F: 85 01        	sta	<R0
  4744 09:C631: 38           	sec
  4745 09:C632: A0 08 00     	ldy	#$8
  4746 09:C635: B7 0E        	lda	[<L154+current_file_0],Y
  4747 09:C637: E5 01        	sbc	<R0
  4748 09:C639: 70 03        	bvs	L157
  4749 09:C63B: 49 00 80     	eor	#$8000
  4750                        L157:
  4751 09:C63E: 10 03        	bpl	L158
  4752 09:C640: 82 15 00     	brl	L10057
  4753                        L158:
  4754                        	.line	501
  4755                        ;      //printf("  Error : Not enough data to enco
                    de a Segment Header (offset=%d, Segment #%d).\n",data_offset
                    ,current_file->nb_segment+1);
  4756                        ;      return(1);
  4757                        	.line	503
  4758 09:C643: A9 01 00     	lda	#$1
  4759                        L159:
  4760 09:C646: A8           	tay
  4761 09:C647: A5 0C        	lda	<L154+2
  4762 09:C649: 85 16        	sta	<L154+2+10
  4763 09:C64B: A5 0B        	lda	<L154+1
  4764 09:C64D: 85 15        	sta	<L154+1+10
  4765 09:C64F: 2B           	pld
  4766 09:C650: 3B           	tsc
  4767 09:C651: 18           	clc
  4768 09:C652: 69 14 00     	adc	#L154+10
  4769 09:C655: 1B           	tcs
  4770 09:C656: 98           	tya
  4771 09:C657: 6B           	rtl
  4772                        ;    }
  4773                        	.line	504
  4774                        ;
  4775                        ;  /**********************************************
                    *********/
  4776                        ;  /**  On va décoder tous les éléments fixes du H
                    eader  **/
  4777                        ;  /**********************************************
                    *********/
  4778                        ;  memcpy(&current_header->ByteCnt,&current_file->
                    data[data_offset+0x00],sizeof(DWORD));
  4779                        L10057:
  4780                        	.line	509
  4781 09:C658: F4 04 00     	pea	#<$4
  4782 09:C65B: A0 00 00     	ldy	#$0
  4783 09:C65E: A5 12        	lda	<L154+data_offset_0
  4784 09:C660: 10 01        	bpl	L160
  4785 09:C662: 88           	dey
  4786                        L160:
  4787 09:C663: 85 01        	sta	<R0
  4788 09:C665: 84 03        	sty	<R0+2
  4789 09:C667: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 90


  4790 09:C668: A0 0A 00     	ldy	#$a
  4791 09:C66B: B7 0E        	lda	[<L154+current_file_0],Y
  4792 09:C66D: 65 01        	adc	<R0
  4793 09:C66F: 85 05        	sta	<R1
  4794 09:C671: A0 0C 00     	ldy	#$c
  4795 09:C674: B7 0E        	lda	[<L154+current_file_0],Y
  4796 09:C676: 65 03        	adc	<R0+2
  4797 09:C678: 85 07        	sta	<R1+2
  4798 09:C67A: D4 07        	pei	<R1+2
  4799 09:C67C: D4 05        	pei	<R1
  4800 09:C67E: 18           	clc
  4801 09:C67F: A9 0C 00     	lda	#$c
  4802 09:C682: 65 14        	adc	<L154+current_header_0
  4803 09:C684: 85 01        	sta	<R0
  4804 09:C686: A9 00 00     	lda	#$0
  4805 09:C689: 65 16        	adc	<L154+current_header_0+2
  4806 09:C68B: 85 03        	sta	<R0+2
  4807 09:C68D: D4 03        	pei	<R0+2
  4808 09:C68F: D4 01        	pei	<R0
  4809 09:C691: 22 xx xx xx  	jsl	~~memcpy
  4810                        ;  memcpy(&current_header->ResSpc,&current_file->d
                    ata[data_offset+0x04],sizeof(DWORD));
  4811                        	.line	510
  4812 09:C695: F4 04 00     	pea	#<$4
  4813 09:C698: 18           	clc
  4814 09:C699: A9 04 00     	lda	#$4
  4815 09:C69C: 65 12        	adc	<L154+data_offset_0
  4816 09:C69E: 85 01        	sta	<R0
  4817 09:C6A0: A0 00 00     	ldy	#$0
  4818 09:C6A3: A5 01        	lda	<R0
  4819 09:C6A5: 10 01        	bpl	L161
  4820 09:C6A7: 88           	dey
  4821                        L161:
  4822 09:C6A8: 85 01        	sta	<R0
  4823 09:C6AA: 84 03        	sty	<R0+2
  4824 09:C6AC: 18           	clc
  4825 09:C6AD: A0 0A 00     	ldy	#$a
  4826 09:C6B0: B7 0E        	lda	[<L154+current_file_0],Y
  4827 09:C6B2: 65 01        	adc	<R0
  4828 09:C6B4: 85 05        	sta	<R1
  4829 09:C6B6: A0 0C 00     	ldy	#$c
  4830 09:C6B9: B7 0E        	lda	[<L154+current_file_0],Y
  4831 09:C6BB: 65 03        	adc	<R0+2
  4832 09:C6BD: 85 07        	sta	<R1+2
  4833 09:C6BF: D4 07        	pei	<R1+2
  4834 09:C6C1: D4 05        	pei	<R1
  4835 09:C6C3: 18           	clc
  4836 09:C6C4: A9 10 00     	lda	#$10
  4837 09:C6C7: 65 14        	adc	<L154+current_header_0
  4838 09:C6C9: 85 01        	sta	<R0
  4839 09:C6CB: A9 00 00     	lda	#$0
  4840 09:C6CE: 65 16        	adc	<L154+current_header_0+2
  4841 09:C6D0: 85 03        	sta	<R0+2
  4842 09:C6D2: D4 03        	pei	<R0+2
  4843 09:C6D4: D4 01        	pei	<R0
  4844 09:C6D6: 22 xx xx xx  	jsl	~~memcpy
  4845                        ;  memcpy(&current_header->Length,&current_file->d
                    ata[data_offset+0x08],sizeof(DWORD));
  Sat Jul 10 2021  1:15                                                Page 91


  4846                        	.line	511
  4847 09:C6DA: F4 04 00     	pea	#<$4
  4848 09:C6DD: 18           	clc
  4849 09:C6DE: A9 08 00     	lda	#$8
  4850 09:C6E1: 65 12        	adc	<L154+data_offset_0
  4851 09:C6E3: 85 01        	sta	<R0
  4852 09:C6E5: A0 00 00     	ldy	#$0
  4853 09:C6E8: A5 01        	lda	<R0
  4854 09:C6EA: 10 01        	bpl	L162
  4855 09:C6EC: 88           	dey
  4856                        L162:
  4857 09:C6ED: 85 01        	sta	<R0
  4858 09:C6EF: 84 03        	sty	<R0+2
  4859 09:C6F1: 18           	clc
  4860 09:C6F2: A0 0A 00     	ldy	#$a
  4861 09:C6F5: B7 0E        	lda	[<L154+current_file_0],Y
  4862 09:C6F7: 65 01        	adc	<R0
  4863 09:C6F9: 85 05        	sta	<R1
  4864 09:C6FB: A0 0C 00     	ldy	#$c
  4865 09:C6FE: B7 0E        	lda	[<L154+current_file_0],Y
  4866 09:C700: 65 03        	adc	<R0+2
  4867 09:C702: 85 07        	sta	<R1+2
  4868 09:C704: D4 07        	pei	<R1+2
  4869 09:C706: D4 05        	pei	<R1
  4870 09:C708: 18           	clc
  4871 09:C709: A9 14 00     	lda	#$14
  4872 09:C70C: 65 14        	adc	<L154+current_header_0
  4873 09:C70E: 85 01        	sta	<R0
  4874 09:C710: A9 00 00     	lda	#$0
  4875 09:C713: 65 16        	adc	<L154+current_header_0+2
  4876 09:C715: 85 03        	sta	<R0+2
  4877 09:C717: D4 03        	pei	<R0+2
  4878 09:C719: D4 01        	pei	<R0
  4879 09:C71B: 22 xx xx xx  	jsl	~~memcpy
  4880                        ;  memcpy(&current_header->undefine_1,&current_fil
                    e->data[data_offset+0x0C],sizeof(BYTE));
  4881                        	.line	512
  4882 09:C71F: F4 01 00     	pea	#<$1
  4883 09:C722: 18           	clc
  4884 09:C723: A9 0C 00     	lda	#$c
  4885 09:C726: 65 12        	adc	<L154+data_offset_0
  4886 09:C728: 85 01        	sta	<R0
  4887 09:C72A: A0 00 00     	ldy	#$0
  4888 09:C72D: A5 01        	lda	<R0
  4889 09:C72F: 10 01        	bpl	L163
  4890 09:C731: 88           	dey
  4891                        L163:
  4892 09:C732: 85 01        	sta	<R0
  4893 09:C734: 84 03        	sty	<R0+2
  4894 09:C736: 18           	clc
  4895 09:C737: A0 0A 00     	ldy	#$a
  4896 09:C73A: B7 0E        	lda	[<L154+current_file_0],Y
  4897 09:C73C: 65 01        	adc	<R0
  4898 09:C73E: 85 05        	sta	<R1
  4899 09:C740: A0 0C 00     	ldy	#$c
  4900 09:C743: B7 0E        	lda	[<L154+current_file_0],Y
  4901 09:C745: 65 03        	adc	<R0+2
  4902 09:C747: 85 07        	sta	<R1+2
  Sat Jul 10 2021  1:15                                                Page 92


  4903 09:C749: D4 07        	pei	<R1+2
  4904 09:C74B: D4 05        	pei	<R1
  4905 09:C74D: 18           	clc
  4906 09:C74E: A9 19 00     	lda	#$19
  4907 09:C751: 65 14        	adc	<L154+current_header_0
  4908 09:C753: 85 01        	sta	<R0
  4909 09:C755: A9 00 00     	lda	#$0
  4910 09:C758: 65 16        	adc	<L154+current_header_0+2
  4911 09:C75A: 85 03        	sta	<R0+2
  4912 09:C75C: D4 03        	pei	<R0+2
  4913 09:C75E: D4 01        	pei	<R0
  4914 09:C760: 22 xx xx xx  	jsl	~~memcpy
  4915                        ;  memcpy(&current_header->LabLen,&current_file->d
                    ata[data_offset+0x0D],sizeof(BYTE));
  4916                        	.line	513
  4917 09:C764: F4 01 00     	pea	#<$1
  4918 09:C767: 18           	clc
  4919 09:C768: A9 0D 00     	lda	#$d
  4920 09:C76B: 65 12        	adc	<L154+data_offset_0
  4921 09:C76D: 85 01        	sta	<R0
  4922 09:C76F: A0 00 00     	ldy	#$0
  4923 09:C772: A5 01        	lda	<R0
  4924 09:C774: 10 01        	bpl	L164
  4925 09:C776: 88           	dey
  4926                        L164:
  4927 09:C777: 85 01        	sta	<R0
  4928 09:C779: 84 03        	sty	<R0+2
  4929 09:C77B: 18           	clc
  4930 09:C77C: A0 0A 00     	ldy	#$a
  4931 09:C77F: B7 0E        	lda	[<L154+current_file_0],Y
  4932 09:C781: 65 01        	adc	<R0
  4933 09:C783: 85 05        	sta	<R1
  4934 09:C785: A0 0C 00     	ldy	#$c
  4935 09:C788: B7 0E        	lda	[<L154+current_file_0],Y
  4936 09:C78A: 65 03        	adc	<R0+2
  4937 09:C78C: 85 07        	sta	<R1+2
  4938 09:C78E: D4 07        	pei	<R1+2
  4939 09:C790: D4 05        	pei	<R1
  4940 09:C792: 18           	clc
  4941 09:C793: A9 1A 00     	lda	#$1a
  4942 09:C796: 65 14        	adc	<L154+current_header_0
  4943 09:C798: 85 01        	sta	<R0
  4944 09:C79A: A9 00 00     	lda	#$0
  4945 09:C79D: 65 16        	adc	<L154+current_header_0+2
  4946 09:C79F: 85 03        	sta	<R0+2
  4947 09:C7A1: D4 03        	pei	<R0+2
  4948 09:C7A3: D4 01        	pei	<R0
  4949 09:C7A5: 22 xx xx xx  	jsl	~~memcpy
  4950                        ;  memcpy(&current_header->NumLen,&current_file->d
                    ata[data_offset+0x0E],sizeof(BYTE));
  4951                        	.line	514
  4952 09:C7A9: F4 01 00     	pea	#<$1
  4953 09:C7AC: 18           	clc
  4954 09:C7AD: A9 0E 00     	lda	#$e
  4955 09:C7B0: 65 12        	adc	<L154+data_offset_0
  4956 09:C7B2: 85 01        	sta	<R0
  4957 09:C7B4: A0 00 00     	ldy	#$0
  4958 09:C7B7: A5 01        	lda	<R0
  Sat Jul 10 2021  1:15                                                Page 93


  4959 09:C7B9: 10 01        	bpl	L165
  4960 09:C7BB: 88           	dey
  4961                        L165:
  4962 09:C7BC: 85 01        	sta	<R0
  4963 09:C7BE: 84 03        	sty	<R0+2
  4964 09:C7C0: 18           	clc
  4965 09:C7C1: A0 0A 00     	ldy	#$a
  4966 09:C7C4: B7 0E        	lda	[<L154+current_file_0],Y
  4967 09:C7C6: 65 01        	adc	<R0
  4968 09:C7C8: 85 05        	sta	<R1
  4969 09:C7CA: A0 0C 00     	ldy	#$c
  4970 09:C7CD: B7 0E        	lda	[<L154+current_file_0],Y
  4971 09:C7CF: 65 03        	adc	<R0+2
  4972 09:C7D1: 85 07        	sta	<R1+2
  4973 09:C7D3: D4 07        	pei	<R1+2
  4974 09:C7D5: D4 05        	pei	<R1
  4975 09:C7D7: 18           	clc
  4976 09:C7D8: A9 1B 00     	lda	#$1b
  4977 09:C7DB: 65 14        	adc	<L154+current_header_0
  4978 09:C7DD: 85 01        	sta	<R0
  4979 09:C7DF: A9 00 00     	lda	#$0
  4980 09:C7E2: 65 16        	adc	<L154+current_header_0+2
  4981 09:C7E4: 85 03        	sta	<R0+2
  4982 09:C7E6: D4 03        	pei	<R0+2
  4983 09:C7E8: D4 01        	pei	<R0
  4984 09:C7EA: 22 xx xx xx  	jsl	~~memcpy
  4985                        ;  memcpy(&current_header->BankSize,&current_file-
                    >data[data_offset+0x10],sizeof(DWORD));
  4986                        	.line	515
  4987 09:C7EE: F4 04 00     	pea	#<$4
  4988 09:C7F1: 18           	clc
  4989 09:C7F2: A9 10 00     	lda	#$10
  4990 09:C7F5: 65 12        	adc	<L154+data_offset_0
  4991 09:C7F7: 85 01        	sta	<R0
  4992 09:C7F9: A0 00 00     	ldy	#$0
  4993 09:C7FC: A5 01        	lda	<R0
  4994 09:C7FE: 10 01        	bpl	L166
  4995 09:C800: 88           	dey
  4996                        L166:
  4997 09:C801: 85 01        	sta	<R0
  4998 09:C803: 84 03        	sty	<R0+2
  4999 09:C805: 18           	clc
  5000 09:C806: A0 0A 00     	ldy	#$a
  5001 09:C809: B7 0E        	lda	[<L154+current_file_0],Y
  5002 09:C80B: 65 01        	adc	<R0
  5003 09:C80D: 85 05        	sta	<R1
  5004 09:C80F: A0 0C 00     	ldy	#$c
  5005 09:C812: B7 0E        	lda	[<L154+current_file_0],Y
  5006 09:C814: 65 03        	adc	<R0+2
  5007 09:C816: 85 07        	sta	<R1+2
  5008 09:C818: D4 07        	pei	<R1+2
  5009 09:C81A: D4 05        	pei	<R1
  5010 09:C81C: 18           	clc
  5011 09:C81D: A9 1D 00     	lda	#$1d
  5012 09:C820: 65 14        	adc	<L154+current_header_0
  5013 09:C822: 85 01        	sta	<R0
  5014 09:C824: A9 00 00     	lda	#$0
  5015 09:C827: 65 16        	adc	<L154+current_header_0+2
  Sat Jul 10 2021  1:15                                                Page 94


  5016 09:C829: 85 03        	sta	<R0+2
  5017 09:C82B: D4 03        	pei	<R0+2
  5018 09:C82D: D4 01        	pei	<R0
  5019 09:C82F: 22 xx xx xx  	jsl	~~memcpy
  5020                        ;  memcpy(&current_header->Kind,&current_file->dat
                    a[data_offset+0x14],sizeof(WORD));
  5021                        	.line	516
  5022 09:C833: F4 02 00     	pea	#<$2
  5023 09:C836: 18           	clc
  5024 09:C837: A9 14 00     	lda	#$14
  5025 09:C83A: 65 12        	adc	<L154+data_offset_0
  5026 09:C83C: 85 01        	sta	<R0
  5027 09:C83E: A0 00 00     	ldy	#$0
  5028 09:C841: A5 01        	lda	<R0
  5029 09:C843: 10 01        	bpl	L167
  5030 09:C845: 88           	dey
  5031                        L167:
  5032 09:C846: 85 01        	sta	<R0
  5033 09:C848: 84 03        	sty	<R0+2
  5034 09:C84A: 18           	clc
  5035 09:C84B: A0 0A 00     	ldy	#$a
  5036 09:C84E: B7 0E        	lda	[<L154+current_file_0],Y
  5037 09:C850: 65 01        	adc	<R0
  5038 09:C852: 85 05        	sta	<R1
  5039 09:C854: A0 0C 00     	ldy	#$c
  5040 09:C857: B7 0E        	lda	[<L154+current_file_0],Y
  5041 09:C859: 65 03        	adc	<R0+2
  5042 09:C85B: 85 07        	sta	<R1+2
  5043 09:C85D: D4 07        	pei	<R1+2
  5044 09:C85F: D4 05        	pei	<R1
  5045 09:C861: 18           	clc
  5046 09:C862: A9 21 00     	lda	#$21
  5047 09:C865: 65 14        	adc	<L154+current_header_0
  5048 09:C867: 85 01        	sta	<R0
  5049 09:C869: A9 00 00     	lda	#$0
  5050 09:C86C: 65 16        	adc	<L154+current_header_0+2
  5051 09:C86E: 85 03        	sta	<R0+2
  5052 09:C870: D4 03        	pei	<R0+2
  5053 09:C872: D4 01        	pei	<R0
  5054 09:C874: 22 xx xx xx  	jsl	~~memcpy
  5055                        ;  memcpy(&current_header->undefine_2,&current_fil
                    e->data[data_offset+0x16],sizeof(BYTE));
  5056                        	.line	517
  5057 09:C878: F4 01 00     	pea	#<$1
  5058 09:C87B: 18           	clc
  5059 09:C87C: A9 16 00     	lda	#$16
  5060 09:C87F: 65 12        	adc	<L154+data_offset_0
  5061 09:C881: 85 01        	sta	<R0
  5062 09:C883: A0 00 00     	ldy	#$0
  5063 09:C886: A5 01        	lda	<R0
  5064 09:C888: 10 01        	bpl	L168
  5065 09:C88A: 88           	dey
  5066                        L168:
  5067 09:C88B: 85 01        	sta	<R0
  5068 09:C88D: 84 03        	sty	<R0+2
  5069 09:C88F: 18           	clc
  5070 09:C890: A0 0A 00     	ldy	#$a
  5071 09:C893: B7 0E        	lda	[<L154+current_file_0],Y
  Sat Jul 10 2021  1:15                                                Page 95


  5072 09:C895: 65 01        	adc	<R0
  5073 09:C897: 85 05        	sta	<R1
  5074 09:C899: A0 0C 00     	ldy	#$c
  5075 09:C89C: B7 0E        	lda	[<L154+current_file_0],Y
  5076 09:C89E: 65 03        	adc	<R0+2
  5077 09:C8A0: 85 07        	sta	<R1+2
  5078 09:C8A2: D4 07        	pei	<R1+2
  5079 09:C8A4: D4 05        	pei	<R1
  5080 09:C8A6: 18           	clc
  5081 09:C8A7: A9 23 00     	lda	#$23
  5082 09:C8AA: 65 14        	adc	<L154+current_header_0
  5083 09:C8AC: 85 01        	sta	<R0
  5084 09:C8AE: A9 00 00     	lda	#$0
  5085 09:C8B1: 65 16        	adc	<L154+current_header_0+2
  5086 09:C8B3: 85 03        	sta	<R0+2
  5087 09:C8B5: D4 03        	pei	<R0+2
  5088 09:C8B7: D4 01        	pei	<R0
  5089 09:C8B9: 22 xx xx xx  	jsl	~~memcpy
  5090                        ;  memcpy(&current_header->undefine_3,&current_fil
                    e->data[data_offset+0x17],sizeof(BYTE));
  5091                        	.line	518
  5092 09:C8BD: F4 01 00     	pea	#<$1
  5093 09:C8C0: 18           	clc
  5094 09:C8C1: A9 17 00     	lda	#$17
  5095 09:C8C4: 65 12        	adc	<L154+data_offset_0
  5096 09:C8C6: 85 01        	sta	<R0
  5097 09:C8C8: A0 00 00     	ldy	#$0
  5098 09:C8CB: A5 01        	lda	<R0
  5099 09:C8CD: 10 01        	bpl	L169
  5100 09:C8CF: 88           	dey
  5101                        L169:
  5102 09:C8D0: 85 01        	sta	<R0
  5103 09:C8D2: 84 03        	sty	<R0+2
  5104 09:C8D4: 18           	clc
  5105 09:C8D5: A0 0A 00     	ldy	#$a
  5106 09:C8D8: B7 0E        	lda	[<L154+current_file_0],Y
  5107 09:C8DA: 65 01        	adc	<R0
  5108 09:C8DC: 85 05        	sta	<R1
  5109 09:C8DE: A0 0C 00     	ldy	#$c
  5110 09:C8E1: B7 0E        	lda	[<L154+current_file_0],Y
  5111 09:C8E3: 65 03        	adc	<R0+2
  5112 09:C8E5: 85 07        	sta	<R1+2
  5113 09:C8E7: D4 07        	pei	<R1+2
  5114 09:C8E9: D4 05        	pei	<R1
  5115 09:C8EB: 18           	clc
  5116 09:C8EC: A9 24 00     	lda	#$24
  5117 09:C8EF: 65 14        	adc	<L154+current_header_0
  5118 09:C8F1: 85 01        	sta	<R0
  5119 09:C8F3: A9 00 00     	lda	#$0
  5120 09:C8F6: 65 16        	adc	<L154+current_header_0+2
  5121 09:C8F8: 85 03        	sta	<R0+2
  5122 09:C8FA: D4 03        	pei	<R0+2
  5123 09:C8FC: D4 01        	pei	<R0
  5124 09:C8FE: 22 xx xx xx  	jsl	~~memcpy
  5125                        ;  memcpy(&current_header->Org,&current_file->data
                    [data_offset+0x18],sizeof(DWORD));
  5126                        	.line	519
  5127 09:C902: F4 04 00     	pea	#<$4
  Sat Jul 10 2021  1:15                                                Page 96


  5128 09:C905: 18           	clc
  5129 09:C906: A9 18 00     	lda	#$18
  5130 09:C909: 65 12        	adc	<L154+data_offset_0
  5131 09:C90B: 85 01        	sta	<R0
  5132 09:C90D: A0 00 00     	ldy	#$0
  5133 09:C910: A5 01        	lda	<R0
  5134 09:C912: 10 01        	bpl	L170
  5135 09:C914: 88           	dey
  5136                        L170:
  5137 09:C915: 85 01        	sta	<R0
  5138 09:C917: 84 03        	sty	<R0+2
  5139 09:C919: 18           	clc
  5140 09:C91A: A0 0A 00     	ldy	#$a
  5141 09:C91D: B7 0E        	lda	[<L154+current_file_0],Y
  5142 09:C91F: 65 01        	adc	<R0
  5143 09:C921: 85 05        	sta	<R1
  5144 09:C923: A0 0C 00     	ldy	#$c
  5145 09:C926: B7 0E        	lda	[<L154+current_file_0],Y
  5146 09:C928: 65 03        	adc	<R0+2
  5147 09:C92A: 85 07        	sta	<R1+2
  5148 09:C92C: D4 07        	pei	<R1+2
  5149 09:C92E: D4 05        	pei	<R1
  5150 09:C930: 18           	clc
  5151 09:C931: A9 25 00     	lda	#$25
  5152 09:C934: 65 14        	adc	<L154+current_header_0
  5153 09:C936: 85 01        	sta	<R0
  5154 09:C938: A9 00 00     	lda	#$0
  5155 09:C93B: 65 16        	adc	<L154+current_header_0+2
  5156 09:C93D: 85 03        	sta	<R0+2
  5157 09:C93F: D4 03        	pei	<R0+2
  5158 09:C941: D4 01        	pei	<R0
  5159 09:C943: 22 xx xx xx  	jsl	~~memcpy
  5160                        ;  memcpy(&current_header->Align,&current_file->da
                    ta[data_offset+0x1C],sizeof(DWORD));
  5161                        	.line	520
  5162 09:C947: F4 04 00     	pea	#<$4
  5163 09:C94A: 18           	clc
  5164 09:C94B: A9 1C 00     	lda	#$1c
  5165 09:C94E: 65 12        	adc	<L154+data_offset_0
  5166 09:C950: 85 01        	sta	<R0
  5167 09:C952: A0 00 00     	ldy	#$0
  5168 09:C955: A5 01        	lda	<R0
  5169 09:C957: 10 01        	bpl	L171
  5170 09:C959: 88           	dey
  5171                        L171:
  5172 09:C95A: 85 01        	sta	<R0
  5173 09:C95C: 84 03        	sty	<R0+2
  5174 09:C95E: 18           	clc
  5175 09:C95F: A0 0A 00     	ldy	#$a
  5176 09:C962: B7 0E        	lda	[<L154+current_file_0],Y
  5177 09:C964: 65 01        	adc	<R0
  5178 09:C966: 85 05        	sta	<R1
  5179 09:C968: A0 0C 00     	ldy	#$c
  5180 09:C96B: B7 0E        	lda	[<L154+current_file_0],Y
  5181 09:C96D: 65 03        	adc	<R0+2
  5182 09:C96F: 85 07        	sta	<R1+2
  5183 09:C971: D4 07        	pei	<R1+2
  5184 09:C973: D4 05        	pei	<R1
  Sat Jul 10 2021  1:15                                                Page 97


  5185 09:C975: 18           	clc
  5186 09:C976: A9 29 00     	lda	#$29
  5187 09:C979: 65 14        	adc	<L154+current_header_0
  5188 09:C97B: 85 01        	sta	<R0
  5189 09:C97D: A9 00 00     	lda	#$0
  5190 09:C980: 65 16        	adc	<L154+current_header_0+2
  5191 09:C982: 85 03        	sta	<R0+2
  5192 09:C984: D4 03        	pei	<R0+2
  5193 09:C986: D4 01        	pei	<R0
  5194 09:C988: 22 xx xx xx  	jsl	~~memcpy
  5195                        ;  memcpy(&current_header->NumSEx,&current_file->d
                    ata[data_offset+0x20],sizeof(BYTE));
  5196                        	.line	521
  5197 09:C98C: F4 01 00     	pea	#<$1
  5198 09:C98F: 18           	clc
  5199 09:C990: A9 20 00     	lda	#$20
  5200 09:C993: 65 12        	adc	<L154+data_offset_0
  5201 09:C995: 85 01        	sta	<R0
  5202 09:C997: A0 00 00     	ldy	#$0
  5203 09:C99A: A5 01        	lda	<R0
  5204 09:C99C: 10 01        	bpl	L172
  5205 09:C99E: 88           	dey
  5206                        L172:
  5207 09:C99F: 85 01        	sta	<R0
  5208 09:C9A1: 84 03        	sty	<R0+2
  5209 09:C9A3: 18           	clc
  5210 09:C9A4: A0 0A 00     	ldy	#$a
  5211 09:C9A7: B7 0E        	lda	[<L154+current_file_0],Y
  5212 09:C9A9: 65 01        	adc	<R0
  5213 09:C9AB: 85 05        	sta	<R1
  5214 09:C9AD: A0 0C 00     	ldy	#$c
  5215 09:C9B0: B7 0E        	lda	[<L154+current_file_0],Y
  5216 09:C9B2: 65 03        	adc	<R0+2
  5217 09:C9B4: 85 07        	sta	<R1+2
  5218 09:C9B6: D4 07        	pei	<R1+2
  5219 09:C9B8: D4 05        	pei	<R1
  5220 09:C9BA: 18           	clc
  5221 09:C9BB: A9 2D 00     	lda	#$2d
  5222 09:C9BE: 65 14        	adc	<L154+current_header_0
  5223 09:C9C0: 85 01        	sta	<R0
  5224 09:C9C2: A9 00 00     	lda	#$0
  5225 09:C9C5: 65 16        	adc	<L154+current_header_0+2
  5226 09:C9C7: 85 03        	sta	<R0+2
  5227 09:C9C9: D4 03        	pei	<R0+2
  5228 09:C9CB: D4 01        	pei	<R0
  5229 09:C9CD: 22 xx xx xx  	jsl	~~memcpy
  5230                        ;  memcpy(&current_header->undefine_4,&current_fil
                    e->data[data_offset+0x21],sizeof(BYTE));
  5231                        	.line	522
  5232 09:C9D1: F4 01 00     	pea	#<$1
  5233 09:C9D4: 18           	clc
  5234 09:C9D5: A9 21 00     	lda	#$21
  5235 09:C9D8: 65 12        	adc	<L154+data_offset_0
  5236 09:C9DA: 85 01        	sta	<R0
  5237 09:C9DC: A0 00 00     	ldy	#$0
  5238 09:C9DF: A5 01        	lda	<R0
  5239 09:C9E1: 10 01        	bpl	L173
  5240 09:C9E3: 88           	dey
  Sat Jul 10 2021  1:15                                                Page 98


  5241                        L173:
  5242 09:C9E4: 85 01        	sta	<R0
  5243 09:C9E6: 84 03        	sty	<R0+2
  5244 09:C9E8: 18           	clc
  5245 09:C9E9: A0 0A 00     	ldy	#$a
  5246 09:C9EC: B7 0E        	lda	[<L154+current_file_0],Y
  5247 09:C9EE: 65 01        	adc	<R0
  5248 09:C9F0: 85 05        	sta	<R1
  5249 09:C9F2: A0 0C 00     	ldy	#$c
  5250 09:C9F5: B7 0E        	lda	[<L154+current_file_0],Y
  5251 09:C9F7: 65 03        	adc	<R0+2
  5252 09:C9F9: 85 07        	sta	<R1+2
  5253 09:C9FB: D4 07        	pei	<R1+2
  5254 09:C9FD: D4 05        	pei	<R1
  5255 09:C9FF: 18           	clc
  5256 09:CA00: A9 2F 00     	lda	#$2f
  5257 09:CA03: 65 14        	adc	<L154+current_header_0
  5258 09:CA05: 85 01        	sta	<R0
  5259 09:CA07: A9 00 00     	lda	#$0
  5260 09:CA0A: 65 16        	adc	<L154+current_header_0+2
  5261 09:CA0C: 85 03        	sta	<R0+2
  5262 09:CA0E: D4 03        	pei	<R0+2
  5263 09:CA10: D4 01        	pei	<R0
  5264 09:CA12: 22 xx xx xx  	jsl	~~memcpy
  5265                        ;  memcpy(&current_header->SegNum,&current_file->d
                    ata[data_offset+0x22],sizeof(WORD));
  5266                        	.line	523
  5267 09:CA16: F4 02 00     	pea	#<$2
  5268 09:CA19: 18           	clc
  5269 09:CA1A: A9 22 00     	lda	#$22
  5270 09:CA1D: 65 12        	adc	<L154+data_offset_0
  5271 09:CA1F: 85 01        	sta	<R0
  5272 09:CA21: A0 00 00     	ldy	#$0
  5273 09:CA24: A5 01        	lda	<R0
  5274 09:CA26: 10 01        	bpl	L174
  5275 09:CA28: 88           	dey
  5276                        L174:
  5277 09:CA29: 85 01        	sta	<R0
  5278 09:CA2B: 84 03        	sty	<R0+2
  5279 09:CA2D: 18           	clc
  5280 09:CA2E: A0 0A 00     	ldy	#$a
  5281 09:CA31: B7 0E        	lda	[<L154+current_file_0],Y
  5282 09:CA33: 65 01        	adc	<R0
  5283 09:CA35: 85 05        	sta	<R1
  5284 09:CA37: A0 0C 00     	ldy	#$c
  5285 09:CA3A: B7 0E        	lda	[<L154+current_file_0],Y
  5286 09:CA3C: 65 03        	adc	<R0+2
  5287 09:CA3E: 85 07        	sta	<R1+2
  5288 09:CA40: D4 07        	pei	<R1+2
  5289 09:CA42: D4 05        	pei	<R1
  5290 09:CA44: 18           	clc
  5291 09:CA45: A9 30 00     	lda	#$30
  5292 09:CA48: 65 14        	adc	<L154+current_header_0
  5293 09:CA4A: 85 01        	sta	<R0
  5294 09:CA4C: A9 00 00     	lda	#$0
  5295 09:CA4F: 65 16        	adc	<L154+current_header_0+2
  5296 09:CA51: 85 03        	sta	<R0+2
  5297 09:CA53: D4 03        	pei	<R0+2
  Sat Jul 10 2021  1:15                                                Page 99


  5298 09:CA55: D4 01        	pei	<R0
  5299 09:CA57: 22 xx xx xx  	jsl	~~memcpy
  5300                        ;  memcpy(&current_header->EntryPointOffset,&curre
                    nt_file->data[data_offset+0x24],sizeof(DWORD));
  5301                        	.line	524
  5302 09:CA5B: F4 04 00     	pea	#<$4
  5303 09:CA5E: 18           	clc
  5304 09:CA5F: A9 24 00     	lda	#$24
  5305 09:CA62: 65 12        	adc	<L154+data_offset_0
  5306 09:CA64: 85 01        	sta	<R0
  5307 09:CA66: A0 00 00     	ldy	#$0
  5308 09:CA69: A5 01        	lda	<R0
  5309 09:CA6B: 10 01        	bpl	L175
  5310 09:CA6D: 88           	dey
  5311                        L175:
  5312 09:CA6E: 85 01        	sta	<R0
  5313 09:CA70: 84 03        	sty	<R0+2
  5314 09:CA72: 18           	clc
  5315 09:CA73: A0 0A 00     	ldy	#$a
  5316 09:CA76: B7 0E        	lda	[<L154+current_file_0],Y
  5317 09:CA78: 65 01        	adc	<R0
  5318 09:CA7A: 85 05        	sta	<R1
  5319 09:CA7C: A0 0C 00     	ldy	#$c
  5320 09:CA7F: B7 0E        	lda	[<L154+current_file_0],Y
  5321 09:CA81: 65 03        	adc	<R0+2
  5322 09:CA83: 85 07        	sta	<R1+2
  5323 09:CA85: D4 07        	pei	<R1+2
  5324 09:CA87: D4 05        	pei	<R1
  5325 09:CA89: 18           	clc
  5326 09:CA8A: A9 32 00     	lda	#$32
  5327 09:CA8D: 65 14        	adc	<L154+current_header_0
  5328 09:CA8F: 85 01        	sta	<R0
  5329 09:CA91: A9 00 00     	lda	#$0
  5330 09:CA94: 65 16        	adc	<L154+current_header_0+2
  5331 09:CA96: 85 03        	sta	<R0+2
  5332 09:CA98: D4 03        	pei	<R0+2
  5333 09:CA9A: D4 01        	pei	<R0
  5334 09:CA9C: 22 xx xx xx  	jsl	~~memcpy
  5335                        ;  memcpy(&current_header->DispNameOffset,&current
                    _file->data[data_offset+0x28],sizeof(WORD));       /* Load N
                    ame Offset */
  5336                        	.line	525
  5337 09:CAA0: F4 02 00     	pea	#<$2
  5338 09:CAA3: 18           	clc
  5339 09:CAA4: A9 28 00     	lda	#$28
  5340 09:CAA7: 65 12        	adc	<L154+data_offset_0
  5341 09:CAA9: 85 01        	sta	<R0
  5342 09:CAAB: A0 00 00     	ldy	#$0
  5343 09:CAAE: A5 01        	lda	<R0
  5344 09:CAB0: 10 01        	bpl	L176
  5345 09:CAB2: 88           	dey
  5346                        L176:
  5347 09:CAB3: 85 01        	sta	<R0
  5348 09:CAB5: 84 03        	sty	<R0+2
  5349 09:CAB7: 18           	clc
  5350 09:CAB8: A0 0A 00     	ldy	#$a
  5351 09:CABB: B7 0E        	lda	[<L154+current_file_0],Y
  5352 09:CABD: 65 01        	adc	<R0
  Sat Jul 10 2021  1:15                                                Page 100


  5353 09:CABF: 85 05        	sta	<R1
  5354 09:CAC1: A0 0C 00     	ldy	#$c
  5355 09:CAC4: B7 0E        	lda	[<L154+current_file_0],Y
  5356 09:CAC6: 65 03        	adc	<R0+2
  5357 09:CAC8: 85 07        	sta	<R1+2
  5358 09:CACA: D4 07        	pei	<R1+2
  5359 09:CACC: D4 05        	pei	<R1
  5360 09:CACE: 18           	clc
  5361 09:CACF: A9 36 00     	lda	#$36
  5362 09:CAD2: 65 14        	adc	<L154+current_header_0
  5363 09:CAD4: 85 01        	sta	<R0
  5364 09:CAD6: A9 00 00     	lda	#$0
  5365 09:CAD9: 65 16        	adc	<L154+current_header_0+2
  5366 09:CADB: 85 03        	sta	<R0+2
  5367 09:CADD: D4 03        	pei	<R0+2
  5368 09:CADF: D4 01        	pei	<R0
  5369 09:CAE1: 22 xx xx xx  	jsl	~~memcpy
  5370                        ;  memcpy(&current_header->DispDataOffset,&current
                    _file->data[data_offset+0x2A],sizeof(WORD));       /* Segmen
                    t Name Offset */
  5371                        	.line	526
  5372 09:CAE5: F4 02 00     	pea	#<$2
  5373 09:CAE8: 18           	clc
  5374 09:CAE9: A9 2A 00     	lda	#$2a
  5375 09:CAEC: 65 12        	adc	<L154+data_offset_0
  5376 09:CAEE: 85 01        	sta	<R0
  5377 09:CAF0: A0 00 00     	ldy	#$0
  5378 09:CAF3: A5 01        	lda	<R0
  5379 09:CAF5: 10 01        	bpl	L177
  5380 09:CAF7: 88           	dey
  5381                        L177:
  5382 09:CAF8: 85 01        	sta	<R0
  5383 09:CAFA: 84 03        	sty	<R0+2
  5384 09:CAFC: 18           	clc
  5385 09:CAFD: A0 0A 00     	ldy	#$a
  5386 09:CB00: B7 0E        	lda	[<L154+current_file_0],Y
  5387 09:CB02: 65 01        	adc	<R0
  5388 09:CB04: 85 05        	sta	<R1
  5389 09:CB06: A0 0C 00     	ldy	#$c
  5390 09:CB09: B7 0E        	lda	[<L154+current_file_0],Y
  5391 09:CB0B: 65 03        	adc	<R0+2
  5392 09:CB0D: 85 07        	sta	<R1+2
  5393 09:CB0F: D4 07        	pei	<R1+2
  5394 09:CB11: D4 05        	pei	<R1
  5395 09:CB13: 18           	clc
  5396 09:CB14: A9 38 00     	lda	#$38
  5397 09:CB17: 65 14        	adc	<L154+current_header_0
  5398 09:CB19: 85 01        	sta	<R0
  5399 09:CB1B: A9 00 00     	lda	#$0
  5400 09:CB1E: 65 16        	adc	<L154+current_header_0+2
  5401 09:CB20: 85 03        	sta	<R0+2
  5402 09:CB22: D4 03        	pei	<R0+2
  5403 09:CB24: D4 01        	pei	<R0
  5404 09:CB26: 22 xx xx xx  	jsl	~~memcpy
  5405                        ;
  5406                        ;  /********************************************/
  5407                        ;  /**  On va valider les données récupérées  **/
  5408                        ;  /********************************************/
  Sat Jul 10 2021  1:15                                                Page 101


  5409                        ;  /* Taille du Segment */
  5410                        ;  if((int)(data_offset + current_header->ByteCnt)
                     > (int) current_file->data_length)
  5411                        	.line	532
  5412                        ;    {
  5413 09:CB2A: A0 00 00     	ldy	#$0
  5414 09:CB2D: A5 12        	lda	<L154+data_offset_0
  5415 09:CB2F: 10 01        	bpl	L178
  5416 09:CB31: 88           	dey
  5417                        L178:
  5418 09:CB32: 85 01        	sta	<R0
  5419 09:CB34: 84 03        	sty	<R0+2
  5420 09:CB36: 18           	clc
  5421 09:CB37: A5 01        	lda	<R0
  5422 09:CB39: A0 0C 00     	ldy	#$c
  5423 09:CB3C: 77 14        	adc	[<L154+current_header_0],Y
  5424 09:CB3E: 85 05        	sta	<R1
  5425 09:CB40: A5 03        	lda	<R0+2
  5426 09:CB42: A0 0E 00     	ldy	#$e
  5427 09:CB45: 77 14        	adc	[<L154+current_header_0],Y
  5428 09:CB47: 85 07        	sta	<R1+2
  5429 09:CB49: 38           	sec
  5430 09:CB4A: A0 08 00     	ldy	#$8
  5431 09:CB4D: B7 0E        	lda	[<L154+current_file_0],Y
  5432 09:CB4F: E5 05        	sbc	<R1
  5433 09:CB51: 70 03        	bvs	L179
  5434 09:CB53: 49 00 80     	eor	#$8000
  5435                        L179:
  5436 09:CB56: 10 03        	bpl	L180
  5437 09:CB58: 82 06 00     	brl	L10058
  5438                        L180:
  5439                        	.line	533
  5440                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'ByteCnt' value (the segment size can't be larger than t
                    he OMF file).\n",current_file->nb_segment+1);
  5441                        ;      return(1);
  5442                        	.line	535
  5443 09:CB5B: A9 01 00     	lda	#$1
  5444 09:CB5E: 82 E5 FA     	brl	L159
  5445                        ;    }
  5446                        	.line	536
  5447                        ;  if(current_header->ByteCnt < SEGMENT_HEADER_SIZ
                    E_V2)
  5448                        L10058:
  5449                        	.line	537
  5450                        ;    {
  5451 09:CB61: A0 0C 00     	ldy	#$c
  5452 09:CB64: B7 14        	lda	[<L154+current_header_0],Y
  5453 09:CB66: C9 40 00     	cmp	#<$40
  5454 09:CB69: A0 0E 00     	ldy	#$e
  5455 09:CB6C: B7 14        	lda	[<L154+current_header_0],Y
  5456 09:CB6E: E9 00 00     	sbc	#^$40
  5457 09:CB71: 90 03        	bcc	L181
  5458 09:CB73: 82 06 00     	brl	L10059
  5459                        L181:
  5460                        	.line	538
  5461                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'ByteCnt' value (the segment size can't be smaller than 
  Sat Jul 10 2021  1:15                                                Page 102


                    the Sgement Header size).\n",current_file->nb_segment+1);
  5462                        ;      return(1);
  5463                        	.line	540
  5464 09:CB76: A9 01 00     	lda	#$1
  5465 09:CB79: 82 CA FA     	brl	L159
  5466                        ;    }
  5467                        	.line	541
  5468                        ;
  5469                        ;  /* Nombre de 0x00 à ajouter à la fin */
  5470                        ;  if(current_header->ResSpc >= 0x010000)
  5471                        L10059:
  5472                        	.line	544
  5473                        ;    {
  5474 09:CB7C: A0 10 00     	ldy	#$10
  5475 09:CB7F: B7 14        	lda	[<L154+current_header_0],Y
  5476 09:CB81: C9 00 00     	cmp	#<$10000
  5477 09:CB84: A0 12 00     	ldy	#$12
  5478 09:CB87: B7 14        	lda	[<L154+current_header_0],Y
  5479 09:CB89: E9 01 00     	sbc	#^$10000
  5480 09:CB8C: B0 03        	bcs	L182
  5481 09:CB8E: 82 06 00     	brl	L10060
  5482                        L182:
  5483                        	.line	545
  5484                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'ResSpc' value (the size can't be larger than 64 KB).\n"
                    ,current_file->nb_segment+1);
  5485                        ;      return(1);
  5486                        	.line	547
  5487 09:CB91: A9 01 00     	lda	#$1
  5488 09:CB94: 82 AF FA     	brl	L159
  5489                        ;    }
  5490                        	.line	548
  5491                        ;
  5492                        ;  /* La taille d'un Segment en mémoire ne peut pa
                    s dépasser 64 KB */
  5493                        ;  if(current_header->Length >= 0x010000)
  5494                        L10060:
  5495                        	.line	551
  5496                        ;    {
  5497 09:CB97: A0 14 00     	ldy	#$14
  5498 09:CB9A: B7 14        	lda	[<L154+current_header_0],Y
  5499 09:CB9C: C9 00 00     	cmp	#<$10000
  5500 09:CB9F: A0 16 00     	ldy	#$16
  5501 09:CBA2: B7 14        	lda	[<L154+current_header_0],Y
  5502 09:CBA4: E9 01 00     	sbc	#^$10000
  5503 09:CBA7: B0 03        	bcs	L183
  5504 09:CBA9: 82 06 00     	brl	L10061
  5505                        L183:
  5506                        	.line	552
  5507                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'Length' value (the segment size can't be larger than 64
                     KB).\n",current_file->nb_segment+1);
  5508                        ;      return(1);
  5509                        	.line	554
  5510 09:CBAC: A9 01 00     	lda	#$1
  5511 09:CBAF: 82 94 FA     	brl	L159
  5512                        ;    }
  5513                        	.line	555
  Sat Jul 10 2021  1:15                                                Page 103


  5514                        ;
  5515                        ;  /* LabLen : 0 ou 10 */
  5516                        ;  if(current_header->LabLen != 0x00 && current_he
                    ader->LabLen != 0x0A)
  5517                        L10061:
  5518                        	.line	558
  5519                        ;    {
  5520 09:CBB2: A0 1A 00     	ldy	#$1a
  5521 09:CBB5: B7 14        	lda	[<L154+current_header_0],Y
  5522 09:CBB7: 29 FF 00     	and	#$ff
  5523 09:CBBA: D0 03        	bne	L184
  5524 09:CBBC: 82 16 00     	brl	L10062
  5525                        L184:
  5526 09:CBBF: E2 20        	sep	#$20
  5527                        	longa	off
  5528 09:CBC1: A0 1A 00     	ldy	#$1a
  5529 09:CBC4: B7 14        	lda	[<L154+current_header_0],Y
  5530 09:CBC6: C9 0A        	cmp	#<$a
  5531 09:CBC8: C2 20        	rep	#$20
  5532                        	longa	on
  5533 09:CBCA: D0 03        	bne	L185
  5534 09:CBCC: 82 06 00     	brl	L10062
  5535                        L185:
  5536                        	.line	559
  5537                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'LabLen' value (the value should be 0 or 10 for the Appl
                    e IIgs).\n",current_file->nb_segment+1);
  5538                        ;      return(1);
  5539                        	.line	561
  5540 09:CBCF: A9 01 00     	lda	#$1
  5541 09:CBD2: 82 71 FA     	brl	L159
  5542                        ;    }
  5543                        	.line	562
  5544                        ;
  5545                        ;  /* Num Len : Tjs à 4 pour le IIgs */
  5546                        ;  if(current_header->NumLen != 0x04)
  5547                        L10062:
  5548                        	.line	565
  5549                        ;    {
  5550 09:CBD5: E2 20        	sep	#$20
  5551                        	longa	off
  5552 09:CBD7: A0 1B 00     	ldy	#$1b
  5553 09:CBDA: B7 14        	lda	[<L154+current_header_0],Y
  5554 09:CBDC: C9 04        	cmp	#<$4
  5555 09:CBDE: C2 20        	rep	#$20
  5556                        	longa	on
  5557 09:CBE0: D0 03        	bne	L186
  5558 09:CBE2: 82 06 00     	brl	L10063
  5559                        L186:
  5560                        	.line	566
  5561                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'NumLen' value (the value should be 4 for the Apple IIgs
                    ).\n",current_file->nb_segment+1);
  5562                        ;      return(1);
  5563                        	.line	568
  5564 09:CBE5: A9 01 00     	lda	#$1
  5565 09:CBE8: 82 5B FA     	brl	L159
  5566                        ;    }
  Sat Jul 10 2021  1:15                                                Page 104


  5567                        	.line	569
  5568                        ;
  5569                        ;  /* BankSize : <= 64 KB */
  5570                        ;  if(current_header->BankSize > 0x010000)
  5571                        L10063:
  5572                        	.line	572
  5573                        ;    {
  5574 09:CBEB: A9 00 00     	lda	#$0
  5575 09:CBEE: A0 1D 00     	ldy	#$1d
  5576 09:CBF1: D7 14        	cmp	[<L154+current_header_0],Y
  5577 09:CBF3: A9 01 00     	lda	#$1
  5578 09:CBF6: A0 1F 00     	ldy	#$1f
  5579 09:CBF9: F7 14        	sbc	[<L154+current_header_0],Y
  5580 09:CBFB: 90 03        	bcc	L187
  5581 09:CBFD: 82 06 00     	brl	L10064
  5582                        L187:
  5583                        	.line	573
  5584                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'BankSize' value (the value can't be larger than 64 KB).
                    \n",current_file->nb_segment+1);
  5585                        ;      return(1);
  5586                        	.line	575
  5587 09:CC00: A9 01 00     	lda	#$1
  5588 09:CC03: 82 40 FA     	brl	L159
  5589                        ;    }
  5590                        	.line	576
  5591                        ;
  5592                        ;  /* Kind */
  5593                        ;  if((current_header->Kind & 0x001F) != 0x0000 &&
                     (current_header->Kind & 0x001F) != 0x0001 && (current_heade
                    r->Kind & 0x001F) != 0x0002 &&
  5594                        L10064:
  5595                        	.line	579
  5596                        ;     (current_header->Kind & 0x001F) != 0x0004 &&
                     (current_header->Kind & 0x001F) != 0x0008 && (current_heade
                    r->Kind & 0x001F) != 0x0010 &&
  5597                        ;     (current_header->Kind & 0x001F) != 0x0012)
  5598                        ;    {
  5599 09:CC06: A0 21 00     	ldy	#$21
  5600 09:CC09: B7 14        	lda	[<L154+current_header_0],Y
  5601 09:CC0B: 29 1F 00     	and	#<$1f
  5602 09:CC0E: D0 03        	bne	L188
  5603 09:CC10: 82 7E 00     	brl	L10065
  5604                        L188:
  5605 09:CC13: A0 21 00     	ldy	#$21
  5606 09:CC16: B7 14        	lda	[<L154+current_header_0],Y
  5607 09:CC18: 29 1F 00     	and	#<$1f
  5608 09:CC1B: 85 01        	sta	<R0
  5609 09:CC1D: A5 01        	lda	<R0
  5610 09:CC1F: C9 01 00     	cmp	#<$1
  5611 09:CC22: D0 03        	bne	L189
  5612 09:CC24: 82 6A 00     	brl	L10065
  5613                        L189:
  5614 09:CC27: A0 21 00     	ldy	#$21
  5615 09:CC2A: B7 14        	lda	[<L154+current_header_0],Y
  5616 09:CC2C: 29 1F 00     	and	#<$1f
  5617 09:CC2F: 85 01        	sta	<R0
  5618 09:CC31: A5 01        	lda	<R0
  Sat Jul 10 2021  1:15                                                Page 105


  5619 09:CC33: C9 02 00     	cmp	#<$2
  5620 09:CC36: D0 03        	bne	L190
  5621 09:CC38: 82 56 00     	brl	L10065
  5622                        L190:
  5623 09:CC3B: A0 21 00     	ldy	#$21
  5624 09:CC3E: B7 14        	lda	[<L154+current_header_0],Y
  5625 09:CC40: 29 1F 00     	and	#<$1f
  5626 09:CC43: 85 01        	sta	<R0
  5627 09:CC45: A5 01        	lda	<R0
  5628 09:CC47: C9 04 00     	cmp	#<$4
  5629 09:CC4A: D0 03        	bne	L191
  5630 09:CC4C: 82 42 00     	brl	L10065
  5631                        L191:
  5632 09:CC4F: A0 21 00     	ldy	#$21
  5633 09:CC52: B7 14        	lda	[<L154+current_header_0],Y
  5634 09:CC54: 29 1F 00     	and	#<$1f
  5635 09:CC57: 85 01        	sta	<R0
  5636 09:CC59: A5 01        	lda	<R0
  5637 09:CC5B: C9 08 00     	cmp	#<$8
  5638 09:CC5E: D0 03        	bne	L192
  5639 09:CC60: 82 2E 00     	brl	L10065
  5640                        L192:
  5641 09:CC63: A0 21 00     	ldy	#$21
  5642 09:CC66: B7 14        	lda	[<L154+current_header_0],Y
  5643 09:CC68: 29 1F 00     	and	#<$1f
  5644 09:CC6B: 85 01        	sta	<R0
  5645 09:CC6D: A5 01        	lda	<R0
  5646 09:CC6F: C9 10 00     	cmp	#<$10
  5647 09:CC72: D0 03        	bne	L193
  5648 09:CC74: 82 1A 00     	brl	L10065
  5649                        L193:
  5650 09:CC77: A0 21 00     	ldy	#$21
  5651 09:CC7A: B7 14        	lda	[<L154+current_header_0],Y
  5652 09:CC7C: 29 1F 00     	and	#<$1f
  5653 09:CC7F: 85 01        	sta	<R0
  5654 09:CC81: A5 01        	lda	<R0
  5655 09:CC83: C9 12 00     	cmp	#<$12
  5656 09:CC86: D0 03        	bne	L194
  5657 09:CC88: 82 06 00     	brl	L10065
  5658                        L194:
  5659                        	.line	582
  5660                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'Kind' value (possible values are 0,1,2,4,8,16 or 18).\n
                    ",current_file->nb_segment+1);
  5661                        ;      return(1);
  5662                        	.line	584
  5663 09:CC8B: A9 01 00     	lda	#$1
  5664 09:CC8E: 82 B5 F9     	brl	L159
  5665                        ;    }
  5666                        	.line	585
  5667                        ;
  5668                        ;  /* Org : < 64 KB */
  5669                        ;  if(current_header->Org >= 0x010000)
  5670                        L10065:
  5671                        	.line	588
  5672                        ;    //printf("  Segment #%d Header Warning : Unus
                    ual 'Org' value (the value is usually < 64 KB).\n",current_f
                    ile->nb_segment+1);
  Sat Jul 10 2021  1:15                                                Page 106


  5673                        ;
  5674                        ;  /* Align : 0, 0x0100 ou 0x010000 */
  5675                        ;  if(current_header->Align != 0x00 && current_hea
                    der->Align != 0x0100 && current_header->Align != 0x010000)
  5676 09:CC91: A0 25 00     	ldy	#$25
  5677 09:CC94: B7 14        	lda	[<L154+current_header_0],Y
  5678 09:CC96: C9 00 00     	cmp	#<$10000
  5679 09:CC99: A0 27 00     	ldy	#$27
  5680 09:CC9C: B7 14        	lda	[<L154+current_header_0],Y
  5681 09:CC9E: E9 01 00     	sbc	#^$10000
  5682 09:CCA1: B0 03        	bcs	L195
  5683 09:CCA3: 82 43 00     	brl	L10066
  5684                        L195:
  5685                        	.line	592
  5686                        ;    {
  5687 09:CCA6: A0 29 00     	ldy	#$29
  5688 09:CCA9: B7 14        	lda	[<L154+current_header_0],Y
  5689 09:CCAB: A0 2B 00     	ldy	#$2b
  5690 09:CCAE: 17 14        	ora	[<L154+current_header_0],Y
  5691 09:CCB0: D0 03        	bne	L196
  5692 09:CCB2: 82 34 00     	brl	L10067
  5693                        L196:
  5694 09:CCB5: A0 29 00     	ldy	#$29
  5695 09:CCB8: B7 14        	lda	[<L154+current_header_0],Y
  5696 09:CCBA: C9 00 01     	cmp	#<$100
  5697 09:CCBD: D0 08        	bne	L197
  5698 09:CCBF: A0 2B 00     	ldy	#$2b
  5699 09:CCC2: B7 14        	lda	[<L154+current_header_0],Y
  5700 09:CCC4: C9 00 00     	cmp	#^$100
  5701                        L197:
  5702 09:CCC7: D0 03        	bne	L198
  5703 09:CCC9: 82 1D 00     	brl	L10067
  5704                        L198:
  5705 09:CCCC: A0 29 00     	ldy	#$29
  5706 09:CCCF: B7 14        	lda	[<L154+current_header_0],Y
  5707 09:CCD1: C9 00 00     	cmp	#<$10000
  5708 09:CCD4: D0 08        	bne	L199
  5709 09:CCD6: A0 2B 00     	ldy	#$2b
  5710 09:CCD9: B7 14        	lda	[<L154+current_header_0],Y
  5711 09:CCDB: C9 01 00     	cmp	#^$10000
  5712                        L199:
  5713 09:CCDE: D0 03        	bne	L200
  5714 09:CCE0: 82 06 00     	brl	L10067
  5715                        L200:
  5716                        	.line	593
  5717                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'Align' value (the value should be 0, 256 or 64KB or for
                     the Apple IIgs).\n",current_file->nb_segment+1);
  5718                        ;      return(1);
  5719                        	.line	595
  5720 09:CCE3: A9 01 00     	lda	#$1
  5721 09:CCE6: 82 5D F9     	brl	L159
  5722                        ;    }
  5723                        	.line	596
  5724                        ;
  5725                        ;  /* NumSEx : Tjs à 0 */
  5726                        ;  if(current_header->NumSEx != 0x00)
  5727                        L10067:
  Sat Jul 10 2021  1:15                                                Page 107


  5728                        L10066:
  5729                        	.line	599
  5730                        ;    {
  5731 09:CCE9: A0 2D 00     	ldy	#$2d
  5732 09:CCEC: B7 14        	lda	[<L154+current_header_0],Y
  5733 09:CCEE: 29 FF 00     	and	#$ff
  5734 09:CCF1: D0 03        	bne	L201
  5735 09:CCF3: 82 06 00     	brl	L10068
  5736                        L201:
  5737                        	.line	600
  5738                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'NumSEx' value (the value should be 0 for the Apple IIgs
                    ).\n",current_file->nb_segment+1);
  5739                        ;      return(1);
  5740                        	.line	602
  5741 09:CCF6: A9 01 00     	lda	#$1
  5742 09:CCF9: 82 4A F9     	brl	L159
  5743                        ;    }
  5744                        	.line	603
  5745                        ;
  5746                        ;  /* SegNum : 1 -> N */
  5747                        ;  if(current_header->SegNum != (WORD) current_fil
                    e->nb_segment+1)
  5748                        L10068:
  5749                        	.line	606
  5750                        ;    {
  5751 09:CCFC: A0 0E 00     	ldy	#$e
  5752 09:CCFF: B7 0E        	lda	[<L154+current_file_0],Y
  5753 09:CD01: 1A           	ina
  5754 09:CD02: 85 01        	sta	<R0
  5755 09:CD04: A5 01        	lda	<R0
  5756 09:CD06: A0 30 00     	ldy	#$30
  5757 09:CD09: D7 14        	cmp	[<L154+current_header_0],Y
  5758 09:CD0B: D0 03        	bne	L202
  5759 09:CD0D: 82 06 00     	brl	L10069
  5760                        L202:
  5761                        	.line	607
  5762                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'SegNum' value (the value should be %d and we have %d fo
                    r the Apple IIgs).\n",current_file->nb_segment+1,current_fil
                    e->nb_segment+1,current_header->SegNum);
  5763                        ;      return(1);
  5764                        	.line	609
  5765 09:CD10: A9 01 00     	lda	#$1
  5766 09:CD13: 82 30 F9     	brl	L159
  5767                        ;    }
  5768                        	.line	610
  5769                        ;
  5770                        ;  /* Entry Point */
  5771                        ;  if(current_header->EntryPointOffset > current_h
                    eader->Length)
  5772                        L10069:
  5773                        	.line	613
  5774                        ;    {
  5775 09:CD16: A0 14 00     	ldy	#$14
  5776 09:CD19: B7 14        	lda	[<L154+current_header_0],Y
  5777 09:CD1B: A0 32 00     	ldy	#$32
  5778 09:CD1E: D7 14        	cmp	[<L154+current_header_0],Y
  Sat Jul 10 2021  1:15                                                Page 108


  5779 09:CD20: A0 16 00     	ldy	#$16
  5780 09:CD23: B7 14        	lda	[<L154+current_header_0],Y
  5781 09:CD25: A0 34 00     	ldy	#$34
  5782 09:CD28: F7 14        	sbc	[<L154+current_header_0],Y
  5783 09:CD2A: 90 03        	bcc	L203
  5784 09:CD2C: 82 06 00     	brl	L10070
  5785                        L203:
  5786                        	.line	614
  5787                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'EntryPointOffset' value (the value can't be larger than
                     the Segment size).\n",current_file->nb_segment+1);
  5788                        ;      return(1);
  5789                        	.line	616
  5790 09:CD2F: A9 01 00     	lda	#$1
  5791 09:CD32: 82 11 F9     	brl	L159
  5792                        ;    }
  5793                        	.line	617
  5794                        ;
  5795                        ;  /* DispName offset (devrait être 44 si TmpOrg e
                    st vide) */
  5796                        ;  if(current_header->DispNameOffset < SEGMENT_HEA
                    DER_MIN_SIZE_V2)
  5797                        L10070:
  5798                        	.line	620
  5799                        ;    {
  5800 09:CD35: 38           	sec
  5801 09:CD36: A0 36 00     	ldy	#$36
  5802 09:CD39: B7 14        	lda	[<L154+current_header_0],Y
  5803 09:CD3B: E9 2C 00     	sbc	#<$2c
  5804 09:CD3E: 70 03        	bvs	L204
  5805 09:CD40: 49 00 80     	eor	#$8000
  5806                        L204:
  5807 09:CD43: 10 03        	bpl	L205
  5808 09:CD45: 82 06 00     	brl	L10071
  5809                        L205:
  5810                        	.line	621
  5811                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispNameOffset' value (the value can't be smaller than 
                    the Segment Header size).\n",current_file->nb_segment+1);
  5812                        ;      return(1);
  5813                        	.line	623
  5814 09:CD48: A9 01 00     	lda	#$1
  5815 09:CD4B: 82 F8 F8     	brl	L159
  5816                        ;    }
  5817                        	.line	624
  5818                        ;  if(current_header->DispNameOffset > current_hea
                    der->ByteCnt)
  5819                        L10071:
  5820                        	.line	625
  5821                        ;    {
  5822 09:CD4E: A0 00 00     	ldy	#$0
  5823 09:CD51: 5A           	phy
  5824 09:CD52: A0 36 00     	ldy	#$36
  5825 09:CD55: B7 14        	lda	[<L154+current_header_0],Y
  5826 09:CD57: 7A           	ply
  5827 09:CD58: 2A           	rol	A
  5828 09:CD59: 6A           	ror	A
  5829 09:CD5A: 10 01        	bpl	L206
  Sat Jul 10 2021  1:15                                                Page 109


  5830 09:CD5C: 88           	dey
  5831                        L206:
  5832 09:CD5D: 85 01        	sta	<R0
  5833 09:CD5F: 84 03        	sty	<R0+2
  5834 09:CD61: A0 0C 00     	ldy	#$c
  5835 09:CD64: B7 14        	lda	[<L154+current_header_0],Y
  5836 09:CD66: C5 01        	cmp	<R0
  5837 09:CD68: A0 0E 00     	ldy	#$e
  5838 09:CD6B: B7 14        	lda	[<L154+current_header_0],Y
  5839 09:CD6D: E5 03        	sbc	<R0+2
  5840 09:CD6F: 90 03        	bcc	L207
  5841 09:CD71: 82 06 00     	brl	L10072
  5842                        L207:
  5843                        	.line	626
  5844                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispNameOffset' value (the value can't be larger than t
                    he Segment size).\n",current_file->nb_segment+1);
  5845                        ;      return(1);
  5846                        	.line	628
  5847 09:CD74: A9 01 00     	lda	#$1
  5848 09:CD77: 82 CC F8     	brl	L159
  5849                        ;    }
  5850                        	.line	629
  5851                        ;
  5852                        ;  /* DispData offset (devrait être 64 si TmpOrg e
                    st vide) */
  5853                        ;  if(current_header->DispDataOffset < SEGMENT_HEA
                    DER_MIN_SIZE_V2)
  5854                        L10072:
  5855                        	.line	632
  5856                        ;    {
  5857 09:CD7A: 38           	sec
  5858 09:CD7B: A0 38 00     	ldy	#$38
  5859 09:CD7E: B7 14        	lda	[<L154+current_header_0],Y
  5860 09:CD80: E9 2C 00     	sbc	#<$2c
  5861 09:CD83: 70 03        	bvs	L208
  5862 09:CD85: 49 00 80     	eor	#$8000
  5863                        L208:
  5864 09:CD88: 10 03        	bpl	L209
  5865 09:CD8A: 82 06 00     	brl	L10073
  5866                        L209:
  5867                        	.line	633
  5868                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispDataOffset' value (the value can't be smaller than 
                    the Segment Header size).\n",current_file->nb_segment+1);
  5869                        ;      return(1);
  5870                        	.line	635
  5871 09:CD8D: A9 01 00     	lda	#$1
  5872 09:CD90: 82 B3 F8     	brl	L159
  5873                        ;    }
  5874                        	.line	636
  5875                        ;  if(current_header->DispNameOffset > current_hea
                    der->ByteCnt)
  5876                        L10073:
  5877                        	.line	637
  5878                        ;    {
  5879 09:CD93: A0 00 00     	ldy	#$0
  5880 09:CD96: 5A           	phy
  Sat Jul 10 2021  1:15                                                Page 110


  5881 09:CD97: A0 36 00     	ldy	#$36
  5882 09:CD9A: B7 14        	lda	[<L154+current_header_0],Y
  5883 09:CD9C: 7A           	ply
  5884 09:CD9D: 2A           	rol	A
  5885 09:CD9E: 6A           	ror	A
  5886 09:CD9F: 10 01        	bpl	L210
  5887 09:CDA1: 88           	dey
  5888                        L210:
  5889 09:CDA2: 85 01        	sta	<R0
  5890 09:CDA4: 84 03        	sty	<R0+2
  5891 09:CDA6: A0 0C 00     	ldy	#$c
  5892 09:CDA9: B7 14        	lda	[<L154+current_header_0],Y
  5893 09:CDAB: C5 01        	cmp	<R0
  5894 09:CDAD: A0 0E 00     	ldy	#$e
  5895 09:CDB0: B7 14        	lda	[<L154+current_header_0],Y
  5896 09:CDB2: E5 03        	sbc	<R0+2
  5897 09:CDB4: 90 03        	bcc	L211
  5898 09:CDB6: 82 06 00     	brl	L10074
  5899                        L211:
  5900                        	.line	638
  5901                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispDataOffset' value (the value can't be larger than t
                    he Segment size).\n",current_file->nb_segment+1);
  5902                        ;      return(1);
  5903                        	.line	640
  5904 09:CDB9: A9 01 00     	lda	#$1
  5905 09:CDBC: 82 87 F8     	brl	L159
  5906                        ;    }
  5907                        	.line	641
  5908                        ;
  5909                        ;  /*********************************************/
  5910                        ;  /**  On va récupérer les données variables  **/
  5911                        ;  /*********************************************/
  5912                        ;  /* Temp Org */
  5913                        ;  if(current_header->DispNameOffset > SEGMENT_HEA
                    DER_MIN_SIZE_V2) /* 44 */
  5914                        L10074:
  5915                        	.line	647
  5916                        ;    {
  5917 09:CDBF: 38           	sec
  5918 09:CDC0: A9 2C 00     	lda	#$2c
  5919 09:CDC3: A0 36 00     	ldy	#$36
  5920 09:CDC6: F7 14        	sbc	[<L154+current_header_0],Y
  5921 09:CDC8: 70 03        	bvs	L212
  5922 09:CDCA: 49 00 80     	eor	#$8000
  5923                        L212:
  5924 09:CDCD: 10 03        	bpl	L213
  5925 09:CDCF: 82 59 00     	brl	L10075
  5926                        L213:
  5927                        	.line	648
  5928                        ;      current_header->TempOrgLength = current_hea
                    der->DispNameOffset - SEGMENT_HEADER_MIN_SIZE_V2;
  5929                        	.line	649
  5930 09:CDD2: 18           	clc
  5931 09:CDD3: A9 D4 FF     	lda	#$ffd4
  5932 09:CDD6: A0 36 00     	ldy	#$36
  5933 09:CDD9: 77 14        	adc	[<L154+current_header_0],Y
  5934 09:CDDB: A0 3A 00     	ldy	#$3a
  Sat Jul 10 2021  1:15                                                Page 111


  5935 09:CDDE: 97 14        	sta	[<L154+current_header_0],Y
  5936                        ;      memcpy(current_header->TempOrg,&current_fil
                    e->data[data_offset+SEGMENT_HEADER_MIN_SIZE_V2],current_head
                    er->TempOrgLength);
  5937                        	.line	650
  5938 09:CDE0: A0 3A 00     	ldy	#$3a
  5939 09:CDE3: B7 14        	lda	[<L154+current_header_0],Y
  5940 09:CDE5: 48           	pha
  5941 09:CDE6: 18           	clc
  5942 09:CDE7: A9 2C 00     	lda	#$2c
  5943 09:CDEA: 65 12        	adc	<L154+data_offset_0
  5944 09:CDEC: 85 01        	sta	<R0
  5945 09:CDEE: A0 00 00     	ldy	#$0
  5946 09:CDF1: A5 01        	lda	<R0
  5947 09:CDF3: 10 01        	bpl	L214
  5948 09:CDF5: 88           	dey
  5949                        L214:
  5950 09:CDF6: 85 01        	sta	<R0
  5951 09:CDF8: 84 03        	sty	<R0+2
  5952 09:CDFA: 18           	clc
  5953 09:CDFB: A0 0A 00     	ldy	#$a
  5954 09:CDFE: B7 0E        	lda	[<L154+current_file_0],Y
  5955 09:CE00: 65 01        	adc	<R0
  5956 09:CE02: 85 05        	sta	<R1
  5957 09:CE04: A0 0C 00     	ldy	#$c
  5958 09:CE07: B7 0E        	lda	[<L154+current_file_0],Y
  5959 09:CE09: 65 03        	adc	<R0+2
  5960 09:CE0B: 85 07        	sta	<R1+2
  5961 09:CE0D: D4 07        	pei	<R1+2
  5962 09:CE0F: D4 05        	pei	<R1
  5963 09:CE11: 18           	clc
  5964 09:CE12: A9 3C 00     	lda	#$3c
  5965 09:CE15: 65 14        	adc	<L154+current_header_0
  5966 09:CE17: 85 01        	sta	<R0
  5967 09:CE19: A9 00 00     	lda	#$0
  5968 09:CE1C: 65 16        	adc	<L154+current_header_0+2
  5969 09:CE1E: 85 03        	sta	<R0+2
  5970 09:CE20: D4 03        	pei	<R0+2
  5971 09:CE22: D4 01        	pei	<R0
  5972 09:CE24: 22 xx xx xx  	jsl	~~memcpy
  5973                        ;    }
  5974                        	.line	651
  5975                        ;  else
  5976 09:CE28: 82 08 00     	brl	L10076
  5977                        L10075:
  5978                        ;    current_header->TempOrgLength = 0;
  5979                        	.line	653
  5980 09:CE2B: A9 00 00     	lda	#$0
  5981 09:CE2E: A0 3A 00     	ldy	#$3a
  5982 09:CE31: 97 14        	sta	[<L154+current_header_0],Y
  5983                        L10076:
  5984                        ;
  5985                        ;  /* Noms */
  5986                        ;  memcpy(current_header->LoadName,&current_file->
                    data[data_offset+current_header->DispNameOffset],10);
  5987                        	.line	656
  5988 09:CE33: F4 0A 00     	pea	#<$a
  5989 09:CE36: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 112


  5990 09:CE37: A5 12        	lda	<L154+data_offset_0
  5991 09:CE39: A0 36 00     	ldy	#$36
  5992 09:CE3C: 77 14        	adc	[<L154+current_header_0],Y
  5993 09:CE3E: 85 01        	sta	<R0
  5994 09:CE40: A0 00 00     	ldy	#$0
  5995 09:CE43: A5 01        	lda	<R0
  5996 09:CE45: 10 01        	bpl	L215
  5997 09:CE47: 88           	dey
  5998                        L215:
  5999 09:CE48: 85 01        	sta	<R0
  6000 09:CE4A: 84 03        	sty	<R0+2
  6001 09:CE4C: 18           	clc
  6002 09:CE4D: A0 0A 00     	ldy	#$a
  6003 09:CE50: B7 0E        	lda	[<L154+current_file_0],Y
  6004 09:CE52: 65 01        	adc	<R0
  6005 09:CE54: 85 05        	sta	<R1
  6006 09:CE56: A0 0C 00     	ldy	#$c
  6007 09:CE59: B7 0E        	lda	[<L154+current_file_0],Y
  6008 09:CE5B: 65 03        	adc	<R0+2
  6009 09:CE5D: 85 07        	sta	<R1+2
  6010 09:CE5F: D4 07        	pei	<R1+2
  6011 09:CE61: D4 05        	pei	<R1
  6012 09:CE63: 18           	clc
  6013 09:CE64: A9 3C 08     	lda	#$83c
  6014 09:CE67: 65 14        	adc	<L154+current_header_0
  6015 09:CE69: 85 01        	sta	<R0
  6016 09:CE6B: A9 00 00     	lda	#$0
  6017 09:CE6E: 65 16        	adc	<L154+current_header_0+2
  6018 09:CE70: 85 03        	sta	<R0+2
  6019 09:CE72: D4 03        	pei	<R0+2
  6020 09:CE74: D4 01        	pei	<R0
  6021 09:CE76: 22 xx xx xx  	jsl	~~memcpy
  6022                        ;  if(current_header->LabLen > 0)
  6023                        	.line	657
  6024                        ;    memcpy(current_header->SegName,&current_file-
                    >data[data_offset+current_header->DispNameOffset+10],current
                    _header->LabLen);
  6025 09:CE7A: E2 20        	sep	#$20
  6026                        	longa	off
  6027 09:CE7C: A9 00        	lda	#$0
  6028 09:CE7E: A0 1A 00     	ldy	#$1a
  6029 09:CE81: D7 14        	cmp	[<L154+current_header_0],Y
  6030 09:CE83: C2 20        	rep	#$20
  6031                        	longa	on
  6032 09:CE85: 90 03        	bcc	L216
  6033 09:CE87: 82 58 00     	brl	L10077
  6034                        L216:
  6035                        	.line	658
  6036 09:CE8A: A0 1A 00     	ldy	#$1a
  6037 09:CE8D: B7 14        	lda	[<L154+current_header_0],Y
  6038 09:CE8F: 29 FF 00     	and	#$ff
  6039 09:CE92: 48           	pha
  6040 09:CE93: 18           	clc
  6041 09:CE94: A5 12        	lda	<L154+data_offset_0
  6042 09:CE96: A0 36 00     	ldy	#$36
  6043 09:CE99: 77 14        	adc	[<L154+current_header_0],Y
  6044 09:CE9B: 85 01        	sta	<R0
  6045 09:CE9D: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 113


  6046 09:CE9E: A9 0A 00     	lda	#$a
  6047 09:CEA1: 65 01        	adc	<R0
  6048 09:CEA3: 85 05        	sta	<R1
  6049 09:CEA5: A0 00 00     	ldy	#$0
  6050 09:CEA8: A5 05        	lda	<R1
  6051 09:CEAA: 10 01        	bpl	L217
  6052 09:CEAC: 88           	dey
  6053                        L217:
  6054 09:CEAD: 85 01        	sta	<R0
  6055 09:CEAF: 84 03        	sty	<R0+2
  6056 09:CEB1: 18           	clc
  6057 09:CEB2: A0 0A 00     	ldy	#$a
  6058 09:CEB5: B7 0E        	lda	[<L154+current_file_0],Y
  6059 09:CEB7: 65 01        	adc	<R0
  6060 09:CEB9: 85 05        	sta	<R1
  6061 09:CEBB: A0 0C 00     	ldy	#$c
  6062 09:CEBE: B7 0E        	lda	[<L154+current_file_0],Y
  6063 09:CEC0: 65 03        	adc	<R0+2
  6064 09:CEC2: 85 07        	sta	<R1+2
  6065 09:CEC4: D4 07        	pei	<R1+2
  6066 09:CEC6: D4 05        	pei	<R1
  6067 09:CEC8: 18           	clc
  6068 09:CEC9: A9 3C 09     	lda	#$93c
  6069 09:CECC: 65 14        	adc	<L154+current_header_0
  6070 09:CECE: 85 01        	sta	<R0
  6071 09:CED0: A9 00 00     	lda	#$0
  6072 09:CED3: 65 16        	adc	<L154+current_header_0+2
  6073 09:CED5: 85 03        	sta	<R0+2
  6074 09:CED7: D4 03        	pei	<R0+2
  6075 09:CED9: D4 01        	pei	<R0
  6076 09:CEDB: 22 xx xx xx  	jsl	~~memcpy
  6077                        ;  else
  6078 09:CEDF: 82 77 00     	brl	L10078
  6079                        L10077:
  6080                        ;    {
  6081                        	.line	660
  6082                        ;      /* La longueur est codée au début du texte,
                     sur 1 Byte */
  6083                        ;      length = (int) current_file->data[data_offs
                    et+current_header->DispNameOffset+10];
  6084                        	.line	662
  6085 09:CEE2: 18           	clc
  6086 09:CEE3: A5 12        	lda	<L154+data_offset_0
  6087 09:CEE5: A0 36 00     	ldy	#$36
  6088 09:CEE8: 77 14        	adc	[<L154+current_header_0],Y
  6089 09:CEEA: 85 01        	sta	<R0
  6090 09:CEEC: 18           	clc
  6091 09:CEED: A9 0A 00     	lda	#$a
  6092 09:CEF0: 65 01        	adc	<R0
  6093 09:CEF2: 85 05        	sta	<R1
  6094 09:CEF4: A0 0A 00     	ldy	#$a
  6095 09:CEF7: B7 0E        	lda	[<L154+current_file_0],Y
  6096 09:CEF9: 85 01        	sta	<R0
  6097 09:CEFB: A0 0C 00     	ldy	#$c
  6098 09:CEFE: B7 0E        	lda	[<L154+current_file_0],Y
  6099 09:CF00: 85 03        	sta	<R0+2
  6100 09:CF02: A4 05        	ldy	<R1
  6101 09:CF04: B7 01        	lda	[<R0],Y
  Sat Jul 10 2021  1:15                                                Page 114


  6102 09:CF06: 29 FF 00     	and	#$ff
  6103 09:CF09: 85 09        	sta	<L155+length_1
  6104                        ;      memcpy(&current_header->SegName,&current_fi
                    le->data[data_offset+current_header->DispNameOffset+10+1],le
                    ngth);
  6105                        	.line	663
  6106 09:CF0B: D4 09        	pei	<L155+length_1
  6107 09:CF0D: 18           	clc
  6108 09:CF0E: A5 12        	lda	<L154+data_offset_0
  6109 09:CF10: A0 36 00     	ldy	#$36
  6110 09:CF13: 77 14        	adc	[<L154+current_header_0],Y
  6111 09:CF15: 85 01        	sta	<R0
  6112 09:CF17: 18           	clc
  6113 09:CF18: A9 0B 00     	lda	#$b
  6114 09:CF1B: 65 01        	adc	<R0
  6115 09:CF1D: 85 05        	sta	<R1
  6116 09:CF1F: A0 00 00     	ldy	#$0
  6117 09:CF22: A5 05        	lda	<R1
  6118 09:CF24: 10 01        	bpl	L218
  6119 09:CF26: 88           	dey
  6120                        L218:
  6121 09:CF27: 85 01        	sta	<R0
  6122 09:CF29: 84 03        	sty	<R0+2
  6123 09:CF2B: 18           	clc
  6124 09:CF2C: A0 0A 00     	ldy	#$a
  6125 09:CF2F: B7 0E        	lda	[<L154+current_file_0],Y
  6126 09:CF31: 65 01        	adc	<R0
  6127 09:CF33: 85 05        	sta	<R1
  6128 09:CF35: A0 0C 00     	ldy	#$c
  6129 09:CF38: B7 0E        	lda	[<L154+current_file_0],Y
  6130 09:CF3A: 65 03        	adc	<R0+2
  6131 09:CF3C: 85 07        	sta	<R1+2
  6132 09:CF3E: D4 07        	pei	<R1+2
  6133 09:CF40: D4 05        	pei	<R1
  6134 09:CF42: 18           	clc
  6135 09:CF43: A9 3C 09     	lda	#$93c
  6136 09:CF46: 65 14        	adc	<L154+current_header_0
  6137 09:CF48: 85 01        	sta	<R0
  6138 09:CF4A: A9 00 00     	lda	#$0
  6139 09:CF4D: 65 16        	adc	<L154+current_header_0+2
  6140 09:CF4F: 85 03        	sta	<R0+2
  6141 09:CF51: D4 03        	pei	<R0+2
  6142 09:CF53: D4 01        	pei	<R0
  6143 09:CF55: 22 xx xx xx  	jsl	~~memcpy
  6144                        ;    }
  6145                        	.line	664
  6146                        L10078:
  6147                        ;
  6148                        ;  /* OK */
  6149                        ;  return(0);
  6150                        	.line	667
  6151 09:CF59: A9 00 00     	lda	#$0
  6152 09:CF5C: 82 E7 F6     	brl	L159
  6153                        ;}
  6154                        	.line	668
  6155                        	.endblock	668
  6156             0000000A   L154	equ	10
  6157             00000009   L155	equ	9
  Sat Jul 10 2021  1:15                                                Page 115


  6158 09:CF5F:              	ends
  6159                        	efunc
  6160                        	.endfunc	668,9,10
  6161                        	.line	668
  6162                        ;
  6163                        ;
  6164                        ;/************************************************
                    *******************************/
  6165                        ;/*  DecodeSegmentBody() :  Décode les différents 
                    Records du Body d'un Segment. */
  6166                        ;/************************************************
                    *******************************/
  6167                        ;static int DecodeSegmentBody(struct omf_file *cur
                    rent_file, int data_offset, struct omf_segment *current_segm
                    ent)
  6168                        ;{
  6169                        	.line	674
  6170                        	.line	675
  6171                        	LOADER
  6172                        	func
  6173                        	.function	675
  6174                        ~~DecodeSegmentBody:
  6175                        	longa	on
  6176                        	longi	on
  6177 09:CF5F: 3B           	tsc
  6178 09:CF60: 38           	sec
  6179 09:CF61: E9 20 00     	sbc	#L219
  6180 09:CF64: 1B           	tcs
  6181 09:CF65: 0B           	phd
  6182 09:CF66: 5B           	tcd
  6183             00000004   current_file_0	set	4
  6184             00000008   data_offset_0	set	8
  6185             0000000A   current_segment_0	set	10
  6186                        	.block	675
  6187                        ;  int body_offset, body_length, record_length, re
                    cord_data_length;
  6188                        ;  unsigned char *record_data;
  6189                        ;  unsigned char *data;
  6190                        ;  struct omf_body_record *current_record;
  6191                        ;
  6192                        ;  /* Init */
  6193                        ;  body_offset = 0;
  6194             00000000   body_offset_1	set	0
  6195             00000002   body_length_1	set	2
  6196             00000004   record_length_1	set	4
  6197             00000006   record_data_length_1	set	6
  6198             00000008   record_data_1	set	8
  6199             0000000C   data_1	set	12
  6200             00000010   current_record_1	set	16
  6201                        	.sym	body_offset,0,5,1,16
  6202                        	.sym	body_length,2,5,1,16
  6203                        	.sym	record_length,4,5,1,16
  6204                        	.sym	record_data_length,6,5,1,16
  6205                        	.sym	record_data,8,142,1,32
  6206                        	.sym	data,12,142,1,32
  6207                        	.sym	current_record,16,138,1,32,85
  6208                        	.sym	current_file,4,138,6,32,122
  6209                        	.sym	data_offset,8,5,6,16
  Sat Jul 10 2021  1:15                                                Page 116


  6210                        	.sym	current_segment,10,138,6,32,121
  6211                        	.line	682
  6212 09:CF67: 64 0D        	stz	<L220+body_offset_1
  6213                        ;  body_length = current_segment->header.ByteCnt -
                     current_segment->header.DispDataOffset;
  6214                        	.line	683
  6215 09:CF69: A0 00 00     	ldy	#$0
  6216 09:CF6C: 5A           	phy
  6217 09:CF6D: A0 38 00     	ldy	#$38
  6218 09:CF70: B7 2A        	lda	[<L219+current_segment_0],Y
  6219 09:CF72: 7A           	ply
  6220 09:CF73: 2A           	rol	A
  6221 09:CF74: 6A           	ror	A
  6222 09:CF75: 10 01        	bpl	L222
  6223 09:CF77: 88           	dey
  6224                        L222:
  6225 09:CF78: 85 01        	sta	<R0
  6226 09:CF7A: 84 03        	sty	<R0+2
  6227 09:CF7C: 38           	sec
  6228 09:CF7D: A0 0C 00     	ldy	#$c
  6229 09:CF80: B7 2A        	lda	[<L219+current_segment_0],Y
  6230 09:CF82: E5 01        	sbc	<R0
  6231 09:CF84: 85 05        	sta	<R1
  6232 09:CF86: A0 0E 00     	ldy	#$e
  6233 09:CF89: B7 2A        	lda	[<L219+current_segment_0],Y
  6234 09:CF8B: E5 03        	sbc	<R0+2
  6235 09:CF8D: 85 07        	sta	<R1+2
  6236 09:CF8F: A5 05        	lda	<R1
  6237 09:CF91: 85 0F        	sta	<L220+body_length_1
  6238                        ;
  6239                        ;  /* On libère les structures précédentes */
  6240                        ;  my_Memory(MEMORY_FREE_RELOC,NULL,NULL);
  6241                        	.line	686
  6242 09:CF93: F4 00 00     	pea	#^$0
  6243 09:CF96: F4 00 00     	pea	#<$0
  6244 09:CF99: F4 00 00     	pea	#^$0
  6245 09:CF9C: F4 00 00     	pea	#<$0
  6246 09:CF9F: F4 0D 00     	pea	#<$d
  6247 09:CFA2: 22 xx xx xx  	jsl	~~my_Memory
  6248                        ;  my_Memory(MEMORY_FREE_INTERSEG,NULL,NULL);
  6249                        	.line	687
  6250 09:CFA6: F4 00 00     	pea	#^$0
  6251 09:CFA9: F4 00 00     	pea	#<$0
  6252 09:CFAC: F4 00 00     	pea	#^$0
  6253 09:CFAF: F4 00 00     	pea	#<$0
  6254 09:CFB2: F4 17 00     	pea	#<$17
  6255 09:CFB5: 22 xx xx xx  	jsl	~~my_Memory
  6256                        ;
  6257                        ;  /** Boucle sur tous les Records du Body **/
  6258                        ;  while(1)
  6259                        	.line	690
  6260                        L10079:
  6261                        ;    {
  6262                        	.line	691
  6263                        ;      /** Extrait un Record du Body **/
  6264                        ;      current_record = DecodeOneRecord(&current_f
                    ile->data[data_offset+body_offset],current_segment->header.S
                    egNum,data_offset+body_offset,current_segment->header.ByteCn
  Sat Jul 10 2021  1:15                                                Page 117


                    t+body_offset,current_segment->data,current_segment->data_le
                    ngth,&record_length,current_segment);
  6265                        	.line	693
  6266 09:CFB9: D4 2C        	pei	<L219+current_segment_0+2
  6267 09:CFBB: D4 2A        	pei	<L219+current_segment_0
  6268 09:CFBD: F4 00 00     	pea	#0
  6269 09:CFC0: 18           	clc
  6270 09:CFC1: 7B           	tdc
  6271 09:CFC2: 69 11 00     	adc	#<L220+record_length_1
  6272 09:CFC5: 48           	pha
  6273 09:CFC6: A0 4B 0A     	ldy	#$a4b
  6274 09:CFC9: B7 2A        	lda	[<L219+current_segment_0],Y
  6275 09:CFCB: 48           	pha
  6276 09:CFCC: A0 4F 0A     	ldy	#$a4f
  6277 09:CFCF: B7 2A        	lda	[<L219+current_segment_0],Y
  6278 09:CFD1: 48           	pha
  6279 09:CFD2: A0 4D 0A     	ldy	#$a4d
  6280 09:CFD5: B7 2A        	lda	[<L219+current_segment_0],Y
  6281 09:CFD7: 48           	pha
  6282 09:CFD8: A0 00 00     	ldy	#$0
  6283 09:CFDB: A5 0D        	lda	<L220+body_offset_1
  6284 09:CFDD: 10 01        	bpl	L223
  6285 09:CFDF: 88           	dey
  6286                        L223:
  6287 09:CFE0: 85 01        	sta	<R0
  6288 09:CFE2: 84 03        	sty	<R0+2
  6289 09:CFE4: 18           	clc
  6290 09:CFE5: A5 01        	lda	<R0
  6291 09:CFE7: A0 0C 00     	ldy	#$c
  6292 09:CFEA: 77 2A        	adc	[<L219+current_segment_0],Y
  6293 09:CFEC: 85 05        	sta	<R1
  6294 09:CFEE: A5 03        	lda	<R0+2
  6295 09:CFF0: A0 0E 00     	ldy	#$e
  6296 09:CFF3: 77 2A        	adc	[<L219+current_segment_0],Y
  6297 09:CFF5: 85 07        	sta	<R1+2
  6298 09:CFF7: D4 05        	pei	<R1
  6299 09:CFF9: 18           	clc
  6300 09:CFFA: A5 28        	lda	<L219+data_offset_0
  6301 09:CFFC: 65 0D        	adc	<L220+body_offset_1
  6302 09:CFFE: 48           	pha
  6303 09:CFFF: A0 30 00     	ldy	#$30
  6304 09:D002: B7 2A        	lda	[<L219+current_segment_0],Y
  6305 09:D004: 48           	pha
  6306 09:D005: 18           	clc
  6307 09:D006: A5 28        	lda	<L219+data_offset_0
  6308 09:D008: 65 0D        	adc	<L220+body_offset_1
  6309 09:D00A: 85 01        	sta	<R0
  6310 09:D00C: A0 00 00     	ldy	#$0
  6311 09:D00F: A5 01        	lda	<R0
  6312 09:D011: 10 01        	bpl	L224
  6313 09:D013: 88           	dey
  6314                        L224:
  6315 09:D014: 85 01        	sta	<R0
  6316 09:D016: 84 03        	sty	<R0+2
  6317 09:D018: 18           	clc
  6318 09:D019: A0 0A 00     	ldy	#$a
  6319 09:D01C: B7 24        	lda	[<L219+current_file_0],Y
  6320 09:D01E: 65 01        	adc	<R0
  Sat Jul 10 2021  1:15                                                Page 118


  6321 09:D020: 85 09        	sta	<R2
  6322 09:D022: A0 0C 00     	ldy	#$c
  6323 09:D025: B7 24        	lda	[<L219+current_file_0],Y
  6324 09:D027: 65 03        	adc	<R0+2
  6325 09:D029: 85 0B        	sta	<R2+2
  6326 09:D02B: D4 0B        	pei	<R2+2
  6327 09:D02D: D4 09        	pei	<R2
  6328 09:D02F: 22 xx xx xx  	jsl	~~DecodeOneRecord
  6329 09:D033: 85 1D        	sta	<L220+current_record_1
  6330 09:D035: 86 1F        	stx	<L220+current_record_1+2
  6331                        ;      if(current_record == NULL)
  6332                        	.line	694
  6333                        ;        return(1);
  6334 09:D037: A5 1D        	lda	<L220+current_record_1
  6335 09:D039: 05 1F        	ora	<L220+current_record_1+2
  6336 09:D03B: F0 03        	beq	L225
  6337 09:D03D: 82 15 00     	brl	L10081
  6338                        L225:
  6339                        	.line	695
  6340 09:D040: A9 01 00     	lda	#$1
  6341                        L226:
  6342 09:D043: A8           	tay
  6343 09:D044: A5 22        	lda	<L219+2
  6344 09:D046: 85 2C        	sta	<L219+2+10
  6345 09:D048: A5 21        	lda	<L219+1
  6346 09:D04A: 85 2B        	sta	<L219+1+10
  6347 09:D04C: 2B           	pld
  6348 09:D04D: 3B           	tsc
  6349 09:D04E: 18           	clc
  6350 09:D04F: 69 2A 00     	adc	#L219+10
  6351 09:D052: 1B           	tcs
  6352 09:D053: 98           	tya
  6353 09:D054: 6B           	rtl
  6354                        ;      current_record->FileOffset = data_offset+bo
                    dy_offset;
  6355                        L10081:
  6356                        	.line	696
  6357 09:D055: 18           	clc
  6358 09:D056: A5 28        	lda	<L219+data_offset_0
  6359 09:D058: 65 0D        	adc	<L220+body_offset_1
  6360 09:D05A: 85 01        	sta	<R0
  6361 09:D05C: A0 00 00     	ldy	#$0
  6362 09:D05F: A5 01        	lda	<R0
  6363 09:D061: 10 01        	bpl	L227
  6364 09:D063: 88           	dey
  6365                        L227:
  6366 09:D064: 85 01        	sta	<R0
  6367 09:D066: 84 03        	sty	<R0+2
  6368 09:D068: A5 01        	lda	<R0
  6369 09:D06A: 87 1D        	sta	[<L220+current_record_1]
  6370 09:D06C: A5 03        	lda	<R0+2
  6371 09:D06E: A0 02 00     	ldy	#$2
  6372 09:D071: 97 1D        	sta	[<L220+current_record_1],Y
  6373                        ;      current_record->SegmentOffset = current_seg
                    ment->header.ByteCnt + body_offset;
  6374                        	.line	697
  6375 09:D073: A0 00 00     	ldy	#$0
  6376 09:D076: A5 0D        	lda	<L220+body_offset_1
  Sat Jul 10 2021  1:15                                                Page 119


  6377 09:D078: 10 01        	bpl	L228
  6378 09:D07A: 88           	dey
  6379                        L228:
  6380 09:D07B: 85 01        	sta	<R0
  6381 09:D07D: 84 03        	sty	<R0+2
  6382 09:D07F: 18           	clc
  6383 09:D080: A5 01        	lda	<R0
  6384 09:D082: A0 0C 00     	ldy	#$c
  6385 09:D085: 77 2A        	adc	[<L219+current_segment_0],Y
  6386 09:D087: 85 05        	sta	<R1
  6387 09:D089: A5 03        	lda	<R0+2
  6388 09:D08B: A0 0E 00     	ldy	#$e
  6389 09:D08E: 77 2A        	adc	[<L219+current_segment_0],Y
  6390 09:D090: 85 07        	sta	<R1+2
  6391 09:D092: A5 05        	lda	<R1
  6392 09:D094: A0 04 00     	ldy	#$4
  6393 09:D097: 97 1D        	sta	[<L220+current_record_1],Y
  6394 09:D099: A5 07        	lda	<R1+2
  6395 09:D09B: A0 06 00     	ldy	#$6
  6396 09:D09E: 97 1D        	sta	[<L220+current_record_1],Y
  6397                        ;
  6398                        ;      /* Attache de Record aux précédents */
  6399                        ;      if(current_segment->first_record == NULL)
  6400                        	.line	700
  6401                        ;        current_segment->first_record = current_r
                    ecord;
  6402 09:D0A0: A0 41 0A     	ldy	#$a41
  6403 09:D0A3: B7 2A        	lda	[<L219+current_segment_0],Y
  6404 09:D0A5: A0 43 0A     	ldy	#$a43
  6405 09:D0A8: 17 2A        	ora	[<L219+current_segment_0],Y
  6406 09:D0AA: F0 03        	beq	L229
  6407 09:D0AC: 82 11 00     	brl	L10082
  6408                        L229:
  6409                        	.line	701
  6410 09:D0AF: A5 1D        	lda	<L220+current_record_1
  6411 09:D0B1: A0 41 0A     	ldy	#$a41
  6412 09:D0B4: 97 2A        	sta	[<L219+current_segment_0],Y
  6413 09:D0B6: A5 1F        	lda	<L220+current_record_1+2
  6414 09:D0B8: A0 43 0A     	ldy	#$a43
  6415 09:D0BB: 97 2A        	sta	[<L219+current_segment_0],Y
  6416                        ;      else
  6417 09:D0BD: 82 1C 00     	brl	L10083
  6418                        L10082:
  6419                        ;        current_segment->last_record->next = curr
                    ent_record;
  6420                        	.line	703
  6421 09:D0C0: A0 45 0A     	ldy	#$a45
  6422 09:D0C3: B7 2A        	lda	[<L219+current_segment_0],Y
  6423 09:D0C5: 85 01        	sta	<R0
  6424 09:D0C7: A0 47 0A     	ldy	#$a47
  6425 09:D0CA: B7 2A        	lda	[<L219+current_segment_0],Y
  6426 09:D0CC: 85 03        	sta	<R0+2
  6427 09:D0CE: A5 1D        	lda	<L220+current_record_1
  6428 09:D0D0: A0 11 00     	ldy	#$11
  6429 09:D0D3: 97 01        	sta	[<R0],Y
  6430 09:D0D5: A5 1F        	lda	<L220+current_record_1+2
  6431 09:D0D7: A0 13 00     	ldy	#$13
  6432 09:D0DA: 97 01        	sta	[<R0],Y
  Sat Jul 10 2021  1:15                                                Page 120


  6433                        L10083:
  6434                        ;      current_segment->last_record = current_reco
                    rd;
  6435                        	.line	704
  6436 09:D0DC: A5 1D        	lda	<L220+current_record_1
  6437 09:D0DE: A0 45 0A     	ldy	#$a45
  6438 09:D0E1: 97 2A        	sta	[<L219+current_segment_0],Y
  6439 09:D0E3: A5 1F        	lda	<L220+current_record_1+2
  6440 09:D0E5: A0 47 0A     	ldy	#$a47
  6441 09:D0E8: 97 2A        	sta	[<L219+current_segment_0],Y
  6442                        ;      current_segment->nb_record++;
  6443                        	.line	705
  6444 09:D0EA: A0 3F 0A     	ldy	#$a3f
  6445 09:D0ED: B7 2A        	lda	[<L219+current_segment_0],Y
  6446 09:D0EF: 1A           	ina
  6447 09:D0F0: A0 3F 0A     	ldy	#$a3f
  6448 09:D0F3: 97 2A        	sta	[<L219+current_segment_0],Y
  6449                        ;
  6450                        ;      /******************************************
                    ************/
  6451                        ;      /** On conserve un pointeur vers les Data d
                    u Segment **/
  6452                        ;      /******************************************
                    ************/
  6453                        ;      if(current_record->operation_code >= 0x01 &
                    & current_record->operation_code <= 0xDF && current_record->
                    record_data != NULL)
  6454                        	.line	710
  6455                        ;        {
  6456 09:D0F5: E2 20        	sep	#$20
  6457                        	longa	off
  6458 09:D0F7: A0 08 00     	ldy	#$8
  6459 09:D0FA: B7 1D        	lda	[<L220+current_record_1],Y
  6460 09:D0FC: C9 01        	cmp	#<$1
  6461 09:D0FE: C2 20        	rep	#$20
  6462                        	longa	on
  6463 09:D100: B0 03        	bcs	L230
  6464 09:D102: 82 20 01     	brl	L10084
  6465                        L230:
  6466 09:D105: E2 20        	sep	#$20
  6467                        	longa	off
  6468 09:D107: A9 DF        	lda	#$df
  6469 09:D109: A0 08 00     	ldy	#$8
  6470 09:D10C: D7 1D        	cmp	[<L220+current_record_1],Y
  6471 09:D10E: C2 20        	rep	#$20
  6472                        	longa	on
  6473 09:D110: B0 03        	bcs	L231
  6474 09:D112: 82 10 01     	brl	L10084
  6475                        L231:
  6476 09:D115: A0 0B 00     	ldy	#$b
  6477 09:D118: B7 1D        	lda	[<L220+current_record_1],Y
  6478 09:D11A: A0 0D 00     	ldy	#$d
  6479 09:D11D: 17 1D        	ora	[<L220+current_record_1],Y
  6480 09:D11F: D0 03        	bne	L232
  6481 09:D121: 82 01 01     	brl	L10084
  6482                        L232:
  6483                        	.line	711
  6484                        ;          /* Ajoute les data du CONST au Segment 
  Sat Jul 10 2021  1:15                                                Page 121


                    */
  6485                        ;          record_data = ((struct record_CONST *)(
                    current_record->record_data))->data;
  6486                        	.line	713
  6487 09:D124: A0 0B 00     	ldy	#$b
  6488 09:D127: B7 1D        	lda	[<L220+current_record_1],Y
  6489 09:D129: 85 01        	sta	<R0
  6490 09:D12B: A0 0D 00     	ldy	#$d
  6491 09:D12E: B7 1D        	lda	[<L220+current_record_1],Y
  6492 09:D130: 85 03        	sta	<R0+2
  6493 09:D132: A0 0A 00     	ldy	#$a
  6494 09:D135: B7 01        	lda	[<R0],Y
  6495 09:D137: 85 15        	sta	<L220+record_data_1
  6496 09:D139: A0 0C 00     	ldy	#$c
  6497 09:D13C: B7 01        	lda	[<R0],Y
  6498 09:D13E: 85 17        	sta	<L220+record_data_1+2
  6499                        ;          record_data_length = ((struct record_CO
                    NST *)(current_record->record_data))->ByteCnt;
  6500                        	.line	714
  6501 09:D140: A0 0B 00     	ldy	#$b
  6502 09:D143: B7 1D        	lda	[<L220+current_record_1],Y
  6503 09:D145: 85 01        	sta	<R0
  6504 09:D147: A0 0D 00     	ldy	#$d
  6505 09:D14A: B7 1D        	lda	[<L220+current_record_1],Y
  6506 09:D14C: 85 03        	sta	<R0+2
  6507 09:D14E: A0 09 00     	ldy	#$9
  6508 09:D151: B7 01        	lda	[<R0],Y
  6509 09:D153: 29 FF 00     	and	#$ff
  6510 09:D156: 85 13        	sta	<L220+record_data_length_1
  6511                        ;
  6512                        ;          /* Allocation mémoire */
  6513                        ;          data = (unsigned char *) k_calloc(1,cur
                    rent_segment->data_length+record_data_length);
  6514                        	.line	717
  6515 09:D158: 18           	clc
  6516 09:D159: A0 4B 0A     	ldy	#$a4b
  6517 09:D15C: B7 2A        	lda	[<L219+current_segment_0],Y
  6518 09:D15E: 65 13        	adc	<L220+record_data_length_1
  6519 09:D160: 48           	pha
  6520 09:D161: F4 01 00     	pea	#<$1
  6521 09:D164: 22 xx xx xx  	jsl	~~k_calloc
  6522 09:D168: 85 19        	sta	<L220+data_1
  6523 09:D16A: 86 1B        	stx	<L220+data_1+2
  6524                        ;          if(data == NULL)
  6525                        	.line	718
  6526                        ;            {
  6527 09:D16C: A5 19        	lda	<L220+data_1
  6528 09:D16E: 05 1B        	ora	<L220+data_1+2
  6529 09:D170: F0 03        	beq	L233
  6530 09:D172: 82 0E 00     	brl	L10085
  6531                        L233:
  6532                        	.line	719
  6533                        ;              //printf("  Error : Impossible to a
                    llocate memory to process Segment Body Record.\n");
  6534                        ;              mem_free_record(current_record);
  6535                        	.line	721
  6536 09:D175: D4 1F        	pei	<L220+current_record_1+2
  6537 09:D177: D4 1D        	pei	<L220+current_record_1
  Sat Jul 10 2021  1:15                                                Page 122


  6538 09:D179: 22 xx xx xx  	jsl	~~mem_free_record
  6539                        ;              return(1);
  6540                        	.line	722
  6541 09:D17D: A9 01 00     	lda	#$1
  6542 09:D180: 82 C0 FE     	brl	L226
  6543                        ;            }
  6544                        	.line	723
  6545                        ;
  6546                        ;          /* Data */
  6547                        ;          memcpy(data,current_segment->data,curre
                    nt_segment->data_length);
  6548                        L10085:
  6549                        	.line	726
  6550 09:D183: A0 4B 0A     	ldy	#$a4b
  6551 09:D186: B7 2A        	lda	[<L219+current_segment_0],Y
  6552 09:D188: 48           	pha
  6553 09:D189: A0 4F 0A     	ldy	#$a4f
  6554 09:D18C: B7 2A        	lda	[<L219+current_segment_0],Y
  6555 09:D18E: 48           	pha
  6556 09:D18F: A0 4D 0A     	ldy	#$a4d
  6557 09:D192: B7 2A        	lda	[<L219+current_segment_0],Y
  6558 09:D194: 48           	pha
  6559 09:D195: D4 1B        	pei	<L220+data_1+2
  6560 09:D197: D4 19        	pei	<L220+data_1
  6561 09:D199: 22 xx xx xx  	jsl	~~memcpy
  6562                        ;          memcpy(data+current_segment->data_lengt
                    h,record_data,record_data_length);
  6563                        	.line	727
  6564 09:D19D: D4 13        	pei	<L220+record_data_length_1
  6565 09:D19F: D4 17        	pei	<L220+record_data_1+2
  6566 09:D1A1: D4 15        	pei	<L220+record_data_1
  6567 09:D1A3: A0 00 00     	ldy	#$0
  6568 09:D1A6: 5A           	phy
  6569 09:D1A7: A0 4B 0A     	ldy	#$a4b
  6570 09:D1AA: B7 2A        	lda	[<L219+current_segment_0],Y
  6571 09:D1AC: 7A           	ply
  6572 09:D1AD: 2A           	rol	A
  6573 09:D1AE: 6A           	ror	A
  6574 09:D1AF: 10 01        	bpl	L234
  6575 09:D1B1: 88           	dey
  6576                        L234:
  6577 09:D1B2: 85 01        	sta	<R0
  6578 09:D1B4: 84 03        	sty	<R0+2
  6579 09:D1B6: 18           	clc
  6580 09:D1B7: A5 19        	lda	<L220+data_1
  6581 09:D1B9: 65 01        	adc	<R0
  6582 09:D1BB: 85 05        	sta	<R1
  6583 09:D1BD: A5 1B        	lda	<L220+data_1+2
  6584 09:D1BF: 65 03        	adc	<R0+2
  6585 09:D1C1: 85 07        	sta	<R1+2
  6586 09:D1C3: D4 07        	pei	<R1+2
  6587 09:D1C5: D4 05        	pei	<R1
  6588 09:D1C7: 22 xx xx xx  	jsl	~~memcpy
  6589                        ;          k_free(current_segment->data);
  6590                        	.line	728
  6591 09:D1CB: A0 4F 0A     	ldy	#$a4f
  6592 09:D1CE: B7 2A        	lda	[<L219+current_segment_0],Y
  6593 09:D1D0: 48           	pha
  Sat Jul 10 2021  1:15                                                Page 123


  6594 09:D1D1: A0 4D 0A     	ldy	#$a4d
  6595 09:D1D4: B7 2A        	lda	[<L219+current_segment_0],Y
  6596 09:D1D6: 48           	pha
  6597 09:D1D7: 22 xx xx xx  	jsl	~~k_free
  6598                        ;          current_segment->data = data;
  6599                        	.line	729
  6600 09:D1DB: A5 19        	lda	<L220+data_1
  6601 09:D1DD: A0 4D 0A     	ldy	#$a4d
  6602 09:D1E0: 97 2A        	sta	[<L219+current_segment_0],Y
  6603 09:D1E2: A5 1B        	lda	<L220+data_1+2
  6604 09:D1E4: A0 4F 0A     	ldy	#$a4f
  6605 09:D1E7: 97 2A        	sta	[<L219+current_segment_0],Y
  6606                        ;
  6607                        ;          /* Longueur Data (CONST/DS/LCONST) */
  6608                        ;          current_segment->data_length += record_
                    data_length;
  6609                        	.line	732
  6610 09:D1E9: 18           	clc
  6611 09:D1EA: A9 4B 0A     	lda	#$a4b
  6612 09:D1ED: 65 2A        	adc	<L219+current_segment_0
  6613 09:D1EF: 85 01        	sta	<R0
  6614 09:D1F1: A9 00 00     	lda	#$0
  6615 09:D1F4: 65 2C        	adc	<L219+current_segment_0+2
  6616 09:D1F6: 85 03        	sta	<R0+2
  6617 09:D1F8: 18           	clc
  6618 09:D1F9: A7 01        	lda	[<R0]
  6619 09:D1FB: 65 13        	adc	<L220+record_data_length_1
  6620 09:D1FD: 87 01        	sta	[<R0]
  6621                        ;
  6622                        ;          /* Offset des Data (CONST/DS/LCONST) du
                     segment */
  6623                        ;          if(current_segment->data_offset == 0)
  6624                        	.line	735
  6625                        ;            current_segment->data_offset = curren
                    t_record->FileOffset + 1;    /* Code */
  6626 09:D1FF: A0 49 0A     	ldy	#$a49
  6627 09:D202: B7 2A        	lda	[<L219+current_segment_0],Y
  6628 09:D204: F0 03        	beq	L235
  6629 09:D206: 82 19 00     	brl	L10086
  6630                        L235:
  6631                        	.line	736
  6632 09:D209: 18           	clc
  6633 09:D20A: A9 01 00     	lda	#$1
  6634 09:D20D: 67 1D        	adc	[<L220+current_record_1]
  6635 09:D20F: 85 01        	sta	<R0
  6636 09:D211: A9 00 00     	lda	#$0
  6637 09:D214: A0 02 00     	ldy	#$2
  6638 09:D217: 77 1D        	adc	[<L220+current_record_1],Y
  6639 09:D219: 85 03        	sta	<R0+2
  6640 09:D21B: A5 01        	lda	<R0
  6641 09:D21D: A0 49 0A     	ldy	#$a49
  6642 09:D220: 97 2A        	sta	[<L219+current_segment_0],Y
  6643                        ;        }
  6644                        L10086:
  6645                        	.line	737
  6646                        ;      else if(current_record->operation_code == 0
                    xF1 && current_record->record_data != NULL)
  6647 09:D222: 82 ED 01     	brl	L10087
  Sat Jul 10 2021  1:15                                                Page 124


  6648                        L10084:
  6649                        	.line	738
  6650                        ;        {
  6651 09:D225: E2 20        	sep	#$20
  6652                        	longa	off
  6653 09:D227: A0 08 00     	ldy	#$8
  6654 09:D22A: B7 1D        	lda	[<L220+current_record_1],Y
  6655 09:D22C: C9 F1        	cmp	#<$f1
  6656 09:D22E: C2 20        	rep	#$20
  6657                        	longa	on
  6658 09:D230: F0 03        	beq	L236
  6659 09:D232: 82 C3 00     	brl	L10088
  6660                        L236:
  6661 09:D235: A0 0B 00     	ldy	#$b
  6662 09:D238: B7 1D        	lda	[<L220+current_record_1],Y
  6663 09:D23A: A0 0D 00     	ldy	#$d
  6664 09:D23D: 17 1D        	ora	[<L220+current_record_1],Y
  6665 09:D23F: D0 03        	bne	L237
  6666 09:D241: 82 B4 00     	brl	L10088
  6667                        L237:
  6668                        	.line	739
  6669                        ;          /* Ajoute les 00 du DS au Segment */
  6670                        ;          record_data_length = (int) ((struct rec
                    ord_DS *)(current_record->record_data))->nb_zero_byte;
  6671                        	.line	741
  6672 09:D244: A0 0B 00     	ldy	#$b
  6673 09:D247: B7 1D        	lda	[<L220+current_record_1],Y
  6674 09:D249: 85 01        	sta	<R0
  6675 09:D24B: A0 0D 00     	ldy	#$d
  6676 09:D24E: B7 1D        	lda	[<L220+current_record_1],Y
  6677 09:D250: 85 03        	sta	<R0+2
  6678 09:D252: A0 09 00     	ldy	#$9
  6679 09:D255: B7 01        	lda	[<R0],Y
  6680 09:D257: 85 13        	sta	<L220+record_data_length_1
  6681                        ;
  6682                        ;          /* Allocation mémoire */
  6683                        ;          data = (unsigned char *) k_calloc(1,cur
                    rent_segment->data_length+record_data_length);
  6684                        	.line	744
  6685 09:D259: 18           	clc
  6686 09:D25A: A0 4B 0A     	ldy	#$a4b
  6687 09:D25D: B7 2A        	lda	[<L219+current_segment_0],Y
  6688 09:D25F: 65 13        	adc	<L220+record_data_length_1
  6689 09:D261: 48           	pha
  6690 09:D262: F4 01 00     	pea	#<$1
  6691 09:D265: 22 xx xx xx  	jsl	~~k_calloc
  6692 09:D269: 85 19        	sta	<L220+data_1
  6693 09:D26B: 86 1B        	stx	<L220+data_1+2
  6694                        ;          if(data == NULL)
  6695                        	.line	745
  6696                        ;            {
  6697 09:D26D: A5 19        	lda	<L220+data_1
  6698 09:D26F: 05 1B        	ora	<L220+data_1+2
  6699 09:D271: F0 03        	beq	L238
  6700 09:D273: 82 0E 00     	brl	L10089
  6701                        L238:
  6702                        	.line	746
  6703                        ;              //printf("  Error : Impossible to a
  Sat Jul 10 2021  1:15                                                Page 125


                    llocate memory to process Segment Body Record.\n");
  6704                        ;              mem_free_record(current_record);
  6705                        	.line	748
  6706 09:D276: D4 1F        	pei	<L220+current_record_1+2
  6707 09:D278: D4 1D        	pei	<L220+current_record_1
  6708 09:D27A: 22 xx xx xx  	jsl	~~mem_free_record
  6709                        ;              return(1);
  6710                        	.line	749
  6711 09:D27E: A9 01 00     	lda	#$1
  6712 09:D281: 82 BF FD     	brl	L226
  6713                        ;            }
  6714                        	.line	750
  6715                        ;
  6716                        ;          /* Data */
  6717                        ;          memcpy(data,current_segment->data,curre
                    nt_segment->data_length);
  6718                        L10089:
  6719                        	.line	753
  6720 09:D284: A0 4B 0A     	ldy	#$a4b
  6721 09:D287: B7 2A        	lda	[<L219+current_segment_0],Y
  6722 09:D289: 48           	pha
  6723 09:D28A: A0 4F 0A     	ldy	#$a4f
  6724 09:D28D: B7 2A        	lda	[<L219+current_segment_0],Y
  6725 09:D28F: 48           	pha
  6726 09:D290: A0 4D 0A     	ldy	#$a4d
  6727 09:D293: B7 2A        	lda	[<L219+current_segment_0],Y
  6728 09:D295: 48           	pha
  6729 09:D296: D4 1B        	pei	<L220+data_1+2
  6730 09:D298: D4 19        	pei	<L220+data_1
  6731 09:D29A: 22 xx xx xx  	jsl	~~memcpy
  6732                        ;          k_free(current_segment->data);
  6733                        	.line	754
  6734 09:D29E: A0 4F 0A     	ldy	#$a4f
  6735 09:D2A1: B7 2A        	lda	[<L219+current_segment_0],Y
  6736 09:D2A3: 48           	pha
  6737 09:D2A4: A0 4D 0A     	ldy	#$a4d
  6738 09:D2A7: B7 2A        	lda	[<L219+current_segment_0],Y
  6739 09:D2A9: 48           	pha
  6740 09:D2AA: 22 xx xx xx  	jsl	~~k_free
  6741                        ;          current_segment->data = data;
  6742                        	.line	755
  6743 09:D2AE: A5 19        	lda	<L220+data_1
  6744 09:D2B0: A0 4D 0A     	ldy	#$a4d
  6745 09:D2B3: 97 2A        	sta	[<L219+current_segment_0],Y
  6746 09:D2B5: A5 1B        	lda	<L220+data_1+2
  6747 09:D2B7: A0 4F 0A     	ldy	#$a4f
  6748 09:D2BA: 97 2A        	sta	[<L219+current_segment_0],Y
  6749                        ;
  6750                        ;          /* Longueur Data (CONST/DS/LCONST) */
  6751                        ;          current_segment->data_length += record_
                    data_length;
  6752                        	.line	758
  6753 09:D2BC: 18           	clc
  6754 09:D2BD: A9 4B 0A     	lda	#$a4b
  6755 09:D2C0: 65 2A        	adc	<L219+current_segment_0
  6756 09:D2C2: 85 01        	sta	<R0
  6757 09:D2C4: A9 00 00     	lda	#$0
  6758 09:D2C7: 65 2C        	adc	<L219+current_segment_0+2
  Sat Jul 10 2021  1:15                                                Page 126


  6759 09:D2C9: 85 03        	sta	<R0+2
  6760 09:D2CB: 18           	clc
  6761 09:D2CC: A7 01        	lda	[<R0]
  6762 09:D2CE: 65 13        	adc	<L220+record_data_length_1
  6763 09:D2D0: 87 01        	sta	[<R0]
  6764                        ;
  6765                        ;          /* Offset des Data (CONST/DS/LCONST) du
                     segment */
  6766                        ;          if(current_segment->data_offset == 0)
  6767                        	.line	761
  6768                        ;            current_segment->data_offset = curren
                    t_record->FileOffset + 1 + sizeof(DWORD);    /* Code + Nb 0 
                    */
  6769 09:D2D2: A0 49 0A     	ldy	#$a49
  6770 09:D2D5: B7 2A        	lda	[<L219+current_segment_0],Y
  6771 09:D2D7: F0 03        	beq	L239
  6772 09:D2D9: 82 19 00     	brl	L10090
  6773                        L239:
  6774                        	.line	762
  6775 09:D2DC: 18           	clc
  6776 09:D2DD: A9 05 00     	lda	#$5
  6777 09:D2E0: 67 1D        	adc	[<L220+current_record_1]
  6778 09:D2E2: 85 01        	sta	<R0
  6779 09:D2E4: A9 00 00     	lda	#$0
  6780 09:D2E7: A0 02 00     	ldy	#$2
  6781 09:D2EA: 77 1D        	adc	[<L220+current_record_1],Y
  6782 09:D2EC: 85 03        	sta	<R0+2
  6783 09:D2EE: A5 01        	lda	<R0
  6784 09:D2F0: A0 49 0A     	ldy	#$a49
  6785 09:D2F3: 97 2A        	sta	[<L219+current_segment_0],Y
  6786                        ;        }
  6787                        L10090:
  6788                        	.line	763
  6789                        ;      else if(current_record->operation_code == 0
                    xF2 && current_record->record_data != NULL)
  6790 09:D2F5: 82 1A 01     	brl	L10091
  6791                        L10088:
  6792                        	.line	764
  6793                        ;        {
  6794 09:D2F8: E2 20        	sep	#$20
  6795                        	longa	off
  6796 09:D2FA: A0 08 00     	ldy	#$8
  6797 09:D2FD: B7 1D        	lda	[<L220+current_record_1],Y
  6798 09:D2FF: C9 F2        	cmp	#<$f2
  6799 09:D301: C2 20        	rep	#$20
  6800                        	longa	on
  6801 09:D303: F0 03        	beq	L240
  6802 09:D305: 82 0A 01     	brl	L10092
  6803                        L240:
  6804 09:D308: A0 0B 00     	ldy	#$b
  6805 09:D30B: B7 1D        	lda	[<L220+current_record_1],Y
  6806 09:D30D: A0 0D 00     	ldy	#$d
  6807 09:D310: 17 1D        	ora	[<L220+current_record_1],Y
  6808 09:D312: D0 03        	bne	L241
  6809 09:D314: 82 FB 00     	brl	L10092
  6810                        L241:
  6811                        	.line	765
  6812                        ;          /* Ajoute les data du LCONST au Segment
  Sat Jul 10 2021  1:15                                                Page 127


                     */
  6813                        ;          record_data = ((struct record_LCONST *)
                    (current_record->record_data))->data;
  6814                        	.line	767
  6815 09:D317: A0 0B 00     	ldy	#$b
  6816 09:D31A: B7 1D        	lda	[<L220+current_record_1],Y
  6817 09:D31C: 85 01        	sta	<R0
  6818 09:D31E: A0 0D 00     	ldy	#$d
  6819 09:D321: B7 1D        	lda	[<L220+current_record_1],Y
  6820 09:D323: 85 03        	sta	<R0+2
  6821 09:D325: A0 0D 00     	ldy	#$d
  6822 09:D328: B7 01        	lda	[<R0],Y
  6823 09:D32A: 85 15        	sta	<L220+record_data_1
  6824 09:D32C: A0 0F 00     	ldy	#$f
  6825 09:D32F: B7 01        	lda	[<R0],Y
  6826 09:D331: 85 17        	sta	<L220+record_data_1+2
  6827                        ;          record_data_length = ((struct record_LC
                    ONST *)(current_record->record_data))->ByteCnt;
  6828                        	.line	768
  6829 09:D333: A0 0B 00     	ldy	#$b
  6830 09:D336: B7 1D        	lda	[<L220+current_record_1],Y
  6831 09:D338: 85 01        	sta	<R0
  6832 09:D33A: A0 0D 00     	ldy	#$d
  6833 09:D33D: B7 1D        	lda	[<L220+current_record_1],Y
  6834 09:D33F: 85 03        	sta	<R0+2
  6835 09:D341: A0 09 00     	ldy	#$9
  6836 09:D344: B7 01        	lda	[<R0],Y
  6837 09:D346: 85 13        	sta	<L220+record_data_length_1
  6838                        ;
  6839                        ;          /* Allocation mémoire */
  6840                        ;          data = (unsigned char *) k_calloc(1,cur
                    rent_segment->data_length+record_data_length);
  6841                        	.line	771
  6842 09:D348: 18           	clc
  6843 09:D349: A0 4B 0A     	ldy	#$a4b
  6844 09:D34C: B7 2A        	lda	[<L219+current_segment_0],Y
  6845 09:D34E: 65 13        	adc	<L220+record_data_length_1
  6846 09:D350: 48           	pha
  6847 09:D351: F4 01 00     	pea	#<$1
  6848 09:D354: 22 xx xx xx  	jsl	~~k_calloc
  6849 09:D358: 85 19        	sta	<L220+data_1
  6850 09:D35A: 86 1B        	stx	<L220+data_1+2
  6851                        ;          if(data == NULL)
  6852                        	.line	772
  6853                        ;            {
  6854 09:D35C: A5 19        	lda	<L220+data_1
  6855 09:D35E: 05 1B        	ora	<L220+data_1+2
  6856 09:D360: F0 03        	beq	L242
  6857 09:D362: 82 0E 00     	brl	L10093
  6858                        L242:
  6859                        	.line	773
  6860                        ;              //printf("  Error : Impossible to a
                    llocate memory to process Segment Body Record.\n");
  6861                        ;              mem_free_record(current_record);
  6862                        	.line	775
  6863 09:D365: D4 1F        	pei	<L220+current_record_1+2
  6864 09:D367: D4 1D        	pei	<L220+current_record_1
  6865 09:D369: 22 xx xx xx  	jsl	~~mem_free_record
  Sat Jul 10 2021  1:15                                                Page 128


  6866                        ;              return(1);
  6867                        	.line	776
  6868 09:D36D: A9 01 00     	lda	#$1
  6869 09:D370: 82 D0 FC     	brl	L226
  6870                        ;            }
  6871                        	.line	777
  6872                        ;
  6873                        ;          /* Data */
  6874                        ;          memcpy(data,current_segment->data,curre
                    nt_segment->data_length);
  6875                        L10093:
  6876                        	.line	780
  6877 09:D373: A0 4B 0A     	ldy	#$a4b
  6878 09:D376: B7 2A        	lda	[<L219+current_segment_0],Y
  6879 09:D378: 48           	pha
  6880 09:D379: A0 4F 0A     	ldy	#$a4f
  6881 09:D37C: B7 2A        	lda	[<L219+current_segment_0],Y
  6882 09:D37E: 48           	pha
  6883 09:D37F: A0 4D 0A     	ldy	#$a4d
  6884 09:D382: B7 2A        	lda	[<L219+current_segment_0],Y
  6885 09:D384: 48           	pha
  6886 09:D385: D4 1B        	pei	<L220+data_1+2
  6887 09:D387: D4 19        	pei	<L220+data_1
  6888 09:D389: 22 xx xx xx  	jsl	~~memcpy
  6889                        ;          memcpy(data+current_segment->data_lengt
                    h,record_data,record_data_length);
  6890                        	.line	781
  6891 09:D38D: D4 13        	pei	<L220+record_data_length_1
  6892 09:D38F: D4 17        	pei	<L220+record_data_1+2
  6893 09:D391: D4 15        	pei	<L220+record_data_1
  6894 09:D393: A0 00 00     	ldy	#$0
  6895 09:D396: 5A           	phy
  6896 09:D397: A0 4B 0A     	ldy	#$a4b
  6897 09:D39A: B7 2A        	lda	[<L219+current_segment_0],Y
  6898 09:D39C: 7A           	ply
  6899 09:D39D: 2A           	rol	A
  6900 09:D39E: 6A           	ror	A
  6901 09:D39F: 10 01        	bpl	L243
  6902 09:D3A1: 88           	dey
  6903                        L243:
  6904 09:D3A2: 85 01        	sta	<R0
  6905 09:D3A4: 84 03        	sty	<R0+2
  6906 09:D3A6: 18           	clc
  6907 09:D3A7: A5 19        	lda	<L220+data_1
  6908 09:D3A9: 65 01        	adc	<R0
  6909 09:D3AB: 85 05        	sta	<R1
  6910 09:D3AD: A5 1B        	lda	<L220+data_1+2
  6911 09:D3AF: 65 03        	adc	<R0+2
  6912 09:D3B1: 85 07        	sta	<R1+2
  6913 09:D3B3: D4 07        	pei	<R1+2
  6914 09:D3B5: D4 05        	pei	<R1
  6915 09:D3B7: 22 xx xx xx  	jsl	~~memcpy
  6916                        ;          k_free(current_segment->data);
  6917                        	.line	782
  6918 09:D3BB: A0 4F 0A     	ldy	#$a4f
  6919 09:D3BE: B7 2A        	lda	[<L219+current_segment_0],Y
  6920 09:D3C0: 48           	pha
  6921 09:D3C1: A0 4D 0A     	ldy	#$a4d
  Sat Jul 10 2021  1:15                                                Page 129


  6922 09:D3C4: B7 2A        	lda	[<L219+current_segment_0],Y
  6923 09:D3C6: 48           	pha
  6924 09:D3C7: 22 xx xx xx  	jsl	~~k_free
  6925                        ;          current_segment->data = data;
  6926                        	.line	783
  6927 09:D3CB: A5 19        	lda	<L220+data_1
  6928 09:D3CD: A0 4D 0A     	ldy	#$a4d
  6929 09:D3D0: 97 2A        	sta	[<L219+current_segment_0],Y
  6930 09:D3D2: A5 1B        	lda	<L220+data_1+2
  6931 09:D3D4: A0 4F 0A     	ldy	#$a4f
  6932 09:D3D7: 97 2A        	sta	[<L219+current_segment_0],Y
  6933                        ;
  6934                        ;          /* Longueur Data (CONST/DS/LCONST) */
  6935                        ;          current_segment->data_length += record_
                    data_length;
  6936                        	.line	786
  6937 09:D3D9: 18           	clc
  6938 09:D3DA: A9 4B 0A     	lda	#$a4b
  6939 09:D3DD: 65 2A        	adc	<L219+current_segment_0
  6940 09:D3DF: 85 01        	sta	<R0
  6941 09:D3E1: A9 00 00     	lda	#$0
  6942 09:D3E4: 65 2C        	adc	<L219+current_segment_0+2
  6943 09:D3E6: 85 03        	sta	<R0+2
  6944 09:D3E8: 18           	clc
  6945 09:D3E9: A7 01        	lda	[<R0]
  6946 09:D3EB: 65 13        	adc	<L220+record_data_length_1
  6947 09:D3ED: 87 01        	sta	[<R0]
  6948                        ;
  6949                        ;          /* Offset des Data (CONST/DS/LCONST) du
                     segment */
  6950                        ;          if(current_segment->data_offset == 0)
  6951                        	.line	789
  6952                        ;            current_segment->data_offset = curren
                    t_record->FileOffset + 1 + sizeof(DWORD);    /* Code + Lengt
                    h */
  6953 09:D3EF: A0 49 0A     	ldy	#$a49
  6954 09:D3F2: B7 2A        	lda	[<L219+current_segment_0],Y
  6955 09:D3F4: F0 03        	beq	L244
  6956 09:D3F6: 82 19 00     	brl	L10094
  6957                        L244:
  6958                        	.line	790
  6959 09:D3F9: 18           	clc
  6960 09:D3FA: A9 05 00     	lda	#$5
  6961 09:D3FD: 67 1D        	adc	[<L220+current_record_1]
  6962 09:D3FF: 85 01        	sta	<R0
  6963 09:D401: A9 00 00     	lda	#$0
  6964 09:D404: A0 02 00     	ldy	#$2
  6965 09:D407: 77 1D        	adc	[<L220+current_record_1],Y
  6966 09:D409: 85 03        	sta	<R0+2
  6967 09:D40B: A5 01        	lda	<R0
  6968 09:D40D: A0 49 0A     	ldy	#$a49
  6969 09:D410: 97 2A        	sta	[<L219+current_segment_0],Y
  6970                        ;        }
  6971                        L10094:
  6972                        	.line	791
  6973                        ;
  6974                        ;      /******************************************
                    ********************/
  Sat Jul 10 2021  1:15                                                Page 130


  6975                        ;      /** On conserve l'offset et la longueur des
                     Reloc du Segment **/
  6976                        ;      /******************************************
                    ********************/
  6977                        ;      if(current_record->operation_code == 0xE2) 
                         /* RELOC */
  6978                        L10092:
  6979                        L10091:
  6980                        L10087:
  6981                        	.line	796
  6982                        ;        {
  6983 09:D412: E2 20        	sep	#$20
  6984                        	longa	off
  6985 09:D414: A0 08 00     	ldy	#$8
  6986 09:D417: B7 1D        	lda	[<L220+current_record_1],Y
  6987 09:D419: C9 E2        	cmp	#<$e2
  6988 09:D41B: C2 20        	rep	#$20
  6989                        	longa	on
  6990 09:D41D: F0 03        	beq	L245
  6991 09:D41F: 82 2D 00     	brl	L10095
  6992                        L245:
  6993                        	.line	797
  6994                        ;          /* Longueur Reloc */
  6995                        ;          current_segment->reloc_length += curren
                    t_record->length;
  6996                        	.line	799
  6997 09:D422: 18           	clc
  6998 09:D423: A9 53 0A     	lda	#$a53
  6999 09:D426: 65 2A        	adc	<L219+current_segment_0
  7000 09:D428: 85 01        	sta	<R0
  7001 09:D42A: A9 00 00     	lda	#$0
  7002 09:D42D: 65 2C        	adc	<L219+current_segment_0+2
  7003 09:D42F: 85 03        	sta	<R0+2
  7004 09:D431: 18           	clc
  7005 09:D432: A7 01        	lda	[<R0]
  7006 09:D434: A0 09 00     	ldy	#$9
  7007 09:D437: 77 1D        	adc	[<L220+current_record_1],Y
  7008 09:D439: 87 01        	sta	[<R0]
  7009                        ;
  7010                        ;          /* Offset des Reloc du segment */
  7011                        ;          if(current_segment->reloc_offset == 0)
  7012                        	.line	802
  7013                        ;            current_segment->reloc_offset = curre
                    nt_record->FileOffset;
  7014 09:D43B: A0 51 0A     	ldy	#$a51
  7015 09:D43E: B7 2A        	lda	[<L219+current_segment_0],Y
  7016 09:D440: F0 03        	beq	L246
  7017 09:D442: 82 07 00     	brl	L10096
  7018                        L246:
  7019                        	.line	803
  7020 09:D445: A7 1D        	lda	[<L220+current_record_1]
  7021 09:D447: A0 51 0A     	ldy	#$a51
  7022 09:D44A: 97 2A        	sta	[<L219+current_segment_0],Y
  7023                        ;        }
  7024                        L10096:
  7025                        	.line	804
  7026                        ;      else if(current_record->operation_code == 0
                    xE3)      /* INTERSEG */
  Sat Jul 10 2021  1:15                                                Page 131


  7027 09:D44C: 82 F1 00     	brl	L10097
  7028                        L10095:
  7029                        	.line	805
  7030                        ;        {
  7031 09:D44F: E2 20        	sep	#$20
  7032                        	longa	off
  7033 09:D451: A0 08 00     	ldy	#$8
  7034 09:D454: B7 1D        	lda	[<L220+current_record_1],Y
  7035 09:D456: C9 E3        	cmp	#<$e3
  7036 09:D458: C2 20        	rep	#$20
  7037                        	longa	on
  7038 09:D45A: F0 03        	beq	L247
  7039 09:D45C: 82 2D 00     	brl	L10098
  7040                        L247:
  7041                        	.line	806
  7042                        ;          /* Longueur Reloc */
  7043                        ;          current_segment->reloc_length += curren
                    t_record->length;
  7044                        	.line	808
  7045 09:D45F: 18           	clc
  7046 09:D460: A9 53 0A     	lda	#$a53
  7047 09:D463: 65 2A        	adc	<L219+current_segment_0
  7048 09:D465: 85 01        	sta	<R0
  7049 09:D467: A9 00 00     	lda	#$0
  7050 09:D46A: 65 2C        	adc	<L219+current_segment_0+2
  7051 09:D46C: 85 03        	sta	<R0+2
  7052 09:D46E: 18           	clc
  7053 09:D46F: A7 01        	lda	[<R0]
  7054 09:D471: A0 09 00     	ldy	#$9
  7055 09:D474: 77 1D        	adc	[<L220+current_record_1],Y
  7056 09:D476: 87 01        	sta	[<R0]
  7057                        ;
  7058                        ;          /* Offset des Reloc du segment */
  7059                        ;          if(current_segment->reloc_offset == 0)
  7060                        	.line	811
  7061                        ;            current_segment->reloc_offset = curre
                    nt_record->FileOffset;
  7062 09:D478: A0 51 0A     	ldy	#$a51
  7063 09:D47B: B7 2A        	lda	[<L219+current_segment_0],Y
  7064 09:D47D: F0 03        	beq	L248
  7065 09:D47F: 82 07 00     	brl	L10099
  7066                        L248:
  7067                        	.line	812
  7068 09:D482: A7 1D        	lda	[<L220+current_record_1]
  7069 09:D484: A0 51 0A     	ldy	#$a51
  7070 09:D487: 97 2A        	sta	[<L219+current_segment_0],Y
  7071                        ;        }
  7072                        L10099:
  7073                        	.line	813
  7074                        ;      else if(current_record->operation_code == 0
                    xF5)      /* cRELOC */
  7075 09:D489: 82 B4 00     	brl	L10100
  7076                        L10098:
  7077                        	.line	814
  7078                        ;        {
  7079 09:D48C: E2 20        	sep	#$20
  7080                        	longa	off
  7081 09:D48E: A0 08 00     	ldy	#$8
  Sat Jul 10 2021  1:15                                                Page 132


  7082 09:D491: B7 1D        	lda	[<L220+current_record_1],Y
  7083 09:D493: C9 F5        	cmp	#<$f5
  7084 09:D495: C2 20        	rep	#$20
  7085                        	longa	on
  7086 09:D497: F0 03        	beq	L249
  7087 09:D499: 82 2D 00     	brl	L10101
  7088                        L249:
  7089                        	.line	815
  7090                        ;          /* Longueur Reloc */
  7091                        ;          current_segment->reloc_length += curren
                    t_record->length;
  7092                        	.line	817
  7093 09:D49C: 18           	clc
  7094 09:D49D: A9 53 0A     	lda	#$a53
  7095 09:D4A0: 65 2A        	adc	<L219+current_segment_0
  7096 09:D4A2: 85 01        	sta	<R0
  7097 09:D4A4: A9 00 00     	lda	#$0
  7098 09:D4A7: 65 2C        	adc	<L219+current_segment_0+2
  7099 09:D4A9: 85 03        	sta	<R0+2
  7100 09:D4AB: 18           	clc
  7101 09:D4AC: A7 01        	lda	[<R0]
  7102 09:D4AE: A0 09 00     	ldy	#$9
  7103 09:D4B1: 77 1D        	adc	[<L220+current_record_1],Y
  7104 09:D4B3: 87 01        	sta	[<R0]
  7105                        ;
  7106                        ;          /* Offset des Reloc du segment */
  7107                        ;          if(current_segment->reloc_offset == 0)
  7108                        	.line	820
  7109                        ;            current_segment->reloc_offset = curre
                    nt_record->FileOffset;
  7110 09:D4B5: A0 51 0A     	ldy	#$a51
  7111 09:D4B8: B7 2A        	lda	[<L219+current_segment_0],Y
  7112 09:D4BA: F0 03        	beq	L250
  7113 09:D4BC: 82 07 00     	brl	L10102
  7114                        L250:
  7115                        	.line	821
  7116 09:D4BF: A7 1D        	lda	[<L220+current_record_1]
  7117 09:D4C1: A0 51 0A     	ldy	#$a51
  7118 09:D4C4: 97 2A        	sta	[<L219+current_segment_0],Y
  7119                        ;        }
  7120                        L10102:
  7121                        	.line	822
  7122                        ;      else if(current_record->operation_code == 0
                    xF6)      /* cINTERSEG */
  7123 09:D4C6: 82 77 00     	brl	L10103
  7124                        L10101:
  7125                        	.line	823
  7126                        ;        {
  7127 09:D4C9: E2 20        	sep	#$20
  7128                        	longa	off
  7129 09:D4CB: A0 08 00     	ldy	#$8
  7130 09:D4CE: B7 1D        	lda	[<L220+current_record_1],Y
  7131 09:D4D0: C9 F6        	cmp	#<$f6
  7132 09:D4D2: C2 20        	rep	#$20
  7133                        	longa	on
  7134 09:D4D4: F0 03        	beq	L251
  7135 09:D4D6: 82 2D 00     	brl	L10104
  7136                        L251:
  Sat Jul 10 2021  1:15                                                Page 133


  7137                        	.line	824
  7138                        ;          /* Longueur Reloc */
  7139                        ;          current_segment->reloc_length += curren
                    t_record->length;
  7140                        	.line	826
  7141 09:D4D9: 18           	clc
  7142 09:D4DA: A9 53 0A     	lda	#$a53
  7143 09:D4DD: 65 2A        	adc	<L219+current_segment_0
  7144 09:D4DF: 85 01        	sta	<R0
  7145 09:D4E1: A9 00 00     	lda	#$0
  7146 09:D4E4: 65 2C        	adc	<L219+current_segment_0+2
  7147 09:D4E6: 85 03        	sta	<R0+2
  7148 09:D4E8: 18           	clc
  7149 09:D4E9: A7 01        	lda	[<R0]
  7150 09:D4EB: A0 09 00     	ldy	#$9
  7151 09:D4EE: 77 1D        	adc	[<L220+current_record_1],Y
  7152 09:D4F0: 87 01        	sta	[<R0]
  7153                        ;
  7154                        ;          /* Offset des Reloc du segment */
  7155                        ;          if(current_segment->reloc_offset == 0)
  7156                        	.line	829
  7157                        ;            current_segment->reloc_offset = curre
                    nt_record->FileOffset;
  7158 09:D4F2: A0 51 0A     	ldy	#$a51
  7159 09:D4F5: B7 2A        	lda	[<L219+current_segment_0],Y
  7160 09:D4F7: F0 03        	beq	L252
  7161 09:D4F9: 82 07 00     	brl	L10105
  7162                        L252:
  7163                        	.line	830
  7164 09:D4FC: A7 1D        	lda	[<L220+current_record_1]
  7165 09:D4FE: A0 51 0A     	ldy	#$a51
  7166 09:D501: 97 2A        	sta	[<L219+current_segment_0],Y
  7167                        ;        }
  7168                        L10105:
  7169                        	.line	831
  7170                        ;      else if(current_record->operation_code == 0
                    xF7)      /* SUPER */
  7171 09:D503: 82 3A 00     	brl	L10106
  7172                        L10104:
  7173                        	.line	832
  7174                        ;        {
  7175 09:D506: E2 20        	sep	#$20
  7176                        	longa	off
  7177 09:D508: A0 08 00     	ldy	#$8
  7178 09:D50B: B7 1D        	lda	[<L220+current_record_1],Y
  7179 09:D50D: C9 F7        	cmp	#<$f7
  7180 09:D50F: C2 20        	rep	#$20
  7181                        	longa	on
  7182 09:D511: F0 03        	beq	L253
  7183 09:D513: 82 2A 00     	brl	L10107
  7184                        L253:
  7185                        	.line	833
  7186                        ;          /* Longueur Reloc */
  7187                        ;          current_segment->reloc_length += curren
                    t_record->length;
  7188                        	.line	835
  7189 09:D516: 18           	clc
  7190 09:D517: A9 53 0A     	lda	#$a53
  Sat Jul 10 2021  1:15                                                Page 134


  7191 09:D51A: 65 2A        	adc	<L219+current_segment_0
  7192 09:D51C: 85 01        	sta	<R0
  7193 09:D51E: A9 00 00     	lda	#$0
  7194 09:D521: 65 2C        	adc	<L219+current_segment_0+2
  7195 09:D523: 85 03        	sta	<R0+2
  7196 09:D525: 18           	clc
  7197 09:D526: A7 01        	lda	[<R0]
  7198 09:D528: A0 09 00     	ldy	#$9
  7199 09:D52B: 77 1D        	adc	[<L220+current_record_1],Y
  7200 09:D52D: 87 01        	sta	[<R0]
  7201                        ;
  7202                        ;          /* Offset des Reloc du segment */
  7203                        ;          if(current_segment->reloc_offset == 0)
  7204                        	.line	838
  7205                        ;            current_segment->reloc_offset = curre
                    nt_record->FileOffset;
  7206 09:D52F: A0 51 0A     	ldy	#$a51
  7207 09:D532: B7 2A        	lda	[<L219+current_segment_0],Y
  7208 09:D534: F0 03        	beq	L254
  7209 09:D536: 82 07 00     	brl	L10108
  7210                        L254:
  7211                        	.line	839
  7212 09:D539: A7 1D        	lda	[<L220+current_record_1]
  7213 09:D53B: A0 51 0A     	ldy	#$a51
  7214 09:D53E: 97 2A        	sta	[<L219+current_segment_0],Y
  7215                        ;        }
  7216                        L10108:
  7217                        	.line	840
  7218                        ;
  7219                        ;
  7220                        ;      /** On passe au Record suivant si on est ar
                    rivé à la fin du Body (V 2.1) **/
  7221                        ;      body_offset += record_length;
  7222                        L10107:
  7223                        L10106:
  7224                        L10103:
  7225                        L10100:
  7226                        L10097:
  7227                        	.line	844
  7228 09:D540: 18           	clc
  7229 09:D541: A5 0D        	lda	<L220+body_offset_1
  7230 09:D543: 65 11        	adc	<L220+record_length_1
  7231 09:D545: 85 0D        	sta	<L220+body_offset_1
  7232                        ;      if(body_offset == body_length)
  7233                        	.line	845
  7234                        ;        break;
  7235 09:D547: A5 0D        	lda	<L220+body_offset_1
  7236 09:D549: C5 0F        	cmp	<L220+body_length_1
  7237 09:D54B: D0 03        	bne	L255
  7238 09:D54D: 82 10 00     	brl	L10080
  7239                        L255:
  7240                        ;
  7241                        ;      /* On va aussi s'arrêter si on tombe sur un
                     DEND (qui en V0 et V1 vient avant la fin du Body) */
  7242                        ;      if(current_record->operation_code == 0x00)
  7243                        	.line	849
  7244                        ;        break;
  7245 09:D550: A0 08 00     	ldy	#$8
  Sat Jul 10 2021  1:15                                                Page 135


  7246 09:D553: B7 1D        	lda	[<L220+current_record_1],Y
  7247 09:D555: 29 FF 00     	and	#$ff
  7248 09:D558: D0 03        	bne	L256
  7249 09:D55A: 82 03 00     	brl	L10080
  7250                        L256:
  7251                        ;    }
  7252                        	.line	851
  7253 09:D55D: 82 59 FA     	brl	L10079
  7254                        L10080:
  7255                        ;
  7256                        ;  /** On va extraire tous les RELOC / INTERSEG **
                    /
  7257                        ;  my_Memory(MEMORY_SORT_RELOC,&current_segment->n
                    b_reloc,&current_segment->tab_reloc);
  7258                        	.line	854
  7259 09:D560: 18           	clc
  7260 09:D561: A9 57 0A     	lda	#$a57
  7261 09:D564: 65 2A        	adc	<L219+current_segment_0
  7262 09:D566: 85 01        	sta	<R0
  7263 09:D568: A9 00 00     	lda	#$0
  7264 09:D56B: 65 2C        	adc	<L219+current_segment_0+2
  7265 09:D56D: 85 03        	sta	<R0+2
  7266 09:D56F: D4 03        	pei	<R0+2
  7267 09:D571: D4 01        	pei	<R0
  7268 09:D573: 18           	clc
  7269 09:D574: A9 55 0A     	lda	#$a55
  7270 09:D577: 65 2A        	adc	<L219+current_segment_0
  7271 09:D579: 85 05        	sta	<R1
  7272 09:D57B: A9 00 00     	lda	#$0
  7273 09:D57E: 65 2C        	adc	<L219+current_segment_0+2
  7274 09:D580: 85 07        	sta	<R1+2
  7275 09:D582: D4 07        	pei	<R1+2
  7276 09:D584: D4 05        	pei	<R1
  7277 09:D586: F4 0C 00     	pea	#<$c
  7278 09:D589: 22 xx xx xx  	jsl	~~my_Memory
  7279                        ;  my_Memory(MEMORY_SORT_INTERSEG,&current_segment
                    ->nb_interseg,&current_segment->tab_interseg);
  7280                        	.line	855
  7281 09:D58D: 18           	clc
  7282 09:D58E: A9 5D 0A     	lda	#$a5d
  7283 09:D591: 65 2A        	adc	<L219+current_segment_0
  7284 09:D593: 85 01        	sta	<R0
  7285 09:D595: A9 00 00     	lda	#$0
  7286 09:D598: 65 2C        	adc	<L219+current_segment_0+2
  7287 09:D59A: 85 03        	sta	<R0+2
  7288 09:D59C: D4 03        	pei	<R0+2
  7289 09:D59E: D4 01        	pei	<R0
  7290 09:D5A0: 18           	clc
  7291 09:D5A1: A9 5B 0A     	lda	#$a5b
  7292 09:D5A4: 65 2A        	adc	<L219+current_segment_0
  7293 09:D5A6: 85 05        	sta	<R1
  7294 09:D5A8: A9 00 00     	lda	#$0
  7295 09:D5AB: 65 2C        	adc	<L219+current_segment_0+2
  7296 09:D5AD: 85 07        	sta	<R1+2
  7297 09:D5AF: D4 07        	pei	<R1+2
  7298 09:D5B1: D4 05        	pei	<R1
  7299 09:D5B3: F4 16 00     	pea	#<$16
  7300 09:D5B6: 22 xx xx xx  	jsl	~~my_Memory
  Sat Jul 10 2021  1:15                                                Page 136


  7301                        ;
  7302                        ;  /* OK */
  7303                        ;  return(0);
  7304                        	.line	858
  7305 09:D5BA: A9 00 00     	lda	#$0
  7306 09:D5BD: 82 83 FA     	brl	L226
  7307                        ;}
  7308                        	.line	859
  7309                        	.endblock	859
  7310             00000020   L219	equ	32
  7311             0000000D   L220	equ	13
  7312 09:D5C0:              	ends
  7313                        	efunc
  7314                        	.endfunc	859,13,32
  7315                        	.line	859
  7316                        ;
  7317                        ;
  7318                        ;/************************************************
                    *******************/
  7319                        ;/*  mem_free_omf() :  Libération mémoire de la st
                    ructure omf_file. */
  7320                        ;/************************************************
                    *******************/
  7321                        ;void mem_free_omf(struct omf_file *current_file)
  7322                        ;{
  7323                        	.line	865
  7324                        	.line	866
  7325                        	LOADER
  7326                        	xdef	~~mem_free_omf
  7327                        	func
  7328                        	.function	866
  7329                        ~~mem_free_omf:
  7330                        	longa	on
  7331                        	longi	on
  7332 09:D5C0: 3B           	tsc
  7333 09:D5C1: 38           	sec
  7334 09:D5C2: E9 08 00     	sbc	#L257
  7335 09:D5C5: 1B           	tcs
  7336 09:D5C6: 0B           	phd
  7337 09:D5C7: 5B           	tcd
  7338             00000004   current_file_0	set	4
  7339                        	.block	866
  7340                        ;  struct omf_segment *current_segment;
  7341                        ;  struct omf_segment *next_segment;
  7342                        ;
  7343                        ;  if(current_file)
  7344             00000000   current_segment_1	set	0
  7345             00000004   next_segment_1	set	4
  7346                        	.sym	current_segment,0,138,1,32,121
  7347                        	.sym	next_segment,4,138,1,32,121
  7348                        	.sym	current_file,4,138,6,32,122
  7349                        	.line	870
  7350                        ;    {
  7351 09:D5C8: A5 0C        	lda	<L257+current_file_0
  7352 09:D5CA: 05 0E        	ora	<L257+current_file_0+2
  7353 09:D5CC: D0 03        	bne	L260
  7354 09:D5CE: 82 78 00     	brl	L10109
  7355                        L260:
  Sat Jul 10 2021  1:15                                                Page 137


  7356                        	.line	871
  7357                        ;      if(current_file->file_path)
  7358                        	.line	872
  7359                        ;        k_free(current_file->file_path);
  7360 09:D5D1: A7 0C        	lda	[<L257+current_file_0]
  7361 09:D5D3: A0 02 00     	ldy	#$2
  7362 09:D5D6: 17 0C        	ora	[<L257+current_file_0],Y
  7363 09:D5D8: D0 03        	bne	L261
  7364 09:D5DA: 82 0D 00     	brl	L10110
  7365                        L261:
  7366                        	.line	873
  7367 09:D5DD: A0 02 00     	ldy	#$2
  7368 09:D5E0: B7 0C        	lda	[<L257+current_file_0],Y
  7369 09:D5E2: 48           	pha
  7370 09:D5E3: A7 0C        	lda	[<L257+current_file_0]
  7371 09:D5E5: 48           	pha
  7372 09:D5E6: 22 xx xx xx  	jsl	~~k_free
  7373                        ;
  7374                        ;      if(current_file->data)
  7375                        L10110:
  7376                        	.line	875
  7377                        ;        k_free(current_file->data);
  7378 09:D5EA: A0 0A 00     	ldy	#$a
  7379 09:D5ED: B7 0C        	lda	[<L257+current_file_0],Y
  7380 09:D5EF: A0 0C 00     	ldy	#$c
  7381 09:D5F2: 17 0C        	ora	[<L257+current_file_0],Y
  7382 09:D5F4: D0 03        	bne	L262
  7383 09:D5F6: 82 10 00     	brl	L10111
  7384                        L262:
  7385                        	.line	876
  7386 09:D5F9: A0 0C 00     	ldy	#$c
  7387 09:D5FC: B7 0C        	lda	[<L257+current_file_0],Y
  7388 09:D5FE: 48           	pha
  7389 09:D5FF: A0 0A 00     	ldy	#$a
  7390 09:D602: B7 0C        	lda	[<L257+current_file_0],Y
  7391 09:D604: 48           	pha
  7392 09:D605: 22 xx xx xx  	jsl	~~k_free
  7393                        ;
  7394                        ;      /* Libération des segments */
  7395                        ;      for(current_segment = current_file->first_s
                    egment; current_segment; )
  7396                        L10111:
  7397                        	.line	879
  7398 09:D609: A0 10 00     	ldy	#$10
  7399 09:D60C: B7 0C        	lda	[<L257+current_file_0],Y
  7400 09:D60E: 85 01        	sta	<L258+current_segment_1
  7401 09:D610: A0 12 00     	ldy	#$12
  7402 09:D613: B7 0C        	lda	[<L257+current_file_0],Y
  7403 09:D615: 85 03        	sta	<L258+current_segment_1+2
  7404 09:D617: 82 1E 00     	brl	L10115
  7405                        L10114:
  7406                        ;        {
  7407                        	.line	880
  7408                        ;          next_segment = current_segment->next;
  7409                        	.line	881
  7410 09:D61A: A0 61 0A     	ldy	#$a61
  7411 09:D61D: B7 01        	lda	[<L258+current_segment_1],Y
  7412 09:D61F: 85 05        	sta	<L258+next_segment_1
  Sat Jul 10 2021  1:15                                                Page 138


  7413 09:D621: A0 63 0A     	ldy	#$a63
  7414 09:D624: B7 01        	lda	[<L258+current_segment_1],Y
  7415 09:D626: 85 07        	sta	<L258+next_segment_1+2
  7416                        ;          mem_free_segment(current_segment);
  7417                        	.line	882
  7418 09:D628: D4 03        	pei	<L258+current_segment_1+2
  7419 09:D62A: D4 01        	pei	<L258+current_segment_1
  7420 09:D62C: 22 59 D6 09  	jsl	~~mem_free_segment
  7421                        ;          current_segment = next_segment;
  7422                        	.line	883
  7423 09:D630: A5 05        	lda	<L258+next_segment_1
  7424 09:D632: 85 01        	sta	<L258+current_segment_1
  7425 09:D634: A5 07        	lda	<L258+next_segment_1+2
  7426 09:D636: 85 03        	sta	<L258+current_segment_1+2
  7427                        ;        }
  7428                        	.line	884
  7429                        L10112:
  7430                        L10115:
  7431 09:D638: A5 01        	lda	<L258+current_segment_1
  7432 09:D63A: 05 03        	ora	<L258+current_segment_1+2
  7433 09:D63C: F0 03        	beq	L263
  7434 09:D63E: 82 D9 FF     	brl	L10114
  7435                        L263:
  7436                        L10113:
  7437                        ;
  7438                        ;      k_free(current_file);
  7439                        	.line	886
  7440 09:D641: D4 0E        	pei	<L257+current_file_0+2
  7441 09:D643: D4 0C        	pei	<L257+current_file_0
  7442 09:D645: 22 xx xx xx  	jsl	~~k_free
  7443                        ;    }
  7444                        	.line	887
  7445                        ;}
  7446                        L10109:
  7447                        	.line	888
  7448                        L264:
  7449 09:D649: A5 0A        	lda	<L257+2
  7450 09:D64B: 85 0E        	sta	<L257+2+4
  7451 09:D64D: A5 09        	lda	<L257+1
  7452 09:D64F: 85 0D        	sta	<L257+1+4
  7453 09:D651: 2B           	pld
  7454 09:D652: 3B           	tsc
  7455 09:D653: 18           	clc
  7456 09:D654: 69 0C 00     	adc	#L257+4
  7457 09:D657: 1B           	tcs
  7458 09:D658: 6B           	rtl
  7459                        	.endblock	888
  7460             00000008   L257	equ	8
  7461             00000001   L258	equ	1
  7462 09:D659:              	ends
  7463                        	efunc
  7464                        	.endfunc	888,1,8
  7465                        	.line	888
  7466                        ;
  7467                        ;
  7468                        ;/************************************************
                    **************************/
  7469                        ;/*  mem_free_segment() :  Libération mémoire de l
  Sat Jul 10 2021  1:15                                                Page 139


                    a structure omf_segment. */
  7470                        ;/************************************************
                    **************************/
  7471                        ;static void mem_free_segment(struct omf_segment *
                    current_segment)
  7472                        ;{
  7473                        	.line	894
  7474                        	.line	895
  7475                        	LOADER
  7476                        	func
  7477                        	.function	895
  7478                        ~~mem_free_segment:
  7479                        	longa	on
  7480                        	longi	on
  7481 09:D659: 3B           	tsc
  7482 09:D65A: 38           	sec
  7483 09:D65B: E9 16 00     	sbc	#L265
  7484 09:D65E: 1B           	tcs
  7485 09:D65F: 0B           	phd
  7486 09:D660: 5B           	tcd
  7487             00000004   current_segment_0	set	4
  7488                        	.block	895
  7489                        ;  int i;
  7490                        ;  struct omf_body_record *current_record;
  7491                        ;  struct omf_body_record *next_record;
  7492                        ;
  7493                        ;  if(current_segment)
  7494             00000000   i_1	set	0
  7495             00000002   current_record_1	set	2
  7496             00000006   next_record_1	set	6
  7497                        	.sym	i,0,5,1,16
  7498                        	.sym	current_record,2,138,1,32,85
  7499                        	.sym	next_record,6,138,1,32,85
  7500                        	.sym	current_segment,4,138,6,32,121
  7501                        	.line	900
  7502                        ;    {
  7503 09:D661: A5 1A        	lda	<L265+current_segment_0
  7504 09:D663: 05 1C        	ora	<L265+current_segment_0+2
  7505 09:D665: D0 03        	bne	L268
  7506 09:D667: 82 45 01     	brl	L10116
  7507                        L268:
  7508                        	.line	901
  7509                        ;      /* Libération des Records */
  7510                        ;      for(current_record=current_segment->first_r
                    ecord; current_record; )
  7511                        	.line	903
  7512 09:D66A: A0 41 0A     	ldy	#$a41
  7513 09:D66D: B7 1A        	lda	[<L265+current_segment_0],Y
  7514 09:D66F: 85 0F        	sta	<L266+current_record_1
  7515 09:D671: A0 43 0A     	ldy	#$a43
  7516 09:D674: B7 1A        	lda	[<L265+current_segment_0],Y
  7517 09:D676: 85 11        	sta	<L266+current_record_1+2
  7518 09:D678: 82 1E 00     	brl	L10120
  7519                        L10119:
  7520                        ;        {
  7521                        	.line	904
  7522                        ;          next_record = current_record->next;
  7523                        	.line	905
  Sat Jul 10 2021  1:15                                                Page 140


  7524 09:D67B: A0 11 00     	ldy	#$11
  7525 09:D67E: B7 0F        	lda	[<L266+current_record_1],Y
  7526 09:D680: 85 13        	sta	<L266+next_record_1
  7527 09:D682: A0 13 00     	ldy	#$13
  7528 09:D685: B7 0F        	lda	[<L266+current_record_1],Y
  7529 09:D687: 85 15        	sta	<L266+next_record_1+2
  7530                        ;          mem_free_record(current_record);
  7531                        	.line	906
  7532 09:D689: D4 11        	pei	<L266+current_record_1+2
  7533 09:D68B: D4 0F        	pei	<L266+current_record_1
  7534 09:D68D: 22 xx xx xx  	jsl	~~mem_free_record
  7535                        ;          current_record = next_record;
  7536                        	.line	907
  7537 09:D691: A5 13        	lda	<L266+next_record_1
  7538 09:D693: 85 0F        	sta	<L266+current_record_1
  7539 09:D695: A5 15        	lda	<L266+next_record_1+2
  7540 09:D697: 85 11        	sta	<L266+current_record_1+2
  7541                        ;        }
  7542                        	.line	908
  7543                        L10117:
  7544                        L10120:
  7545 09:D699: A5 0F        	lda	<L266+current_record_1
  7546 09:D69B: 05 11        	ora	<L266+current_record_1+2
  7547 09:D69D: F0 03        	beq	L269
  7548 09:D69F: 82 D9 FF     	brl	L10119
  7549                        L269:
  7550                        L10118:
  7551                        ;
  7552                        ;      /* Libération des Data */
  7553                        ;      if(current_segment->data)
  7554                        	.line	911
  7555                        ;        k_free(current_segment->data);
  7556 09:D6A2: A0 4D 0A     	ldy	#$a4d
  7557 09:D6A5: B7 1A        	lda	[<L265+current_segment_0],Y
  7558 09:D6A7: A0 4F 0A     	ldy	#$a4f
  7559 09:D6AA: 17 1A        	ora	[<L265+current_segment_0],Y
  7560 09:D6AC: D0 03        	bne	L270
  7561 09:D6AE: 82 10 00     	brl	L10121
  7562                        L270:
  7563                        	.line	912
  7564 09:D6B1: A0 4F 0A     	ldy	#$a4f
  7565 09:D6B4: B7 1A        	lda	[<L265+current_segment_0],Y
  7566 09:D6B6: 48           	pha
  7567 09:D6B7: A0 4D 0A     	ldy	#$a4d
  7568 09:D6BA: B7 1A        	lda	[<L265+current_segment_0],Y
  7569 09:D6BC: 48           	pha
  7570 09:D6BD: 22 xx xx xx  	jsl	~~k_free
  7571                        ;
  7572                        ;      /* Libération des tableaux */
  7573                        ;      if(current_segment->tab_reloc)
  7574                        L10121:
  7575                        	.line	915
  7576                        ;        {
  7577 09:D6C1: A0 57 0A     	ldy	#$a57
  7578 09:D6C4: B7 1A        	lda	[<L265+current_segment_0],Y
  7579 09:D6C6: A0 59 0A     	ldy	#$a59
  7580 09:D6C9: 17 1A        	ora	[<L265+current_segment_0],Y
  7581 09:D6CB: D0 03        	bne	L271
  Sat Jul 10 2021  1:15                                                Page 141


  7582 09:D6CD: 82 64 00     	brl	L10122
  7583                        L271:
  7584                        	.line	916
  7585                        ;          for(i=0; i<current_segment->nb_reloc; i
                    ++)
  7586                        	.line	917
  7587 09:D6D0: 64 0D        	stz	<L266+i_1
  7588 09:D6D2: 82 3D 00     	brl	L10126
  7589                        L10125:
  7590                        ;            k_free(current_segment->tab_reloc[i])
                    ;
  7591                        	.line	918
  7592 09:D6D5: A0 00 00     	ldy	#$0
  7593 09:D6D8: A5 0D        	lda	<L266+i_1
  7594 09:D6DA: 10 01        	bpl	L272
  7595 09:D6DC: 88           	dey
  7596                        L272:
  7597 09:D6DD: 85 05        	sta	<R1
  7598 09:D6DF: 84 07        	sty	<R1+2
  7599 09:D6E1: D4 07        	pei	<R1+2
  7600 09:D6E3: D4 05        	pei	<R1
  7601 09:D6E5: A9 02 00     	lda	#$2
  7602                        	xref	~~~lasl
  7603 09:D6E8: 22 xx xx xx  	jsl	~~~lasl
  7604 09:D6EC: 85 01        	sta	<R0
  7605 09:D6EE: 86 03        	stx	<R0+2
  7606 09:D6F0: 18           	clc
  7607 09:D6F1: A0 57 0A     	ldy	#$a57
  7608 09:D6F4: B7 1A        	lda	[<L265+current_segment_0],Y
  7609 09:D6F6: 65 01        	adc	<R0
  7610 09:D6F8: 85 09        	sta	<R2
  7611 09:D6FA: A0 59 0A     	ldy	#$a59
  7612 09:D6FD: B7 1A        	lda	[<L265+current_segment_0],Y
  7613 09:D6FF: 65 03        	adc	<R0+2
  7614 09:D701: 85 0B        	sta	<R2+2
  7615 09:D703: A0 02 00     	ldy	#$2
  7616 09:D706: B7 09        	lda	[<R2],Y
  7617 09:D708: 48           	pha
  7618 09:D709: A7 09        	lda	[<R2]
  7619 09:D70B: 48           	pha
  7620 09:D70C: 22 xx xx xx  	jsl	~~k_free
  7621                        L10123:
  7622 09:D710: E6 0D        	inc	<L266+i_1
  7623                        L10126:
  7624 09:D712: 38           	sec
  7625 09:D713: A5 0D        	lda	<L266+i_1
  7626 09:D715: A0 55 0A     	ldy	#$a55
  7627 09:D718: F7 1A        	sbc	[<L265+current_segment_0],Y
  7628 09:D71A: 70 03        	bvs	L273
  7629 09:D71C: 49 00 80     	eor	#$8000
  7630                        L273:
  7631 09:D71F: 30 03        	bmi	L274
  7632 09:D721: 82 B1 FF     	brl	L10125
  7633                        L274:
  7634                        L10124:
  7635                        ;          k_free(current_segment->tab_reloc);
  7636                        	.line	919
  7637 09:D724: A0 59 0A     	ldy	#$a59
  Sat Jul 10 2021  1:15                                                Page 142


  7638 09:D727: B7 1A        	lda	[<L265+current_segment_0],Y
  7639 09:D729: 48           	pha
  7640 09:D72A: A0 57 0A     	ldy	#$a57
  7641 09:D72D: B7 1A        	lda	[<L265+current_segment_0],Y
  7642 09:D72F: 48           	pha
  7643 09:D730: 22 xx xx xx  	jsl	~~k_free
  7644                        ;        }
  7645                        	.line	920
  7646                        ;      if(current_segment->tab_interseg)
  7647                        L10122:
  7648                        	.line	921
  7649                        ;        {
  7650 09:D734: A0 5D 0A     	ldy	#$a5d
  7651 09:D737: B7 1A        	lda	[<L265+current_segment_0],Y
  7652 09:D739: A0 5F 0A     	ldy	#$a5f
  7653 09:D73C: 17 1A        	ora	[<L265+current_segment_0],Y
  7654 09:D73E: D0 03        	bne	L275
  7655 09:D740: 82 64 00     	brl	L10127
  7656                        L275:
  7657                        	.line	922
  7658                        ;          for(i=0; i<current_segment->nb_interseg
                    ; i++)
  7659                        	.line	923
  7660 09:D743: 64 0D        	stz	<L266+i_1
  7661 09:D745: 82 3D 00     	brl	L10131
  7662                        L10130:
  7663                        ;            k_free(current_segment->tab_interseg[
                    i]);
  7664                        	.line	924
  7665 09:D748: A0 00 00     	ldy	#$0
  7666 09:D74B: A5 0D        	lda	<L266+i_1
  7667 09:D74D: 10 01        	bpl	L276
  7668 09:D74F: 88           	dey
  7669                        L276:
  7670 09:D750: 85 05        	sta	<R1
  7671 09:D752: 84 07        	sty	<R1+2
  7672 09:D754: D4 07        	pei	<R1+2
  7673 09:D756: D4 05        	pei	<R1
  7674 09:D758: A9 02 00     	lda	#$2
  7675                        	xref	~~~lasl
  7676 09:D75B: 22 xx xx xx  	jsl	~~~lasl
  7677 09:D75F: 85 01        	sta	<R0
  7678 09:D761: 86 03        	stx	<R0+2
  7679 09:D763: 18           	clc
  7680 09:D764: A0 5D 0A     	ldy	#$a5d
  7681 09:D767: B7 1A        	lda	[<L265+current_segment_0],Y
  7682 09:D769: 65 01        	adc	<R0
  7683 09:D76B: 85 09        	sta	<R2
  7684 09:D76D: A0 5F 0A     	ldy	#$a5f
  7685 09:D770: B7 1A        	lda	[<L265+current_segment_0],Y
  7686 09:D772: 65 03        	adc	<R0+2
  7687 09:D774: 85 0B        	sta	<R2+2
  7688 09:D776: A0 02 00     	ldy	#$2
  7689 09:D779: B7 09        	lda	[<R2],Y
  7690 09:D77B: 48           	pha
  7691 09:D77C: A7 09        	lda	[<R2]
  7692 09:D77E: 48           	pha
  7693 09:D77F: 22 xx xx xx  	jsl	~~k_free
  Sat Jul 10 2021  1:15                                                Page 143


  7694                        L10128:
  7695 09:D783: E6 0D        	inc	<L266+i_1
  7696                        L10131:
  7697 09:D785: 38           	sec
  7698 09:D786: A5 0D        	lda	<L266+i_1
  7699 09:D788: A0 5B 0A     	ldy	#$a5b
  7700 09:D78B: F7 1A        	sbc	[<L265+current_segment_0],Y
  7701 09:D78D: 70 03        	bvs	L277
  7702 09:D78F: 49 00 80     	eor	#$8000
  7703                        L277:
  7704 09:D792: 30 03        	bmi	L278
  7705 09:D794: 82 B1 FF     	brl	L10130
  7706                        L278:
  7707                        L10129:
  7708                        ;          k_free(current_segment->tab_interseg);
  7709                        	.line	925
  7710 09:D797: A0 5F 0A     	ldy	#$a5f
  7711 09:D79A: B7 1A        	lda	[<L265+current_segment_0],Y
  7712 09:D79C: 48           	pha
  7713 09:D79D: A0 5D 0A     	ldy	#$a5d
  7714 09:D7A0: B7 1A        	lda	[<L265+current_segment_0],Y
  7715 09:D7A2: 48           	pha
  7716 09:D7A3: 22 xx xx xx  	jsl	~~k_free
  7717                        ;        }
  7718                        	.line	926
  7719                        ;
  7720                        ;      k_free(current_segment);
  7721                        L10127:
  7722                        	.line	928
  7723 09:D7A7: D4 1C        	pei	<L265+current_segment_0+2
  7724 09:D7A9: D4 1A        	pei	<L265+current_segment_0
  7725 09:D7AB: 22 xx xx xx  	jsl	~~k_free
  7726                        ;    }
  7727                        	.line	929
  7728                        ;}
  7729                        L10116:
  7730                        	.line	930
  7731                        L279:
  7732 09:D7AF: A5 18        	lda	<L265+2
  7733 09:D7B1: 85 1C        	sta	<L265+2+4
  7734 09:D7B3: A5 17        	lda	<L265+1
  7735 09:D7B5: 85 1B        	sta	<L265+1+4
  7736 09:D7B7: 2B           	pld
  7737 09:D7B8: 3B           	tsc
  7738 09:D7B9: 18           	clc
  7739 09:D7BA: 69 1A 00     	adc	#L265+4
  7740 09:D7BD: 1B           	tcs
  7741 09:D7BE: 6B           	rtl
  7742                        	.endblock	930
  7743             00000016   L265	equ	22
  7744             0000000D   L266	equ	13
  7745 09:D7BF:              	ends
  7746                        	efunc
  7747                        	.endfunc	930,13,22
  7748                        	.line	930
  7749                        ;
  7750                        ;/************************************************
                    ************************/
  Sat Jul 10 2021  1:15                                                Page 144


  7751                        ;
  7752                        	.line	932
  7753                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",894
  7754                        	xref	~~mem_free_record
  7755                        	xref	~~DecodeOneRecord
  7756                        	xref	~~LoadFileData
  7757                        	xref	~~my_Memory
  7758                        	xref	~~k_free
  7759                        	xref	~~k_calloc
  7760                        	xref	~~k_string_copy_string
  7761                        	xref	~~k_debug_strings
  7762                        	xref	~~k_debug_string
  7763                        	xref	~~strlen
  7764                        	xref	~~memcpy
  7765                        	.sym	~~mem_free_segment,~~mem_free_segment,65
                    ,3,0
  7766                        	.sym	~~DecodeSegmentBody,~~DecodeSegmentBody,
                    69,3,0
  7767                        	.sym	~~DecodeSegmentHeaderV2,~~DecodeSegmentH
                    eaderV2,69,3,0
  7768                        	.sym	~~DecodeSegmentHeaderV1,~~DecodeSegmentH
                    eaderV1,69,3,0
  7769                        	.sym	~~DecodeSegmentHeaderV0,~~DecodeSegmentH
                    eaderV0,69,3,0
  7770                        	.sym	~~DecodeSegmentHeader,~~DecodeSegmentHea
                    der,69,3,0
  7771                        	.sym	~~DecodeOneSegment,~~DecodeOneSegment,10
                    98,3,32,121
  7772                        	.sym	~~DecodeOMFFile,~~DecodeOMFFile,69,3,0
  7773                        	.sym	~~mem_free_omf,~~mem_free_omf,65,2,0
  7774                        	.sym	~~LoadOMFFile,~~LoadOMFFile,1098,2,32,12
                    2
  7775                        	.sym	~~mem_free_record,~~mem_free_record,65,1
                    8,0
  7776                        	.sym	~~DecodeOneRecord,~~DecodeOneRecord,1098
                    ,18,32,85
  7777                        	.sym	~~LoadFileData,~~LoadFileData,1102,18,32
  7778                        	.sym	~~my_Memory,~~my_Memory,65,18,0
  7779                        	.sym	PIPCPORT,0,138,14,32,84
  7780                        	.sym	IPCPORT,0,10,14,144,84
  7781                        	.sym	~~k_free,~~k_free,65,18,0
  7782                        	.sym	~~k_calloc,~~k_calloc,1089,18,32
  7783                        	.sym	MemoryCallback,0,641,14,32
  7784                        	.sym	PFXMEMORYMAP,0,138,14,32,83
  7785                        	.sym	FXMEMORYMAP,0,10,14,2072,83
  7786                        	.sym	UMM_HEAP_INFO,0,10,14,256,82
  7787                        	.sym	FRESULT,0,5,14,16
  7788                        	.sym	MKFS_PARM,0,10,14,80,81
  7789                        	.sym	FILINFO,0,10,14,2224,80
  7790                        	.sym	DIR,0,10,14,416,79
  7791                        	.sym	FIL,0,10,14,4400,78
  7792                        	.sym	FFOBJID,0,10,14,128,77
  7793                        	.sym	FATFS,0,10,14,4504,76
  7794                        	.sym	LBA_t,0,18,14,32
  7795                        	.sym	FSIZE_t,0,18,14,32
  7796                        	.sym	TCHAR,0,14,14,8
  7797                        	.sym	PCOMMANDARGS,0,138,14,32,75
  Sat Jul 10 2021  1:15                                                Page 145


  7798                        	.sym	COMMANDARGS,0,10,14,64,75
  7799                        	.sym	PTOKENIZESTATE,0,133,14,32
  7800                        	.sym	TOKENIZESTATE,0,5,14,16
  7801                        	.sym	PTOKEN,0,138,14,32,74
  7802                        	.sym	TOKEN,0,10,14,64,74
  7803                        	.sym	PTOKENTYPE,0,133,14,32
  7804                        	.sym	TOKENTYPE,0,5,14,16
  7805                        	.sym	FXCommandHandler,0,656,14,32
  7806                        	.sym	PCONSOLECTX,0,138,14,32,73
  7807                        	.sym	CONSOLECTX,0,10,14,1144,73
  7808                        	.sym	PSPINNERCTX,0,138,14,32,72
  7809                        	.sym	SPINNERCTX,0,10,14,48,72
  7810                        	.sym	HCLIP,0,138,14,32,71
  7811                        	.sym	PCLIPBOARD_DATA,0,138,14,32,71
  7812                        	.sym	CLIPBOARD_DATA,0,10,14,168,71
  7813                        	.sym	PEVENTMANAGER,0,138,14,32,70
  7814                        	.sym	EVENTMANAGER,0,10,14,192,70
  7815                        	.sym	EV_RUN,0,656,14,32
  7816                        	.sym	EV_QUERY_METRIC,0,656,14,32
  7817                        	.sym	EV_CONFIGURE,0,656,14,32
  7818                        	.sym	EV_UNINIT,0,641,14,32
  7819                        	.sym	EV_INIT,0,8833,14,32
  7820                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,69
  7821                        	.sym	MOUSE_MSG_STATE,0,10,14,184,69
  7822                        	.sym	PFXEVENTPROCESS,0,138,14,32,68
  7823                        	.sym	FXEVENTPROCESS,0,10,14,64,68
  7824                        	.sym	PMARSHALDATA,0,139,14,32,67
  7825                        	.sym	MARSHALDATA,0,11,14,32,67
  7826                        	.sym	FXIDLEPROCESS,0,641,14,32
  7827                        	.sym	FXEventProc,0,641,14,32
  7828                        	.sym	PMOUSEMSGDATA,0,138,14,32,66
  7829                        	.sym	MOUSEMSGDATA,0,10,14,64,66
  7830                        	.sym	MSGIRQ,0,5,14,16
  7831                        	.sym	MAINLOOPARGS,0,10,14,16,65
  7832                        	.sym	PEACHCHILD_MSG,0,138,14,32,64
  7833                        	.sym	EACHCHILD_MSG,0,10,14,64,64
  7834                        	.sym	PMSGBOX_DATA,0,138,14,32,63
  7835                        	.sym	MSGBOX_DATA,0,10,14,96,63
  7836                        	.sym	PDESKTOP_DATA,0,138,14,32,62
  7837                        	.sym	DESKTOP_DATA,0,10,14,64,62
  7838                        	.sym	PWINDOWMANAGER,0,138,14,32,61
  7839                        	.sym	WINDOWMANAGER,0,10,14,160,61
  7840                        	.sym	WM_DOPROCS,0,641,14,32
  7841                        	.sym	WM_QUERY_METRIC,0,656,14,32
  7842                        	.sym	WM_CONFIGURE,0,656,14,32
  7843                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
  7844                        	.sym	WM_EVENTS,0,641,14,32
  7845                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,60
  7846                        	.sym	CUR_PALETTE_MAP,0,10,14,400,60
  7847                        	.sym	PCLICKDETECTED,0,138,14,32,59
  7848                        	.sym	CLICKDETECTED,0,10,14,64,59
  7849                        	.sym	OBJECTCLICKED,0,641,14,32
  7850                        	.sym	PEXECUTIVE,0,138,14,32,58
  7851                        	.sym	EXECUTIVE,0,10,14,128,58
  7852                        	.sym	EX_QUERY_METRIC,0,656,14,32
  7853                        	.sym	EX_CONFIGURE,0,656,14,32
  7854                        	.sym	EX_UNINIT,0,641,14,32
  7855                        	.sym	EX_INIT,0,8833,14,32
  Sat Jul 10 2021  1:15                                                Page 146


  7856                        	.sym	~~k_string_copy_string,~~k_string_copy_s
                    tring,1102,18,32
  7857                        	.sym	PFXSTRING,0,138,14,32,57
  7858                        	.sym	FXSTRING,0,10,14,64,57
  7859                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
  7860                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  7861                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
  7862                        	.sym	DEVICEDRIVER_READ,0,656,14,32
  7863                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  7864                        	.sym	DEVICEDRIVER_IRQ,0,654,14,32
  7865                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,56
  7866                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,56
  7867                        	.sym	GETDRIVERDEF,0,8842,14,32,55
  7868                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,55
  7869                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,55
  7870                        	.sym	~~k_debug_strings,~~k_debug_strings,65,1
                    8,0
  7871                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
  7872                        	.sym	PSEGMENTHEADER,0,138,14,32,54
  7873                        	.sym	SEGMENTHEADER,0,10,14,160,54
  7874                        	.sym	PDEBUGBYTEBITS,0,138,14,32,53
  7875                        	.sym	DEBUGBYTEBITS,0,10,14,8,53
  7876                        	.sym	PFXENVIRONMENT,0,138,14,32,52
  7877                        	.sym	FXENVIRONMENT,0,10,14,96,52
  7878                        	.sym	PFXZEROPAGE,0,138,14,32,51
  7879                        	.sym	FXZEROPAGE,0,10,14,824,51
  7880                        	.sym	KERNELTRAPCALL,0,641,14,32
  7881                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,50
  7882                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,50
  7883                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  7884                        	.sym	FOREACHNODE,0,641,14,32
  7885                        	.sym	~~strlen,~~strlen,80,18,0
  7886                        	.sym	~~memcpy,~~memcpy,1089,18,32
  7887                        	.sym	Boolean_T,0,5,14,16
  7888                        	.sym	ldiv_t,0,10,14,64,48
  7889                        	.sym	div_t,0,10,14,32,47
  7890                        	.sym	wctype_t,0,16,14,16
  7891                        	.sym	wint_t,0,16,14,16
  7892                        	.sym	wchar_t,0,14,14,8
  7893                        	.sym	ptrdiff_t,0,7,14,32
  7894                        	.sym	size_t,0,16,14,16
  7895                        	.sym	PFXRFHEADER_FONT,0,138,14,32,46
  7896                        	.sym	FXRFHEADER_FONT,0,10,14,144,46
  7897                        	.sym	PFXRFHEADER,0,138,14,32,45
  7898                        	.sym	FXRFHEADER,0,10,14,72,45
  7899                        	.sym	PFXCOMBUFFER,0,138,14,32,44
  7900                        	.sym	FXCOMBUFFER,0,10,14,2080,44
  7901                        	.sym	PSUBMENULIST,0,138,14,32,43
  7902                        	.sym	SUBMENULIST,0,10,14,40,43
  7903                        	.sym	HSUBMENU,0,7,14,32
  7904                        	.sym	PSUBMENU,0,138,14,32,42
  7905                        	.sym	SUBMENU,0,10,14,64,42
  7906                        	.sym	MenuAction,0,641,14,32
  7907                        	.sym	PMENUANCHOR,0,138,14,32,41
  7908                        	.sym	MENUANCHOR,0,10,14,272,41
  7909                        	.sym	PMSGBOX,0,138,14,32,40
  7910                        	.sym	MSGBOX,0,10,14,144,40
  Sat Jul 10 2021  1:15                                                Page 147


  7911                        	.sym	PTEXTBOX,0,138,14,32,39
  7912                        	.sym	TEXTBOX,0,10,14,144,39
  7913                        	.sym	PLISTBOX,0,138,14,32,38
  7914                        	.sym	LISTBOX,0,10,14,240,38
  7915                        	.sym	PSCROLLBAR,0,138,14,32,37
  7916                        	.sym	SCROLLBAR,0,10,14,240,37
  7917                        	.sym	PBUTTON,0,138,14,32,36
  7918                        	.sym	BUTTON,0,10,14,96,36
  7919                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,35
  7920                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,35
  7921                        	.sym	PMENUTAG,0,138,14,32,34
  7922                        	.sym	MENUTAG,0,10,14,160,34
  7923                        	.sym	PMENU,0,138,14,32,33
  7924                        	.sym	MENU,0,10,14,280,33
  7925                        	.sym	HMENURESOURCE,0,129,14,32
  7926                        	.sym	FONTMETRIC,0,10,14,32,32
  7927                        	.sym	TITLE,0,142,14,32
  7928                        	.sym	PHANDLE,0,1153,14,32
  7929                        	.sym	HANDLE,0,129,14,32
  7930                        	.sym	PWINDOWEX,0,138,14,32,31
  7931                        	.sym	WINDOWEX,0,10,14,3880,31
  7932                        	.sym	PWINDOW,0,138,14,32,30
  7933                        	.sym	WINDOW,0,10,14,3904,30
  7934                        	.sym	PDRAGDATA,0,138,14,32,29
  7935                        	.sym	DRAGDATA,0,10,14,216,29
  7936                        	.sym	PNCCLICKABLE,0,138,14,32,28
  7937                        	.sym	NCCLICKABLE,0,10,14,136,28
  7938                        	.sym	HCLICKABLE,0,7,14,32
  7939                        	.sym	PCLICKABLE,0,138,14,32,27
  7940                        	.sym	CLICKABLE,0,10,14,152,27
  7941                        	.sym	PWNDCLASS,0,138,14,32,26
  7942                        	.sym	WNDCLASS,0,10,14,272,26
  7943                        	.sym	HBRUSH,0,129,14,32
  7944                        	.sym	HCURSOR,0,129,14,32
  7945                        	.sym	HICON,0,129,14,32
  7946                        	.sym	HINSTANCE,0,129,14,32
  7947                        	.sym	FXWndProc,0,654,14,32
  7948                        	.sym	PDRECT,0,138,14,32,25
  7949                        	.sym	DRECT,0,10,14,112,25
  7950                        	.sym	PRECTP,0,138,14,32,24
  7951                        	.sym	RECTP,0,10,14,96,24
  7952                        	.sym	PRECT,0,138,14,32,23
  7953                        	.sym	RECT,0,10,14,112,23
  7954                        	.sym	PPOINT,0,138,14,32,22
  7955                        	.sym	POINT,0,10,14,32,22
  7956                        	.sym	PFXPROPERTY,0,138,14,32,20
  7957                        	.sym	FXPROPERTY,0,10,14,384,20
  7958                        	.sym	PKEYSTATE,0,138,14,32,19
  7959                        	.sym	KEYSTATE,0,10,14,112,19
  7960                        	.sym	SCANCODE,0,14,14,8
  7961                        	.sym	KEYCODE,0,16,14,16
  7962                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,18
  7963                        	.sym	FXPROCESSMESSAGE,0,10,14,112,18
  7964                        	.sym	PFXPROCESS,0,138,14,32,17
  7965                        	.sym	FXPROCESS,0,10,14,800,17
  7966                        	.sym	PDESKTOP_CONTROL,0,138,14,32,16
  7967                        	.sym	DESKTOP_CONTROL,0,10,14,392,16
  7968                        	.sym	PCONSOLE_CONTROL,0,138,14,32,15
  Sat Jul 10 2021  1:15                                                Page 148


  7969                        	.sym	CONSOLE_CONTROL,0,10,14,448,15
  7970                        	.sym	FXProcessProc,0,641,14,32
  7971                        	.sym	PFXCMDMESSAGE,0,138,14,32,14
  7972                        	.sym	FXCMDMESSAGE,0,10,14,304,14
  7973                        	.sym	PFXOSMESSAGE,0,138,14,32,13
  7974                        	.sym	FXOSMESSAGE,0,10,14,304,13
  7975                        	.sym	PINT_REGS,0,138,14,32,12
  7976                        	.sym	INT_REGS,0,10,14,104,12
  7977                        	.sym	TASK_STACK,0,10,14,32,11
  7978                        	.sym	TASK,0,10,14,48,10
  7979                        	.sym	PIRQDATA,0,138,14,32,9
  7980                        	.sym	IRQDATA,0,10,14,48,9
  7981                        	.sym	HMENU,0,129,14,32
  7982                        	.sym	HWND,0,129,14,32
  7983                        	.sym	MSGDATA,0,14,14,8
  7984                        	.sym	MSGDEST,0,18,14,32
  7985                        	.sym	MSGSRC,0,18,14,32
  7986                        	.sym	MSGTYPE,0,16,14,16
  7987                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,3
  7988                        	.sym	PROCESS_TLS_LIST,0,138,14,32,3
  7989                        	.sym	SEMAPHORE_LIST,0,138,14,32,3
  7990                        	.sym	FILE_BLOCK_LIST,0,138,14,32,3
  7991                        	.sym	FILE_PATH_LIST,0,138,14,32,3
  7992                        	.sym	PROCEDURE_LIST,0,138,14,32,3
  7993                        	.sym	FILE_HANDLE,0,138,14,32,8
  7994                        	.sym	FILE_BLOCK,0,10,14,552,8
  7995                        	.sym	SEMAPHORE,0,10,14,16,7
  7996                        	.sym	PPROCESS_SIGNAL,0,138,14,32,6
  7997                        	.sym	PROCESS_SIGNAL,0,10,14,16,6
  7998                        	.sym	KRESULT,0,18,14,32
  7999                        	.sym	PKERNEL_ERROR,0,138,14,32,5
  8000                        	.sym	KERNEL_ERROR,0,10,14,32,5
  8001                        	.sym	PROCESS_STATUS,0,16,14,16
  8002                        	.sym	FILE_PATH_NAME,0,142,14,32
  8003                        	.sym	PROCESS_RESOURCE,0,129,14,32
  8004                        	.sym	PROCESS_TLS,0,129,14,32
  8005                        	.sym	PROCESS_CTX,0,129,14,32
  8006                        	.sym	USERID,0,16,14,16
  8007                        	.sym	PROCESS_ID,0,18,14,32
  8008                        	.sym	PROCESS_BANK,0,14,14,8
  8009                        	.sym	PFXQUEUE,0,138,14,32,4
  8010                        	.sym	FXQUEUE,0,10,14,80,4
  8011                        	.sym	PFXNODELIST,0,138,14,32,3
  8012                        	.sym	FXNODELIST,0,10,14,96,3
  8013                        	.sym	NodeListDeallocator,0,641,14,32
  8014                        	.sym	PFXNODE,0,138,14,32,2
  8015                        	.sym	FXNODE,0,10,14,384,2
  8016                        	.sym	PBYTEBITS,0,138,14,32,1
  8017                        	.sym	BYTEBITS,0,10,14,8,1
  8018                        	.sym	HRESULT,0,18,14,32
  8019                        	.sym	LPWCHAR,0,144,14,32
  8020                        	.sym	WCHAR,0,16,14,16
  8021                        	.sym	HCOLOR,0,129,14,32
  8022                        	.sym	HFONT,0,129,14,32
  8023                        	.sym	HDC,0,129,14,32
  8024                        	.sym	HPOINTER,0,129,14,32
  8025                        	.sym	uint32_t,0,18,14,32
  8026                        	.sym	uint8_t,0,14,14,8
  Sat Jul 10 2021  1:15                                                Page 149


  8027                        	.sym	LPBOOL,0,142,14,32
  8028                        	.sym	BOOL,0,14,14,8
  8029                        	.sym	DWORD,0,18,14,32
  8030                        	.sym	ULONG,0,18,14,32
  8031                        	.sym	LPLONG,0,135,14,32
  8032                        	.sym	LONG,0,7,14,32
  8033                        	.sym	PUINT,0,144,14,32
  8034                        	.sym	USHORT,0,16,14,16
  8035                        	.sym	UINT,0,16,14,16
  8036                        	.sym	INT,0,5,14,16
  8037                        	.sym	WORD,0,5,14,16
  8038                        	.sym	PBYTE,0,142,14,32
  8039                        	.sym	BYTE,0,14,14,8
  8040                        	.sym	IOPORT,0,142,14,32
  8041                        	.sym	PUCHAR,0,142,14,32
  8042                        	.sym	UCHAR,0,14,14,8
  8043                        	.sym	LPWCSTR,0,142,14,32
  8044                        	.sym	LPCSTR,0,142,14,32
  8045                        	.sym	LPSTR,0,142,14,32
  8046                        	.sym	LPCHAR,0,142,14,32
  8047                        	.sym	CHAR,0,14,14,8
  8048                        	.sym	LPVOID,0,129,14,32
  8049                        	.sym	VOID,0,1,14,32
  8050                        	end


      Lines assembled: 8050
      Errors: 0
