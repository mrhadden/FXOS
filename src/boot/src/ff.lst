  Fri Jul 16 2021 14:42                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\boot\src\ff.C",0
     7                        ;/*-----------------------------------------------
                    -----------------------------/
     8                        ; /  FatFs - Generic FAT Filesystem Module  R0.14 
                                                  /
     9                        ; /-----------------------------------------------
                    ------------------------------/
    10                        ; /
    11                        ; / Copyright (C) 2019, ChaN, all right reserved.
    12                        ; /
    13                        ; / FatFs module is an open source software. Redis
                    tribution and use of FatFs in
    14                        ; / source and binary forms, with or without modif
                    ication, are permitted provided
    15                        ; / that the following condition is met:
    16                        ; /
    17                        ; / 1. Redistributions of source code must retain 
                    the above copyright notice,
    18                        ; /    this condition and the following disclaimer
                    .
    19                        ; /
    20                        ; / This software is provided by the copyright hol
                    der and contributors "AS IS"
    21                        ; / and any warranties related to this software ar
                    e DISCLAIMED.
    22                        ; / The copyright owner or contributors be NOT LIA
                    BLE for any damages caused
    23                        ; / by use of this software.
    24                        ; /
    25                        ; /-----------------------------------------------
                    -----------------------------*/
    26                        ;
    27                        ;#include "../../fxtypes.h"
    28                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\boot\src\../../fxtypes.h",0
    29                        	.stag	_fx_bytebits,8,1
    30                        	.member	b7,0,14,17,1
    31                        	.member	b6,1,14,17,1
    32                        	.member	b5,2,14,17,1
    33                        	.member	b4,3,14,17,1
    34                        	.member	b3,4,14,17,1
    35                        	.member	b2,5,14,17,1
    36                        	.member	b1,6,14,17,1
    37                        	.member	b0,7,14,17,1
    38                        	.eos
    39                        	.stag	_fx_node,384,2
  Fri Jul 16 2021 14:42                                                Page 2


    40                        	.member	type,0,14,8,8
    41                        	.member	Reserved0,8,14,8,8
    42                        	.member	data,16,129,8,32
    43                        	.member	last,48,138,8,32,2
    44                        	.member	next,80,138,8,32,2
    45                        	.member	name,112,110,8,0,32
    46                        	.member	Reserved1,368,16,8,16
    47                        	.eos
    48                        	.stag	_fx_nodelist,96,3
    49                        	.member	listhead,0,138,8,32,2
    50                        	.member	listData,32,129,8,32
    51                        	.member	deallocator,64,641,8,32
    52                        	.eos
    53                        	.stag	_fx_queue,80,4
    54                        	.member	count,0,5,8,16
    55                        	.member	front,16,138,8,32,2
    56                        	.member	rear,48,138,8,32,2
    57                        	.eos
    58                        	.stag	fake5_,32,5
    59                        	.member	subsystem,0,14,8,8
    60                        	.member	level,8,14,8,8
    61                        	.member	error,16,16,8,16
    62                        	.eos
    63                        	.stag	_fx_process_signal,16,6
    64                        	.member	cbSize,0,16,8,16
    65                        	.eos
    66                        	.stag	_fx_semaphore,16,7
    67                        	.member	reserved,0,5,8,16
    68                        	.eos
    69                        	.stag	_fx_fileBlock,552,8
    70                        	.member	openCount,0,16,8,16
    71                        	.member	lockCount,16,16,8,16
    72                        	.member	dirty,32,14,8,8
    73                        	.member	fileBuffer,40,110,8,0,64
    74                        	.eos
    75                        	.stag	_fx_irq_data,48,9
    76                        	.member	line,0,5,8,16
    77                        	.member	keycode,16,142,8,32
    78                        	.eos
    79                        	.stag	_task,48,10
    80                        	.member	SPL,0,14,8,8
    81                        	.member	SPH,8,14,8,8
    82                        	.member	pstack,16,142,8,32
    83                        	.eos
    84                        	.stag	_task_stack,32,11
    85                        	.member	SS,0,142,8,32
    86                        	.eos
    87                        	.stag	int_regs,104,12
    88                        	.member	PB,0,14,8,8
    89                        	.member	PH,8,14,8,8
    90                        	.member	PL,16,14,8,8
    91                        	.member	PP,24,14,8,8
    92                        	.member	DB,32,14,8,8
    93                        	.member	DH,40,14,8,8
    94                        	.member	DL,48,14,8,8
    95                        	.member	AH,56,14,8,8
    96                        	.member	AL,64,14,8,8
    97                        	.member	XH,72,14,8,8
  Fri Jul 16 2021 14:42                                                Page 3


    98                        	.member	XL,80,14,8,8
    99                        	.member	YH,88,14,8,8
   100                        	.member	YL,96,14,8,8
   101                        	.eos
   102                        	.stag	_fx_eventMessage,304,13
   103                        	.member	src,0,18,8,32
   104                        	.member	dest,32,18,8,32
   105                        	.member	type,64,16,8,16
   106                        	.member	hwnd,80,129,8,32
   107                        	.member	pheap,112,129,8,32
   108                        	.member	msgTime,144,18,8,32
   109                        	.member	data,176,110,8,0,16
   110                        	.eos
   111                        	.stag	_fx_cmdMessage,304,14
   112                        	.member	src,0,18,8,32
   113                        	.member	dest,32,18,8,32
   114                        	.member	type,64,16,8,16
   115                        	.member	hwnd,80,129,8,32
   116                        	.member	pheap,112,129,8,32
   117                        	.member	msgTime,144,18,8,32
   118                        	.member	cmdCId,176,16,8,16
   119                        	.member	cmdMId,192,16,8,16
   120                        	.member	parameter1,208,18,8,32
   121                        	.member	parameter2,240,18,8,32
   122                        	.member	parameter3,272,18,8,32
   123                        	.eos
   124                        	.stag	_fx_console_ctl,448,15
   125                        	.member	maxCols,0,5,8,16
   126                        	.member	maxRows,16,5,8,16
   127                        	.member	curX,32,5,8,16
   128                        	.member	curY,48,5,8,16
   129                        	.member	fgColor,64,5,8,16
   130                        	.member	bgColor,80,5,8,16
   131                        	.member	mode,96,14,8,8
   132                        	.member	kbBuffer,104,101,8,0,16
   133                        	.member	screenBuffer,360,142,8,32
   134                        	.member	desktopMode,392,14,8,8
   135                        	.member	lastMouseButton,400,5,8,16
   136                        	.member	lastMouseX,416,5,8,16
   137                        	.member	lastMouseY,432,5,8,16
   138                        	.eos
   139                        	.stag	_fx_desktop_ctl,392,16
   140                        	.member	desktopMode,0,14,8,8
   141                        	.member	cursorCtl,8,5,8,16
   142                        	.member	cursorState,24,5,8,16
   143                        	.member	backgroundColor,40,5,8,16
   144                        	.member	foregroundColor,56,5,8,16
   145                        	.member	menuMode,72,5,8,16
   146                        	.member	lastMouseButton,88,5,8,16
   147                        	.member	lastMouseX,104,5,8,16
   148                        	.member	lastMouseY,120,5,8,16
   149                        	.member	currentDiskName,136,142,8,32
   150                        	.member	diskNodes,168,129,8,32
   151                        	.member	titleNodes,200,129,8,32
   152                        	.member	menuNodes,232,129,8,32
   153                        	.member	iconNodes,264,129,8,32
   154                        	.member	windowNodes,296,129,8,32
   155                        	.member	fontNodes,328,129,8,32
  Fri Jul 16 2021 14:42                                                Page 4


   156                        	.member	wndProc,360,138,8,32,3
   157                        	.eos
   158                        	.stag	_fx_process,800,17
   159                        	.member	cbSize,0,5,8,16
   160                        	.member	procId,16,18,8,32
   161                        	.member	parentId,48,18,8,32
   162                        	.member	ctx,80,129,8,32
   163                        	.member	userId,112,16,8,16
   164                        	.member	status,128,16,8,16
   165                        	.member	foregroundActive,144,14,8,8
   166                        	.member	tls,152,1121,8,32,8
   167                        	.member	commandLine,408,142,8,32
   168                        	.member	semaphores,440,138,8,32,3
   169                        	.member	fileHandles,472,138,8,32,3
   170                        	.member	pathList,504,138,8,32,3
   171                        	.member	resources,536,138,8,32,3
   172                        	.member	timerAware,568,14,8,8
   173                        	.member	timerTicks,576,112,8,0,2
   174                        	.member	timerTickCount,608,112,8,0,2
   175                        	.member	kernelError,640,10,8,32,5
   176                        	.member	consoleCtl,672,138,8,32,15
   177                        	.member	desktopCtl,704,138,8,32,16
   178                        	.member	execProc,736,641,8,32
   179                        	.member	startupArgs,768,129,8,32
   180                        	.eos
   181                        	.stag	_fxProcessMessage,112,18
   182                        	.member	src,0,18,8,32
   183                        	.member	dest,32,18,8,32
   184                        	.member	type,64,16,8,16
   185                        	.member	processInfo,80,138,8,32,17
   186                        	.eos
   187                        	.stag	_k_key_state,112,19
   188                        	.member	scanCode,0,14,8,8
   189                        	.member	isShifted,8,14,8,8
   190                        	.member	isAlt,16,14,8,8
   191                        	.member	isExtended,24,14,8,8
   192                        	.member	isCapsLock,32,14,8,8
   193                        	.member	isNumLock,40,14,8,8
   194                        	.member	isScrollLock,48,14,8,8
   195                        	.member	keyChar,56,16,8,16
   196                        	.member	scanTime,72,18,8,32
   197                        	.member	ledStatus,104,14,8,8
   198                        	.eos
   199                        	.stag	_fx_property,384,20
   200                        	.member	name,0,110,8,0,16
   201                        	.member	value,128,110,8,0,32
   202                        	.eos
   203                        	.utag	_24bitPointer,32,21
   204                        	.member	address,0,142,11,32
   205                        	.member	bytes,0,110,11,0,4
   206                        	.eos
   207                        	.stag	_PointStruct,32,22
   208                        	.member	x,0,5,8,16
   209                        	.member	y,16,5,8,16
   210                        	.eos
   211                        	.stag	_RectStruct,112,23
   212                        	.member	x,0,5,8,16
   213                        	.member	y,16,5,8,16
  Fri Jul 16 2021 14:42                                                Page 5


   214                        	.member	z,32,18,8,32
   215                        	.member	width,64,5,8,16
   216                        	.member	height,80,5,8,16
   217                        	.member	attr,96,5,8,16
   218                        	.eos
   219                        	.stag	fake24_,96,24
   220                        	.member	name,0,142,8,32
   221                        	.member	topLeft,32,10,8,32,22
   222                        	.member	bottomRight,64,10,8,32,22
   223                        	.eos
   224                        	.stag	fake25_,112,25
   225                        	.member	x,0,5,8,16
   226                        	.member	y,16,5,8,16
   227                        	.member	z,32,5,8,16
   228                        	.member	width,48,5,8,16
   229                        	.member	height,64,5,8,16
   230                        	.member	data,80,18,8,32
   231                        	.eos
   232                        	.stag	_k_WindowClass,272,26
   233                        	.member	cbSize,0,16,8,16
   234                        	.member	style,16,16,8,16
   235                        	.member	styleEx,32,16,8,16
   236                        	.member	pWndProc,48,654,8,32
   237                        	.member	hInstance,80,129,8,32
   238                        	.member	hIcon,112,129,8,32
   239                        	.member	hCursor,144,129,8,32
   240                        	.member	hbrBackground,176,129,8,32
   241                        	.member	lpszMenuName,208,142,8,32
   242                        	.member	lpszClassName,240,142,8,32
   243                        	.eos
   244                        	.stag	_ClickableRect,152,27
   245                        	.member	area,0,10,8,112,23
   246                        	.member	z,112,18,8,32
   247                        	.member	enabled,144,14,8,8
   248                        	.eos
   249                        	.stag	_NCClickableRect,136,28
   250                        	.member	area,0,10,8,112,23
   251                        	.member	msgType,112,16,8,16
   252                        	.member	enabled,128,14,8,8
   253                        	.eos
   254                        	.stag	_DragData,216,29
   255                        	.member	area,0,10,8,112,23
   256                        	.member	xoffset,112,5,8,16
   257                        	.member	yoffset,128,5,8,16
   258                        	.member	msgType,144,16,8,16
   259                        	.member	ncAction,160,16,8,16
   260                        	.member	isDrag,176,14,8,8
   261                        	.member	isResize,184,14,8,8
   262                        	.member	canDrag,192,14,8,8
   263                        	.member	canDrop,200,14,8,8
   264                        	.member	didDrag,208,14,8,8
   265                        	.eos
   266                        	.stag	_k_WindowStruct,3904,30
   267                        	.member	cbSize,0,16,8,16
   268                        	.member	style,16,18,8,32
   269                        	.member	styleEx,48,18,8,32
   270                        	.member	win_id,80,5,8,16
   271                        	.member	win_x,96,5,8,16
  Fri Jul 16 2021 14:42                                                Page 6


   272                        	.member	win_y,112,5,8,16
   273                        	.member	win_width,128,5,8,16
   274                        	.member	win_height,144,5,8,16
   275                        	.member	win_xoffset,160,5,8,16
   276                        	.member	win_yoffset,176,5,8,16
   277                        	.member	win_cxoffset,192,5,8,16
   278                        	.member	win_cyoffset,208,5,8,16
   279                        	.member	wndRect,224,10,8,112,23
   280                        	.member	clientRect,336,10,8,112,23
   281                        	.member	nonclientGadgets,448,106,8,0,28,16
   282                        	.member	clickable,2624,129,8,32
   283                        	.member	win_title,2656,110,8,0,32
   284                        	.member	Reserved0,2912,16,8,16
   285                        	.member	win_class,2928,110,8,0,16
   286                        	.member	win_class_name,3056,110,8,0,32
   287                        	.member	nBitmapLayer,3312,16,8,16
   288                        	.member	bgRegion,3328,129,8,32
   289                        	.member	procid,3360,18,8,32
   290                        	.member	pWndClass,3392,138,8,32,26
   291                        	.member	pParentWindow,3424,129,8,32
   292                        	.member	hMenu,3456,129,8,32
   293                        	.member	hPointer,3488,129,8,32
   294                        	.member	hBackground,3520,129,8,32
   295                        	.member	pChildWindows,3552,138,8,32,3
   296                        	.member	pChildHitList,3584,138,8,32,3
   297                        	.member	isVisible,3616,14,8,8
   298                        	.member	windowData,3624,129,8,32
   299                        	.member	clientData,3656,1121,8,32,6
   300                        	.member	isClosed,3848,14,8,8
   301                        	.member	isClosing,3856,14,8,8
   302                        	.member	isDesktop,3864,14,8,8
   303                        	.member	clickableNode,3872,138,8,32,2
   304                        	.eos
   305                        	.stag	_k_WindowStructEx,3880,31
   306                        	.member	cbSize,0,16,8,16
   307                        	.member	style,16,18,8,32
   308                        	.member	styleEx,48,18,8,32
   309                        	.member	win_id,80,5,8,16
   310                        	.member	win_x,96,5,8,16
   311                        	.member	win_y,112,5,8,16
   312                        	.member	win_width,128,5,8,16
   313                        	.member	win_height,144,5,8,16
   314                        	.member	win_xoffset,160,5,8,16
   315                        	.member	win_yoffset,176,5,8,16
   316                        	.member	win_cxoffset,192,5,8,16
   317                        	.member	win_cyoffset,208,5,8,16
   318                        	.member	wndRect,224,10,8,112,23
   319                        	.member	clientRect,336,10,8,112,23
   320                        	.member	nonclientGadgets,448,106,8,0,28,16
   321                        	.member	clickable,2624,129,8,32
   322                        	.member	win_title,2656,110,8,0,32
   323                        	.member	Reserved0,2912,16,8,16
   324                        	.member	win_class,2928,110,8,0,16
   325                        	.member	nBitmapLayer,3056,16,8,16
   326                        	.member	procid,3072,18,8,32
   327                        	.member	pWndClass,3104,138,8,32,26
   328                        	.member	pParentWindow,3136,129,8,32
   329                        	.member	hMenu,3168,129,8,32
  Fri Jul 16 2021 14:42                                                Page 7


   330                        	.member	hPointer,3200,129,8,32
   331                        	.member	hBackground,3232,129,8,32
   332                        	.member	pChildWindows,3264,138,8,32,3
   333                        	.member	pChildHitList,3296,138,8,32,3
   334                        	.member	isVisible,3328,14,8,8
   335                        	.member	windowData,3336,129,8,32
   336                        	.member	clientData,3368,1121,8,32,4
   337                        	.member	isClosed,3496,14,8,8
   338                        	.member	hWnd,3504,129,8,32
   339                        	.member	localRect,3536,10,8,112,23
   340                        	.member	globalRect,3648,10,8,112,23
   341                        	.member	clientOffsetRect,3760,10,8,112,23
   342                        	.member	isDesktop,3872,14,8,8
   343                        	.eos
   344                        	.stag	_FontMetric,32,32
   345                        	.member	width,0,5,8,16
   346                        	.member	height,16,5,8,16
   347                        	.eos
   348                        	.stag	_MenuStruct,280,33
   349                        	.member	cx,0,5,8,16
   350                        	.member	cy,16,5,8,16
   351                        	.member	width,32,5,8,16
   352                        	.member	height,48,5,8,16
   353                        	.member	fcolor,64,14,8,8
   354                        	.member	bcolor,72,14,8,8
   355                        	.member	chromeLeft,80,14,8,8
   356                        	.member	chromeRight1,88,14,8,8
   357                        	.member	chromeRight2,96,14,8,8
   358                        	.member	hFont,104,129,8,32
   359                        	.member	itemId,136,16,8,16
   360                        	.member	pCaption,152,142,8,32
   361                        	.member	subMenus,184,138,8,32,3
   362                        	.member	pBackground,216,129,8,32
   363                        	.member	hWndOwner,248,129,8,32
   364                        	.eos
   365                        	.stag	fake34_,160,34
   366                        	.member	menuId,0,16,8,16
   367                        	.member	caption,16,142,8,32
   368                        	.member	rect,48,10,8,112,23
   369                        	.eos
   370                        	.stag	fake35_,5152,35
   371                        	.member	pParent,0,138,8,32,30
   372                        	.member	rect,32,10,8,112,23
   373                        	.member	captions,144,1134,8,32,24
   374                        	.member	chrome,912,110,8,0,24
   375                        	.member	ids,1104,112,8,0,24
   376                        	.member	clickable,1488,106,8,0,27,24
   377                        	.member	selected,5136,16,8,16
   378                        	.eos
   379                        	.stag	_fx_button_t,96,36
   380                        	.member	pCaption,0,142,8,32
   381                        	.member	cCaption,32,16,8,16
   382                        	.member	data,48,129,8,32
   383                        	.member	captionPixelWidth,80,16,8,16
   384                        	.eos
   385                        	.stag	_fx_scrollbar_t,240,37
   386                        	.member	min,0,16,8,16
   387                        	.member	max,16,16,8,16
  Fri Jul 16 2021 14:42                                                Page 8


   388                        	.member	increment,32,16,8,16
   389                        	.member	stopsize,48,16,8,16
   390                        	.member	location,64,5,8,16
   391                        	.member	state,80,5,8,16
   392                        	.member	rectThumb,96,10,8,112,23
   393                        	.member	data,208,129,8,32
   394                        	.eos
   395                        	.stag	_fx_listbox_t,240,38
   396                        	.member	pos,0,5,8,16
   397                        	.member	selected,16,16,8,16
   398                        	.member	offsetX,32,5,8,16
   399                        	.member	offsetY,48,5,8,16
   400                        	.member	inc,64,5,8,16
   401                        	.member	direction,80,5,8,16
   402                        	.member	top,96,5,8,16
   403                        	.member	bottom,112,5,8,16
   404                        	.member	indexTop,128,5,8,16
   405                        	.member	indexBottom,144,5,8,16
   406                        	.member	maxItems,160,16,8,16
   407                        	.member	fontSet,176,142,8,32
   408                        	.member	data,208,129,8,32
   409                        	.eos
   410                        	.stag	_fx_textbox_t,144,39
   411                        	.member	pos,0,5,8,16
   412                        	.member	selected,16,16,8,16
   413                        	.member	offsetX,32,5,8,16
   414                        	.member	offsetY,48,5,8,16
   415                        	.member	isShifted,64,14,8,8
   416                        	.member	cursorState,72,14,8,8
   417                        	.member	fontSet,80,142,8,32
   418                        	.member	data,112,129,8,32
   419                        	.eos
   420                        	.stag	_fx_msgbox_t,144,40
   421                        	.member	pos,0,5,8,16
   422                        	.member	selected,16,16,8,16
   423                        	.member	offsetX,32,5,8,16
   424                        	.member	offsetY,48,5,8,16
   425                        	.member	isShifted,64,14,8,8
   426                        	.member	cursorState,72,14,8,8
   427                        	.member	fontSet,80,142,8,32
   428                        	.member	data,112,129,8,32
   429                        	.eos
   430                        	.stag	_fx_menuAnchor_t,272,41
   431                        	.member	pCaption,0,142,8,32
   432                        	.member	renderLayoutX,32,16,8,16
   433                        	.member	renderLayoutY,48,16,8,16
   434                        	.member	captionPixelWidth,64,16,8,16
   435                        	.member	data,80,129,8,32
   436                        	.member	droppedWindow,112,138,8,32,30
   437                        	.member	bytes,144,110,8,0,16
   438                        	.eos
   439                        	.stag	_SubMenuStruct,64,42
   440                        	.member	caption,0,142,8,32
   441                        	.member	action,32,641,8,32
   442                        	.eos
   443                        	.stag	_SubMenuListStruct,40,43
   444                        	.member	cMenus,0,14,8,8
   445                        	.member	psubmenus,8,9354,8,32,42
  Fri Jul 16 2021 14:42                                                Page 9


   446                        	.eos
   447                        	.stag	_fx_ComBuffer,2080,44
   448                        	.member	cbSize,0,16,8,16
   449                        	.member	cbBuffer,16,16,8,16
   450                        	.member	buffer,32,110,8,0,256
   451                        	.eos
   452                        	.stag	_fx_resource_header,72,45
   453                        	.member	magic,0,110,8,0,4
   454                        	.member	major,32,14,8,8
   455                        	.member	minor,40,14,8,8
   456                        	.member	type,48,14,8,8
   457                        	.member	reserved,56,14,8,8
   458                        	.member	resheaderSize,64,14,8,8
   459                        	.eos
   460                        	.stag	_fx_resource_header_font,144,46
   461                        	.member	title,0,110,8,0,16
   462                        	.member	height,128,14,8,8
   463                        	.member	width,136,14,8,8
   464                        	.eos
   465                        	.stag	_fx_resource_string,32,47
   466                        	.member	locale,0,110,8,0,2
   467                        	.member	entries,16,16,8,16
   468                        	.eos
   469                        	.stag	_fx_resource_string_entry,40,48
   470                        	.member	index,0,16,8,16
   471                        	.member	length,16,16,8,16
   472                        	.member	data,32,14,8,8
   473                        	.eos
   474                        	.line	1047
   475                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\boot\src\ff.C",21
   476                        ;//#include "../../../fxdos.h"
   477                        ;#include "ff.h"			/* Declarations 
                    of FatFs API */
   478                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\boot\src\ff.h",0
   479                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\boot\src\ffconf.h",0
   480                        	.line	298
   481                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\boot\src\ff.h",29
   482                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\boot\src\../../fxtypes.h",0
   483                        	.line	1047
   484                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\boot\src\ff.h",30
   485                        	.stag	fake49_,4472,49
   486                        	.member	fs_type,0,14,8,8
   487                        	.member	pdrv,8,14,8,8
   488                        	.member	n_fats,16,14,8,8
   489                        	.member	wflag,24,14,8,8
   490                        	.member	fsi_flag,32,14,8,8
   491                        	.member	id,40,5,8,16
   492                        	.member	n_rootdir,56,5,8,16
   493                        	.member	csize,72,5,8,16
   494                        	.member	last_clst,88,18,8,32
   495                        	.member	free_clst,120,18,8,32
   496                        	.member	n_fatent,152,18,8,32
  Fri Jul 16 2021 14:42                                                Page 10


   497                        	.member	fsize,184,18,8,32
   498                        	.member	volbase,216,18,8,32
   499                        	.member	fatbase,248,18,8,32
   500                        	.member	dirbase,280,18,8,32
   501                        	.member	database,312,18,8,32
   502                        	.member	winsect,344,18,8,32
   503                        	.member	win,376,110,8,0,512
   504                        	.eos
   505                        	.stag	fake50_,128,50
   506                        	.member	fs,0,138,8,32,49
   507                        	.member	id,32,5,8,16
   508                        	.member	attr,48,14,8,8
   509                        	.member	stat,56,14,8,8
   510                        	.member	sclust,64,18,8,32
   511                        	.member	objsize,96,18,8,32
   512                        	.eos
   513                        	.stag	fake51_,4400,51
   514                        	.member	obj,0,10,8,128,50
   515                        	.member	flag,128,14,8,8
   516                        	.member	err,136,14,8,8
   517                        	.member	fptr,144,18,8,32
   518                        	.member	clust,176,18,8,32
   519                        	.member	sect,208,18,8,32
   520                        	.member	dir_sect,240,18,8,32
   521                        	.member	dir_ptr,272,142,8,32
   522                        	.member	buf,304,110,8,0,512
   523                        	.eos
   524                        	.stag	fake52_,384,52
   525                        	.member	obj,0,10,8,128,50
   526                        	.member	dptr,128,18,8,32
   527                        	.member	clust,160,18,8,32
   528                        	.member	sect,192,18,8,32
   529                        	.member	dir,224,142,8,32
   530                        	.member	fn,256,110,8,0,12
   531                        	.member	pat,352,142,8,32
   532                        	.eos
   533                        	.stag	fake53_,176,53
   534                        	.member	fsize,0,18,8,32
   535                        	.member	fdate,32,5,8,16
   536                        	.member	ftime,48,5,8,16
   537                        	.member	fattrib,64,14,8,8
   538                        	.member	fname,72,110,8,0,13
   539                        	.eos
   540                        	.stag	fake54_,80,54
   541                        	.member	fmt,0,14,8,8
   542                        	.member	n_fat,8,14,8,8
   543                        	.member	align,16,16,8,16
   544                        	.member	n_root,32,16,8,16
   545                        	.member	au_size,48,18,8,32
   546                        	.eos
   547                        	.stag	__PARTITIONTABLE,128,55
   548                        	.member	first_byte,0,14,8,8
   549                        	.member	start_chs,8,110,8,0,3
   550                        	.member	partition_type,32,14,8,8
   551                        	.member	end_chs,40,110,8,0,3
   552                        	.member	start_sector,64,18,8,32
   553                        	.member	length_sectors,96,18,8,32
   554                        	.eos
  Fri Jul 16 2021 14:42                                                Page 11


   555                        	.line	437
   556                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\boot\src\ff.C",23
   557                        ;#include "diskio.h"		/* Declarations 
                    of device I/O functions */
   558                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\boot\src\diskio.h",0
   559                        	.line	128
   560                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\boot\src\ff.C",24
   561                        ;
   562                        ;#include <stdarg.h>
   563                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdarg.h",0
   564                        	.line	51
   565                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\boot\src\ff.C",26
   566                        ;#include <stdlib.h>
   567                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   568                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
   569                        	.line	88
   570                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
   571                        	.stag	fake56_,32,56
   572                        	.member	quot,0,5,8,16
   573                        	.member	rem,16,5,8,16
   574                        	.eos
   575                        	.stag	fake57_,64,57
   576                        	.member	quot,0,7,8,32
   577                        	.member	rem,32,7,8,32
   578                        	.eos
   579                        	.stag	int_sqrt,32,58
   580                        	.member	sqrt,0,16,8,16
   581                        	.member	frac,16,16,8,16
   582                        	.eos
   583                        	.line	205
   584                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\boot\src\ff.C",27
   585                        ;
   586                        ;
   587                        ;//#pragma section CODE=FFDOS,offset $08:0000
   588                        ;#pragma section CODE=FFDOS,offset $0B:3F80
   589                        FFDOS	section	offset $0B:3F80
   590 0B:3F80:              	ends
   591                        ;/*-----------------------------------------------
                    ---------------------------
   592                        ;
   593                        ; Module Private Definitions
   594                        ;
   595                        ; ------------------------------------------------
                    ---------------------------*/
   596                        ;
   597                        ;#if FF_DEFINED != 86606	/* Revision ID */
   598                        ;#error Wrong include file (ff.h).
   599                        ;#endif
   600                        ;
  Fri Jul 16 2021 14:42                                                Page 12


   601                        ;/* Limits and boundaries */
   602                        ;#define MAX_DIR		0x200000		
                    /* Max size of FAT directory */
   603                        ;#define MAX_DIR_EX	0x10000000		
                    /* Max size of exFAT directory */
   604                        ;#define MAX_FAT12	0xFF5			
                    /* Max FAT12 clusters (differs from specs, but right for rea
                    l DOS/Windows behavior) */
   605                        ;#define MAX_FAT16	0xFFF5			
                    /* Max FAT16 clusters (differs from specs, but right for rea
                    l DOS/Windows behavior) */
   606                        ;#define MAX_FAT32	0x0FFFFFF5		
                    /* Max FAT32 clusters (not specified, practical limit) */
   607                        ;#define MAX_EXFAT	0x7FFFFFFD		
                    /* Max exFAT clusters (differs from specs, implementation li
                    mit) */
   608                        ;
   609                        ;#define FADDR(x) (&(fs->win[x]))
   610                        ;
   611                        ;/* Character code support macros */
   612                        ;#define IsUpper(c)		((c) >= 'A' && (
                    c) <= 'Z')
   613                        ;#define IsLower(c)		((c) >= 'a' && (
                    c) <= 'z')
   614                        ;#define IsDigit(c)		((c) >= '0' && (
                    c) <= '9')
   615                        ;#define IsSurrogate(c)	((c) >= 0xD800 && (c) <=
                     0xDFFF)
   616                        ;#define IsSurrogateH(c)	((c) >= 0xD800 && (c) <=
                     0xDBFF)
   617                        ;#define IsSurrogateL(c)	((c) >= 0xDC00 && (c) <=
                     0xDFFF)
   618                        ;
   619                        ;/* Additional file access control and file status
                     flags for internal use */
   620                        ;#define FA_SEEKEND	0x20	/* Seek to end o
                    f the file on file open */
   621                        ;#define FA_MODIFIED	0x40	/* File has been
                     modified */
   622                        ;#define FA_DIRTY	0x80	/* FIL.buf[] needs to be
                     written-back */
   623                        ;
   624                        ;/* Additional file attribute bits for internal us
                    e */
   625                        ;#define AM_VOL		0x08	/* Volume label 
                    */
   626                        ;#define AM_LFN		0x0F	/* LFN entry */
   627                        ;#define AM_MASK		0x3F	/* Mask of defin
                    ed bits */
   628                        ;
   629                        ;/* Name status flags in fn[11] */
   630                        ;#define NSFLAG		11		/* Index
                     of the name status byte */
   631                        ;#define NS_LOSS		0x01	/* Out of 8.3 fo
                    rmat */
   632                        ;#define NS_LFN		0x02	/* Force to crea
                    te LFN entry */
   633                        ;#define NS_LAST		0x04	/* Last segment 
  Fri Jul 16 2021 14:42                                                Page 13


                    */
   634                        ;#define NS_BODY		0x08	/* Lower case fl
                    ag (body) */
   635                        ;#define NS_EXT		0x10	/* Lower case fl
                    ag (ext) */
   636                        ;#define NS_DOT		0x20	/* Dot entry */
   637                        ;#define NS_NOLFN	0x40	/* Do not find LFN */
   638                        ;#define NS_NONAME	0x80	/* Not followed 
                    */
   639                        ;
   640                        ;/* exFAT directory entry types */
   641                        ;#define	ET_BITMAP	0x81	/* Allocation bi
                    tmap */
   642                        ;#define	ET_UPCASE	0x82	/* Up-case table
                     */
   643                        ;#define	ET_VLABEL	0x83	/* Volume label 
                    */
   644                        ;#define	ET_FILEDIR	0x85	/* File and dire
                    ctory */
   645                        ;#define	ET_STREAM	0xC0	/* Stream extens
                    ion */
   646                        ;#define	ET_FILENAME	0xC1	/* Name extensio
                    n */
   647                        ;
   648                        ;/* FatFs refers the FAT structure as simple byte 
                    array instead of structure member
   649                        ; / because the C structure is not binary compatib
                    le between different platforms */
   650                        ;
   651                        ;#define BS_JmpBoot			0	
                    	/* x86 jump instruction (3-byte) */
   652                        ;#define BS_OEMName			3	
                    	/* OEM name (8-byte) */
   653                        ;#define BPB_BytsPerSec		11		
                    /* Sector size [byte] (WORD) */
   654                        ;#define BPB_SecPerClus		13		
                    /* Cluster size [sector] (BYTE) */
   655                        ;#define BPB_RsvdSecCnt		14		
                    /* Size of reserved area [sector] (WORD) */
   656                        ;#define BPB_NumFATs			16	
                    	/* Number of FATs (BYTE) */
   657                        ;#define BPB_RootEntCnt		17		
                    /* Size of root directory area for FAT [entry] (WORD) */
   658                        ;#define BPB_TotSec16		19		
                    /* Volume size (16-bit) [sector] (WORD) */
   659                        ;#define BPB_Media			21	
                    	/* Media descriptor byte (BYTE) */
   660                        ;#define BPB_FATSz16			22	
                    	/* FAT size (16-bit) [sector] (WORD) */
   661                        ;#define BPB_SecPerTrk		24		
                    /* Number of sectors per track for int13h [sector] (WORD) */
   662                        ;#define BPB_NumHeads		26		
                    /* Number of heads for int13h (WORD) */
   663                        ;#define BPB_HiddSec			28	
                    	/* Volume offset from top of the drive (DWORD) */
   664                        ;#define BPB_TotSec32		32		
                    /* Volume size (32-bit) [sector] (DWORD) */
   665                        ;#define BS_DrvNum			36	
  Fri Jul 16 2021 14:42                                                Page 14


                    	/* Physical drive number for int13h (BYTE) */
   666                        ;#define BS_NTres			37		
                    /* WindowsNT error flag (BYTE) */
   667                        ;#define BS_BootSig			38	
                    	/* Extended boot signature (BYTE) */
   668                        ;#define BS_VolID			39		
                    /* Volume serial number (DWORD) */
   669                        ;#define BS_VolLab			43	
                    	/* Volume label string (8-byte) */
   670                        ;#define BS_FilSysType		54		
                    /* Filesystem type string (8-byte) */
   671                        ;#define BS_BootCode			62	
                    	/* Boot code (448-byte) */
   672                        ;#define BS_55AA				510	
                    	/* Signature word (WORD) */
   673                        ;
   674                        ;#define BPB_FATSz32			36	
                    	/* FAT32: FAT size [sector] (DWORD) */
   675                        ;#define BPB_ExtFlags32		40		
                    /* FAT32: Extended flags (WORD) */
   676                        ;#define BPB_FSVer32			42	
                    	/* FAT32: Filesystem version (WORD) */
   677                        ;#define BPB_RootClus32		44		
                    /* FAT32: Root directory cluster (DWORD) */
   678                        ;#define BPB_FSInfo32		48		
                    /* FAT32: Offset of FSINFO sector (WORD) */
   679                        ;#define BPB_BkBootSec32		50		
                    /* FAT32: Offset of backup boot sector (WORD) */
   680                        ;#define BS_DrvNum32			64	
                    	/* FAT32: Physical drive number for int13h (BYTE) */
   681                        ;#define BS_NTres32			65	
                    	/* FAT32: Error flag (BYTE) */
   682                        ;#define BS_BootSig32		66		
                    /* FAT32: Extended boot signature (BYTE) */
   683                        ;#define BS_VolID32			67	
                    	/* FAT32: Volume serial number (DWORD) */
   684                        ;#define BS_VolLab32			71	
                    	/* FAT32: Volume label string (8-byte) */
   685                        ;#define BS_FilSysType32		82		
                    /* FAT32: Filesystem type string (8-byte) */
   686                        ;#define BS_BootCode32		90		
                    /* FAT32: Boot code (420-byte) */
   687                        ;
   688                        ;#define BPB_ZeroedEx		11		
                    /* exFAT: MBZ field (53-byte) */
   689                        ;#define BPB_VolOfsEx		64		
                    /* exFAT: Volume offset from top of the drive [sector] (QWOR
                    D) */
   690                        ;#define BPB_TotSecEx		72		
                    /* exFAT: Volume size [sector] (QWORD) */
   691                        ;#define BPB_FatOfsEx		80		
                    /* exFAT: FAT offset from top of the volume [sector] (DWORD)
                     */
   692                        ;#define BPB_FatSzEx			84	
                    	/* exFAT: FAT size [sector] (DWORD) */
   693                        ;#define BPB_DataOfsEx		88		
                    /* exFAT: Data offset from top of the volume [sector] (DWORD
                    ) */
  Fri Jul 16 2021 14:42                                                Page 15


   694                        ;#define BPB_NumClusEx		92		
                    /* exFAT: Number of clusters (DWORD) */
   695                        ;#define BPB_RootClusEx		96		
                    /* exFAT: Root directory start cluster (DWORD) */
   696                        ;#define BPB_VolIDEx			100	
                    	/* exFAT: Volume serial number (DWORD) */
   697                        ;#define BPB_FSVerEx			104	
                    	/* exFAT: Filesystem version (WORD) */
   698                        ;#define BPB_VolFlagEx		106		
                    /* exFAT: Volume flags (WORD) */
   699                        ;#define BPB_BytsPerSecEx	108		/* exFAT
                    : Log2 of sector size in unit of byte (BYTE) */
   700                        ;#define BPB_SecPerClusEx	109		/* exFAT
                    : Log2 of cluster size in unit of sector (BYTE) */
   701                        ;#define BPB_NumFATsEx		110		
                    /* exFAT: Number of FATs (BYTE) */
   702                        ;#define BPB_DrvNumEx		111		
                    /* exFAT: Physical drive number for int13h (BYTE) */
   703                        ;#define BPB_PercInUseEx		112		
                    /* exFAT: Percent in use (BYTE) */
   704                        ;#define BPB_RsvdEx			113	
                    	/* exFAT: Reserved (7-byte) */
   705                        ;#define BS_BootCodeEx		120		
                    /* exFAT: Boot code (390-byte) */
   706                        ;
   707                        ;#define DIR_Name			0		
                    /* Short file name (11-byte) */
   708                        ;#define DIR_Attr			11		
                    /* Attribute (BYTE) */
   709                        ;#define DIR_NTres			12	
                    	/* Lower case flag (BYTE) */
   710                        ;#define DIR_CrtTime10		13		
                    /* Created time sub-second (BYTE) */
   711                        ;#define DIR_CrtTime			14	
                    	/* Created time (DWORD) */
   712                        ;#define DIR_LstAccDate		18		
                    /* Last accessed date (WORD) */
   713                        ;#define DIR_FstClusHI		20		
                    /* Higher 16-bit of first cluster (WORD) */
   714                        ;#define DIR_ModTime			22	
                    	/* Modified time (DWORD) */
   715                        ;#define DIR_FstClusLO		26		
                    /* Lower 16-bit of first cluster (WORD) */
   716                        ;#define DIR_FileSize		28		
                    /* File size (DWORD) */
   717                        ;#define LDIR_Ord			0		
                    /* LFN: LFN order and LLE flag (BYTE) */
   718                        ;#define LDIR_Attr			11	
                    	/* LFN: LFN attribute (BYTE) */
   719                        ;#define LDIR_Type			12	
                    	/* LFN: Entry type (BYTE) */
   720                        ;#define LDIR_Chksum			13	
                    	/* LFN: Checksum of the SFN (BYTE) */
   721                        ;#define LDIR_FstClusLO		26		
                    /* LFN: MBZ field (WORD) */
   722                        ;#define XDIR_Type			0	
                    	/* exFAT: Type of exFAT directory entry (BYTE) */
   723                        ;#define XDIR_NumLabel		1		
  Fri Jul 16 2021 14:42                                                Page 16


                    /* exFAT: Number of volume label characters (BYTE) */
   724                        ;#define XDIR_Label			2	
                    	/* exFAT: Volume label (11-WORD) */
   725                        ;#define XDIR_CaseSum		4		
                    /* exFAT: Sum of case conversion table (DWORD) */
   726                        ;#define XDIR_NumSec			1	
                    	/* exFAT: Number of secondary entries (BYTE) */
   727                        ;#define XDIR_SetSum			2	
                    	/* exFAT: Sum of the set of directory entries (WORD) */
   728                        ;#define XDIR_Attr			4	
                    	/* exFAT: File attribute (WORD) */
   729                        ;#define XDIR_CrtTime		8		
                    /* exFAT: Created time (DWORD) */
   730                        ;#define XDIR_ModTime		12		
                    /* exFAT: Modified time (DWORD) */
   731                        ;#define XDIR_AccTime		16		
                    /* exFAT: Last accessed time (DWORD) */
   732                        ;#define XDIR_CrtTime10		20		
                    /* exFAT: Created time subsecond (BYTE) */
   733                        ;#define XDIR_ModTime10		21		
                    /* exFAT: Modified time subsecond (BYTE) */
   734                        ;#define XDIR_CrtTZ			22	
                    	/* exFAT: Created timezone (BYTE) */
   735                        ;#define XDIR_ModTZ			23	
                    	/* exFAT: Modified timezone (BYTE) */
   736                        ;#define XDIR_AccTZ			24	
                    	/* exFAT: Last accessed timezone (BYTE) */
   737                        ;#define XDIR_GenFlags		33		
                    /* exFAT: General secondary flags (BYTE) */
   738                        ;#define XDIR_NumName		35		
                    /* exFAT: Number of file name characters (BYTE) */
   739                        ;#define XDIR_NameHash		36		
                    /* exFAT: Hash of file name (WORD) */
   740                        ;#define XDIR_ValidFileSize	40		
                    /* exFAT: Valid file size (QWORD) */
   741                        ;#define XDIR_FstClus		52		
                    /* exFAT: First cluster of the file data (DWORD) */
   742                        ;#define XDIR_FileSize		56		
                    /* exFAT: File/Directory size (QWORD) */
   743                        ;
   744                        ;#define SZDIRE				32	
                    	/* Size of a directory entry */
   745                        ;#define DDEM				0xE5	
                    /* Deleted directory entry mark set to DIR_Name[0] */
   746                        ;#define RDDEM				0x05	
                    /* Replacement of the character collides with DDEM */
   747                        ;#define LLEF				0x40	
                    /* Last long entry flag in LDIR_Ord */
   748                        ;
   749                        ;#define FSI_LeadSig			0	
                    	/* FAT32 FSI: Leading signature (DWORD) */
   750                        ;#define FSI_StrucSig		484		
                    /* FAT32 FSI: Structure signature (DWORD) */
   751                        ;#define FSI_Free_Count		488		
                    /* FAT32 FSI: Number of free clusters (DWORD) */
   752                        ;#define FSI_Nxt_Free		492		
                    /* FAT32 FSI: Last allocated cluster (DWORD) */
   753                        ;
  Fri Jul 16 2021 14:42                                                Page 17


   754                        ;#define MBR_Table			446	
                    	/* MBR: Offset of partition table in the MBR */
   755                        ;#define SZ_PTE				16	
                    	/* MBR: Size of a partition table entry */
   756                        ;#define PTE_Boot			0		
                    /* MBR PTE: Boot indicator */
   757                        ;#define PTE_StHead			1	
                    	/* MBR PTE: Start head */
   758                        ;#define PTE_StSec			2	
                    	/* MBR PTE: Start sector */
   759                        ;#define PTE_StCyl			3	
                    	/* MBR PTE: Start cylinder */
   760                        ;#define PTE_System			4	
                    	/* MBR PTE: System ID */
   761                        ;#define PTE_EdHead			5	
                    	/* MBR PTE: End head */
   762                        ;#define PTE_EdSec			6	
                    	/* MBR PTE: End sector */
   763                        ;#define PTE_EdCyl			7	
                    	/* MBR PTE: End cylinder */
   764                        ;#define PTE_StLba			8	
                    	/* MBR PTE: Start in LBA */
   765                        ;#define PTE_SizLba			12	
                    	/* MBR PTE: Size in LBA */
   766                        ;
   767                        ;#define GPTH_Sign			0	
                    	/* GPT: Header signature (8-byte) */
   768                        ;#define GPTH_Rev			8		
                    /* GPT: Revision (DWORD) */
   769                        ;#define GPTH_Size			12	
                    	/* GPT: Header size (DWORD) */
   770                        ;#define GPTH_Bcc			16		
                    /* GPT: Header BCC (DWORD) */
   771                        ;#define GPTH_CurLba			24	
                    	/* GPT: Main header LBA (QWORD) */
   772                        ;#define GPTH_BakLba			32	
                    	/* GPT: Backup header LBA (QWORD) */
   773                        ;#define GPTH_FstLba			40	
                    	/* GPT: First LBA for partitions (QWORD) */
   774                        ;#define GPTH_LstLba			48	
                    	/* GPT: Last LBA for partitions (QWORD) */
   775                        ;#define GPTH_DskGuid		56		
                    /* GPT: Disk GUID (16-byte) */
   776                        ;#define GPTH_PtOfs			72	
                    	/* GPT: Partation table LBA (QWORD) */
   777                        ;#define GPTH_PtNum			80	
                    	/* GPT: Number of table entries (DWORD) */
   778                        ;#define GPTH_PteSize		84		
                    /* GPT: Size of table entry (DWORD) */
   779                        ;#define GPTH_PtBcc			88	
                    	/* GPT: Partation table BCC (DWORD) */
   780                        ;#define SZ_GPTE				128	
                    	/* GPT: Size of partition table entry */
   781                        ;#define GPTE_PtGuid			0	
                    	/* GPT PTE: Partition type GUID (16-byte) */
   782                        ;#define GPTE_UpGuid			16	
                    	/* GPT PTE: Partition unique GUID (16-byte) */
   783                        ;#define GPTE_FstLba			32	
  Fri Jul 16 2021 14:42                                                Page 18


                    	/* GPT PTE: First LBA (QWORD) */
   784                        ;#define GPTE_LstLba			40	
                    	/* GPT PTE: Last LBA inclusive (QWORD) */
   785                        ;#define GPTE_Flags			48	
                    	/* GPT PTE: Flags (QWORD) */
   786                        ;#define GPTE_Name			56	
                    	/* GPT PTE: Name */
   787                        ;
   788                        ;/* Post process on fatal error in the file operat
                    ions */
   789                        ;#define ABORT(fs, res)		{ fp->err = (BYT
                    E)(res); LEAVE_FF(fs, res); }
   790                        ;
   791                        ;/* Re-entrancy related */
   792                        ;#if FF_FS_REENTRANT
   793                        ;#if FF_USE_LFN == 1
   794                        ;#error Static LFN work area cannot be used at thr
                    ead-safe configuration
   795                        ;#endif
   796                        ;#define LEAVE_FF(fs, res)	{ unlock_fs(fs, 
                    res); return res; }
   797                        ;#else
   798                        ;#define LEAVE_FF(fs, res)	return res
   799                        ;#endif
   800                        ;
   801                        ;/* Definitions of logical drive - physical locati
                    on conversion */
   802                        ;#if FF_MULTI_PARTITION
   803                        ;#define LD2PD(vol) VolToPart[vol].pd	/* Get p
                    hysical drive number */
   804                        ;#define LD2PT(vol) VolToPart[vol].pt	/* Get p
                    artition index */
   805                        ;#else
   806                        ;#define LD2PD(vol) (BYTE)(vol)	/* Each logical 
                    drive is associated with the same physical drive number */
   807                        ;#define LD2PT(vol) 0			/* Find 
                    first valid partition or in SFD */
   808                        ;#endif
   809                        ;
   810                        ;/* Definitions of sector size */
   811                        ;#if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_SS != 512 
                    && FF_MAX_SS != 1024 && FF_MAX_SS != 2048 && FF_MAX_SS != 40
                    96) || (FF_MIN_SS != 512 && FF_MIN_SS != 1024 && FF_MIN_SS !
                    = 2048 && FF_MIN_SS != 4096)
   812                        ;#error Wrong sector size configuration
   813                        ;#endif
   814                        ;#if FF_MAX_SS == FF_MIN_SS
   815                        ;#define SS(fs)	((UINT)FF_MAX_SS)	/* Fixed
                     sector size */
   816                        ;#else
   817                        ;#define SS(fs)	((fs)->ssize)	/* Variable sect
                    or size */
   818                        ;#endif
   819                        ;
   820                        ;/* Timestamp */
   821                        ;#if FF_FS_NORTC == 1
   822                        ;#if FF_NORTC_YEAR < 1980 || FF_NORTC_YEAR > 2107 
                    || FF_NORTC_MON < 1 || FF_NORTC_MON > 12 || FF_NORTC_MDAY < 
  Fri Jul 16 2021 14:42                                                Page 19


                    1 || FF_NORTC_MDAY > 31
   823                        ;#error Invalid FF_FS_NORTC settings
   824                        ;#endif
   825                        ;#define GET_FATTIME()	((DWORD)(FF_NORTC_YEAR -
                     1980) << 25 | (DWORD)FF_NORTC_MON << 21 | (DWORD)FF_NORTC_M
                    DAY << 16)
   826                        ;#else
   827                        ;#define GET_FATTIME()	get_fattime()
   828                        ;#endif
   829                        ;
   830                        ;/* File lock controls */
   831                        ;#if FF_FS_LOCK != 0
   832                        ;#if FF_FS_READONLY
   833                        ;#error FF_FS_LOCK must be 0 at read-only configur
                    ation
   834                        ;#endif
   835                        ;typedef struct
   836                        ;{
   837                        ;	FATFS *fs; /* Object ID 1, volume (NULL:blank en
                    try) */
   838                        ;	DWORD clu; /* Object ID 2, containing directory 
                    (0:root) */
   839                        ;	DWORD ofs; /* Object ID 3, offset in the directo
                    ry */
   840                        ;	WORD ctr; /* Object open counter, 0:none, 0x01..
                    0xFF:read mode open count, 0x100:write mode */
   841                        ;}FILESEM;
   842                        ;#endif
   843                        ;
   844                        ;/* SBCS up-case tables (\x80-\xFF) */
   845                        ;#define TBL_CT437  {0x80,0x9A,0x45,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
   846                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
   847                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
   848                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   849                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   850                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
   851                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
   852                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
   853                        ;#define TBL_CT720  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
   854                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  Fri Jul 16 2021 14:42                                                Page 20


   855                        ;					0xA0,0xA1,0xA2,0
                    xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
   856                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   857                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   858                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
   859                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
   860                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
   861                        ;#define TBL_CT737  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
   862                        ;					0x90,0x92,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0
                    x87, \
   863                        ;					0x88,0x89,0x8A,0
                    x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0
                    x96, \
   864                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   865                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   866                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
   867                        ;					0x97,0xEA,0xEB,0
                    xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
   868                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
   869                        ;#define TBL_CT771  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
   870                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
   871                        ;					0x80,0x81,0x82,0
                    x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0
                    x8F, \
   872                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   873                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   874                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0
                    xDE, \
  Fri Jul 16 2021 14:42                                                Page 21


   875                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
   876                        ;					0xF0,0xF0,0xF2,0
                    xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0
                    xFF}
   877                        ;#define TBL_CT775  {0x80,0x9A,0x91,0xA0,0x8E,0x95
                    ,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F, \
   878                        ;					0x90,0x92,0x92,0
                    xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0
                    x9F, \
   879                        ;					0xA0,0xA1,0xE0,0
                    xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
   880                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   881                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   882                        ;					0xB5,0xB6,0xB7,0
                    xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
   883                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0
                    xEF, \
   884                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
   885                        ;#define TBL_CT850  {0x43,0x55,0x45,0x41,0x41,0x41
                    ,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41, \
   886                        ;					0x45,0x92,0x92,0
                    x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0
                    x9F, \
   887                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
   888                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   889                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   890                        ;					0xD1,0xD1,0x45,0
                    x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0
                    xDF, \
   891                        ;					0x4F,0xE1,0x4F,0
                    x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0
                    xEF, \
   892                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
   893                        ;#define TBL_CT852  {0x80,0x9A,0x90,0xB6,0x8E,0xDE
                    ,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F, \
   894                        ;					0x90,0x91,0x91,0
                    xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0
                    xAC, \
   895                        ;					0xB5,0xD6,0xE0,0
  Fri Jul 16 2021 14:42                                                Page 22


                    xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0
                    xAF, \
   896                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0
                    xBF, \
   897                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   898                        ;					0xD1,0xD1,0xD2,0
                    xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
   899                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0
                    xEF, \
   900                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0
                    xFF}
   901                        ;#define TBL_CT855  {0x81,0x81,0x83,0x83,0x85,0x85
                    ,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F, \
   902                        ;					0x91,0x91,0x93,0
                    x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0
                    x9F, \
   903                        ;					0xA1,0xA1,0xA3,0
                    xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0
                    xAF, \
   904                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0
                    xBF, \
   905                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   906                        ;					0xD1,0xD1,0xD3,0
                    xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0
                    xDF, \
   907                        ;					0xE0,0xE2,0xE2,0
                    xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0
                    xEF, \
   908                        ;					0xF0,0xF2,0xF2,0
                    xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0
                    xFF}
   909                        ;#define TBL_CT857  {0x80,0x9A,0x90,0xB6,0x8E,0xB7
                    ,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F, \
   910                        ;					0x90,0x92,0x92,0
                    xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0
                    x9E, \
   911                        ;					0xB5,0xD6,0xE0,0
                    xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
   912                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   913                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   914                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
   915                        ;					0xE0,0xE1,0xE2,0
  Fri Jul 16 2021 14:42                                                Page 23


                    xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0
                    xEF, \
   916                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
   917                        ;#define TBL_CT860  {0x80,0x9A,0x90,0x8F,0x8E,0x91
                    ,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F, \
   918                        ;					0x90,0x91,0x92,0
                    x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
   919                        ;					0x86,0x8B,0x9F,0
                    x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
   920                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   921                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   922                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
   923                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
   924                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
   925                        ;#define TBL_CT861  {0x80,0x9A,0x90,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F, \
   926                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0
                    x9F, \
   927                        ;					0xA4,0xA5,0xA6,0
                    xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
   928                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   929                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   930                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
   931                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
   932                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
   933                        ;#define TBL_CT862  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
   934                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
   935                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
  Fri Jul 16 2021 14:42                                                Page 24


                    xAF, \
   936                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   937                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   938                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
   939                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
   940                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
   941                        ;#define TBL_CT863  {0x43,0x55,0x45,0x41,0x41,0x41
                    ,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F, \
   942                        ;					0x45,0x45,0x45,0
                    x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0
                    x9F, \
   943                        ;					0xA0,0xA1,0x4F,0
                    x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
   944                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   945                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   946                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
   947                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
   948                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
   949                        ;#define TBL_CT864  {0x80,0x9A,0x45,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
   950                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
   951                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
   952                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   953                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   954                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
   955                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
  Fri Jul 16 2021 14:42                                                Page 25


                    xEF, \
   956                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
   957                        ;#define TBL_CT865  {0x80,0x9A,0x90,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
   958                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
   959                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
   960                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   961                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   962                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
   963                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
   964                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
   965                        ;#define TBL_CT866  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
   966                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
   967                        ;					0x80,0x81,0x82,0
                    x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0
                    x8F, \
   968                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   969                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   970                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
   971                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
   972                        ;					0xF0,0xF0,0xF2,0
                    xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
   973                        ;#define TBL_CT869  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
   974                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0
                    x90, \
   975                        ;					0x91,0x90,0x92,0
                    x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  Fri Jul 16 2021 14:42                                                Page 26


   976                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
   977                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
   978                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0
                    xDF, \
   979                        ;					0xA9,0xAA,0xAC,0
                    xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0
                    xEF, \
   980                        ;					0xF0,0xF1,0xD1,0
                    xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0
                    xFF}
   981                        ;
   982                        ;/* DBCS code range |----- 1st byte -----|  |-----
                    ------ 2nd byte -----------| */
   983                        ;/*                  <------>    <------>    <----
                    -->    <------>    <------>  */
   984                        ;#define TBL_DC932 {0x81, 0x9F, 0xE0, 0xFC, 0x40, 
                    0x7E, 0x80, 0xFC, 0x00, 0x00}
   985                        ;#define TBL_DC936 {0x81, 0xFE, 0x00, 0x00, 0x40, 
                    0x7E, 0x80, 0xFE, 0x00, 0x00}
   986                        ;#define TBL_DC949 {0x81, 0xFE, 0x00, 0x00, 0x41, 
                    0x5A, 0x61, 0x7A, 0x81, 0xFE}
   987                        ;#define TBL_DC950 {0x81, 0xFE, 0x00, 0x00, 0x40, 
                    0x7E, 0xA1, 0xFE, 0x00, 0x00}
   988                        ;
   989                        ;/* Macros for table definitions */
   990                        ;#define MERGE_2STR(a, b) a ## b
   991                        ;#define MKCVTBL(hd, cp) MERGE_2STR(hd, cp)
   992                        ;
   993                        ;/*-----------------------------------------------
                    ---------------------------
   994                        ;
   995                        ; Module Private Work Area
   996                        ;
   997                        ; ------------------------------------------------
                    ---------------------------*/
   998                        ;/* Remark: Variables defined here without initial
                     value shall be guaranteed
   999                        ; /  zero/null at start-up. If not, the linker opt
                    ion or start-up routine is
  1000                        ; /  not compliance with C standard. */
  1001                        ;
  1002                        ;/*--------------------------------*/
  1003                        ;/* File/Volume controls           */
  1004                        ;/*--------------------------------*/
  1005                        ;
  1006                        ;#if FF_VOLUMES < 1 || FF_VOLUMES > 10
  1007                        ;#error Wrong FF_VOLUMES setting
  1008                        ;#endif
  1009                        ;static FATFS* FatFs[FF_VOLUMES]; /* Pointer to th
                    e filesystem objects (logical drives) */
  1010                        ;static WORD Fsid; /* Filesystem mount ID */
  1011                        ;
  1012                        ;#if FF_FS_RPATH != 0
  Fri Jul 16 2021 14:42                                                Page 27


  1013                        ;static BYTE CurrVol; /* Current drive */
  1014                        ;#endif
  1015                        ;
  1016                        ;#if FF_FS_LOCK != 0
  1017                        ;static FILESEM Files[FF_FS_LOCK]; /* Open object 
                    lock semaphores */
  1018                        ;#endif
  1019                        ;
  1020                        ;#if FF_STR_VOLUME_ID
  1021                        ;#ifdef FF_VOLUME_STRS
  1022                        ;static const char* const VolumeStr[FF_VOLUMES] = 
                    {FF_VOLUME_STRS}; /* Pre-defined volume ID */
  1023                        	data
  1024                        ~~VolumeStr:
  1025 00:0000: xx xx xx xx  	dl	L1+0
  1026 00:0004: xx xx xx xx  	dl	L1+4
  1027 00:0008: xx xx xx xx  	dl	L1+9
  1028 00:000C: xx xx xx xx  	dl	L1+12
  1029 00:0010: xx xx xx xx  	dl	L1+15
  1030 00:0014: xx xx xx xx  	dl	L1+18
  1031 00:0018: xx xx xx xx  	dl	L1+22
  1032 00:001C: xx xx xx xx  	dl	L1+27
  1033 00:0020:              	ends
  1034                        	data
  1035                        L1:
  1036 00:0020: 52 41 4D 00  	db	$52,$41,$4D,$00,$4E,$41,$4E,$44,$00,$46,
                    $44,$00,$53,$44,$00
       00:0024: 4E 41 4E 44 
       00:0028: 00 46 44 00 
       00:002C: 53 44 00 
  1037 00:002F: 48 44 00 55  	db	$48,$44,$00,$55,$53,$42,$00,$55,$53,$42,
                    $32,$00,$55,$53,$42
       00:0033: 53 42 00 55 
       00:0037: 53 42 32 00 
       00:003B: 55 53 42 
  1038 00:003E: 33 00        	db	$33,$00
  1039 00:0040:              	ends
  1040                        ;#endif
  1041                        ;#endif
  1042                        ;
  1043                        ;#if FF_LBA64
  1044                        ;#if FF_MIN_GPT > 0x100000000
  1045                        ;#error Wrong FF_MIN_GPT setting
  1046                        ;#endif
  1047                        ;static const BYTE GUID_MS_Basic[16] =
  1048                        ;{	0xA2,0xA0,0xD0,0xEB,0xE5,0xB9,0x33,0x44,
                    0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7};
  1049                        ;#endif
  1050                        ;
  1051                        ;/*--------------------------------*/
  1052                        ;/* LFN/Directory working buffer   */
  1053                        ;/*--------------------------------*/
  1054                        ;
  1055                        ;#if FF_USE_LFN == 0		/* Non-LFN confi
                    guration */
  1056                        ;#if FF_FS_EXFAT
  1057                        ;#error LFN must be enabled when enable exFAT
  1058                        ;#endif
  Fri Jul 16 2021 14:42                                                Page 28


  1059                        ;#define DEF_NAMBUF
  1060                        ;#define INIT_NAMBUF(fs)
  1061                        ;#define FREE_NAMBUF()
  1062                        ;#define LEAVE_MKFS(res)	return res
  1063                        ;
  1064                        ;#else					/* LFN c
                    onfigurations */
  1065                        ;#if FF_MAX_LFN < 12 || FF_MAX_LFN > 255
  1066                        ;#error Wrong setting of FF_MAX_LFN
  1067                        ;#endif
  1068                        ;#if FF_LFN_BUF < FF_SFN_BUF || FF_SFN_BUF < 12
  1069                        ;#error Wrong setting of FF_LFN_BUF or FF_SFN_BUF
  1070                        ;#endif
  1071                        ;#if FF_LFN_UNICODE < 0 || FF_LFN_UNICODE > 3
  1072                        ;#error Wrong setting of FF_LFN_UNICODE
  1073                        ;#endif
  1074                        ;static const BYTE LfnOfs[] =
  1075                        ;{	1,3,5,7,9,14,16,18,20,22,24,28,30}; /* F
                    AT: Offset of LFN characters in the directory entry */
  1076                        ;#define MAXDIRB(nc)	((nc + 44U) / 15 * SZDIR
                    E)	/* exFAT: Size of directory entry block scratchpad buffe
                    r needed for the name length */
  1077                        ;
  1078                        ;#if FF_USE_LFN == 1		/* LFN enabled w
                    ith static working buffer */
  1079                        ;#if FF_FS_EXFAT
  1080                        ;static BYTE DirBuf[MAXDIRB(FF_MAX_LFN)]; /* Direc
                    tory entry block scratchpad buffer */
  1081                        ;#endif
  1082                        ;static WCHAR LfnBuf[FF_MAX_LFN + 1]; /* LFN worki
                    ng buffer */
  1083                        ;#define DEF_NAMBUF
  1084                        ;#define INIT_NAMBUF(fs)
  1085                        ;#define FREE_NAMBUF()
  1086                        ;#define LEAVE_MKFS(res)	return res
  1087                        ;
  1088                        ;#elif FF_USE_LFN == 2 	/* LFN enabled with dyna
                    mic working buffer on the stack */
  1089                        ;#if FF_FS_EXFAT
  1090                        ;#define DEF_NAMBUF		WCHAR lbuf[FF_MA
                    X_LFN+1]; BYTE dbuf[MAXDIRB(FF_MAX_LFN)];	/* LFN working b
                    uffer and directory entry block scratchpad buffer */
  1091                        ;#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (
                    fs)->dirbuf = dbuf; }
  1092                        ;#define FREE_NAMBUF()
  1093                        ;#else
  1094                        ;#define DEF_NAMBUF		WCHAR lbuf[FF_MA
                    X_LFN+1];	/* LFN working buffer */
  1095                        ;#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
  1096                        ;#define FREE_NAMBUF()
  1097                        ;#endif
  1098                        ;#define LEAVE_MKFS(res)	return res
  1099                        ;
  1100                        ;#elif FF_USE_LFN == 3 	/* LFN enabled with dyna
                    mic working buffer on the heap */
  1101                        ;#if FF_FS_EXFAT
  1102                        ;#define DEF_NAMBUF		WCHAR *lfn;	
                    /* Pointer to LFN working buffer and directory entry block s
  Fri Jul 16 2021 14:42                                                Page 29


                    cratchpad buffer */
  1103                        ;#define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_
                    MAX_LFN+1)*2 + MAXDIRB(FF_MAX_LFN)); if (!lfn) LEAVE_FF(fs, 
                    FR_NOT_ENOUGH_CORE); (fs)->lfnbuf = lfn; (fs)->dirbuf = (BYT
                    E*)(lfn+FF_MAX_LFN+1); }
  1104                        ;#define FREE_NAMBUF()	ff_memfree(lfn)
  1105                        ;#else
  1106                        ;#define DEF_NAMBUF		WCHAR *lfn;	
                    /* Pointer to LFN working buffer */
  1107                        ;#define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_
                    MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH_CORE); (
                    fs)->lfnbuf = lfn; }
  1108                        ;#define FREE_NAMBUF()	ff_memfree(lfn)
  1109                        ;#endif
  1110                        ;#define LEAVE_MKFS(res)	{ if (!work) ff_memfree(
                    buf); return res; }
  1111                        ;#define MAX_MALLOC 0x400
  1112                        ;//0x8000
  1113                        ;/* Must be >=FF_MAX_SS */
  1114                        ;
  1115                        ;#else
  1116                        ;#error Wrong setting of FF_USE_LFN
  1117                        ;
  1118                        ;#endif	/* FF_USE_LFN == 1 */
  1119                        ;#endif	/* FF_USE_LFN == 0 */
  1120                        ;
  1121                        ;/*--------------------------------*/
  1122                        ;/* Code conversion tables         */
  1123                        ;/*--------------------------------*/
  1124                        ;
  1125                        ;#if FF_CODE_PAGE == 0		/* Run-time code
                     page configuration */
  1126                        ;#define CODEPAGE CodePage
  1127                        ;static WORD CodePage; /* Current code page */
  1128                        ;static const BYTE *ExCvt, *DbcTbl; /* Pointer to 
                    current SBCS up-case table and DBCS code range table below *
                    /
  1129                        ;
  1130                        ;static const BYTE Ct437[] = TBL_CT437;
  1131                        ;static const BYTE Ct720[] = TBL_CT720;
  1132                        ;static const BYTE Ct737[] = TBL_CT737;
  1133                        ;static const BYTE Ct771[] = TBL_CT771;
  1134                        ;static const BYTE Ct775[] = TBL_CT775;
  1135                        ;static const BYTE Ct850[] = TBL_CT850;
  1136                        ;static const BYTE Ct852[] = TBL_CT852;
  1137                        ;static const BYTE Ct855[] = TBL_CT855;
  1138                        ;static const BYTE Ct857[] = TBL_CT857;
  1139                        ;static const BYTE Ct860[] = TBL_CT860;
  1140                        ;static const BYTE Ct861[] = TBL_CT861;
  1141                        ;static const BYTE Ct862[] = TBL_CT862;
  1142                        ;static const BYTE Ct863[] = TBL_CT863;
  1143                        ;static const BYTE Ct864[] = TBL_CT864;
  1144                        ;static const BYTE Ct865[] = TBL_CT865;
  1145                        ;static const BYTE Ct866[] = TBL_CT866;
  1146                        ;static const BYTE Ct869[] = TBL_CT869;
  1147                        ;static const BYTE Dc932[] = TBL_DC932;
  1148                        ;static const BYTE Dc936[] = TBL_DC936;
  1149                        ;static const BYTE Dc949[] = TBL_DC949;
  Fri Jul 16 2021 14:42                                                Page 30


  1150                        ;static const BYTE Dc950[] = TBL_DC950;
  1151                        ;
  1152                        ;#elif FF_CODE_PAGE < 900	/* Static code page conf
                    iguration (SBCS) */
  1153                        ;#define CODEPAGE FF_CODE_PAGE
  1154                        ;static const BYTE ExCvt[] = MKCVTBL(TBL_CT, FF_CO
                    DE_PAGE);
  1155                        	data
  1156                        ~~ExCvt:
  1157 00:0040: 80 9A 45 41  	db	$80,$9A,$45,$41,$8E,$41,$8F,$80,$45,$45
       00:0044: 8E 41 8F 80 
       00:0048: 45 45 
  1158 00:004A: 45 49 49 49  	db	$45,$49,$49,$49,$8E,$8F,$90,$92,$92,$4F
       00:004E: 8E 8F 90 92 
       00:0052: 92 4F 
  1159 00:0054: 99 4F 55 55  	db	$99,$4F,$55,$55,$59,$99,$9A,$9B,$9C,$9D
       00:0058: 59 99 9A 9B 
       00:005C: 9C 9D 
  1160 00:005E: 9E 9F 41 49  	db	$9E,$9F,$41,$49,$4F,$55,$A5,$A5,$A6,$A7
       00:0062: 4F 55 A5 A5 
       00:0066: A6 A7 
  1161 00:0068: A8 A9 AA AB  	db	$A8,$A9,$AA,$AB,$AC,$AD,$AE,$AF,$B0,$B1
       00:006C: AC AD AE AF 
       00:0070: B0 B1 
  1162 00:0072: B2 B3 B4 B5  	db	$B2,$B3,$B4,$B5,$B6,$B7,$B8,$B9,$BA,$BB
       00:0076: B6 B7 B8 B9 
       00:007A: BA BB 
  1163 00:007C: BC BD BE BF  	db	$BC,$BD,$BE,$BF,$C0,$C1,$C2,$C3,$C4,$C5
       00:0080: C0 C1 C2 C3 
       00:0084: C4 C5 
  1164 00:0086: C6 C7 C8 C9  	db	$C6,$C7,$C8,$C9,$CA,$CB,$CC,$CD,$CE,$CF
       00:008A: CA CB CC CD 
       00:008E: CE CF 
  1165 00:0090: D0 D1 D2 D3  	db	$D0,$D1,$D2,$D3,$D4,$D5,$D6,$D7,$D8,$D9
       00:0094: D4 D5 D6 D7 
       00:0098: D8 D9 
  1166 00:009A: DA DB DC DD  	db	$DA,$DB,$DC,$DD,$DE,$DF,$E0,$E1,$E2,$E3
       00:009E: DE DF E0 E1 
       00:00A2: E2 E3 
  1167 00:00A4: E4 E5 E6 E7  	db	$E4,$E5,$E6,$E7,$E8,$E9,$EA,$EB,$EC,$ED
       00:00A8: E8 E9 EA EB 
       00:00AC: EC ED 
  1168 00:00AE: EE EF F0 F1  	db	$EE,$EF,$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7
       00:00B2: F2 F3 F4 F5 
       00:00B6: F6 F7 
  1169 00:00B8: F8 F9 FA FB  	db	$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF
       00:00BC: FC FD FE FF 
  1170 00:00C0:              	ends
  1171                        ;
  1172                        ;#else					/* Stati
                    c code page configuration (DBCS) */
  1173                        ;#define CODEPAGE FF_CODE_PAGE
  1174                        ;static const BYTE DbcTbl[] = MKCVTBL(TBL_DC, FF_C
                    ODE_PAGE);
  1175                        ;
  1176                        ;#endif
  1177                        ;
  1178                        ;/*-----------------------------------------------
  Fri Jul 16 2021 14:42                                                Page 31


                    ---------------------------
  1179                        ;
  1180                        ; Module Private Functions
  1181                        ;
  1182                        ; ------------------------------------------------
                    ---------------------------*/
  1183                        ;
  1184                        ;/*-----------------------------------------------
                    ------------------------*/
  1185                        ;/* Load/Store multi-byte word in the FAT structur
                    e                       */
  1186                        ;/*-----------------------------------------------
                    ------------------------*/
  1187                        ;
  1188                        ;static WORD ld_word(const BYTE* ptr) /*	 Load a 
                    2-byte little-endian word */
  1189                        ;{
  1190                        	.line	596
  1191                        	.line	597
  1192                        	FFDOS
  1193                        	func
  1194                        	.function	597
  1195                        ~~ld_word:
  1196                        	longa	on
  1197                        	longi	on
  1198 0B:3F80: 3B           	tsc
  1199 0B:3F81: 38           	sec
  1200 0B:3F82: E9 0A 00     	sbc	#L3
  1201 0B:3F85: 1B           	tcs
  1202 0B:3F86: 0B           	phd
  1203 0B:3F87: 5B           	tcd
  1204             00000004   ptr_0	set	4
  1205                        	.block	597
  1206                        ;	WORD rv;
  1207                        ;
  1208                        ;	////////k_debug_integer("ld_word::before:", *((U
                    INT*)ptr)  );
  1209                        ;
  1210                        ;	rv = ptr[1];
  1211             00000000   rv_1	set	0
  1212                        	.sym	rv,0,5,1,16
  1213                        	.sym	ptr,4,142,6,32
  1214                        	.line	602
  1215 0B:3F88: A0 01 00     	ldy	#$1
  1216 0B:3F8B: B7 0E        	lda	[<L3+ptr_0],Y
  1217 0B:3F8D: 29 FF 00     	and	#$ff
  1218 0B:3F90: 85 09        	sta	<L4+rv_1
  1219                        ;	rv = rv << 8 | ptr[0];
  1220                        	.line	603
  1221 0B:3F92: A5 09        	lda	<L4+rv_1
  1222 0B:3F94: EB           	xba
  1223 0B:3F95: 29 00 FF     	and	#$ff00
  1224 0B:3F98: 85 01        	sta	<R0
  1225 0B:3F9A: A7 0E        	lda	[<L3+ptr_0]
  1226 0B:3F9C: 29 FF 00     	and	#$ff
  1227 0B:3F9F: 85 05        	sta	<R1
  1228 0B:3FA1: A5 05        	lda	<R1
  1229 0B:3FA3: 05 01        	ora	<R0
  Fri Jul 16 2021 14:42                                                Page 32


  1230 0B:3FA5: 85 09        	sta	<L4+rv_1
  1231                        ;
  1232                        ;	////////k_debug_integer("ld_word::after:", rv);
  1233                        ;
  1234                        ;	return rv;
  1235                        	.line	607
  1236 0B:3FA7: A5 09        	lda	<L4+rv_1
  1237                        L6:
  1238 0B:3FA9: A8           	tay
  1239 0B:3FAA: A5 0C        	lda	<L3+2
  1240 0B:3FAC: 85 10        	sta	<L3+2+4
  1241 0B:3FAE: A5 0B        	lda	<L3+1
  1242 0B:3FB0: 85 0F        	sta	<L3+1+4
  1243 0B:3FB2: 2B           	pld
  1244 0B:3FB3: 3B           	tsc
  1245 0B:3FB4: 18           	clc
  1246 0B:3FB5: 69 0E 00     	adc	#L3+4
  1247 0B:3FB8: 1B           	tcs
  1248 0B:3FB9: 98           	tya
  1249 0B:3FBA: 6B           	rtl
  1250                        ;}
  1251                        	.line	608
  1252                        	.endblock	608
  1253             0000000A   L3	equ	10
  1254             00000009   L4	equ	9
  1255 0B:3FBB:              	ends
  1256                        	efunc
  1257                        	.endfunc	608,9,10
  1258                        	.line	608
  1259                        ;
  1260                        ;static DWORD ld_dword(const BYTE* ptr) /* Load a 
                    4-byte little-endian word */
  1261                        ;{
  1262                        	.line	610
  1263                        	.line	611
  1264                        	FFDOS
  1265                        	func
  1266                        	.function	611
  1267                        ~~ld_dword:
  1268                        	longa	on
  1269                        	longi	on
  1270 0B:3FBB: 3B           	tsc
  1271 0B:3FBC: 38           	sec
  1272 0B:3FBD: E9 0C 00     	sbc	#L7
  1273 0B:3FC0: 1B           	tcs
  1274 0B:3FC1: 0B           	phd
  1275 0B:3FC2: 5B           	tcd
  1276             00000004   ptr_0	set	4
  1277                        	.block	611
  1278                        ;	DWORD rv;
  1279                        ;
  1280                        ;	rv = ptr[3];
  1281             00000000   rv_1	set	0
  1282                        	.sym	rv,0,18,1,32
  1283                        	.sym	ptr,4,142,6,32
  1284                        	.line	614
  1285 0B:3FC3: A0 03 00     	ldy	#$3
  1286 0B:3FC6: B7 10        	lda	[<L7+ptr_0],Y
  Fri Jul 16 2021 14:42                                                Page 33


  1287 0B:3FC8: 29 FF 00     	and	#$ff
  1288 0B:3FCB: 85 09        	sta	<L8+rv_1
  1289 0B:3FCD: 64 0B        	stz	<L8+rv_1+2
  1290                        ;	rv = rv << 8 | ptr[2];
  1291                        	.line	615
  1292 0B:3FCF: D4 0B        	pei	<L8+rv_1+2
  1293 0B:3FD1: D4 09        	pei	<L8+rv_1
  1294 0B:3FD3: A9 08 00     	lda	#$8
  1295                        	xref	~~~lasl
  1296 0B:3FD6: 22 xx xx xx  	jsl	~~~lasl
  1297 0B:3FDA: 85 01        	sta	<R0
  1298 0B:3FDC: 86 03        	stx	<R0+2
  1299 0B:3FDE: A0 02 00     	ldy	#$2
  1300 0B:3FE1: B7 10        	lda	[<L7+ptr_0],Y
  1301 0B:3FE3: 29 FF 00     	and	#$ff
  1302 0B:3FE6: 85 05        	sta	<R1
  1303 0B:3FE8: 64 07        	stz	<R1+2
  1304 0B:3FEA: A5 05        	lda	<R1
  1305 0B:3FEC: 05 01        	ora	<R0
  1306 0B:3FEE: 85 09        	sta	<L8+rv_1
  1307 0B:3FF0: A5 07        	lda	<R1+2
  1308 0B:3FF2: 05 03        	ora	<R0+2
  1309 0B:3FF4: 85 0B        	sta	<L8+rv_1+2
  1310                        ;	rv = rv << 8 | ptr[1];
  1311                        	.line	616
  1312 0B:3FF6: D4 0B        	pei	<L8+rv_1+2
  1313 0B:3FF8: D4 09        	pei	<L8+rv_1
  1314 0B:3FFA: A9 08 00     	lda	#$8
  1315                        	xref	~~~lasl
  1316 0B:3FFD: 22 xx xx xx  	jsl	~~~lasl
  1317 0B:4001: 85 01        	sta	<R0
  1318 0B:4003: 86 03        	stx	<R0+2
  1319 0B:4005: A0 01 00     	ldy	#$1
  1320 0B:4008: B7 10        	lda	[<L7+ptr_0],Y
  1321 0B:400A: 29 FF 00     	and	#$ff
  1322 0B:400D: 85 05        	sta	<R1
  1323 0B:400F: 64 07        	stz	<R1+2
  1324 0B:4011: A5 05        	lda	<R1
  1325 0B:4013: 05 01        	ora	<R0
  1326 0B:4015: 85 09        	sta	<L8+rv_1
  1327 0B:4017: A5 07        	lda	<R1+2
  1328 0B:4019: 05 03        	ora	<R0+2
  1329 0B:401B: 85 0B        	sta	<L8+rv_1+2
  1330                        ;	rv = rv << 8 | ptr[0];
  1331                        	.line	617
  1332 0B:401D: D4 0B        	pei	<L8+rv_1+2
  1333 0B:401F: D4 09        	pei	<L8+rv_1
  1334 0B:4021: A9 08 00     	lda	#$8
  1335                        	xref	~~~lasl
  1336 0B:4024: 22 xx xx xx  	jsl	~~~lasl
  1337 0B:4028: 85 01        	sta	<R0
  1338 0B:402A: 86 03        	stx	<R0+2
  1339 0B:402C: A7 10        	lda	[<L7+ptr_0]
  1340 0B:402E: 29 FF 00     	and	#$ff
  1341 0B:4031: 85 05        	sta	<R1
  1342 0B:4033: 64 07        	stz	<R1+2
  1343 0B:4035: A5 05        	lda	<R1
  1344 0B:4037: 05 01        	ora	<R0
  Fri Jul 16 2021 14:42                                                Page 34


  1345 0B:4039: 85 09        	sta	<L8+rv_1
  1346 0B:403B: A5 07        	lda	<R1+2
  1347 0B:403D: 05 03        	ora	<R0+2
  1348 0B:403F: 85 0B        	sta	<L8+rv_1+2
  1349                        ;	return rv;
  1350                        	.line	618
  1351 0B:4041: A6 0B        	ldx	<L8+rv_1+2
  1352 0B:4043: A5 09        	lda	<L8+rv_1
  1353                        L10:
  1354 0B:4045: A8           	tay
  1355 0B:4046: A5 0E        	lda	<L7+2
  1356 0B:4048: 85 12        	sta	<L7+2+4
  1357 0B:404A: A5 0D        	lda	<L7+1
  1358 0B:404C: 85 11        	sta	<L7+1+4
  1359 0B:404E: 2B           	pld
  1360 0B:404F: 3B           	tsc
  1361 0B:4050: 18           	clc
  1362 0B:4051: 69 10 00     	adc	#L7+4
  1363 0B:4054: 1B           	tcs
  1364 0B:4055: 98           	tya
  1365 0B:4056: 6B           	rtl
  1366                        ;}
  1367                        	.line	619
  1368                        	.endblock	619
  1369             0000000C   L7	equ	12
  1370             00000009   L8	equ	9
  1371 0B:4057:              	ends
  1372                        	efunc
  1373                        	.endfunc	619,9,12
  1374                        	.line	619
  1375                        ;
  1376                        ;#if FF_FS_EXFAT
  1377                        ;static QWORD ld_qword (const BYTE* ptr) /* Load a
                    n 8-byte little-endian word */
  1378                        ;{
  1379                        ;	QWORD rv;
  1380                        ;
  1381                        ;	rv = ptr[7];
  1382                        ;	rv = rv << 8 | ptr[6];
  1383                        ;	rv = rv << 8 | ptr[5];
  1384                        ;	rv = rv << 8 | ptr[4];
  1385                        ;	rv = rv << 8 | ptr[3];
  1386                        ;	rv = rv << 8 | ptr[2];
  1387                        ;	rv = rv << 8 | ptr[1];
  1388                        ;	rv = rv << 8 | ptr[0];
  1389                        ;	return rv;
  1390                        ;}
  1391                        ;#endif
  1392                        ;
  1393                        ;#if !FF_FS_READONLY
  1394                        ;static void st_word(BYTE* ptr, WORD val) /* Store
                     a 2-byte word in little-endian */
  1395                        ;{
  1396                        	.line	639
  1397                        	.line	640
  1398                        	FFDOS
  1399                        	func
  1400                        	.function	640
  Fri Jul 16 2021 14:42                                                Page 35


  1401                        ~~st_word:
  1402                        	longa	on
  1403                        	longi	on
  1404 0B:4057: 3B           	tsc
  1405 0B:4058: 38           	sec
  1406 0B:4059: E9 00 00     	sbc	#L11
  1407 0B:405C: 1B           	tcs
  1408 0B:405D: 0B           	phd
  1409 0B:405E: 5B           	tcd
  1410             00000004   ptr_0	set	4
  1411             00000008   val_0	set	8
  1412                        	.block	640
  1413                        ;	*ptr++ = (BYTE) val;
  1414                        	.sym	ptr,4,142,6,32
  1415                        	.sym	val,8,5,6,16
  1416                        	.line	641
  1417 0B:405F: E2 20        	sep	#$20
  1418                        	longa	off
  1419 0B:4061: A5 08        	lda	<L11+val_0
  1420 0B:4063: 87 04        	sta	[<L11+ptr_0]
  1421 0B:4065: C2 20        	rep	#$20
  1422                        	longa	on
  1423 0B:4067: E6 04        	inc	<L11+ptr_0
  1424 0B:4069: D0 02        	bne	L14
  1425 0B:406B: E6 06        	inc	<L11+ptr_0+2
  1426                        L14:
  1427                        ;	val >>= 8;
  1428                        	.line	642
  1429 0B:406D: A5 08        	lda	<L11+val_0
  1430 0B:406F: A2 08 00     	ldx	#<$8
  1431                        	xref	~~~asr
  1432 0B:4072: 22 xx xx xx  	jsl	~~~asr
  1433 0B:4076: 85 08        	sta	<L11+val_0
  1434                        ;	*ptr++ = (BYTE) val;
  1435                        	.line	643
  1436 0B:4078: E2 20        	sep	#$20
  1437                        	longa	off
  1438 0B:407A: A5 08        	lda	<L11+val_0
  1439 0B:407C: 87 04        	sta	[<L11+ptr_0]
  1440 0B:407E: C2 20        	rep	#$20
  1441                        	longa	on
  1442 0B:4080: E6 04        	inc	<L11+ptr_0
  1443 0B:4082: D0 02        	bne	L15
  1444 0B:4084: E6 06        	inc	<L11+ptr_0+2
  1445                        L15:
  1446                        ;}
  1447                        	.line	644
  1448                        L16:
  1449 0B:4086: A5 02        	lda	<L11+2
  1450 0B:4088: 85 08        	sta	<L11+2+6
  1451 0B:408A: A5 01        	lda	<L11+1
  1452 0B:408C: 85 07        	sta	<L11+1+6
  1453 0B:408E: 2B           	pld
  1454 0B:408F: 3B           	tsc
  1455 0B:4090: 18           	clc
  1456 0B:4091: 69 06 00     	adc	#L11+6
  1457 0B:4094: 1B           	tcs
  1458 0B:4095: 6B           	rtl
  Fri Jul 16 2021 14:42                                                Page 36


  1459                        	.endblock	644
  1460             00000000   L11	equ	0
  1461             00000001   L12	equ	1
  1462 0B:4096:              	ends
  1463                        	efunc
  1464                        	.endfunc	644,1,0
  1465                        	.line	644
  1466                        ;
  1467                        ;static void st_dword(BYTE* ptr, DWORD val) /* Sto
                    re a 4-byte word in little-endian */
  1468                        ;{
  1469                        	.line	646
  1470                        	.line	647
  1471                        	FFDOS
  1472                        	func
  1473                        	.function	647
  1474                        ~~st_dword:
  1475                        	longa	on
  1476                        	longi	on
  1477 0B:4096: 3B           	tsc
  1478 0B:4097: 38           	sec
  1479 0B:4098: E9 00 00     	sbc	#L17
  1480 0B:409B: 1B           	tcs
  1481 0B:409C: 0B           	phd
  1482 0B:409D: 5B           	tcd
  1483             00000004   ptr_0	set	4
  1484             00000008   val_0	set	8
  1485                        	.block	647
  1486                        ;	*ptr++ = (BYTE) val;
  1487                        	.sym	ptr,4,142,6,32
  1488                        	.sym	val,8,18,6,32
  1489                        	.line	648
  1490 0B:409E: E2 20        	sep	#$20
  1491                        	longa	off
  1492 0B:40A0: A5 08        	lda	<L17+val_0
  1493 0B:40A2: 87 04        	sta	[<L17+ptr_0]
  1494 0B:40A4: C2 20        	rep	#$20
  1495                        	longa	on
  1496 0B:40A6: E6 04        	inc	<L17+ptr_0
  1497 0B:40A8: D0 02        	bne	L20
  1498 0B:40AA: E6 06        	inc	<L17+ptr_0+2
  1499                        L20:
  1500                        ;	val >>= 8;
  1501                        	.line	649
  1502 0B:40AC: D4 0A        	pei	<L17+val_0+2
  1503 0B:40AE: D4 08        	pei	<L17+val_0
  1504 0B:40B0: A9 08 00     	lda	#$8
  1505                        	xref	~~~llsr
  1506 0B:40B3: 22 xx xx xx  	jsl	~~~llsr
  1507 0B:40B7: 85 08        	sta	<L17+val_0
  1508 0B:40B9: 86 0A        	stx	<L17+val_0+2
  1509                        ;	*ptr++ = (BYTE) val;
  1510                        	.line	650
  1511 0B:40BB: E2 20        	sep	#$20
  1512                        	longa	off
  1513 0B:40BD: A5 08        	lda	<L17+val_0
  1514 0B:40BF: 87 04        	sta	[<L17+ptr_0]
  1515 0B:40C1: C2 20        	rep	#$20
  Fri Jul 16 2021 14:42                                                Page 37


  1516                        	longa	on
  1517 0B:40C3: E6 04        	inc	<L17+ptr_0
  1518 0B:40C5: D0 02        	bne	L21
  1519 0B:40C7: E6 06        	inc	<L17+ptr_0+2
  1520                        L21:
  1521                        ;	val >>= 8;
  1522                        	.line	651
  1523 0B:40C9: D4 0A        	pei	<L17+val_0+2
  1524 0B:40CB: D4 08        	pei	<L17+val_0
  1525 0B:40CD: A9 08 00     	lda	#$8
  1526                        	xref	~~~llsr
  1527 0B:40D0: 22 xx xx xx  	jsl	~~~llsr
  1528 0B:40D4: 85 08        	sta	<L17+val_0
  1529 0B:40D6: 86 0A        	stx	<L17+val_0+2
  1530                        ;	*ptr++ = (BYTE) val;
  1531                        	.line	652
  1532 0B:40D8: E2 20        	sep	#$20
  1533                        	longa	off
  1534 0B:40DA: A5 08        	lda	<L17+val_0
  1535 0B:40DC: 87 04        	sta	[<L17+ptr_0]
  1536 0B:40DE: C2 20        	rep	#$20
  1537                        	longa	on
  1538 0B:40E0: E6 04        	inc	<L17+ptr_0
  1539 0B:40E2: D0 02        	bne	L22
  1540 0B:40E4: E6 06        	inc	<L17+ptr_0+2
  1541                        L22:
  1542                        ;	val >>= 8;
  1543                        	.line	653
  1544 0B:40E6: D4 0A        	pei	<L17+val_0+2
  1545 0B:40E8: D4 08        	pei	<L17+val_0
  1546 0B:40EA: A9 08 00     	lda	#$8
  1547                        	xref	~~~llsr
  1548 0B:40ED: 22 xx xx xx  	jsl	~~~llsr
  1549 0B:40F1: 85 08        	sta	<L17+val_0
  1550 0B:40F3: 86 0A        	stx	<L17+val_0+2
  1551                        ;	*ptr++ = (BYTE) val;
  1552                        	.line	654
  1553 0B:40F5: E2 20        	sep	#$20
  1554                        	longa	off
  1555 0B:40F7: A5 08        	lda	<L17+val_0
  1556 0B:40F9: 87 04        	sta	[<L17+ptr_0]
  1557 0B:40FB: C2 20        	rep	#$20
  1558                        	longa	on
  1559 0B:40FD: E6 04        	inc	<L17+ptr_0
  1560 0B:40FF: D0 02        	bne	L23
  1561 0B:4101: E6 06        	inc	<L17+ptr_0+2
  1562                        L23:
  1563                        ;}
  1564                        	.line	655
  1565                        L24:
  1566 0B:4103: A5 02        	lda	<L17+2
  1567 0B:4105: 85 0A        	sta	<L17+2+8
  1568 0B:4107: A5 01        	lda	<L17+1
  1569 0B:4109: 85 09        	sta	<L17+1+8
  1570 0B:410B: 2B           	pld
  1571 0B:410C: 3B           	tsc
  1572 0B:410D: 18           	clc
  1573 0B:410E: 69 08 00     	adc	#L17+8
  Fri Jul 16 2021 14:42                                                Page 38


  1574 0B:4111: 1B           	tcs
  1575 0B:4112: 6B           	rtl
  1576                        	.endblock	655
  1577             00000000   L17	equ	0
  1578             00000001   L18	equ	1
  1579 0B:4113:              	ends
  1580                        	efunc
  1581                        	.endfunc	655,1,0
  1582                        	.line	655
  1583                        ;
  1584                        ;#if FF_FS_EXFAT
  1585                        ;static void st_qword (BYTE* ptr, QWORD val) /* St
                    ore an 8-byte word in little-endian */
  1586                        ;{
  1587                        ;	*ptr++ = (BYTE)val; val >>= 8;
  1588                        ;	*ptr++ = (BYTE)val; val >>= 8;
  1589                        ;	*ptr++ = (BYTE)val; val >>= 8;
  1590                        ;	*ptr++ = (BYTE)val; val >>= 8;
  1591                        ;	*ptr++ = (BYTE)val; val >>= 8;
  1592                        ;	*ptr++ = (BYTE)val; val >>= 8;
  1593                        ;	*ptr++ = (BYTE)val; val >>= 8;
  1594                        ;	*ptr++ = (BYTE)val;
  1595                        ;}
  1596                        ;#endif
  1597                        ;#endif	/* !FF_FS_READONLY */
  1598                        ;
  1599                        ;/*-----------------------------------------------
                    ------------------------*/
  1600                        ;/* String functions                              
                                            */
  1601                        ;/*-----------------------------------------------
                    ------------------------*/
  1602                        ;
  1603                        ;/* Copy memory to memory */
  1604                        ;static void mem_cpy(void* dst, const void* src, U
                    INT cnt)
  1605                        ;{
  1606                        	.line	677
  1607                        	.line	678
  1608                        	FFDOS
  1609                        	func
  1610                        	.function	678
  1611                        ~~mem_cpy:
  1612                        	longa	on
  1613                        	longi	on
  1614 0B:4113: 3B           	tsc
  1615 0B:4114: 38           	sec
  1616 0B:4115: E9 08 00     	sbc	#L25
  1617 0B:4118: 1B           	tcs
  1618 0B:4119: 0B           	phd
  1619 0B:411A: 5B           	tcd
  1620             00000004   dst_0	set	4
  1621             00000008   src_0	set	8
  1622             0000000C   cnt_0	set	12
  1623                        	.block	678
  1624                        ;	BYTE *d = (BYTE*) dst;
  1625                        ;	const BYTE *s = (const BYTE*) src;
  1626                        ;
  Fri Jul 16 2021 14:42                                                Page 39


  1627                        ;	if (cnt != 0)
  1628             00000000   d_1	set	0
  1629             00000004   s_1	set	4
  1630                        	.sym	d,0,142,1,32
  1631                        	.sym	s,4,142,1,32
  1632                        	.sym	dst,4,129,6,32
  1633                        	.sym	src,8,129,6,32
  1634                        	.sym	cnt,12,16,6,16
  1635 0B:411B: A5 0C        	lda	<L25+dst_0
  1636 0B:411D: 85 01        	sta	<L26+d_1
  1637 0B:411F: A5 0E        	lda	<L25+dst_0+2
  1638 0B:4121: 85 03        	sta	<L26+d_1+2
  1639 0B:4123: A5 10        	lda	<L25+src_0
  1640 0B:4125: 85 05        	sta	<L26+s_1
  1641 0B:4127: A5 12        	lda	<L25+src_0+2
  1642 0B:4129: 85 07        	sta	<L26+s_1+2
  1643                        	.line	682
  1644                        ;	{
  1645 0B:412B: A5 14        	lda	<L25+cnt_0
  1646 0B:412D: D0 03        	bne	L28
  1647 0B:412F: 82 1D 00     	brl	L10001
  1648                        L28:
  1649                        	.line	683
  1650                        ;		do
  1651                        	.line	684
  1652                        L10004:
  1653                        ;		{
  1654                        	.line	685
  1655                        ;			*d++ = *s++;
  1656                        	.line	686
  1657 0B:4132: E2 20        	sep	#$20
  1658                        	longa	off
  1659 0B:4134: A7 05        	lda	[<L26+s_1]
  1660 0B:4136: 87 01        	sta	[<L26+d_1]
  1661 0B:4138: C2 20        	rep	#$20
  1662                        	longa	on
  1663 0B:413A: E6 05        	inc	<L26+s_1
  1664 0B:413C: D0 02        	bne	L29
  1665 0B:413E: E6 07        	inc	<L26+s_1+2
  1666                        L29:
  1667 0B:4140: E6 01        	inc	<L26+d_1
  1668 0B:4142: D0 02        	bne	L30
  1669 0B:4144: E6 03        	inc	<L26+d_1+2
  1670                        L30:
  1671                        ;		} while (--cnt);
  1672                        	.line	687
  1673                        L10002:
  1674 0B:4146: C6 14        	dec	<L25+cnt_0
  1675 0B:4148: A5 14        	lda	<L25+cnt_0
  1676 0B:414A: F0 03        	beq	L31
  1677 0B:414C: 82 E3 FF     	brl	L10004
  1678                        L31:
  1679                        L10003:
  1680                        ;	}
  1681                        	.line	688
  1682                        ;}
  1683                        L10001:
  1684                        	.line	689
  Fri Jul 16 2021 14:42                                                Page 40


  1685                        L32:
  1686 0B:414F: A5 0A        	lda	<L25+2
  1687 0B:4151: 85 14        	sta	<L25+2+10
  1688 0B:4153: A5 09        	lda	<L25+1
  1689 0B:4155: 85 13        	sta	<L25+1+10
  1690 0B:4157: 2B           	pld
  1691 0B:4158: 3B           	tsc
  1692 0B:4159: 18           	clc
  1693 0B:415A: 69 12 00     	adc	#L25+10
  1694 0B:415D: 1B           	tcs
  1695 0B:415E: 6B           	rtl
  1696                        	.endblock	689
  1697             00000008   L25	equ	8
  1698             00000001   L26	equ	1
  1699 0B:415F:              	ends
  1700                        	efunc
  1701                        	.endfunc	689,1,8
  1702                        	.line	689
  1703                        ;
  1704                        ;/* Fill memory block */
  1705                        ;static void mem_set(void* dst, int val, UINT cnt)
  1706                        ;{
  1707                        	.line	692
  1708                        	.line	693
  1709                        	FFDOS
  1710                        	func
  1711                        	.function	693
  1712                        ~~mem_set:
  1713                        	longa	on
  1714                        	longi	on
  1715 0B:415F: 3B           	tsc
  1716 0B:4160: 38           	sec
  1717 0B:4161: E9 04 00     	sbc	#L33
  1718 0B:4164: 1B           	tcs
  1719 0B:4165: 0B           	phd
  1720 0B:4166: 5B           	tcd
  1721             00000004   dst_0	set	4
  1722             00000008   val_0	set	8
  1723             0000000A   cnt_0	set	10
  1724                        	.block	693
  1725                        ;	BYTE *d = (BYTE*) dst;
  1726                        ;
  1727                        ;	do
  1728             00000000   d_1	set	0
  1729                        	.sym	d,0,142,1,32
  1730                        	.sym	dst,4,129,6,32
  1731                        	.sym	val,8,5,6,16
  1732                        	.sym	cnt,10,16,6,16
  1733 0B:4167: A5 08        	lda	<L33+dst_0
  1734 0B:4169: 85 01        	sta	<L34+d_1
  1735 0B:416B: A5 0A        	lda	<L33+dst_0+2
  1736 0B:416D: 85 03        	sta	<L34+d_1+2
  1737                        	.line	696
  1738                        L10007:
  1739                        ;	{
  1740                        	.line	697
  1741                        ;		*d++ = (BYTE) val;
  1742                        	.line	698
  Fri Jul 16 2021 14:42                                                Page 41


  1743 0B:416F: E2 20        	sep	#$20
  1744                        	longa	off
  1745 0B:4171: A5 0C        	lda	<L33+val_0
  1746 0B:4173: 87 01        	sta	[<L34+d_1]
  1747 0B:4175: C2 20        	rep	#$20
  1748                        	longa	on
  1749 0B:4177: E6 01        	inc	<L34+d_1
  1750 0B:4179: D0 02        	bne	L36
  1751 0B:417B: E6 03        	inc	<L34+d_1+2
  1752                        L36:
  1753                        ;	} while (--cnt);
  1754                        	.line	699
  1755                        L10005:
  1756 0B:417D: C6 0E        	dec	<L33+cnt_0
  1757 0B:417F: A5 0E        	lda	<L33+cnt_0
  1758 0B:4181: F0 03        	beq	L37
  1759 0B:4183: 82 E9 FF     	brl	L10007
  1760                        L37:
  1761                        L10006:
  1762                        ;}
  1763                        	.line	700
  1764                        L38:
  1765 0B:4186: A5 06        	lda	<L33+2
  1766 0B:4188: 85 0E        	sta	<L33+2+8
  1767 0B:418A: A5 05        	lda	<L33+1
  1768 0B:418C: 85 0D        	sta	<L33+1+8
  1769 0B:418E: 2B           	pld
  1770 0B:418F: 3B           	tsc
  1771 0B:4190: 18           	clc
  1772 0B:4191: 69 0C 00     	adc	#L33+8
  1773 0B:4194: 1B           	tcs
  1774 0B:4195: 6B           	rtl
  1775                        	.endblock	700
  1776             00000004   L33	equ	4
  1777             00000001   L34	equ	1
  1778 0B:4196:              	ends
  1779                        	efunc
  1780                        	.endfunc	700,1,4
  1781                        	.line	700
  1782                        ;
  1783                        ;/* Compare memory block */
  1784                        ;static int mem_cmp(const void* dst, const void* s
                    rc, UINT cnt) /* ZR:same, NZ:different */
  1785                        ;{
  1786                        	.line	703
  1787                        	.line	704
  1788                        	FFDOS
  1789                        	func
  1790                        	.function	704
  1791                        ~~mem_cmp:
  1792                        	longa	on
  1793                        	longi	on
  1794 0B:4196: 3B           	tsc
  1795 0B:4197: 38           	sec
  1796 0B:4198: E9 12 00     	sbc	#L39
  1797 0B:419B: 1B           	tcs
  1798 0B:419C: 0B           	phd
  1799 0B:419D: 5B           	tcd
  Fri Jul 16 2021 14:42                                                Page 42


  1800             00000004   dst_0	set	4
  1801             00000008   src_0	set	8
  1802             0000000C   cnt_0	set	12
  1803                        	.block	704
  1804                        ;	const BYTE *d = (const BYTE *) dst, *s = (const 
                    BYTE *) src;
  1805                        ;	int r = 0;
  1806                        ;
  1807                        ;	do
  1808             00000000   d_1	set	0
  1809             00000004   s_1	set	4
  1810             00000008   r_1	set	8
  1811                        	.sym	d,0,142,1,32
  1812                        	.sym	s,4,142,1,32
  1813                        	.sym	r,8,5,1,16
  1814                        	.sym	dst,4,129,6,32
  1815                        	.sym	src,8,129,6,32
  1816                        	.sym	cnt,12,16,6,16
  1817 0B:419E: A5 16        	lda	<L39+dst_0
  1818 0B:41A0: 85 09        	sta	<L40+d_1
  1819 0B:41A2: A5 18        	lda	<L39+dst_0+2
  1820 0B:41A4: 85 0B        	sta	<L40+d_1+2
  1821 0B:41A6: A5 1A        	lda	<L39+src_0
  1822 0B:41A8: 85 0D        	sta	<L40+s_1
  1823 0B:41AA: A5 1C        	lda	<L39+src_0+2
  1824 0B:41AC: 85 0F        	sta	<L40+s_1+2
  1825 0B:41AE: 64 11        	stz	<L40+r_1
  1826                        	.line	708
  1827                        L10010:
  1828                        ;	{
  1829                        	.line	709
  1830                        ;		r = *d++ - *s++;
  1831                        	.line	710
  1832 0B:41B0: A7 0D        	lda	[<L40+s_1]
  1833 0B:41B2: 29 FF 00     	and	#$ff
  1834 0B:41B5: 85 01        	sta	<R0
  1835 0B:41B7: A7 09        	lda	[<L40+d_1]
  1836 0B:41B9: 29 FF 00     	and	#$ff
  1837 0B:41BC: 85 05        	sta	<R1
  1838 0B:41BE: 38           	sec
  1839 0B:41BF: A5 05        	lda	<R1
  1840 0B:41C1: E5 01        	sbc	<R0
  1841 0B:41C3: 85 11        	sta	<L40+r_1
  1842 0B:41C5: E6 0D        	inc	<L40+s_1
  1843 0B:41C7: D0 02        	bne	L42
  1844 0B:41C9: E6 0F        	inc	<L40+s_1+2
  1845                        L42:
  1846 0B:41CB: E6 09        	inc	<L40+d_1
  1847 0B:41CD: D0 02        	bne	L43
  1848 0B:41CF: E6 0B        	inc	<L40+d_1+2
  1849                        L43:
  1850                        ;	} while (--cnt && r == 0);
  1851                        	.line	711
  1852                        L10008:
  1853 0B:41D1: C6 1E        	dec	<L39+cnt_0
  1854 0B:41D3: A5 1E        	lda	<L39+cnt_0
  1855 0B:41D5: D0 03        	bne	L45
  1856 0B:41D7: 82 07 00     	brl	L44
  Fri Jul 16 2021 14:42                                                Page 43


  1857                        L45:
  1858 0B:41DA: A5 11        	lda	<L40+r_1
  1859 0B:41DC: D0 03        	bne	L46
  1860 0B:41DE: 82 CF FF     	brl	L10010
  1861                        L46:
  1862                        L44:
  1863                        L10009:
  1864                        ;
  1865                        ;	return r;
  1866                        	.line	713
  1867 0B:41E1: A5 11        	lda	<L40+r_1
  1868                        L47:
  1869 0B:41E3: A8           	tay
  1870 0B:41E4: A5 14        	lda	<L39+2
  1871 0B:41E6: 85 1E        	sta	<L39+2+10
  1872 0B:41E8: A5 13        	lda	<L39+1
  1873 0B:41EA: 85 1D        	sta	<L39+1+10
  1874 0B:41EC: 2B           	pld
  1875 0B:41ED: 3B           	tsc
  1876 0B:41EE: 18           	clc
  1877 0B:41EF: 69 1C 00     	adc	#L39+10
  1878 0B:41F2: 1B           	tcs
  1879 0B:41F3: 98           	tya
  1880 0B:41F4: 6B           	rtl
  1881                        ;}
  1882                        	.line	714
  1883                        	.endblock	714
  1884             00000012   L39	equ	18
  1885             00000009   L40	equ	9
  1886 0B:41F5:              	ends
  1887                        	efunc
  1888                        	.endfunc	714,9,18
  1889                        	.line	714
  1890                        ;
  1891                        ;/* Check if chr is contained in the string */
  1892                        ;static int chk_chr(const char* str, int chr) /* N
                    Z:contained, ZR:not contained */
  1893                        ;{
  1894                        	.line	717
  1895                        	.line	718
  1896                        	FFDOS
  1897                        	func
  1898                        	.function	718
  1899                        ~~chk_chr:
  1900                        	longa	on
  1901                        	longi	on
  1902 0B:41F5: 3B           	tsc
  1903 0B:41F6: 38           	sec
  1904 0B:41F7: E9 04 00     	sbc	#L48
  1905 0B:41FA: 1B           	tcs
  1906 0B:41FB: 0B           	phd
  1907 0B:41FC: 5B           	tcd
  1908             00000004   str_0	set	4
  1909             00000008   chr_0	set	8
  1910                        	.block	718
  1911                        ;	while (*str && *str != chr)
  1912                        	.sym	str,4,142,6,32
  1913                        	.sym	chr,8,5,6,16
  Fri Jul 16 2021 14:42                                                Page 44


  1914                        	.line	719
  1915                        L10011:
  1916 0B:41FD: A7 08        	lda	[<L48+str_0]
  1917 0B:41FF: 29 FF 00     	and	#$ff
  1918 0B:4202: D0 03        	bne	L51
  1919 0B:4204: 82 19 00     	brl	L10012
  1920                        L51:
  1921 0B:4207: A7 08        	lda	[<L48+str_0]
  1922 0B:4209: 29 FF 00     	and	#$ff
  1923 0B:420C: 85 01        	sta	<R0
  1924 0B:420E: A5 01        	lda	<R0
  1925 0B:4210: C5 0C        	cmp	<L48+chr_0
  1926 0B:4212: D0 03        	bne	L52
  1927 0B:4214: 82 09 00     	brl	L10012
  1928                        L52:
  1929                        ;		str++;
  1930                        	.line	720
  1931 0B:4217: E6 08        	inc	<L48+str_0
  1932 0B:4219: D0 02        	bne	L53
  1933 0B:421B: E6 0A        	inc	<L48+str_0+2
  1934                        L53:
  1935 0B:421D: 82 DD FF     	brl	L10011
  1936                        L10012:
  1937                        ;	return *str;
  1938                        	.line	721
  1939 0B:4220: A7 08        	lda	[<L48+str_0]
  1940 0B:4222: 29 FF 00     	and	#$ff
  1941                        L54:
  1942 0B:4225: A8           	tay
  1943 0B:4226: A5 06        	lda	<L48+2
  1944 0B:4228: 85 0C        	sta	<L48+2+6
  1945 0B:422A: A5 05        	lda	<L48+1
  1946 0B:422C: 85 0B        	sta	<L48+1+6
  1947 0B:422E: 2B           	pld
  1948 0B:422F: 3B           	tsc
  1949 0B:4230: 18           	clc
  1950 0B:4231: 69 0A 00     	adc	#L48+6
  1951 0B:4234: 1B           	tcs
  1952 0B:4235: 98           	tya
  1953 0B:4236: 6B           	rtl
  1954                        ;}
  1955                        	.line	722
  1956                        	.endblock	722
  1957             00000004   L48	equ	4
  1958             00000005   L49	equ	5
  1959 0B:4237:              	ends
  1960                        	efunc
  1961                        	.endfunc	722,5,4
  1962                        	.line	722
  1963                        ;
  1964                        ;/* Test if the byte is DBC 1st byte */
  1965                        ;static int dbc_1st(BYTE c)
  1966                        ;{
  1967                        	.line	725
  1968                        	.line	726
  1969                        	FFDOS
  1970                        	func
  1971                        	.function	726
  Fri Jul 16 2021 14:42                                                Page 45


  1972                        ~~dbc_1st:
  1973                        	longa	on
  1974                        	longi	on
  1975 0B:4237: 3B           	tsc
  1976 0B:4238: 38           	sec
  1977 0B:4239: E9 00 00     	sbc	#L55
  1978 0B:423C: 1B           	tcs
  1979 0B:423D: 0B           	phd
  1980 0B:423E: 5B           	tcd
  1981             00000004   c_0	set	4
  1982                        	.block	726
  1983                        ;#if FF_CODE_PAGE == 0		/* Variable code
                     page */
  1984                        ;	if (DbcTbl && c >= DbcTbl[0])
  1985                        ;	{
  1986                        ;		if (c <= DbcTbl[1]) return 1; /* 1st byt
                    e range 1 */
  1987                        ;		if (c >= DbcTbl[2] && c <= DbcTbl[3]) re
                    turn 1; /* 1st byte range 2 */
  1988                        ;	}
  1989                        ;#elif FF_CODE_PAGE >= 900	/* DBCS fixed co
                    de page */
  1990                        ;	if (c >= DbcTbl[0])
  1991                        ;	{
  1992                        ;		if (c <= DbcTbl[1]) return 1;
  1993                        ;		if (c >= DbcTbl[2] && c <= DbcTbl[3]) re
                    turn 1;
  1994                        ;	}
  1995                        ;#else						
                    /* SBCS fixed code page */
  1996                        ;	if (c != 0)
  1997                        	.sym	c,4,14,6,8
  1998                        	.line	740
  1999                        ;		return 0; /* Always false */
  2000 0B:423F: A5 04        	lda	<L55+c_0
  2001 0B:4241: 29 FF 00     	and	#$ff
  2002 0B:4244: D0 03        	bne	L58
  2003 0B:4246: 82 15 00     	brl	L10013
  2004                        L58:
  2005                        	.line	741
  2006 0B:4249: A9 00 00     	lda	#$0
  2007                        L59:
  2008 0B:424C: A8           	tay
  2009 0B:424D: A5 02        	lda	<L55+2
  2010 0B:424F: 85 04        	sta	<L55+2+2
  2011 0B:4251: A5 01        	lda	<L55+1
  2012 0B:4253: 85 03        	sta	<L55+1+2
  2013 0B:4255: 2B           	pld
  2014 0B:4256: 3B           	tsc
  2015 0B:4257: 18           	clc
  2016 0B:4258: 69 02 00     	adc	#L55+2
  2017 0B:425B: 1B           	tcs
  2018 0B:425C: 98           	tya
  2019 0B:425D: 6B           	rtl
  2020                        ;#endif
  2021                        ;	return 0;
  2022                        L10013:
  2023                        	.line	743
  Fri Jul 16 2021 14:42                                                Page 46


  2024 0B:425E: A9 00 00     	lda	#$0
  2025 0B:4261: 82 E8 FF     	brl	L59
  2026                        ;}
  2027                        	.line	744
  2028                        	.endblock	744
  2029             00000000   L55	equ	0
  2030             00000001   L56	equ	1
  2031 0B:4264:              	ends
  2032                        	efunc
  2033                        	.endfunc	744,1,0
  2034                        	.line	744
  2035                        ;
  2036                        ;/* Test if the byte is DBC 2nd byte */
  2037                        ;static int dbc_2nd(BYTE c)
  2038                        ;{
  2039                        	.line	747
  2040                        	.line	748
  2041                        	FFDOS
  2042                        	func
  2043                        	.function	748
  2044                        ~~dbc_2nd:
  2045                        	longa	on
  2046                        	longi	on
  2047 0B:4264: 3B           	tsc
  2048 0B:4265: 38           	sec
  2049 0B:4266: E9 00 00     	sbc	#L60
  2050 0B:4269: 1B           	tcs
  2051 0B:426A: 0B           	phd
  2052 0B:426B: 5B           	tcd
  2053             00000004   c_0	set	4
  2054                        	.block	748
  2055                        ;#if FF_CODE_PAGE == 0		/* Variable code
                     page */
  2056                        ;	if (DbcTbl && c >= DbcTbl[4])
  2057                        ;	{
  2058                        ;		if (c <= DbcTbl[5]) return 1; /* 2nd byt
                    e range 1 */
  2059                        ;		if (c >= DbcTbl[6] && c <= DbcTbl[7]) re
                    turn 1; /* 2nd byte range 2 */
  2060                        ;		if (c >= DbcTbl[8] && c <= DbcTbl[9]) re
                    turn 1; /* 2nd byte range 3 */
  2061                        ;	}
  2062                        ;#elif FF_CODE_PAGE >= 900	/* DBCS fixed co
                    de page */
  2063                        ;	if (c >= DbcTbl[4])
  2064                        ;	{
  2065                        ;		if (c <= DbcTbl[5]) return 1;
  2066                        ;		if (c >= DbcTbl[6] && c <= DbcTbl[7]) re
                    turn 1;
  2067                        ;		if (c >= DbcTbl[8] && c <= DbcTbl[9]) re
                    turn 1;
  2068                        ;	}
  2069                        ;#else						
                    /* SBCS fixed code page */
  2070                        ;	if (c != 0)
  2071                        	.sym	c,4,14,6,8
  2072                        	.line	764
  2073                        ;		return 0; /* Always false */
  Fri Jul 16 2021 14:42                                                Page 47


  2074 0B:426C: A5 04        	lda	<L60+c_0
  2075 0B:426E: 29 FF 00     	and	#$ff
  2076 0B:4271: D0 03        	bne	L63
  2077 0B:4273: 82 15 00     	brl	L10014
  2078                        L63:
  2079                        	.line	765
  2080 0B:4276: A9 00 00     	lda	#$0
  2081                        L64:
  2082 0B:4279: A8           	tay
  2083 0B:427A: A5 02        	lda	<L60+2
  2084 0B:427C: 85 04        	sta	<L60+2+2
  2085 0B:427E: A5 01        	lda	<L60+1
  2086 0B:4280: 85 03        	sta	<L60+1+2
  2087 0B:4282: 2B           	pld
  2088 0B:4283: 3B           	tsc
  2089 0B:4284: 18           	clc
  2090 0B:4285: 69 02 00     	adc	#L60+2
  2091 0B:4288: 1B           	tcs
  2092 0B:4289: 98           	tya
  2093 0B:428A: 6B           	rtl
  2094                        ;#endif
  2095                        ;	return 0;
  2096                        L10014:
  2097                        	.line	767
  2098 0B:428B: A9 00 00     	lda	#$0
  2099 0B:428E: 82 E8 FF     	brl	L64
  2100                        ;}
  2101                        	.line	768
  2102                        	.endblock	768
  2103             00000000   L60	equ	0
  2104             00000001   L61	equ	1
  2105 0B:4291:              	ends
  2106                        	efunc
  2107                        	.endfunc	768,1,0
  2108                        	.line	768
  2109                        ;
  2110                        ;#if FF_USE_LFN
  2111                        ;
  2112                        ;/* Get a Unicode code point from the TCHAR string
                     in defined API encodeing */
  2113                        ;static DWORD tchar2uni ( /* Returns a character i
                    n UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF o
                    n decode error) */
  2114                        ;		const TCHAR** str /* Pointer to pointer 
                    to TCHAR string in configured encoding */
  2115                        ;)
  2116                        ;{
  2117                        ;	DWORD uc;
  2118                        ;	const TCHAR *p = *str;
  2119                        ;
  2120                        ;#if FF_LFN_UNICODE == 1		/* UTF-16 input 
                    */
  2121                        ;	WCHAR wc;
  2122                        ;
  2123                        ;	uc = *p++; /* Get a unit */
  2124                        ;	if (IsSurrogate(uc))
  2125                        ;	{ /* Surrogate? */
  2126                        ;		wc = *p++; /* Get low surrogate */
  Fri Jul 16 2021 14:42                                                Page 48


  2127                        ;		if (!IsSurrogateH(uc) || !IsSurrogateL(w
                    c)) return 0xFFFFFFFF; /* Wrong surrogate? */
  2128                        ;		uc = uc << 16 | wc;
  2129                        ;	}
  2130                        ;
  2131                        ;#elif FF_LFN_UNICODE == 2	/* UTF-8 input *
                    /
  2132                        ;	BYTE b;
  2133                        ;	int nf;
  2134                        ;
  2135                        ;	uc = (BYTE)*p++; /* Get an encoding unit */
  2136                        ;	if (uc & 0x80)
  2137                        ;	{ /* Multiple byte code? */
  2138                        ;		if ((uc & 0xE0) == 0xC0)
  2139                        ;		{ /* 2-byte sequence? */
  2140                        ;			uc &= 0x1F; nf = 1;
  2141                        ;		}
  2142                        ;		else
  2143                        ;		{
  2144                        ;			if ((uc & 0xF0) == 0xE0)
  2145                        ;			{ /* 3-byte sequence? */
  2146                        ;				uc &= 0x0F; nf = 2;
  2147                        ;			}
  2148                        ;			else
  2149                        ;			{
  2150                        ;				if ((uc & 0xF8) == 0xF0)
  2151                        ;				{ /* 4-byte sequence? */
  2152                        ;					uc &= 0x07; nf =
                     3;
  2153                        ;				}
  2154                        ;				else
  2155                        ;				{ /* Wrong sequence */
  2156                        ;					return 0xFFFFFFF
                    F;
  2157                        ;				}
  2158                        ;			}
  2159                        ;		}
  2160                        ;		do
  2161                        ;		{ /* Get trailing bytes */
  2162                        ;			b = (BYTE)*p++;
  2163                        ;			if ((b & 0xC0) != 0x80) return 0
                    xFFFFFFFF; /* Wrong sequence? */
  2164                        ;			uc = uc << 6 | (b & 0x3F);
  2165                        ;		}while (--nf != 0);
  2166                        ;		if (uc < 0x80 || IsSurrogate(uc) || uc >
                    = 0x110000) return 0xFFFFFFFF; /* Wrong code? */
  2167                        ;		if (uc >= 0x010000) uc = 0xD800DC00 | ((
                    uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF); /* Make a su
                    rrogate pair if needed */
  2168                        ;	}
  2169                        ;
  2170                        ;#elif FF_LFN_UNICODE == 3	/* UTF-32 input 
                    */
  2171                        ;	uc = (TCHAR)*p++; /* Get a unit */
  2172                        ;	if (uc >= 0x110000 || IsSurrogate(uc)) return 0x
                    FFFFFFFF; /* Wrong code? */
  2173                        ;	if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x1
                    0000) << 6 & 0x3FF0000) | (uc & 0x3FF); /* Make a surrogate 
  Fri Jul 16 2021 14:42                                                Page 49


                    pair if needed */
  2174                        ;
  2175                        ;#else		/* ANSI/OEM input */
  2176                        ;	BYTE b;
  2177                        ;	WCHAR wc;
  2178                        ;
  2179                        ;	wc = (BYTE)*p++; /* Get a byte */
  2180                        ;	if (dbc_1st((BYTE)wc))
  2181                        ;	{ /* Is it a DBC 1st byte? */
  2182                        ;		b = (BYTE)*p++; /* Get 2nd byte */
  2183                        ;		if (!dbc_2nd(b)) return 0xFFFFFFFF; /* I
                    nvalid code? */
  2184                        ;		wc = (wc << 8) + b; /* Make a DBC */
  2185                        ;	}
  2186                        ;	if (wc != 0)
  2187                        ;	{
  2188                        ;		wc = ff_oem2uni(wc, CODEPAGE); /* ANSI/O
                    EM ==> Unicode */
  2189                        ;		if (wc == 0) return 0xFFFFFFFF; /* Inval
                    id code? */
  2190                        ;	}
  2191                        ;	uc = wc;
  2192                        ;
  2193                        ;#endif
  2194                        ;	*str = p; /* Next read pointer */
  2195                        ;	return uc;
  2196                        ;}
  2197                        ;
  2198                        ;/* Output a TCHAR string in defined API encoding 
                    */
  2199                        ;static BYTE put_utf ( /* Returns number of encodi
                    ng units written (0:buffer overflow or wrong encoding) */
  2200                        ;		DWORD chr, /* UTF-16 encoded character (
                    Surrogate pair if >=0x10000) */
  2201                        ;		TCHAR* buf, /* Output buffer */
  2202                        ;		UINT szb /* Size of the buffer */
  2203                        ;)
  2204                        ;{
  2205                        ;#if FF_LFN_UNICODE == 1	/* UTF-16 output */
  2206                        ;	WCHAR hs, wc;
  2207                        ;
  2208                        ;	hs = (WCHAR)(chr >> 16);
  2209                        ;	wc = (WCHAR)chr;
  2210                        ;	if (hs == 0)
  2211                        ;	{ /* Single encoding unit? */
  2212                        ;		if (szb < 1 || IsSurrogate(wc)) return 0
                    ; /* Buffer overflow or wrong code? */
  2213                        ;		*buf = wc;
  2214                        ;		return 1;
  2215                        ;	}
  2216                        ;	if (szb < 2 || !IsSurrogateH(hs) || !IsSurrogate
                    L(wc)) return 0; /* Buffer overflow or wrong surrogate? */
  2217                        ;	*buf++ = hs;
  2218                        ;	*buf++ = wc;
  2219                        ;	return 2;
  2220                        ;
  2221                        ;#elif FF_LFN_UNICODE == 2	/* UTF-8 output 
                    */
  Fri Jul 16 2021 14:42                                                Page 50


  2222                        ;	DWORD hc;
  2223                        ;
  2224                        ;	if (chr < 0x80)
  2225                        ;	{ /* Single byte code? */
  2226                        ;		if (szb < 1) return 0; /* Buffer overflo
                    w? */
  2227                        ;		*buf = (TCHAR)chr;
  2228                        ;		return 1;
  2229                        ;	}
  2230                        ;	if (chr < 0x800)
  2231                        ;	{ /* 2-byte sequence? */
  2232                        ;		if (szb < 2) return 0; /* Buffer overflo
                    w? */
  2233                        ;		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F
                    ));
  2234                        ;		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F
                    ));
  2235                        ;		return 2;
  2236                        ;	}
  2237                        ;	if (chr < 0x10000)
  2238                        ;	{ /* 3-byte sequence? */
  2239                        ;		if (szb < 3 || IsSurrogate(chr)) return 
                    0; /* Buffer overflow or wrong code? */
  2240                        ;		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0
                    F));
  2241                        ;		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F
                    ));
  2242                        ;		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F
                    ));
  2243                        ;		return 3;
  2244                        ;	}
  2245                        ;	/* 4-byte sequence */
  2246                        ;	if (szb < 4) return 0; /* Buffer overflow? */
  2247                        ;	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6; /* 
                    Get high 10 bits */
  2248                        ;	chr = (chr & 0xFFFF) - 0xDC00; /* Get low 10 bit
                    s */
  2249                        ;	if (hc >= 0x100000 || chr >= 0x400) return 0; /*
                     Wrong surrogate? */
  2250                        ;	chr = (hc | chr) + 0x10000;
  2251                        ;	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
  2252                        ;	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
  2253                        ;	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
  2254                        ;	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  2255                        ;	return 4;
  2256                        ;
  2257                        ;#elif FF_LFN_UNICODE == 3	/* UTF-32 output
                     */
  2258                        ;	DWORD hc;
  2259                        ;
  2260                        ;	if (szb < 1) return 0; /* Buffer overflow? */
  2261                        ;	if (chr >= 0x10000)
  2262                        ;	{ /* Out of BMP? */
  2263                        ;		hc = ((chr & 0xFFFF0000) - 0xD8000000) >
                    > 6; /* Get high 10 bits */
  2264                        ;		chr = (chr & 0xFFFF) - 0xDC00; /* Get lo
                    w 10 bits */
  2265                        ;		if (hc >= 0x100000 || chr >= 0x400) retu
  Fri Jul 16 2021 14:42                                                Page 51


                    rn 0; /* Wrong surrogate? */
  2266                        ;		chr = (hc | chr) + 0x10000;
  2267                        ;	}
  2268                        ;	*buf++ = (TCHAR)chr;
  2269                        ;	return 1;
  2270                        ;
  2271                        ;#else						
                    /* ANSI/OEM output */
  2272                        ;	WCHAR wc;
  2273                        ;
  2274                        ;	wc = ff_uni2oem(chr, CODEPAGE);
  2275                        ;	if (wc >= 0x100)
  2276                        ;	{ /* Is this a DBC? */
  2277                        ;		if (szb < 2) return 0;
  2278                        ;		*buf++ = (char)(wc >> 8); /* Store DBC 1
                    st byte */
  2279                        ;		*buf++ = (TCHAR)wc; /* Store DBC 2nd byt
                    e */
  2280                        ;		return 2;
  2281                        ;	}
  2282                        ;	if (wc == 0 || szb < 1) return 0; /* Invalid cha
                    r or buffer overflow? */
  2283                        ;	*buf++ = (TCHAR)wc; /* Store the character */
  2284                        ;	return 1;
  2285                        ;#endif
  2286                        ;}
  2287                        ;#endif	/* FF_USE_LFN */
  2288                        ;
  2289                        ;#if FF_FS_REENTRANT
  2290                        ;/*-----------------------------------------------
                    ------------------------*/
  2291                        ;/* Request/Release grant to access the volume    
                                            */
  2292                        ;/*-----------------------------------------------
                    ------------------------*/
  2293                        ;static int lock_fs ( /* 1:Ok, 0:timeout */
  2294                        ;		FATFS* fs /* Filesystem object */
  2295                        ;)
  2296                        ;{
  2297                        ;	return ff_req_grant(fs->sobj);
  2298                        ;}
  2299                        ;
  2300                        ;static void unlock_fs (
  2301                        ;		FATFS* fs, /* Filesystem object */
  2302                        ;		FRESULT res /* Result code to be returne
                    d */
  2303                        ;)
  2304                        ;{
  2305                        ;	if (fs && res != FR_NOT_ENABLED && res != FR_INV
                    ALID_DRIVE && res != FR_TIMEOUT)
  2306                        ;	{
  2307                        ;		ff_rel_grant(fs->sobj);
  2308                        ;	}
  2309                        ;}
  2310                        ;
  2311                        ;#endif
  2312                        ;
  2313                        ;#if FF_FS_LOCK != 0
  Fri Jul 16 2021 14:42                                                Page 52


  2314                        ;/*-----------------------------------------------
                    ------------------------*/
  2315                        ;/* File lock control functions                   
                                            */
  2316                        ;/*-----------------------------------------------
                    ------------------------*/
  2317                        ;
  2318                        ;static FRESULT chk_lock ( /* Check if the file ca
                    n be accessed */
  2319                        ;		DIR* dp, /* Directory object pointing th
                    e file to be checked */
  2320                        ;		int acc /* Desired access type (0:Read m
                    ode open, 1:Write mode open, 2:Delete or rename) */
  2321                        ;)
  2322                        ;{
  2323                        ;	UINT i, be;
  2324                        ;
  2325                        ;	/* Search open object table for the object */
  2326                        ;	be = 0;
  2327                        ;	for (i = 0; i < FF_FS_LOCK; i++)
  2328                        ;	{
  2329                        ;		if (Files[i].fs)
  2330                        ;		{ /* Existing entry */
  2331                        ;			if (Files[i].fs == dp->obj.fs &&
                     /* Check if the object matches with an open object */
  2332                        ;					Files[i].clu == 
                    dp->obj.sclust &&
  2333                        ;					Files[i].ofs == 
                    dp->dptr) break;
  2334                        ;		}
  2335                        ;		else
  2336                        ;		{ /* Blank entry */
  2337                        ;			be = 1;
  2338                        ;		}
  2339                        ;	}
  2340                        ;	if (i == FF_FS_LOCK)
  2341                        ;	{ /* The object has not been opened */
  2342                        ;		return (!be && acc != 2) ? FR_TOO_MANY_O
                    PEN_FILES : FR_OK; /* Is there a blank entry for new object?
                     */
  2343                        ;	}
  2344                        ;
  2345                        ;	/* The object was opened. Reject any open agains
                    t writing file and all write mode open */
  2346                        ;	return (acc != 0 || Files[i].ctr == 0x100) ? FR_
                    LOCKED : FR_OK;
  2347                        ;}
  2348                        ;
  2349                        ;static int enq_lock (void) /* Check if an entry i
                    s available for a new object */
  2350                        ;{
  2351                        ;	UINT i;
  2352                        ;
  2353                        ;	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++);
  2354                        ;	return (i == FF_FS_LOCK) ? 0 : 1;
  2355                        ;}
  2356                        ;
  2357                        ;static UINT inc_lock ( /* Increment object open c
  Fri Jul 16 2021 14:42                                                Page 53


                    ounter and returns its index (0:Internal error) */
  2358                        ;		DIR* dp, /* Directory object pointing th
                    e file to register or increment */
  2359                        ;		int acc /* Desired access (0:Read, 1:Wri
                    te, 2:Delete/Rename) */
  2360                        ;)
  2361                        ;{
  2362                        ;	UINT i;
  2363                        ;
  2364                        ;	for (i = 0; i < FF_FS_LOCK; i++)
  2365                        ;	{ /* Find the object */
  2366                        ;		if (Files[i].fs == dp->obj.fs
  2367                        ;				&& Files[i].clu == dp->o
                    bj.sclust
  2368                        ;				&& Files[i].ofs == dp->d
                    ptr) break;
  2369                        ;	}
  2370                        ;
  2371                        ;	if (i == FF_FS_LOCK)
  2372                        ;	{ /* Not opened. Register it as new. */
  2373                        ;		for (i = 0; i < FF_FS_LOCK && Files[i].f
                    s; i++);
  2374                        ;		if (i == FF_FS_LOCK) return 0; /* No fre
                    e entry to register (int err) */
  2375                        ;		Files[i].fs = dp->obj.fs;
  2376                        ;		Files[i].clu = dp->obj.sclust;
  2377                        ;		Files[i].ofs = dp->dptr;
  2378                        ;		Files[i].ctr = 0;
  2379                        ;	}
  2380                        ;
  2381                        ;	if (acc >= 1 && Files[i].ctr) return 0; /* Acces
                    s violation (int err) */
  2382                        ;
  2383                        ;	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1; /
                    * Set semaphore value */
  2384                        ;
  2385                        ;	return i + 1; /* Index number origin from 1 */
  2386                        ;}
  2387                        ;
  2388                        ;static FRESULT dec_lock ( /* Decrement object ope
                    n counter */
  2389                        ;		UINT i /* Semaphore index (1..) */
  2390                        ;)
  2391                        ;{
  2392                        ;	WORD n;
  2393                        ;	FRESULT res;
  2394                        ;
  2395                        ;	if (--i < FF_FS_LOCK)
  2396                        ;	{ /* Index number origin from 0 */
  2397                        ;		n = Files[i].ctr;
  2398                        ;		if (n == 0x100) n = 0; /* If write mode 
                    open, delete the entry */
  2399                        ;		if (n > 0) n--; /* Decrement read mode o
                    pen count */
  2400                        ;		Files[i].ctr = n;
  2401                        ;		if (n == 0) Files[i].fs = 0; /* Delete t
                    he entry if open count gets zero */
  2402                        ;		res = FR_OK;
  Fri Jul 16 2021 14:42                                                Page 54


  2403                        ;	}
  2404                        ;	else
  2405                        ;	{
  2406                        ;		res = FR_INT_ERR; /* Invalid index nunbe
                    r */
  2407                        ;	}
  2408                        ;	return res;
  2409                        ;}
  2410                        ;
  2411                        ;static void clear_lock ( /* Clear lock entries of
                     the volume */
  2412                        ;		FATFS *fs
  2413                        ;)
  2414                        ;{
  2415                        ;	UINT i;
  2416                        ;
  2417                        ;	for (i = 0; i < FF_FS_LOCK; i++)
  2418                        ;	{
  2419                        ;		if (Files[i].fs == fs) Files[i].fs = 0;
  2420                        ;	}
  2421                        ;}
  2422                        ;
  2423                        ;#endif	/* FF_FS_LOCK != 0 */
  2424                        ;
  2425                        ;/*-----------------------------------------------
                    ------------------------*/
  2426                        ;/* Move/Flush disk access window in the filesyste
                    m object                */
  2427                        ;/*-----------------------------------------------
                    ------------------------*/
  2428                        ;#if !FF_FS_READONLY
  2429                        ;static FRESULT sync_window( /* Returns FR_OK or F
                    R_DISK_ERR */
  2430                        ;FATFS* fs /* Filesystem object */
  2431                        ;)
  2432                        ;{
  2433                        	.line	1089
  2434                        	.line	1092
  2435                        	FFDOS
  2436                        	func
  2437                        	.function	1092
  2438                        ~~sync_window:
  2439                        	longa	on
  2440                        	longi	on
  2441 0B:4291: 3B           	tsc
  2442 0B:4292: 38           	sec
  2443 0B:4293: E9 0A 00     	sbc	#L65
  2444 0B:4296: 1B           	tcs
  2445 0B:4297: 0B           	phd
  2446 0B:4298: 5B           	tcd
  2447             00000004   fs_0	set	4
  2448                        	.block	1092
  2449                        ;	FRESULT res = FR_OK;
  2450                        ;
  2451                        ;	////k_debug_string("sync_window...\r\n");
  2452                        ;
  2453                        ;	if (fs->wflag)
  2454             00000000   res_1	set	0
  Fri Jul 16 2021 14:42                                                Page 55


  2455                        	.sym	res,0,5,1,16
  2456                        	.sym	fs,4,138,6,32,49
  2457 0B:4299: 64 09        	stz	<L66+res_1
  2458                        	.line	1097
  2459                        ;	{ /* Is the disk access window dirty? */
  2460 0B:429B: A0 03 00     	ldy	#$3
  2461 0B:429E: B7 0E        	lda	[<L65+fs_0],Y
  2462 0B:42A0: 29 FF 00     	and	#$ff
  2463 0B:42A3: D0 03        	bne	L68
  2464 0B:42A5: 82 BE 00     	brl	L10015
  2465                        L68:
  2466                        	.line	1098
  2467                        ;		////k_debug_long("sync_window:fs->wflag:
                    ",fs->wflag);
  2468                        ;		if (disk_write(fs->pdrv, fs->win, fs->wi
                    nsect, 1) == RES_OK)
  2469                        	.line	1100
  2470                        ;		{
  2471 0B:42A8: F4 01 00     	pea	#<$1
  2472 0B:42AB: A0 2D 00     	ldy	#$2d
  2473 0B:42AE: B7 0E        	lda	[<L65+fs_0],Y
  2474 0B:42B0: 48           	pha
  2475 0B:42B1: A0 2B 00     	ldy	#$2b
  2476 0B:42B4: B7 0E        	lda	[<L65+fs_0],Y
  2477 0B:42B6: 48           	pha
  2478 0B:42B7: 18           	clc
  2479 0B:42B8: A9 2F 00     	lda	#$2f
  2480 0B:42BB: 65 0E        	adc	<L65+fs_0
  2481 0B:42BD: 85 01        	sta	<R0
  2482 0B:42BF: A9 00 00     	lda	#$0
  2483 0B:42C2: 65 10        	adc	<L65+fs_0+2
  2484 0B:42C4: 85 03        	sta	<R0+2
  2485 0B:42C6: D4 03        	pei	<R0+2
  2486 0B:42C8: D4 01        	pei	<R0
  2487 0B:42CA: A0 01 00     	ldy	#$1
  2488 0B:42CD: B7 0E        	lda	[<L65+fs_0],Y
  2489 0B:42CF: 48           	pha
  2490 0B:42D0: 22 xx xx xx  	jsl	~~disk_write
  2491 0B:42D4: AA           	tax
  2492 0B:42D5: F0 03        	beq	L69
  2493 0B:42D7: 82 87 00     	brl	L10016
  2494                        L69:
  2495                        	.line	1101
  2496                        ;			////k_debug_long("sync_window:di
                    sk_write:",0);
  2497                        ;			/* Write it back into the volume
                     */
  2498                        ;			fs->wflag = 0; /* Clear window d
                    irty flag */
  2499                        	.line	1104
  2500 0B:42DA: E2 20        	sep	#$20
  2501                        	longa	off
  2502 0B:42DC: A9 00        	lda	#$0
  2503 0B:42DE: A0 03 00     	ldy	#$3
  2504 0B:42E1: 97 0E        	sta	[<L65+fs_0],Y
  2505 0B:42E3: C2 20        	rep	#$20
  2506                        	longa	on
  2507                        ;			if (fs->winsect - fs->fatbase < 
  Fri Jul 16 2021 14:42                                                Page 56


                    fs->fsize)
  2508                        	.line	1105
  2509                        ;			{ /* Is it in the 1st FAT? */
  2510 0B:42E5: 38           	sec
  2511 0B:42E6: A0 2B 00     	ldy	#$2b
  2512 0B:42E9: B7 0E        	lda	[<L65+fs_0],Y
  2513 0B:42EB: A0 1F 00     	ldy	#$1f
  2514 0B:42EE: F7 0E        	sbc	[<L65+fs_0],Y
  2515 0B:42F0: 85 01        	sta	<R0
  2516 0B:42F2: A0 2D 00     	ldy	#$2d
  2517 0B:42F5: B7 0E        	lda	[<L65+fs_0],Y
  2518 0B:42F7: A0 21 00     	ldy	#$21
  2519 0B:42FA: F7 0E        	sbc	[<L65+fs_0],Y
  2520 0B:42FC: 85 03        	sta	<R0+2
  2521 0B:42FE: A5 01        	lda	<R0
  2522 0B:4300: A0 17 00     	ldy	#$17
  2523 0B:4303: D7 0E        	cmp	[<L65+fs_0],Y
  2524 0B:4305: A5 03        	lda	<R0+2
  2525 0B:4307: A0 19 00     	ldy	#$19
  2526 0B:430A: F7 0E        	sbc	[<L65+fs_0],Y
  2527 0B:430C: 90 03        	bcc	L70
  2528 0B:430E: 82 4D 00     	brl	L10017
  2529                        L70:
  2530                        	.line	1106
  2531                        ;				if (fs->n_fats == 2)
  2532                        	.line	1107
  2533                        ;					disk_write(fs->p
                    drv, fs->win, fs->winsect + fs->fsize, 1); /* Reflect it to 
                    2nd FAT if needed */
  2534 0B:4311: E2 20        	sep	#$20
  2535                        	longa	off
  2536 0B:4313: A0 02 00     	ldy	#$2
  2537 0B:4316: B7 0E        	lda	[<L65+fs_0],Y
  2538 0B:4318: C9 02        	cmp	#<$2
  2539 0B:431A: C2 20        	rep	#$20
  2540                        	longa	on
  2541 0B:431C: F0 03        	beq	L71
  2542 0B:431E: 82 3D 00     	brl	L10018
  2543                        L71:
  2544                        	.line	1108
  2545 0B:4321: F4 01 00     	pea	#<$1
  2546 0B:4324: 18           	clc
  2547 0B:4325: A0 2B 00     	ldy	#$2b
  2548 0B:4328: B7 0E        	lda	[<L65+fs_0],Y
  2549 0B:432A: A0 17 00     	ldy	#$17
  2550 0B:432D: 77 0E        	adc	[<L65+fs_0],Y
  2551 0B:432F: 85 01        	sta	<R0
  2552 0B:4331: A0 2D 00     	ldy	#$2d
  2553 0B:4334: B7 0E        	lda	[<L65+fs_0],Y
  2554 0B:4336: A0 19 00     	ldy	#$19
  2555 0B:4339: 77 0E        	adc	[<L65+fs_0],Y
  2556 0B:433B: 85 03        	sta	<R0+2
  2557 0B:433D: D4 03        	pei	<R0+2
  2558 0B:433F: D4 01        	pei	<R0
  2559 0B:4341: 18           	clc
  2560 0B:4342: A9 2F 00     	lda	#$2f
  2561 0B:4345: 65 0E        	adc	<L65+fs_0
  2562 0B:4347: 85 05        	sta	<R1
  Fri Jul 16 2021 14:42                                                Page 57


  2563 0B:4349: A9 00 00     	lda	#$0
  2564 0B:434C: 65 10        	adc	<L65+fs_0+2
  2565 0B:434E: 85 07        	sta	<R1+2
  2566 0B:4350: D4 07        	pei	<R1+2
  2567 0B:4352: D4 05        	pei	<R1
  2568 0B:4354: A0 01 00     	ldy	#$1
  2569 0B:4357: B7 0E        	lda	[<L65+fs_0],Y
  2570 0B:4359: 48           	pha
  2571 0B:435A: 22 xx xx xx  	jsl	~~disk_write
  2572                        ;			}
  2573                        L10018:
  2574                        	.line	1109
  2575                        ;		}
  2576                        L10017:
  2577                        	.line	1110
  2578                        ;		else
  2579 0B:435E: 82 05 00     	brl	L10019
  2580                        L10016:
  2581                        ;		{
  2582                        	.line	1112
  2583                        ;			res = FR_DISK_ERR;
  2584                        	.line	1113
  2585 0B:4361: A9 01 00     	lda	#$1
  2586 0B:4364: 85 09        	sta	<L66+res_1
  2587                        ;		}
  2588                        	.line	1114
  2589                        L10019:
  2590                        ;	}
  2591                        	.line	1115
  2592                        ;	return res;
  2593                        L10015:
  2594                        	.line	1116
  2595 0B:4366: A5 09        	lda	<L66+res_1
  2596                        L72:
  2597 0B:4368: A8           	tay
  2598 0B:4369: A5 0C        	lda	<L65+2
  2599 0B:436B: 85 10        	sta	<L65+2+4
  2600 0B:436D: A5 0B        	lda	<L65+1
  2601 0B:436F: 85 0F        	sta	<L65+1+4
  2602 0B:4371: 2B           	pld
  2603 0B:4372: 3B           	tsc
  2604 0B:4373: 18           	clc
  2605 0B:4374: 69 0E 00     	adc	#L65+4
  2606 0B:4377: 1B           	tcs
  2607 0B:4378: 98           	tya
  2608 0B:4379: 6B           	rtl
  2609                        ;}
  2610                        	.line	1117
  2611                        	.endblock	1117
  2612             0000000A   L65	equ	10
  2613             00000009   L66	equ	9
  2614 0B:437A:              	ends
  2615                        	efunc
  2616                        	.endfunc	1117,9,10
  2617                        	.line	1117
  2618                        ;#endif
  2619                        ;
  2620                        ;static FRESULT move_window( /* Returns FR_OK or F
  Fri Jul 16 2021 14:42                                                Page 58


                    R_DISK_ERR */
  2621                        ;FATFS* fs, /* Filesystem object */
  2622                        ;LBA_t sect /* Sector LBA to make appearance in th
                    e fs->win[] */
  2623                        ;)
  2624                        ;{
  2625                        	.line	1120
  2626                        	.line	1124
  2627                        	FFDOS
  2628                        	func
  2629                        	.function	1124
  2630                        ~~move_window:
  2631                        	longa	on
  2632                        	longi	on
  2633 0B:437A: 3B           	tsc
  2634 0B:437B: 38           	sec
  2635 0B:437C: E9 06 00     	sbc	#L73
  2636 0B:437F: 1B           	tcs
  2637 0B:4380: 0B           	phd
  2638 0B:4381: 5B           	tcd
  2639             00000004   fs_0	set	4
  2640             00000008   sect_0	set	8
  2641                        	.block	1124
  2642                        ;	FRESULT res = FR_OK;
  2643                        ;
  2644                        ;	////k_debug_string("move_window...\r\n");
  2645                        ;
  2646                        ;	if (sect != fs->winsect)
  2647             00000000   res_1	set	0
  2648                        	.sym	res,0,5,1,16
  2649                        	.sym	fs,4,138,6,32,49
  2650                        	.sym	sect,8,18,6,32
  2651 0B:4382: 64 05        	stz	<L74+res_1
  2652                        	.line	1129
  2653                        ;	{ /* Window offset changed? */
  2654 0B:4384: A5 0E        	lda	<L73+sect_0
  2655 0B:4386: A0 2B 00     	ldy	#$2b
  2656 0B:4389: D7 0A        	cmp	[<L73+fs_0],Y
  2657 0B:438B: D0 07        	bne	L76
  2658 0B:438D: A5 10        	lda	<L73+sect_0+2
  2659 0B:438F: A0 2D 00     	ldy	#$2d
  2660 0B:4392: D7 0A        	cmp	[<L73+fs_0],Y
  2661                        L76:
  2662 0B:4394: D0 03        	bne	L77
  2663 0B:4396: 82 58 00     	brl	L10020
  2664                        L77:
  2665                        	.line	1130
  2666                        ;#if !FF_FS_READONLY
  2667                        ;		res = sync_window(fs); /* Flush the wind
                    ow */
  2668                        	.line	1132
  2669 0B:4399: D4 0C        	pei	<L73+fs_0+2
  2670 0B:439B: D4 0A        	pei	<L73+fs_0
  2671 0B:439D: 22 91 42 0B  	jsl	~~sync_window
  2672 0B:43A1: 85 05        	sta	<L74+res_1
  2673                        ;#endif
  2674                        ;		if (res == FR_OK)
  2675                        	.line	1134
  Fri Jul 16 2021 14:42                                                Page 59


  2676                        ;		{ /* Fill sector window with new data */
  2677 0B:43A3: A5 05        	lda	<L74+res_1
  2678 0B:43A5: F0 03        	beq	L78
  2679 0B:43A7: 82 47 00     	brl	L10021
  2680                        L78:
  2681                        	.line	1135
  2682                        ;			if (disk_read(fs->pdrv, fs->win,
                     sect, 1) != RES_OK)
  2683                        	.line	1136
  2684                        ;			{
  2685 0B:43AA: F4 01 00     	pea	#<$1
  2686 0B:43AD: D4 10        	pei	<L73+sect_0+2
  2687 0B:43AF: D4 0E        	pei	<L73+sect_0
  2688 0B:43B1: 18           	clc
  2689 0B:43B2: A9 2F 00     	lda	#$2f
  2690 0B:43B5: 65 0A        	adc	<L73+fs_0
  2691 0B:43B7: 85 01        	sta	<R0
  2692 0B:43B9: A9 00 00     	lda	#$0
  2693 0B:43BC: 65 0C        	adc	<L73+fs_0+2
  2694 0B:43BE: 85 03        	sta	<R0+2
  2695 0B:43C0: D4 03        	pei	<R0+2
  2696 0B:43C2: D4 01        	pei	<R0
  2697 0B:43C4: A0 01 00     	ldy	#$1
  2698 0B:43C7: B7 0A        	lda	[<L73+fs_0],Y
  2699 0B:43C9: 48           	pha
  2700 0B:43CA: 22 xx xx xx  	jsl	~~disk_read
  2701 0B:43CE: AA           	tax
  2702 0B:43CF: D0 03        	bne	L79
  2703 0B:43D1: 82 0F 00     	brl	L10022
  2704                        L79:
  2705                        	.line	1137
  2706                        ;				sect = (LBA_t) 0 - 1; /*
                     Invalidate window if read data is not valid */
  2707                        	.line	1138
  2708 0B:43D4: A9 FF FF     	lda	#$ffff
  2709 0B:43D7: 85 0E        	sta	<L73+sect_0
  2710 0B:43D9: A9 FF FF     	lda	#$ffff
  2711 0B:43DC: 85 10        	sta	<L73+sect_0+2
  2712                        ;				res = FR_DISK_ERR;
  2713                        	.line	1139
  2714 0B:43DE: A9 01 00     	lda	#$1
  2715 0B:43E1: 85 05        	sta	<L74+res_1
  2716                        ;			}
  2717                        	.line	1140
  2718                        ;			fs->winsect = sect;
  2719                        L10022:
  2720                        	.line	1141
  2721 0B:43E3: A5 0E        	lda	<L73+sect_0
  2722 0B:43E5: A0 2B 00     	ldy	#$2b
  2723 0B:43E8: 97 0A        	sta	[<L73+fs_0],Y
  2724 0B:43EA: A5 10        	lda	<L73+sect_0+2
  2725 0B:43EC: A0 2D 00     	ldy	#$2d
  2726 0B:43EF: 97 0A        	sta	[<L73+fs_0],Y
  2727                        ;			////k_debug_long("move_window::s
                    ect:",sect);
  2728                        ;		}
  2729                        	.line	1143
  2730                        ;	}
  Fri Jul 16 2021 14:42                                                Page 60


  2731                        L10021:
  2732                        	.line	1144
  2733                        ;	////k_debug_hex("move_window::res:",res);
  2734                        ;	return res;
  2735                        L10020:
  2736                        	.line	1146
  2737 0B:43F1: A5 05        	lda	<L74+res_1
  2738                        L80:
  2739 0B:43F3: A8           	tay
  2740 0B:43F4: A5 08        	lda	<L73+2
  2741 0B:43F6: 85 10        	sta	<L73+2+8
  2742 0B:43F8: A5 07        	lda	<L73+1
  2743 0B:43FA: 85 0F        	sta	<L73+1+8
  2744 0B:43FC: 2B           	pld
  2745 0B:43FD: 3B           	tsc
  2746 0B:43FE: 18           	clc
  2747 0B:43FF: 69 0E 00     	adc	#L73+8
  2748 0B:4402: 1B           	tcs
  2749 0B:4403: 98           	tya
  2750 0B:4404: 6B           	rtl
  2751                        ;}
  2752                        	.line	1147
  2753                        	.endblock	1147
  2754             00000006   L73	equ	6
  2755             00000005   L74	equ	5
  2756 0B:4405:              	ends
  2757                        	efunc
  2758                        	.endfunc	1147,5,6
  2759                        	.line	1147
  2760                        ;
  2761                        ;#if !FF_FS_READONLY
  2762                        ;/*-----------------------------------------------
                    ------------------------*/
  2763                        ;/* Synchronize filesystem and data on the storage
                                            */
  2764                        ;/*-----------------------------------------------
                    ------------------------*/
  2765                        ;
  2766                        ;static FRESULT sync_fs( /* Returns FR_OK or FR_DI
                    SK_ERR */
  2767                        ;FATFS* fs /* Filesystem object */
  2768                        ;)
  2769                        ;{
  2770                        	.line	1154
  2771                        	.line	1157
  2772                        	FFDOS
  2773                        	func
  2774                        	.function	1157
  2775                        ~~sync_fs:
  2776                        	longa	on
  2777                        	longi	on
  2778 0B:4405: 3B           	tsc
  2779 0B:4406: 38           	sec
  2780 0B:4407: E9 06 00     	sbc	#L81
  2781 0B:440A: 1B           	tcs
  2782 0B:440B: 0B           	phd
  2783 0B:440C: 5B           	tcd
  2784             00000004   fs_0	set	4
  Fri Jul 16 2021 14:42                                                Page 61


  2785                        	.block	1157
  2786                        ;	FRESULT res;
  2787                        ;
  2788                        ;	res = sync_window(fs);
  2789             00000000   res_1	set	0
  2790                        	.sym	res,0,5,1,16
  2791                        	.sym	fs,4,138,6,32,49
  2792                        	.line	1160
  2793 0B:440D: D4 0C        	pei	<L81+fs_0+2
  2794 0B:440F: D4 0A        	pei	<L81+fs_0
  2795 0B:4411: 22 91 42 0B  	jsl	~~sync_window
  2796 0B:4415: 85 05        	sta	<L82+res_1
  2797                        ;	if (res == FR_OK)
  2798                        	.line	1161
  2799                        ;	{
  2800 0B:4417: A5 05        	lda	<L82+res_1
  2801 0B:4419: F0 03        	beq	L84
  2802 0B:441B: 82 4C 01     	brl	L10023
  2803                        L84:
  2804                        	.line	1162
  2805                        ;		if (fs->fs_type == FS_FAT32 && fs->fsi_f
                    lag == 1)
  2806                        	.line	1163
  2807                        ;		{ /* FAT32: Update FSInfo sector if need
                    ed */
  2808 0B:441E: E2 20        	sep	#$20
  2809                        	longa	off
  2810 0B:4420: A7 0A        	lda	[<L81+fs_0]
  2811 0B:4422: C9 03        	cmp	#<$3
  2812 0B:4424: C2 20        	rep	#$20
  2813                        	longa	on
  2814 0B:4426: F0 03        	beq	L85
  2815 0B:4428: 82 21 01     	brl	L10024
  2816                        L85:
  2817 0B:442B: E2 20        	sep	#$20
  2818                        	longa	off
  2819 0B:442D: A0 04 00     	ldy	#$4
  2820 0B:4430: B7 0A        	lda	[<L81+fs_0],Y
  2821 0B:4432: C9 01        	cmp	#<$1
  2822 0B:4434: C2 20        	rep	#$20
  2823                        	longa	on
  2824 0B:4436: F0 03        	beq	L86
  2825 0B:4438: 82 11 01     	brl	L10024
  2826                        L86:
  2827                        	.line	1164
  2828                        ;			/* Create FSInfo structure */
  2829                        ;			mem_set(fs->win, 0, sizeof fs->w
                    in);
  2830                        	.line	1166
  2831 0B:443B: F4 00 02     	pea	#<$200
  2832 0B:443E: F4 00 00     	pea	#<$0
  2833 0B:4441: 18           	clc
  2834 0B:4442: A9 2F 00     	lda	#$2f
  2835 0B:4445: 65 0A        	adc	<L81+fs_0
  2836 0B:4447: 85 01        	sta	<R0
  2837 0B:4449: A9 00 00     	lda	#$0
  2838 0B:444C: 65 0C        	adc	<L81+fs_0+2
  2839 0B:444E: 85 03        	sta	<R0+2
  Fri Jul 16 2021 14:42                                                Page 62


  2840 0B:4450: D4 03        	pei	<R0+2
  2841 0B:4452: D4 01        	pei	<R0
  2842 0B:4454: 22 5F 41 0B  	jsl	~~mem_set
  2843                        ;			st_word(fs->win + BS_55AA, 0xAA5
                    5);
  2844                        	.line	1167
  2845 0B:4458: F4 55 AA     	pea	#<$aa55
  2846 0B:445B: 18           	clc
  2847 0B:445C: A9 2D 02     	lda	#$22d
  2848 0B:445F: 65 0A        	adc	<L81+fs_0
  2849 0B:4461: 85 01        	sta	<R0
  2850 0B:4463: A9 00 00     	lda	#$0
  2851 0B:4466: 65 0C        	adc	<L81+fs_0+2
  2852 0B:4468: 85 03        	sta	<R0+2
  2853 0B:446A: D4 03        	pei	<R0+2
  2854 0B:446C: D4 01        	pei	<R0
  2855 0B:446E: 22 57 40 0B  	jsl	~~st_word
  2856                        ;			st_dword(fs->win + FSI_LeadSig, 
                    0x41615252);
  2857                        	.line	1168
  2858 0B:4472: F4 61 41     	pea	#^$41615252
  2859 0B:4475: F4 52 52     	pea	#<$41615252
  2860 0B:4478: 18           	clc
  2861 0B:4479: A9 2F 00     	lda	#$2f
  2862 0B:447C: 65 0A        	adc	<L81+fs_0
  2863 0B:447E: 85 01        	sta	<R0
  2864 0B:4480: A9 00 00     	lda	#$0
  2865 0B:4483: 65 0C        	adc	<L81+fs_0+2
  2866 0B:4485: 85 03        	sta	<R0+2
  2867 0B:4487: D4 03        	pei	<R0+2
  2868 0B:4489: D4 01        	pei	<R0
  2869 0B:448B: 22 96 40 0B  	jsl	~~st_dword
  2870                        ;			st_dword(fs->win + FSI_StrucSig,
                     0x61417272);
  2871                        	.line	1169
  2872 0B:448F: F4 41 61     	pea	#^$61417272
  2873 0B:4492: F4 72 72     	pea	#<$61417272
  2874 0B:4495: 18           	clc
  2875 0B:4496: A9 13 02     	lda	#$213
  2876 0B:4499: 65 0A        	adc	<L81+fs_0
  2877 0B:449B: 85 01        	sta	<R0
  2878 0B:449D: A9 00 00     	lda	#$0
  2879 0B:44A0: 65 0C        	adc	<L81+fs_0+2
  2880 0B:44A2: 85 03        	sta	<R0+2
  2881 0B:44A4: D4 03        	pei	<R0+2
  2882 0B:44A6: D4 01        	pei	<R0
  2883 0B:44A8: 22 96 40 0B  	jsl	~~st_dword
  2884                        ;			st_dword(fs->win + FSI_Free_Coun
                    t, fs->free_clst);
  2885                        	.line	1170
  2886 0B:44AC: A0 11 00     	ldy	#$11
  2887 0B:44AF: B7 0A        	lda	[<L81+fs_0],Y
  2888 0B:44B1: 48           	pha
  2889 0B:44B2: A0 0F 00     	ldy	#$f
  2890 0B:44B5: B7 0A        	lda	[<L81+fs_0],Y
  2891 0B:44B7: 48           	pha
  2892 0B:44B8: 18           	clc
  2893 0B:44B9: A9 17 02     	lda	#$217
  Fri Jul 16 2021 14:42                                                Page 63


  2894 0B:44BC: 65 0A        	adc	<L81+fs_0
  2895 0B:44BE: 85 01        	sta	<R0
  2896 0B:44C0: A9 00 00     	lda	#$0
  2897 0B:44C3: 65 0C        	adc	<L81+fs_0+2
  2898 0B:44C5: 85 03        	sta	<R0+2
  2899 0B:44C7: D4 03        	pei	<R0+2
  2900 0B:44C9: D4 01        	pei	<R0
  2901 0B:44CB: 22 96 40 0B  	jsl	~~st_dword
  2902                        ;			st_dword(fs->win + FSI_Nxt_Free,
                     fs->last_clst);
  2903                        	.line	1171
  2904 0B:44CF: A0 0D 00     	ldy	#$d
  2905 0B:44D2: B7 0A        	lda	[<L81+fs_0],Y
  2906 0B:44D4: 48           	pha
  2907 0B:44D5: A0 0B 00     	ldy	#$b
  2908 0B:44D8: B7 0A        	lda	[<L81+fs_0],Y
  2909 0B:44DA: 48           	pha
  2910 0B:44DB: 18           	clc
  2911 0B:44DC: A9 1B 02     	lda	#$21b
  2912 0B:44DF: 65 0A        	adc	<L81+fs_0
  2913 0B:44E1: 85 01        	sta	<R0
  2914 0B:44E3: A9 00 00     	lda	#$0
  2915 0B:44E6: 65 0C        	adc	<L81+fs_0+2
  2916 0B:44E8: 85 03        	sta	<R0+2
  2917 0B:44EA: D4 03        	pei	<R0+2
  2918 0B:44EC: D4 01        	pei	<R0
  2919 0B:44EE: 22 96 40 0B  	jsl	~~st_dword
  2920                        ;			/* Write it into the FSInfo sect
                    or */
  2921                        ;			fs->winsect = fs->volbase + 1;
  2922                        	.line	1173
  2923 0B:44F2: 18           	clc
  2924 0B:44F3: A9 01 00     	lda	#$1
  2925 0B:44F6: A0 1B 00     	ldy	#$1b
  2926 0B:44F9: 77 0A        	adc	[<L81+fs_0],Y
  2927 0B:44FB: 85 01        	sta	<R0
  2928 0B:44FD: A9 00 00     	lda	#$0
  2929 0B:4500: A0 1D 00     	ldy	#$1d
  2930 0B:4503: 77 0A        	adc	[<L81+fs_0],Y
  2931 0B:4505: 85 03        	sta	<R0+2
  2932 0B:4507: A5 01        	lda	<R0
  2933 0B:4509: A0 2B 00     	ldy	#$2b
  2934 0B:450C: 97 0A        	sta	[<L81+fs_0],Y
  2935 0B:450E: A5 03        	lda	<R0+2
  2936 0B:4510: A0 2D 00     	ldy	#$2d
  2937 0B:4513: 97 0A        	sta	[<L81+fs_0],Y
  2938                        ;			disk_write(fs->pdrv, fs->win, fs
                    ->winsect, 1);
  2939                        	.line	1174
  2940 0B:4515: F4 01 00     	pea	#<$1
  2941 0B:4518: A0 2D 00     	ldy	#$2d
  2942 0B:451B: B7 0A        	lda	[<L81+fs_0],Y
  2943 0B:451D: 48           	pha
  2944 0B:451E: A0 2B 00     	ldy	#$2b
  2945 0B:4521: B7 0A        	lda	[<L81+fs_0],Y
  2946 0B:4523: 48           	pha
  2947 0B:4524: 18           	clc
  2948 0B:4525: A9 2F 00     	lda	#$2f
  Fri Jul 16 2021 14:42                                                Page 64


  2949 0B:4528: 65 0A        	adc	<L81+fs_0
  2950 0B:452A: 85 01        	sta	<R0
  2951 0B:452C: A9 00 00     	lda	#$0
  2952 0B:452F: 65 0C        	adc	<L81+fs_0+2
  2953 0B:4531: 85 03        	sta	<R0+2
  2954 0B:4533: D4 03        	pei	<R0+2
  2955 0B:4535: D4 01        	pei	<R0
  2956 0B:4537: A0 01 00     	ldy	#$1
  2957 0B:453A: B7 0A        	lda	[<L81+fs_0],Y
  2958 0B:453C: 48           	pha
  2959 0B:453D: 22 xx xx xx  	jsl	~~disk_write
  2960                        ;			fs->fsi_flag = 0;
  2961                        	.line	1175
  2962 0B:4541: E2 20        	sep	#$20
  2963                        	longa	off
  2964 0B:4543: A9 00        	lda	#$0
  2965 0B:4545: A0 04 00     	ldy	#$4
  2966 0B:4548: 97 0A        	sta	[<L81+fs_0],Y
  2967 0B:454A: C2 20        	rep	#$20
  2968                        	longa	on
  2969                        ;		}
  2970                        	.line	1176
  2971                        ;		/* Make sure that no pending write proce
                    ss in the lower layer */
  2972                        ;		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) !
                    = RES_OK)
  2973                        L10024:
  2974                        	.line	1178
  2975                        ;			res = FR_DISK_ERR;
  2976 0B:454C: F4 00 00     	pea	#^$0
  2977 0B:454F: F4 00 00     	pea	#<$0
  2978 0B:4552: F4 00 00     	pea	#<$0
  2979 0B:4555: A0 01 00     	ldy	#$1
  2980 0B:4558: B7 0A        	lda	[<L81+fs_0],Y
  2981 0B:455A: 48           	pha
  2982 0B:455B: 22 xx xx xx  	jsl	~~disk_ioctl
  2983 0B:455F: AA           	tax
  2984 0B:4560: D0 03        	bne	L87
  2985 0B:4562: 82 05 00     	brl	L10025
  2986                        L87:
  2987                        	.line	1179
  2988 0B:4565: A9 01 00     	lda	#$1
  2989 0B:4568: 85 05        	sta	<L82+res_1
  2990                        ;	}
  2991                        L10025:
  2992                        	.line	1180
  2993                        ;
  2994                        ;	return res;
  2995                        L10023:
  2996                        	.line	1182
  2997 0B:456A: A5 05        	lda	<L82+res_1
  2998                        L88:
  2999 0B:456C: A8           	tay
  3000 0B:456D: A5 08        	lda	<L81+2
  3001 0B:456F: 85 0C        	sta	<L81+2+4
  3002 0B:4571: A5 07        	lda	<L81+1
  3003 0B:4573: 85 0B        	sta	<L81+1+4
  3004 0B:4575: 2B           	pld
  Fri Jul 16 2021 14:42                                                Page 65


  3005 0B:4576: 3B           	tsc
  3006 0B:4577: 18           	clc
  3007 0B:4578: 69 0A 00     	adc	#L81+4
  3008 0B:457B: 1B           	tcs
  3009 0B:457C: 98           	tya
  3010 0B:457D: 6B           	rtl
  3011                        ;}
  3012                        	.line	1183
  3013                        	.endblock	1183
  3014             00000006   L81	equ	6
  3015             00000005   L82	equ	5
  3016 0B:457E:              	ends
  3017                        	efunc
  3018                        	.endfunc	1183,5,6
  3019                        	.line	1183
  3020                        ;
  3021                        ;#endif
  3022                        ;
  3023                        ;/*-----------------------------------------------
                    ------------------------*/
  3024                        ;/* Get physical sector number from cluster number
                                            */
  3025                        ;/*-----------------------------------------------
                    ------------------------*/
  3026                        ;
  3027                        ;static LBA_t clst2sect( /* !=0:Sector number, 0:F
                    ailed (invalid cluster#) */
  3028                        ;FATFS* fs, /* Filesystem object */
  3029                        ;DWORD clst /* Cluster# to be converted */
  3030                        ;)
  3031                        ;{
  3032                        	.line	1191
  3033                        	.line	1195
  3034                        	FFDOS
  3035                        	func
  3036                        	.function	1195
  3037                        ~~clst2sect:
  3038                        	longa	on
  3039                        	longi	on
  3040 0B:457E: 3B           	tsc
  3041 0B:457F: 38           	sec
  3042 0B:4580: E9 08 00     	sbc	#L89
  3043 0B:4583: 1B           	tcs
  3044 0B:4584: 0B           	phd
  3045 0B:4585: 5B           	tcd
  3046             00000004   fs_0	set	4
  3047             00000008   clst_0	set	8
  3048                        	.block	1195
  3049                        ;	clst -= 2; /* Cluster number is origin from 2 */
  3050                        	.sym	fs,4,138,6,32,49
  3051                        	.sym	clst,8,18,6,32
  3052                        	.line	1196
  3053 0B:4586: 18           	clc
  3054 0B:4587: A9 FE FF     	lda	#$fffe
  3055 0B:458A: 65 10        	adc	<L89+clst_0
  3056 0B:458C: 85 10        	sta	<L89+clst_0
  3057 0B:458E: A9 FF FF     	lda	#$ffff
  3058 0B:4591: 65 12        	adc	<L89+clst_0+2
  Fri Jul 16 2021 14:42                                                Page 66


  3059 0B:4593: 85 12        	sta	<L89+clst_0+2
  3060                        ;	if (clst >= fs->n_fatent - 2)
  3061                        	.line	1197
  3062                        ;		return 0; /* Is it invalid cluster numbe
                    r? */
  3063 0B:4595: 18           	clc
  3064 0B:4596: A9 FE FF     	lda	#$fffe
  3065 0B:4599: A0 13 00     	ldy	#$13
  3066 0B:459C: 77 0C        	adc	[<L89+fs_0],Y
  3067 0B:459E: 85 01        	sta	<R0
  3068 0B:45A0: A9 FF FF     	lda	#$ffff
  3069 0B:45A3: A0 15 00     	ldy	#$15
  3070 0B:45A6: 77 0C        	adc	[<L89+fs_0],Y
  3071 0B:45A8: 85 03        	sta	<R0+2
  3072 0B:45AA: A5 10        	lda	<L89+clst_0
  3073 0B:45AC: C5 01        	cmp	<R0
  3074 0B:45AE: A5 12        	lda	<L89+clst_0+2
  3075 0B:45B0: E5 03        	sbc	<R0+2
  3076 0B:45B2: B0 03        	bcs	L92
  3077 0B:45B4: 82 19 00     	brl	L10026
  3078                        L92:
  3079                        	.line	1198
  3080 0B:45B7: A9 00 00     	lda	#$0
  3081 0B:45BA: AA           	tax
  3082 0B:45BB: A9 00 00     	lda	#$0
  3083                        L93:
  3084 0B:45BE: A8           	tay
  3085 0B:45BF: A5 0A        	lda	<L89+2
  3086 0B:45C1: 85 12        	sta	<L89+2+8
  3087 0B:45C3: A5 09        	lda	<L89+1
  3088 0B:45C5: 85 11        	sta	<L89+1+8
  3089 0B:45C7: 2B           	pld
  3090 0B:45C8: 3B           	tsc
  3091 0B:45C9: 18           	clc
  3092 0B:45CA: 69 10 00     	adc	#L89+8
  3093 0B:45CD: 1B           	tcs
  3094 0B:45CE: 98           	tya
  3095 0B:45CF: 6B           	rtl
  3096                        ;	return fs->database + (LBA_t) fs->csize * clst; 
                    /* Start sector number of the cluster */
  3097                        L10026:
  3098                        	.line	1199
  3099 0B:45D0: A0 00 00     	ldy	#$0
  3100 0B:45D3: 5A           	phy
  3101 0B:45D4: A0 09 00     	ldy	#$9
  3102 0B:45D7: B7 0C        	lda	[<L89+fs_0],Y
  3103 0B:45D9: 7A           	ply
  3104 0B:45DA: 2A           	rol	A
  3105 0B:45DB: 6A           	ror	A
  3106 0B:45DC: 10 01        	bpl	L94
  3107 0B:45DE: 88           	dey
  3108                        L94:
  3109 0B:45DF: 85 01        	sta	<R0
  3110 0B:45E1: 84 03        	sty	<R0+2
  3111 0B:45E3: D4 12        	pei	<L89+clst_0+2
  3112 0B:45E5: D4 10        	pei	<L89+clst_0
  3113 0B:45E7: D4 03        	pei	<R0+2
  3114 0B:45E9: D4 01        	pei	<R0
  Fri Jul 16 2021 14:42                                                Page 67


  3115                        	xref	~~~lmul
  3116 0B:45EB: 22 xx xx xx  	jsl	~~~lmul
  3117 0B:45EF: 85 01        	sta	<R0
  3118 0B:45F1: 86 03        	stx	<R0+2
  3119 0B:45F3: 18           	clc
  3120 0B:45F4: A5 01        	lda	<R0
  3121 0B:45F6: A0 27 00     	ldy	#$27
  3122 0B:45F9: 77 0C        	adc	[<L89+fs_0],Y
  3123 0B:45FB: 85 05        	sta	<R1
  3124 0B:45FD: A5 03        	lda	<R0+2
  3125 0B:45FF: A0 29 00     	ldy	#$29
  3126 0B:4602: 77 0C        	adc	[<L89+fs_0],Y
  3127 0B:4604: 85 07        	sta	<R1+2
  3128 0B:4606: A6 07        	ldx	<R1+2
  3129 0B:4608: A5 05        	lda	<R1
  3130 0B:460A: 82 B1 FF     	brl	L93
  3131                        ;}
  3132                        	.line	1200
  3133                        	.endblock	1200
  3134             00000008   L89	equ	8
  3135             00000009   L90	equ	9
  3136 0B:460D:              	ends
  3137                        	efunc
  3138                        	.endfunc	1200,9,8
  3139                        	.line	1200
  3140                        ;
  3141                        ;/*-----------------------------------------------
                    ------------------------*/
  3142                        ;/* FAT access - Read value of a FAT entry        
                                            */
  3143                        ;/*-----------------------------------------------
                    ------------------------*/
  3144                        ;
  3145                        ;static DWORD get_fat( /* 0xFFFFFFFF:Disk error, 1
                    :Internal error, 2..0x7FFFFFFF:Cluster status */
  3146                        ;FFOBJID* obj, /* Corresponding object */
  3147                        ;DWORD clst /* Cluster number to get the value */
  3148                        ;)
  3149                        ;{
  3150                        	.line	1206
  3151                        	.line	1210
  3152                        	FFDOS
  3153                        	func
  3154                        	.function	1210
  3155                        ~~get_fat:
  3156                        	longa	on
  3157                        	longi	on
  3158 0B:460D: 3B           	tsc
  3159 0B:460E: 38           	sec
  3160 0B:460F: E9 1E 00     	sbc	#L95
  3161 0B:4612: 1B           	tcs
  3162 0B:4613: 0B           	phd
  3163 0B:4614: 5B           	tcd
  3164             00000004   obj_0	set	4
  3165             00000008   clst_0	set	8
  3166                        	.block	1210
  3167                        ;	UINT wc, bc;
  3168                        ;	DWORD val;
  Fri Jul 16 2021 14:42                                                Page 68


  3169                        ;	FATFS *fs = obj->fs;
  3170                        ;	WORD rv;
  3171                        ;	UCHAR *p;
  3172                        ;	////k_debug_long("get_fat::clst:",clst);
  3173                        ;
  3174                        ;	if (clst < 2 || clst >= fs->n_fatent)
  3175             00000000   wc_1	set	0
  3176             00000002   bc_1	set	2
  3177             00000004   val_1	set	4
  3178             00000008   fs_1	set	8
  3179             0000000C   rv_1	set	12
  3180             0000000E   p_1	set	14
  3181                        	.sym	wc,0,16,1,16
  3182                        	.sym	bc,2,16,1,16
  3183                        	.sym	val,4,18,1,32
  3184                        	.sym	fs,8,138,1,32,49
  3185                        	.sym	rv,12,5,1,16
  3186                        	.sym	p,14,142,1,32
  3187                        	.sym	obj,4,138,6,32,50
  3188                        	.sym	clst,8,18,6,32
  3189 0B:4615: A7 22        	lda	[<L95+obj_0]
  3190 0B:4617: 85 15        	sta	<L96+fs_1
  3191 0B:4619: A0 02 00     	ldy	#$2
  3192 0B:461C: B7 22        	lda	[<L95+obj_0],Y
  3193 0B:461E: 85 17        	sta	<L96+fs_1+2
  3194                        	.line	1218
  3195                        ;	{ /* Check if in valid range */
  3196 0B:4620: A5 26        	lda	<L95+clst_0
  3197 0B:4622: C9 02 00     	cmp	#<$2
  3198 0B:4625: A5 28        	lda	<L95+clst_0+2
  3199 0B:4627: E9 00 00     	sbc	#^$2
  3200 0B:462A: B0 03        	bcs	L99
  3201 0B:462C: 82 13 00     	brl	L98
  3202                        L99:
  3203 0B:462F: A5 26        	lda	<L95+clst_0
  3204 0B:4631: A0 13 00     	ldy	#$13
  3205 0B:4634: D7 15        	cmp	[<L96+fs_1],Y
  3206 0B:4636: A5 28        	lda	<L95+clst_0+2
  3207 0B:4638: A0 15 00     	ldy	#$15
  3208 0B:463B: F7 15        	sbc	[<L96+fs_1],Y
  3209 0B:463D: B0 03        	bcs	L100
  3210 0B:463F: 82 0D 00     	brl	L10027
  3211                        L100:
  3212                        L98:
  3213                        	.line	1219
  3214                        ;		val = 1; /* Internal error */
  3215                        	.line	1220
  3216 0B:4642: A9 01 00     	lda	#$1
  3217 0B:4645: 85 11        	sta	<L96+val_1
  3218 0B:4647: A9 00 00     	lda	#$0
  3219 0B:464A: 85 13        	sta	<L96+val_1+2
  3220                        ;
  3221                        ;	}
  3222                        	.line	1222
  3223                        ;	else
  3224 0B:464C: 82 18 02     	brl	L10028
  3225                        L10027:
  3226                        ;	{
  Fri Jul 16 2021 14:42                                                Page 69


  3227                        	.line	1224
  3228                        ;		val = 0xFFFFFFFF; /* Default value fails
                     on disk error */
  3229                        	.line	1225
  3230 0B:464F: A9 FF FF     	lda	#$ffff
  3231 0B:4652: 85 11        	sta	<L96+val_1
  3232 0B:4654: A9 FF FF     	lda	#$ffff
  3233 0B:4657: 85 13        	sta	<L96+val_1+2
  3234                        ;
  3235                        ;		//////k_debug_long("get_fat::fs->fs_type
                    :",fs->fs_type);
  3236                        ;
  3237                        ;		switch (fs->fs_type)
  3238                        	.line	1229
  3239 0B:4659: A7 15        	lda	[<L96+fs_1]
  3240 0B:465B: 29 FF 00     	and	#$ff
  3241 0B:465E: 82 F2 01     	brl	L10029
  3242                        ;		{
  3243                        	.line	1230
  3244                        ;		case FS_FAT12:
  3245                        	.line	1231
  3246                        L10031:
  3247                        ;			bc = (UINT) clst;
  3248                        	.line	1232
  3249 0B:4661: A5 26        	lda	<L95+clst_0
  3250 0B:4663: 85 0F        	sta	<L96+bc_1
  3251                        ;			bc += bc / 2;
  3252                        	.line	1233
  3253 0B:4665: A5 0F        	lda	<L96+bc_1
  3254 0B:4667: 4A           	lsr	A
  3255 0B:4668: 85 01        	sta	<R0
  3256 0B:466A: 18           	clc
  3257 0B:466B: A5 01        	lda	<R0
  3258 0B:466D: 65 0F        	adc	<L96+bc_1
  3259 0B:466F: 85 0F        	sta	<L96+bc_1
  3260                        ;			if (move_window(fs, fs->fatbase 
                    + (bc / SS(fs))) != FR_OK)
  3261                        	.line	1234
  3262                        ;				break;
  3263 0B:4671: A5 0F        	lda	<L96+bc_1
  3264 0B:4673: A2 09 00     	ldx	#<$9
  3265                        	xref	~~~lsr
  3266 0B:4676: 22 xx xx xx  	jsl	~~~lsr
  3267 0B:467A: 85 01        	sta	<R0
  3268 0B:467C: A5 01        	lda	<R0
  3269 0B:467E: 85 01        	sta	<R0
  3270 0B:4680: 64 03        	stz	<R0+2
  3271 0B:4682: 18           	clc
  3272 0B:4683: A5 01        	lda	<R0
  3273 0B:4685: A0 1F 00     	ldy	#$1f
  3274 0B:4688: 77 15        	adc	[<L96+fs_1],Y
  3275 0B:468A: 85 05        	sta	<R1
  3276 0B:468C: A5 03        	lda	<R0+2
  3277 0B:468E: A0 21 00     	ldy	#$21
  3278 0B:4691: 77 15        	adc	[<L96+fs_1],Y
  3279 0B:4693: 85 07        	sta	<R1+2
  3280 0B:4695: D4 07        	pei	<R1+2
  3281 0B:4697: D4 05        	pei	<R1
  Fri Jul 16 2021 14:42                                                Page 70


  3282 0B:4699: D4 17        	pei	<L96+fs_1+2
  3283 0B:469B: D4 15        	pei	<L96+fs_1
  3284 0B:469D: 22 7A 43 0B  	jsl	~~move_window
  3285 0B:46A1: AA           	tax
  3286 0B:46A2: F0 03        	beq	L101
  3287 0B:46A4: 82 C0 01     	brl	L10030
  3288                        L101:
  3289                        ;			wc = fs->win[bc++ % SS(fs)]; /* 
                    Get 1st byte of the entry */
  3290                        	.line	1236
  3291 0B:46A7: A5 0F        	lda	<L96+bc_1
  3292 0B:46A9: 29 FF 01     	and	#<$1ff
  3293 0B:46AC: 85 01        	sta	<R0
  3294 0B:46AE: 18           	clc
  3295 0B:46AF: A9 2F 00     	lda	#$2f
  3296 0B:46B2: 65 01        	adc	<R0
  3297 0B:46B4: 85 05        	sta	<R1
  3298 0B:46B6: A4 05        	ldy	<R1
  3299 0B:46B8: B7 15        	lda	[<L96+fs_1],Y
  3300 0B:46BA: 29 FF 00     	and	#$ff
  3301 0B:46BD: 85 0D        	sta	<L96+wc_1
  3302 0B:46BF: E6 0F        	inc	<L96+bc_1
  3303                        ;			if (move_window(fs, fs->fatbase 
                    + (bc / SS(fs))) != FR_OK)
  3304                        	.line	1237
  3305                        ;				break;
  3306 0B:46C1: A5 0F        	lda	<L96+bc_1
  3307 0B:46C3: A2 09 00     	ldx	#<$9
  3308                        	xref	~~~lsr
  3309 0B:46C6: 22 xx xx xx  	jsl	~~~lsr
  3310 0B:46CA: 85 01        	sta	<R0
  3311 0B:46CC: A5 01        	lda	<R0
  3312 0B:46CE: 85 01        	sta	<R0
  3313 0B:46D0: 64 03        	stz	<R0+2
  3314 0B:46D2: 18           	clc
  3315 0B:46D3: A5 01        	lda	<R0
  3316 0B:46D5: A0 1F 00     	ldy	#$1f
  3317 0B:46D8: 77 15        	adc	[<L96+fs_1],Y
  3318 0B:46DA: 85 05        	sta	<R1
  3319 0B:46DC: A5 03        	lda	<R0+2
  3320 0B:46DE: A0 21 00     	ldy	#$21
  3321 0B:46E1: 77 15        	adc	[<L96+fs_1],Y
  3322 0B:46E3: 85 07        	sta	<R1+2
  3323 0B:46E5: D4 07        	pei	<R1+2
  3324 0B:46E7: D4 05        	pei	<R1
  3325 0B:46E9: D4 17        	pei	<L96+fs_1+2
  3326 0B:46EB: D4 15        	pei	<L96+fs_1
  3327 0B:46ED: 22 7A 43 0B  	jsl	~~move_window
  3328 0B:46F1: AA           	tax
  3329 0B:46F2: F0 03        	beq	L102
  3330 0B:46F4: 82 70 01     	brl	L10030
  3331                        L102:
  3332                        ;			wc |= fs->win[bc % SS(fs)] << 8;
                     /* Merge 2nd byte of the entry */
  3333                        	.line	1239
  3334 0B:46F7: A5 0F        	lda	<L96+bc_1
  3335 0B:46F9: 29 FF 01     	and	#<$1ff
  3336 0B:46FC: 85 05        	sta	<R1
  Fri Jul 16 2021 14:42                                                Page 71


  3337 0B:46FE: 18           	clc
  3338 0B:46FF: A9 2F 00     	lda	#$2f
  3339 0B:4702: 65 05        	adc	<R1
  3340 0B:4704: 85 09        	sta	<R2
  3341 0B:4706: A4 09        	ldy	<R2
  3342 0B:4708: B7 15        	lda	[<L96+fs_1],Y
  3343 0B:470A: 29 FF 00     	and	#$ff
  3344 0B:470D: 85 05        	sta	<R1
  3345 0B:470F: A5 05        	lda	<R1
  3346 0B:4711: EB           	xba
  3347 0B:4712: 29 00 FF     	and	#$ff00
  3348 0B:4715: 85 01        	sta	<R0
  3349 0B:4717: A5 01        	lda	<R0
  3350 0B:4719: 04 0D        	tsb	<L96+wc_1
  3351                        ;			val = (clst & 1) ? (wc >> 4) : (
                    wc & 0xFFF); /* Adjust bit position */
  3352                        	.line	1240
  3353 0B:471B: A5 26        	lda	<L95+clst_0
  3354 0B:471D: 29 01 00     	and	#<$1
  3355 0B:4720: D0 03        	bne	L104
  3356 0B:4722: 82 0C 00     	brl	L103
  3357                        L104:
  3358 0B:4725: A5 0D        	lda	<L96+wc_1
  3359 0B:4727: 4A           	lsr	A
  3360 0B:4728: 4A           	lsr	A
  3361 0B:4729: 4A           	lsr	A
  3362 0B:472A: 4A           	lsr	A
  3363 0B:472B: 85 01        	sta	<R0
  3364 0B:472D: A5 01        	lda	<R0
  3365 0B:472F: 80 09        	bra	L105
  3366                        L103:
  3367 0B:4731: A5 0D        	lda	<L96+wc_1
  3368 0B:4733: 29 FF 0F     	and	#<$fff
  3369 0B:4736: 85 01        	sta	<R0
  3370 0B:4738: A5 01        	lda	<R0
  3371                        L105:
  3372 0B:473A: 85 01        	sta	<R0
  3373 0B:473C: A5 01        	lda	<R0
  3374 0B:473E: 85 11        	sta	<L96+val_1
  3375 0B:4740: 64 13        	stz	<L96+val_1+2
  3376                        ;			break;
  3377                        	.line	1241
  3378 0B:4742: 82 22 01     	brl	L10030
  3379                        ;
  3380                        ;		case FS_FAT16:
  3381                        	.line	1243
  3382                        L10032:
  3383                        ;			if (move_window(fs, fs->fatbase 
                    + (clst / (SS(fs) / 2))) != FR_OK)
  3384                        	.line	1244
  3385                        ;				break;
  3386 0B:4745: D4 28        	pei	<L95+clst_0+2
  3387 0B:4747: D4 26        	pei	<L95+clst_0
  3388 0B:4749: A9 08 00     	lda	#$8
  3389                        	xref	~~~llsr
  3390 0B:474C: 22 xx xx xx  	jsl	~~~llsr
  3391 0B:4750: 85 01        	sta	<R0
  3392 0B:4752: 86 03        	stx	<R0+2
  Fri Jul 16 2021 14:42                                                Page 72


  3393 0B:4754: 18           	clc
  3394 0B:4755: A5 01        	lda	<R0
  3395 0B:4757: A0 1F 00     	ldy	#$1f
  3396 0B:475A: 77 15        	adc	[<L96+fs_1],Y
  3397 0B:475C: 85 05        	sta	<R1
  3398 0B:475E: A5 03        	lda	<R0+2
  3399 0B:4760: A0 21 00     	ldy	#$21
  3400 0B:4763: 77 15        	adc	[<L96+fs_1],Y
  3401 0B:4765: 85 07        	sta	<R1+2
  3402 0B:4767: D4 07        	pei	<R1+2
  3403 0B:4769: D4 05        	pei	<R1
  3404 0B:476B: D4 17        	pei	<L96+fs_1+2
  3405 0B:476D: D4 15        	pei	<L96+fs_1
  3406 0B:476F: 22 7A 43 0B  	jsl	~~move_window
  3407 0B:4773: AA           	tax
  3408 0B:4774: F0 03        	beq	L106
  3409 0B:4776: 82 EE 00     	brl	L10030
  3410                        L106:
  3411                        ;
  3412                        ;			////k_debug_byte_array("fs->win:
                    ",fs->win,512);
  3413                        ;
  3414                        ;			////k_debug_long("fs->win:offset
                    :",(clst * 2 % SS(fs)) );
  3415                        ;
  3416                        ;			////k_debug_byte_array("fs->win:
                    ",(LPSTR)(fs->win + clst * 2 % SS(fs)),4);
  3417                        ;
  3418                        ;			val = ld_word(fs->win + clst * 2
                     % SS(fs)); /* Simple WORD array */
  3419                        	.line	1253
  3420 0B:4779: A5 26        	lda	<L95+clst_0
  3421 0B:477B: 85 01        	sta	<R0
  3422 0B:477D: A5 28        	lda	<L95+clst_0+2
  3423 0B:477F: 85 03        	sta	<R0+2
  3424 0B:4781: 06 01        	asl	<R0
  3425 0B:4783: 26 03        	rol	<R0+2
  3426 0B:4785: A5 01        	lda	<R0
  3427 0B:4787: 29 FF 01     	and	#<$1ff
  3428 0B:478A: 85 05        	sta	<R1
  3429 0B:478C: 64 07        	stz	<R1+2
  3430 0B:478E: 18           	clc
  3431 0B:478F: A9 2F 00     	lda	#$2f
  3432 0B:4792: 65 05        	adc	<R1
  3433 0B:4794: 85 01        	sta	<R0
  3434 0B:4796: A9 00 00     	lda	#$0
  3435 0B:4799: 65 07        	adc	<R1+2
  3436 0B:479B: 85 03        	sta	<R0+2
  3437 0B:479D: 18           	clc
  3438 0B:479E: A5 15        	lda	<L96+fs_1
  3439 0B:47A0: 65 01        	adc	<R0
  3440 0B:47A2: 85 05        	sta	<R1
  3441 0B:47A4: A5 17        	lda	<L96+fs_1+2
  3442 0B:47A6: 65 03        	adc	<R0+2
  3443 0B:47A8: 85 07        	sta	<R1+2
  3444 0B:47AA: D4 07        	pei	<R1+2
  3445 0B:47AC: D4 05        	pei	<R1
  3446 0B:47AE: 22 80 3F 0B  	jsl	~~ld_word
  Fri Jul 16 2021 14:42                                                Page 73


  3447 0B:47B2: 85 09        	sta	<R2
  3448 0B:47B4: A0 00 00     	ldy	#$0
  3449 0B:47B7: A5 09        	lda	<R2
  3450 0B:47B9: 10 01        	bpl	L107
  3451 0B:47BB: 88           	dey
  3452                        L107:
  3453 0B:47BC: 85 11        	sta	<L96+val_1
  3454 0B:47BE: 84 13        	sty	<L96+val_1+2
  3455                        ;
  3456                        ;			/*
  3457                        ;			p = ((UCHAR*)((ULONG)fs->win + (
                    ULONG)clst * 2L % ((ULONG)SS(fs)) ));
  3458                        ;
  3459                        ;
  3460                        ;			rv = p[1];
  3461                        ;			////k_debug_integer("rv::1:", rv
                    );
  3462                        ;			rv = rv << 8 | p[0];
  3463                        ;			////k_debug_integer("rv::2:", rv
                    );
  3464                        ;
  3465                        ;			////////k_debug_integer("ld_word
                    ::after:", rv);
  3466                        ;
  3467                        ;
  3468                        ;			val = ld_word((ULONG)fs->win + (
                    ULONG)clst * 2L % ((ULONG)SS(fs)) );
  3469                        ;
  3470                        ;			//val = (DWORD)(fs->win + clst *
                     2 % SS(fs));
  3471                        ;
  3472                        ;			//////k_debug_long("get_fat::val
                    :FS_FAT16:fs->win+...:", (fs->win + clst * 2 % SS(fs)) );
  3473                        ;			//////k_debug_long("get_fat::val
                    :FS_FAT16:ld_word:",ld_word(fs->win + clst * 2 % SS(fs)));
  3474                        ;			//////k_debug_long("get_fat::val
                    :FS_FAT16:ld_dword:",ld_dword(fs->win + clst * 2 % SS(fs)));
  3475                        ;			*/
  3476                        ;
  3477                        ;			break;
  3478                        	.line	1276
  3479 0B:47C0: 82 A4 00     	brl	L10030
  3480                        ;
  3481                        ;		case FS_FAT32:
  3482                        	.line	1278
  3483                        L10033:
  3484                        ;			if (move_window(fs, fs->fatbase 
                    + (clst / (SS(fs) / 4))) != FR_OK)
  3485                        	.line	1279
  3486                        ;				break;
  3487 0B:47C3: D4 28        	pei	<L95+clst_0+2
  3488 0B:47C5: D4 26        	pei	<L95+clst_0
  3489 0B:47C7: A9 07 00     	lda	#$7
  3490                        	xref	~~~llsr
  3491 0B:47CA: 22 xx xx xx  	jsl	~~~llsr
  3492 0B:47CE: 85 01        	sta	<R0
  3493 0B:47D0: 86 03        	stx	<R0+2
  3494 0B:47D2: 18           	clc
  Fri Jul 16 2021 14:42                                                Page 74


  3495 0B:47D3: A5 01        	lda	<R0
  3496 0B:47D5: A0 1F 00     	ldy	#$1f
  3497 0B:47D8: 77 15        	adc	[<L96+fs_1],Y
  3498 0B:47DA: 85 05        	sta	<R1
  3499 0B:47DC: A5 03        	lda	<R0+2
  3500 0B:47DE: A0 21 00     	ldy	#$21
  3501 0B:47E1: 77 15        	adc	[<L96+fs_1],Y
  3502 0B:47E3: 85 07        	sta	<R1+2
  3503 0B:47E5: D4 07        	pei	<R1+2
  3504 0B:47E7: D4 05        	pei	<R1
  3505 0B:47E9: D4 17        	pei	<L96+fs_1+2
  3506 0B:47EB: D4 15        	pei	<L96+fs_1
  3507 0B:47ED: 22 7A 43 0B  	jsl	~~move_window
  3508 0B:47F1: AA           	tax
  3509 0B:47F2: F0 03        	beq	L108
  3510 0B:47F4: 82 70 00     	brl	L10030
  3511                        L108:
  3512                        ;			val = ld_dword(fs->win + clst * 
                    4 % SS(fs)) & 0x0FFFFFFF; /* Simple DWORD array but mask out
                     upper 4 bits */
  3513                        	.line	1281
  3514 0B:47F7: A5 26        	lda	<L95+clst_0
  3515 0B:47F9: 85 01        	sta	<R0
  3516 0B:47FB: A5 28        	lda	<L95+clst_0+2
  3517 0B:47FD: 85 03        	sta	<R0+2
  3518 0B:47FF: 06 01        	asl	<R0
  3519 0B:4801: 26 03        	rol	<R0+2
  3520 0B:4803: 06 01        	asl	<R0
  3521 0B:4805: 26 03        	rol	<R0+2
  3522 0B:4807: A5 01        	lda	<R0
  3523 0B:4809: 29 FF 01     	and	#<$1ff
  3524 0B:480C: 85 05        	sta	<R1
  3525 0B:480E: 64 07        	stz	<R1+2
  3526 0B:4810: 18           	clc
  3527 0B:4811: A9 2F 00     	lda	#$2f
  3528 0B:4814: 65 05        	adc	<R1
  3529 0B:4816: 85 01        	sta	<R0
  3530 0B:4818: A9 00 00     	lda	#$0
  3531 0B:481B: 65 07        	adc	<R1+2
  3532 0B:481D: 85 03        	sta	<R0+2
  3533 0B:481F: 18           	clc
  3534 0B:4820: A5 15        	lda	<L96+fs_1
  3535 0B:4822: 65 01        	adc	<R0
  3536 0B:4824: 85 05        	sta	<R1
  3537 0B:4826: A5 17        	lda	<L96+fs_1+2
  3538 0B:4828: 65 03        	adc	<R0+2
  3539 0B:482A: 85 07        	sta	<R1+2
  3540 0B:482C: D4 07        	pei	<R1+2
  3541 0B:482E: D4 05        	pei	<R1
  3542 0B:4830: 22 BB 3F 0B  	jsl	~~ld_dword
  3543 0B:4834: 85 09        	sta	<R2
  3544 0B:4836: 86 0B        	stx	<R2+2
  3545 0B:4838: A5 09        	lda	<R2
  3546 0B:483A: 85 11        	sta	<L96+val_1
  3547 0B:483C: A5 0B        	lda	<R2+2
  3548 0B:483E: 29 FF 0F     	and	#^$fffffff
  3549 0B:4841: 85 13        	sta	<L96+val_1+2
  3550                        ;			break;
  Fri Jul 16 2021 14:42                                                Page 75


  3551                        	.line	1282
  3552 0B:4843: 82 21 00     	brl	L10030
  3553                        ;#if FF_FS_EXFAT
  3554                        ;			case FS_EXFAT :
  3555                        ;			if ((obj->objsize != 0 && obj->s
                    clust != 0) || obj->stat == 0)
  3556                        ;			{ /* Object except root dir must
                     have valid data length */
  3557                        ;				DWORD cofs = clst - obj-
                    >sclust; /* Offset from start cluster */
  3558                        ;				DWORD clen = (DWORD)((LB
                    A_t)((obj->objsize - 1) / SS(fs)) / fs->csize); /* Number of
                     clusters - 1 */
  3559                        ;
  3560                        ;				if (obj->stat == 2 && co
                    fs <= clen)
  3561                        ;				{ /* Is it a contiguous 
                    chain? */
  3562                        ;					val = (cofs == c
                    len) ? 0x7FFFFFFF : clst + 1; /* No data on the FAT, generat
                    e the value */
  3563                        ;					break;
  3564                        ;				}
  3565                        ;				if (obj->stat == 3 && co
                    fs < obj->n_cont)
  3566                        ;				{ /* Is it in the 1st fr
                    agment? */
  3567                        ;					val = clst + 1; 
                    /* Generate the value */
  3568                        ;					break;
  3569                        ;				}
  3570                        ;				if (obj->stat != 2)
  3571                        ;				{ /* Get value from FAT 
                    if FAT chain is valid */
  3572                        ;					if (obj->n_frag 
                    != 0)
  3573                        ;					{ /* Is it on th
                    e growing edge? */
  3574                        ;						val = 0x
                    7FFFFFFF; /* Generate EOC */
  3575                        ;					}
  3576                        ;					else
  3577                        ;					{
  3578                        ;						if (move
                    _window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) b
                    reak;
  3579                        ;						val = ld
                    _dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
  3580                        ;					}
  3581                        ;					break;
  3582                        ;				}
  3583                        ;			}
  3584                        ;			/* go to default */
  3585                        ;#endif
  3586                        ;		default:
  3587                        	.line	1316
  3588                        L10034:
  3589                        ;			val = 1; /* Internal error */
  Fri Jul 16 2021 14:42                                                Page 76


  3590                        	.line	1317
  3591 0B:4846: A9 01 00     	lda	#$1
  3592 0B:4849: 85 11        	sta	<L96+val_1
  3593 0B:484B: A9 00 00     	lda	#$0
  3594 0B:484E: 85 13        	sta	<L96+val_1+2
  3595                        ;		}
  3596                        	.line	1318
  3597 0B:4850: 82 14 00     	brl	L10030
  3598                        L10029:
  3599                        	xref	~~~swt
  3600 0B:4853: 22 xx xx xx  	jsl	~~~swt
  3601 0B:4857: 03 00        	dw	3
  3602 0B:4859: 01 00        	dw	1
  3603 0B:485B: 60 46        	dw	L10031-1
  3604 0B:485D: 02 00        	dw	2
  3605 0B:485F: 44 47        	dw	L10032-1
  3606 0B:4861: 03 00        	dw	3
  3607 0B:4863: C2 47        	dw	L10033-1
  3608 0B:4865: 45 48        	dw	L10034-1
  3609                        L10030:
  3610                        ;	}
  3611                        	.line	1319
  3612                        L10028:
  3613                        ;
  3614                        ;	//////k_debug_long("get_fat::val:",val);
  3615                        ;
  3616                        ;	return val;
  3617                        	.line	1323
  3618 0B:4867: A6 13        	ldx	<L96+val_1+2
  3619 0B:4869: A5 11        	lda	<L96+val_1
  3620                        L109:
  3621 0B:486B: A8           	tay
  3622 0B:486C: A5 20        	lda	<L95+2
  3623 0B:486E: 85 28        	sta	<L95+2+8
  3624 0B:4870: A5 1F        	lda	<L95+1
  3625 0B:4872: 85 27        	sta	<L95+1+8
  3626 0B:4874: 2B           	pld
  3627 0B:4875: 3B           	tsc
  3628 0B:4876: 18           	clc
  3629 0B:4877: 69 26 00     	adc	#L95+8
  3630 0B:487A: 1B           	tcs
  3631 0B:487B: 98           	tya
  3632 0B:487C: 6B           	rtl
  3633                        ;}
  3634                        	.line	1324
  3635                        	.endblock	1324
  3636             0000001E   L95	equ	30
  3637             0000000D   L96	equ	13
  3638 0B:487D:              	ends
  3639                        	efunc
  3640                        	.endfunc	1324,13,30
  3641                        	.line	1324
  3642                        ;
  3643                        ;#if !FF_FS_READONLY
  3644                        ;/*-----------------------------------------------
                    ------------------------*/
  3645                        ;/* FAT access - Change value of a FAT entry      
                                            */
  Fri Jul 16 2021 14:42                                                Page 77


  3646                        ;/*-----------------------------------------------
                    ------------------------*/
  3647                        ;
  3648                        ;static FRESULT put_fat( /* FR_OK(0):succeeded, !=
                    0:error */
  3649                        ;FATFS* fs, /* Corresponding filesystem object */
  3650                        ;DWORD clst, /* FAT index number (cluster number) 
                    to be changed */
  3651                        ;DWORD val /* New value to be set to the entry */
  3652                        ;)
  3653                        ;{
  3654                        	.line	1331
  3655                        	.line	1336
  3656                        	FFDOS
  3657                        	func
  3658                        	.function	1336
  3659                        ~~put_fat:
  3660                        	longa	on
  3661                        	longi	on
  3662 0B:487D: 3B           	tsc
  3663 0B:487E: 38           	sec
  3664 0B:487F: E9 18 00     	sbc	#L110
  3665 0B:4882: 1B           	tcs
  3666 0B:4883: 0B           	phd
  3667 0B:4884: 5B           	tcd
  3668             00000004   fs_0	set	4
  3669             00000008   clst_0	set	8
  3670             0000000C   val_0	set	12
  3671                        	.block	1336
  3672                        ;	UINT bc;
  3673                        ;	BYTE *p;
  3674                        ;	FRESULT res = FR_INT_ERR;
  3675                        ;
  3676                        ;	if (clst >= 2 && clst < fs->n_fatent)
  3677             00000000   bc_1	set	0
  3678             00000002   p_1	set	2
  3679             00000006   res_1	set	6
  3680                        	.sym	bc,0,16,1,16
  3681                        	.sym	p,2,142,1,32
  3682                        	.sym	res,6,5,1,16
  3683                        	.sym	fs,4,138,6,32,49
  3684                        	.sym	clst,8,18,6,32
  3685                        	.sym	val,12,18,6,32
  3686 0B:4885: A9 02 00     	lda	#$2
  3687 0B:4888: 85 17        	sta	<L111+res_1
  3688                        	.line	1341
  3689                        ;	{ /* Check if in valid range */
  3690 0B:488A: A5 20        	lda	<L110+clst_0
  3691 0B:488C: C9 02 00     	cmp	#<$2
  3692 0B:488F: A5 22        	lda	<L110+clst_0+2
  3693 0B:4891: E9 00 00     	sbc	#^$2
  3694 0B:4894: B0 03        	bcs	L113
  3695 0B:4896: 82 16 03     	brl	L10035
  3696                        L113:
  3697 0B:4899: A5 20        	lda	<L110+clst_0
  3698 0B:489B: A0 13 00     	ldy	#$13
  3699 0B:489E: D7 1C        	cmp	[<L110+fs_0],Y
  3700 0B:48A0: A5 22        	lda	<L110+clst_0+2
  Fri Jul 16 2021 14:42                                                Page 78


  3701 0B:48A2: A0 15 00     	ldy	#$15
  3702 0B:48A5: F7 1C        	sbc	[<L110+fs_0],Y
  3703 0B:48A7: 90 03        	bcc	L114
  3704 0B:48A9: 82 03 03     	brl	L10035
  3705                        L114:
  3706                        	.line	1342
  3707                        ;		switch (fs->fs_type)
  3708                        	.line	1343
  3709 0B:48AC: A7 1C        	lda	[<L110+fs_0]
  3710 0B:48AE: 29 FF 00     	and	#$ff
  3711 0B:48B1: 82 E7 02     	brl	L10036
  3712                        ;		{
  3713                        	.line	1344
  3714                        ;		case FS_FAT12:
  3715                        	.line	1345
  3716                        L10038:
  3717                        ;			bc = (UINT) clst;
  3718                        	.line	1346
  3719 0B:48B4: A5 20        	lda	<L110+clst_0
  3720 0B:48B6: 85 11        	sta	<L111+bc_1
  3721                        ;			bc += bc / 2; /* bc: byte offset
                     of the entry */
  3722                        	.line	1347
  3723 0B:48B8: A5 11        	lda	<L111+bc_1
  3724 0B:48BA: 4A           	lsr	A
  3725 0B:48BB: 85 01        	sta	<R0
  3726 0B:48BD: 18           	clc
  3727 0B:48BE: A5 01        	lda	<R0
  3728 0B:48C0: 65 11        	adc	<L111+bc_1
  3729 0B:48C2: 85 11        	sta	<L111+bc_1
  3730                        ;			res = move_window(fs, fs->fatbas
                    e + (bc / SS(fs)));
  3731                        	.line	1348
  3732 0B:48C4: A5 11        	lda	<L111+bc_1
  3733 0B:48C6: A2 09 00     	ldx	#<$9
  3734                        	xref	~~~lsr
  3735 0B:48C9: 22 xx xx xx  	jsl	~~~lsr
  3736 0B:48CD: 85 01        	sta	<R0
  3737 0B:48CF: A5 01        	lda	<R0
  3738 0B:48D1: 85 01        	sta	<R0
  3739 0B:48D3: 64 03        	stz	<R0+2
  3740 0B:48D5: 18           	clc
  3741 0B:48D6: A5 01        	lda	<R0
  3742 0B:48D8: A0 1F 00     	ldy	#$1f
  3743 0B:48DB: 77 1C        	adc	[<L110+fs_0],Y
  3744 0B:48DD: 85 05        	sta	<R1
  3745 0B:48DF: A5 03        	lda	<R0+2
  3746 0B:48E1: A0 21 00     	ldy	#$21
  3747 0B:48E4: 77 1C        	adc	[<L110+fs_0],Y
  3748 0B:48E6: 85 07        	sta	<R1+2
  3749 0B:48E8: D4 07        	pei	<R1+2
  3750 0B:48EA: D4 05        	pei	<R1
  3751 0B:48EC: D4 1E        	pei	<L110+fs_0+2
  3752 0B:48EE: D4 1C        	pei	<L110+fs_0
  3753 0B:48F0: 22 7A 43 0B  	jsl	~~move_window
  3754 0B:48F4: 85 17        	sta	<L111+res_1
  3755                        ;			if (res != FR_OK)
  3756                        	.line	1349
  Fri Jul 16 2021 14:42                                                Page 79


  3757                        ;				break;
  3758 0B:48F6: A5 17        	lda	<L111+res_1
  3759 0B:48F8: F0 03        	beq	L115
  3760 0B:48FA: 82 B2 02     	brl	L10037
  3761                        L115:
  3762                        ;			p = fs->win + bc++ % SS(fs);
  3763                        	.line	1351
  3764 0B:48FD: A5 11        	lda	<L111+bc_1
  3765 0B:48FF: 29 FF 01     	and	#<$1ff
  3766 0B:4902: 85 01        	sta	<R0
  3767 0B:4904: A5 01        	lda	<R0
  3768 0B:4906: 85 01        	sta	<R0
  3769 0B:4908: 64 03        	stz	<R0+2
  3770 0B:490A: 18           	clc
  3771 0B:490B: A9 2F 00     	lda	#$2f
  3772 0B:490E: 65 01        	adc	<R0
  3773 0B:4910: 85 05        	sta	<R1
  3774 0B:4912: A9 00 00     	lda	#$0
  3775 0B:4915: 65 03        	adc	<R0+2
  3776 0B:4917: 85 07        	sta	<R1+2
  3777 0B:4919: 18           	clc
  3778 0B:491A: A5 1C        	lda	<L110+fs_0
  3779 0B:491C: 65 05        	adc	<R1
  3780 0B:491E: 85 13        	sta	<L111+p_1
  3781 0B:4920: A5 1E        	lda	<L110+fs_0+2
  3782 0B:4922: 65 07        	adc	<R1+2
  3783 0B:4924: 85 15        	sta	<L111+p_1+2
  3784 0B:4926: E6 11        	inc	<L111+bc_1
  3785                        ;			*p = (clst & 1) ? ((*p & 0x0F) |
                     ((BYTE) val << 4)) : (BYTE) val; /* Update 1st byte */
  3786                        	.line	1352
  3787 0B:4928: A5 20        	lda	<L110+clst_0
  3788 0B:492A: 29 01 00     	and	#<$1
  3789 0B:492D: D0 03        	bne	L117
  3790 0B:492F: 82 1C 00     	brl	L116
  3791                        L117:
  3792 0B:4932: A7 13        	lda	[<L111+p_1]
  3793 0B:4934: 29 0F 00     	and	#<$f
  3794 0B:4937: 85 01        	sta	<R0
  3795 0B:4939: A5 24        	lda	<L110+val_0
  3796 0B:493B: 29 FF 00     	and	#$ff
  3797 0B:493E: 85 09        	sta	<R2
  3798 0B:4940: A5 09        	lda	<R2
  3799 0B:4942: 0A           	asl	A
  3800 0B:4943: 0A           	asl	A
  3801 0B:4944: 0A           	asl	A
  3802 0B:4945: 0A           	asl	A
  3803 0B:4946: 85 05        	sta	<R1
  3804 0B:4948: A5 05        	lda	<R1
  3805 0B:494A: 05 01        	ora	<R0
  3806 0B:494C: 80 05        	bra	L118
  3807                        L116:
  3808 0B:494E: A5 24        	lda	<L110+val_0
  3809 0B:4950: 29 FF 00     	and	#$ff
  3810                        L118:
  3811 0B:4953: E2 20        	sep	#$20
  3812                        	longa	off
  3813 0B:4955: 87 13        	sta	[<L111+p_1]
  Fri Jul 16 2021 14:42                                                Page 80


  3814 0B:4957: C2 20        	rep	#$20
  3815                        	longa	on
  3816                        ;			fs->wflag = 1;
  3817                        	.line	1353
  3818 0B:4959: E2 20        	sep	#$20
  3819                        	longa	off
  3820 0B:495B: A9 01        	lda	#$1
  3821 0B:495D: A0 03 00     	ldy	#$3
  3822 0B:4960: 97 1C        	sta	[<L110+fs_0],Y
  3823 0B:4962: C2 20        	rep	#$20
  3824                        	longa	on
  3825                        ;			res = move_window(fs, fs->fatbas
                    e + (bc / SS(fs)));
  3826                        	.line	1354
  3827 0B:4964: A5 11        	lda	<L111+bc_1
  3828 0B:4966: A2 09 00     	ldx	#<$9
  3829                        	xref	~~~lsr
  3830 0B:4969: 22 xx xx xx  	jsl	~~~lsr
  3831 0B:496D: 85 01        	sta	<R0
  3832 0B:496F: A5 01        	lda	<R0
  3833 0B:4971: 85 01        	sta	<R0
  3834 0B:4973: 64 03        	stz	<R0+2
  3835 0B:4975: 18           	clc
  3836 0B:4976: A5 01        	lda	<R0
  3837 0B:4978: A0 1F 00     	ldy	#$1f
  3838 0B:497B: 77 1C        	adc	[<L110+fs_0],Y
  3839 0B:497D: 85 05        	sta	<R1
  3840 0B:497F: A5 03        	lda	<R0+2
  3841 0B:4981: A0 21 00     	ldy	#$21
  3842 0B:4984: 77 1C        	adc	[<L110+fs_0],Y
  3843 0B:4986: 85 07        	sta	<R1+2
  3844 0B:4988: D4 07        	pei	<R1+2
  3845 0B:498A: D4 05        	pei	<R1
  3846 0B:498C: D4 1E        	pei	<L110+fs_0+2
  3847 0B:498E: D4 1C        	pei	<L110+fs_0
  3848 0B:4990: 22 7A 43 0B  	jsl	~~move_window
  3849 0B:4994: 85 17        	sta	<L111+res_1
  3850                        ;			if (res != FR_OK)
  3851                        	.line	1355
  3852                        ;				break;
  3853 0B:4996: A5 17        	lda	<L111+res_1
  3854 0B:4998: F0 03        	beq	L119
  3855 0B:499A: 82 12 02     	brl	L10037
  3856                        L119:
  3857                        ;			p = fs->win + bc % SS(fs);
  3858                        	.line	1357
  3859 0B:499D: A5 11        	lda	<L111+bc_1
  3860 0B:499F: 29 FF 01     	and	#<$1ff
  3861 0B:49A2: 85 01        	sta	<R0
  3862 0B:49A4: A5 01        	lda	<R0
  3863 0B:49A6: 85 01        	sta	<R0
  3864 0B:49A8: 64 03        	stz	<R0+2
  3865 0B:49AA: 18           	clc
  3866 0B:49AB: A9 2F 00     	lda	#$2f
  3867 0B:49AE: 65 01        	adc	<R0
  3868 0B:49B0: 85 05        	sta	<R1
  3869 0B:49B2: A9 00 00     	lda	#$0
  3870 0B:49B5: 65 03        	adc	<R0+2
  Fri Jul 16 2021 14:42                                                Page 81


  3871 0B:49B7: 85 07        	sta	<R1+2
  3872 0B:49B9: 18           	clc
  3873 0B:49BA: A5 1C        	lda	<L110+fs_0
  3874 0B:49BC: 65 05        	adc	<R1
  3875 0B:49BE: 85 13        	sta	<L111+p_1
  3876 0B:49C0: A5 1E        	lda	<L110+fs_0+2
  3877 0B:49C2: 65 07        	adc	<R1+2
  3878 0B:49C4: 85 15        	sta	<L111+p_1+2
  3879                        ;			*p = (clst & 1) ?
  3880                        	.line	1358
  3881                        ;					(BYTE) (val >> 4
                    ) :
  3882                        ;					((*p & 0xF0) | (
                    (BYTE) (val >> 8) & 0x0F)); /* Update 2nd byte */
  3883 0B:49C6: A5 20        	lda	<L110+clst_0
  3884 0B:49C8: 29 01 00     	and	#<$1
  3885 0B:49CB: D0 03        	bne	L121
  3886 0B:49CD: 82 1F 00     	brl	L120
  3887                        L121:
  3888 0B:49D0: A5 24        	lda	<L110+val_0
  3889 0B:49D2: 85 01        	sta	<R0
  3890 0B:49D4: A5 26        	lda	<L110+val_0+2
  3891 0B:49D6: 85 03        	sta	<R0+2
  3892 0B:49D8: 46 03        	lsr	<R0+2
  3893 0B:49DA: 66 01        	ror	<R0
  3894 0B:49DC: 46 03        	lsr	<R0+2
  3895 0B:49DE: 66 01        	ror	<R0
  3896 0B:49E0: 46 03        	lsr	<R0+2
  3897 0B:49E2: 66 01        	ror	<R0
  3898 0B:49E4: 46 03        	lsr	<R0+2
  3899 0B:49E6: 66 01        	ror	<R0
  3900 0B:49E8: A5 01        	lda	<R0
  3901 0B:49EA: 29 FF 00     	and	#$ff
  3902 0B:49ED: 80 21        	bra	L122
  3903                        L120:
  3904 0B:49EF: D4 26        	pei	<L110+val_0+2
  3905 0B:49F1: D4 24        	pei	<L110+val_0
  3906 0B:49F3: A9 08 00     	lda	#$8
  3907                        	xref	~~~llsr
  3908 0B:49F6: 22 xx xx xx  	jsl	~~~llsr
  3909 0B:49FA: 85 01        	sta	<R0
  3910 0B:49FC: 86 03        	stx	<R0+2
  3911 0B:49FE: A5 01        	lda	<R0
  3912 0B:4A00: 29 0F 00     	and	#<$f
  3913 0B:4A03: 85 05        	sta	<R1
  3914 0B:4A05: A7 13        	lda	[<L111+p_1]
  3915 0B:4A07: 29 F0 00     	and	#<$f0
  3916 0B:4A0A: 85 01        	sta	<R0
  3917 0B:4A0C: A5 01        	lda	<R0
  3918 0B:4A0E: 05 05        	ora	<R1
  3919                        L122:
  3920 0B:4A10: E2 20        	sep	#$20
  3921                        	longa	off
  3922 0B:4A12: 87 13        	sta	[<L111+p_1]
  3923 0B:4A14: C2 20        	rep	#$20
  3924                        	longa	on
  3925                        ;			fs->wflag = 1;
  3926                        	.line	1361
  Fri Jul 16 2021 14:42                                                Page 82


  3927 0B:4A16: E2 20        	sep	#$20
  3928                        	longa	off
  3929 0B:4A18: A9 01        	lda	#$1
  3930 0B:4A1A: A0 03 00     	ldy	#$3
  3931 0B:4A1D: 97 1C        	sta	[<L110+fs_0],Y
  3932 0B:4A1F: C2 20        	rep	#$20
  3933                        	longa	on
  3934                        ;			break;
  3935                        	.line	1362
  3936 0B:4A21: 82 8B 01     	brl	L10037
  3937                        ;
  3938                        ;		case FS_FAT16:
  3939                        	.line	1364
  3940                        L10039:
  3941                        ;			res = move_window(fs, fs->fatbas
                    e + (clst / (SS(fs) / 2)));
  3942                        	.line	1365
  3943 0B:4A24: D4 22        	pei	<L110+clst_0+2
  3944 0B:4A26: D4 20        	pei	<L110+clst_0
  3945 0B:4A28: A9 08 00     	lda	#$8
  3946                        	xref	~~~llsr
  3947 0B:4A2B: 22 xx xx xx  	jsl	~~~llsr
  3948 0B:4A2F: 85 01        	sta	<R0
  3949 0B:4A31: 86 03        	stx	<R0+2
  3950 0B:4A33: 18           	clc
  3951 0B:4A34: A5 01        	lda	<R0
  3952 0B:4A36: A0 1F 00     	ldy	#$1f
  3953 0B:4A39: 77 1C        	adc	[<L110+fs_0],Y
  3954 0B:4A3B: 85 05        	sta	<R1
  3955 0B:4A3D: A5 03        	lda	<R0+2
  3956 0B:4A3F: A0 21 00     	ldy	#$21
  3957 0B:4A42: 77 1C        	adc	[<L110+fs_0],Y
  3958 0B:4A44: 85 07        	sta	<R1+2
  3959 0B:4A46: D4 07        	pei	<R1+2
  3960 0B:4A48: D4 05        	pei	<R1
  3961 0B:4A4A: D4 1E        	pei	<L110+fs_0+2
  3962 0B:4A4C: D4 1C        	pei	<L110+fs_0
  3963 0B:4A4E: 22 7A 43 0B  	jsl	~~move_window
  3964 0B:4A52: 85 17        	sta	<L111+res_1
  3965                        ;			if (res != FR_OK)
  3966                        	.line	1366
  3967                        ;				break;
  3968 0B:4A54: A5 17        	lda	<L111+res_1
  3969 0B:4A56: F0 03        	beq	L123
  3970 0B:4A58: 82 54 01     	brl	L10037
  3971                        L123:
  3972                        ;			st_word(fs->win + clst * 2 % SS(
                    fs), (WORD) val); /* Simple WORD array */
  3973                        	.line	1368
  3974 0B:4A5B: D4 24        	pei	<L110+val_0
  3975 0B:4A5D: A5 20        	lda	<L110+clst_0
  3976 0B:4A5F: 85 01        	sta	<R0
  3977 0B:4A61: A5 22        	lda	<L110+clst_0+2
  3978 0B:4A63: 85 03        	sta	<R0+2
  3979 0B:4A65: 06 01        	asl	<R0
  3980 0B:4A67: 26 03        	rol	<R0+2
  3981 0B:4A69: A5 01        	lda	<R0
  3982 0B:4A6B: 29 FF 01     	and	#<$1ff
  Fri Jul 16 2021 14:42                                                Page 83


  3983 0B:4A6E: 85 05        	sta	<R1
  3984 0B:4A70: 64 07        	stz	<R1+2
  3985 0B:4A72: 18           	clc
  3986 0B:4A73: A9 2F 00     	lda	#$2f
  3987 0B:4A76: 65 05        	adc	<R1
  3988 0B:4A78: 85 01        	sta	<R0
  3989 0B:4A7A: A9 00 00     	lda	#$0
  3990 0B:4A7D: 65 07        	adc	<R1+2
  3991 0B:4A7F: 85 03        	sta	<R0+2
  3992 0B:4A81: 18           	clc
  3993 0B:4A82: A5 1C        	lda	<L110+fs_0
  3994 0B:4A84: 65 01        	adc	<R0
  3995 0B:4A86: 85 05        	sta	<R1
  3996 0B:4A88: A5 1E        	lda	<L110+fs_0+2
  3997 0B:4A8A: 65 03        	adc	<R0+2
  3998 0B:4A8C: 85 07        	sta	<R1+2
  3999 0B:4A8E: D4 07        	pei	<R1+2
  4000 0B:4A90: D4 05        	pei	<R1
  4001 0B:4A92: 22 57 40 0B  	jsl	~~st_word
  4002                        ;			fs->wflag = 1;
  4003                        	.line	1369
  4004 0B:4A96: E2 20        	sep	#$20
  4005                        	longa	off
  4006 0B:4A98: A9 01        	lda	#$1
  4007 0B:4A9A: A0 03 00     	ldy	#$3
  4008 0B:4A9D: 97 1C        	sta	[<L110+fs_0],Y
  4009 0B:4A9F: C2 20        	rep	#$20
  4010                        	longa	on
  4011                        ;			break;
  4012                        	.line	1370
  4013 0B:4AA1: 82 0B 01     	brl	L10037
  4014                        ;
  4015                        ;		case FS_FAT32:
  4016                        	.line	1372
  4017                        L10040:
  4018                        ;#if FF_FS_EXFAT
  4019                        ;			case FS_EXFAT :
  4020                        ;#endif
  4021                        ;			res = move_window(fs, fs->fatbas
                    e + (clst / (SS(fs) / 4)));
  4022                        	.line	1376
  4023 0B:4AA4: D4 22        	pei	<L110+clst_0+2
  4024 0B:4AA6: D4 20        	pei	<L110+clst_0
  4025 0B:4AA8: A9 07 00     	lda	#$7
  4026                        	xref	~~~llsr
  4027 0B:4AAB: 22 xx xx xx  	jsl	~~~llsr
  4028 0B:4AAF: 85 01        	sta	<R0
  4029 0B:4AB1: 86 03        	stx	<R0+2
  4030 0B:4AB3: 18           	clc
  4031 0B:4AB4: A5 01        	lda	<R0
  4032 0B:4AB6: A0 1F 00     	ldy	#$1f
  4033 0B:4AB9: 77 1C        	adc	[<L110+fs_0],Y
  4034 0B:4ABB: 85 05        	sta	<R1
  4035 0B:4ABD: A5 03        	lda	<R0+2
  4036 0B:4ABF: A0 21 00     	ldy	#$21
  4037 0B:4AC2: 77 1C        	adc	[<L110+fs_0],Y
  4038 0B:4AC4: 85 07        	sta	<R1+2
  4039 0B:4AC6: D4 07        	pei	<R1+2
  Fri Jul 16 2021 14:42                                                Page 84


  4040 0B:4AC8: D4 05        	pei	<R1
  4041 0B:4ACA: D4 1E        	pei	<L110+fs_0+2
  4042 0B:4ACC: D4 1C        	pei	<L110+fs_0
  4043 0B:4ACE: 22 7A 43 0B  	jsl	~~move_window
  4044 0B:4AD2: 85 17        	sta	<L111+res_1
  4045                        ;			if (res != FR_OK)
  4046                        	.line	1377
  4047                        ;				break;
  4048 0B:4AD4: A5 17        	lda	<L111+res_1
  4049 0B:4AD6: F0 03        	beq	L124
  4050 0B:4AD8: 82 D4 00     	brl	L10037
  4051                        L124:
  4052                        ;			if (!FF_FS_EXFAT || fs->fs_type 
                    != FS_EXFAT)
  4053                        	.line	1379
  4054                        ;			{
  4055 0B:4ADB: 82 0D 00     	brl	L125
  4056 0B:4ADE: E2 20        	sep	#$20
  4057                        	longa	off
  4058 0B:4AE0: A7 1C        	lda	[<L110+fs_0]
  4059 0B:4AE2: C9 04        	cmp	#<$4
  4060 0B:4AE4: C2 20        	rep	#$20
  4061                        	longa	on
  4062 0B:4AE6: D0 03        	bne	L126
  4063 0B:4AE8: 82 61 00     	brl	L10041
  4064                        L126:
  4065                        L125:
  4066                        	.line	1380
  4067                        ;				val = (val & 0x0FFFFFFF)
  4068                        	.line	1381
  4069                        ;						| (ld_dw
                    ord(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
  4070 0B:4AEB: A5 20        	lda	<L110+clst_0
  4071 0B:4AED: 85 01        	sta	<R0
  4072 0B:4AEF: A5 22        	lda	<L110+clst_0+2
  4073 0B:4AF1: 85 03        	sta	<R0+2
  4074 0B:4AF3: 06 01        	asl	<R0
  4075 0B:4AF5: 26 03        	rol	<R0+2
  4076 0B:4AF7: 06 01        	asl	<R0
  4077 0B:4AF9: 26 03        	rol	<R0+2
  4078 0B:4AFB: A5 01        	lda	<R0
  4079 0B:4AFD: 29 FF 01     	and	#<$1ff
  4080 0B:4B00: 85 05        	sta	<R1
  4081 0B:4B02: 64 07        	stz	<R1+2
  4082 0B:4B04: 18           	clc
  4083 0B:4B05: A9 2F 00     	lda	#$2f
  4084 0B:4B08: 65 05        	adc	<R1
  4085 0B:4B0A: 85 01        	sta	<R0
  4086 0B:4B0C: A9 00 00     	lda	#$0
  4087 0B:4B0F: 65 07        	adc	<R1+2
  4088 0B:4B11: 85 03        	sta	<R0+2
  4089 0B:4B13: 18           	clc
  4090 0B:4B14: A5 1C        	lda	<L110+fs_0
  4091 0B:4B16: 65 01        	adc	<R0
  4092 0B:4B18: 85 05        	sta	<R1
  4093 0B:4B1A: A5 1E        	lda	<L110+fs_0+2
  4094 0B:4B1C: 65 03        	adc	<R0+2
  4095 0B:4B1E: 85 07        	sta	<R1+2
  Fri Jul 16 2021 14:42                                                Page 85


  4096 0B:4B20: D4 07        	pei	<R1+2
  4097 0B:4B22: D4 05        	pei	<R1
  4098 0B:4B24: 22 BB 3F 0B  	jsl	~~ld_dword
  4099 0B:4B28: 85 09        	sta	<R2
  4100 0B:4B2A: 86 0B        	stx	<R2+2
  4101 0B:4B2C: 64 0D        	stz	<R3
  4102 0B:4B2E: A5 0B        	lda	<R2+2
  4103 0B:4B30: 29 00 F0     	and	#^$f0000000
  4104 0B:4B33: 85 0F        	sta	<R3+2
  4105 0B:4B35: A5 24        	lda	<L110+val_0
  4106 0B:4B37: 85 09        	sta	<R2
  4107 0B:4B39: A5 26        	lda	<L110+val_0+2
  4108 0B:4B3B: 29 FF 0F     	and	#^$fffffff
  4109 0B:4B3E: 85 0B        	sta	<R2+2
  4110 0B:4B40: A5 09        	lda	<R2
  4111 0B:4B42: 05 0D        	ora	<R3
  4112 0B:4B44: 85 24        	sta	<L110+val_0
  4113 0B:4B46: A5 0B        	lda	<R2+2
  4114 0B:4B48: 05 0F        	ora	<R3+2
  4115 0B:4B4A: 85 26        	sta	<L110+val_0+2
  4116                        ;			}
  4117                        	.line	1383
  4118                        ;			st_dword(fs->win + clst * 4 % SS
                    (fs), val);
  4119                        L10041:
  4120                        	.line	1384
  4121 0B:4B4C: D4 26        	pei	<L110+val_0+2
  4122 0B:4B4E: D4 24        	pei	<L110+val_0
  4123 0B:4B50: A5 20        	lda	<L110+clst_0
  4124 0B:4B52: 85 01        	sta	<R0
  4125 0B:4B54: A5 22        	lda	<L110+clst_0+2
  4126 0B:4B56: 85 03        	sta	<R0+2
  4127 0B:4B58: 06 01        	asl	<R0
  4128 0B:4B5A: 26 03        	rol	<R0+2
  4129 0B:4B5C: 06 01        	asl	<R0
  4130 0B:4B5E: 26 03        	rol	<R0+2
  4131 0B:4B60: A5 01        	lda	<R0
  4132 0B:4B62: 29 FF 01     	and	#<$1ff
  4133 0B:4B65: 85 05        	sta	<R1
  4134 0B:4B67: 64 07        	stz	<R1+2
  4135 0B:4B69: 18           	clc
  4136 0B:4B6A: A9 2F 00     	lda	#$2f
  4137 0B:4B6D: 65 05        	adc	<R1
  4138 0B:4B6F: 85 01        	sta	<R0
  4139 0B:4B71: A9 00 00     	lda	#$0
  4140 0B:4B74: 65 07        	adc	<R1+2
  4141 0B:4B76: 85 03        	sta	<R0+2
  4142 0B:4B78: 18           	clc
  4143 0B:4B79: A5 1C        	lda	<L110+fs_0
  4144 0B:4B7B: 65 01        	adc	<R0
  4145 0B:4B7D: 85 05        	sta	<R1
  4146 0B:4B7F: A5 1E        	lda	<L110+fs_0+2
  4147 0B:4B81: 65 03        	adc	<R0+2
  4148 0B:4B83: 85 07        	sta	<R1+2
  4149 0B:4B85: D4 07        	pei	<R1+2
  4150 0B:4B87: D4 05        	pei	<R1
  4151 0B:4B89: 22 96 40 0B  	jsl	~~st_dword
  4152                        ;			fs->wflag = 1;
  Fri Jul 16 2021 14:42                                                Page 86


  4153                        	.line	1385
  4154 0B:4B8D: E2 20        	sep	#$20
  4155                        	longa	off
  4156 0B:4B8F: A9 01        	lda	#$1
  4157 0B:4B91: A0 03 00     	ldy	#$3
  4158 0B:4B94: 97 1C        	sta	[<L110+fs_0],Y
  4159 0B:4B96: C2 20        	rep	#$20
  4160                        	longa	on
  4161                        ;			break;
  4162                        	.line	1386
  4163 0B:4B98: 82 14 00     	brl	L10037
  4164                        ;		}
  4165                        	.line	1387
  4166                        L10036:
  4167                        	xref	~~~swt
  4168 0B:4B9B: 22 xx xx xx  	jsl	~~~swt
  4169 0B:4B9F: 03 00        	dw	3
  4170 0B:4BA1: 01 00        	dw	1
  4171 0B:4BA3: B3 48        	dw	L10038-1
  4172 0B:4BA5: 02 00        	dw	2
  4173 0B:4BA7: 23 4A        	dw	L10039-1
  4174 0B:4BA9: 03 00        	dw	3
  4175 0B:4BAB: A3 4A        	dw	L10040-1
  4176 0B:4BAD: AE 4B        	dw	L10037-1
  4177                        L10037:
  4178                        ;	}
  4179                        	.line	1388
  4180                        ;	return res;
  4181                        L10035:
  4182                        	.line	1389
  4183 0B:4BAF: A5 17        	lda	<L111+res_1
  4184                        L127:
  4185 0B:4BB1: A8           	tay
  4186 0B:4BB2: A5 1A        	lda	<L110+2
  4187 0B:4BB4: 85 26        	sta	<L110+2+12
  4188 0B:4BB6: A5 19        	lda	<L110+1
  4189 0B:4BB8: 85 25        	sta	<L110+1+12
  4190 0B:4BBA: 2B           	pld
  4191 0B:4BBB: 3B           	tsc
  4192 0B:4BBC: 18           	clc
  4193 0B:4BBD: 69 24 00     	adc	#L110+12
  4194 0B:4BC0: 1B           	tcs
  4195 0B:4BC1: 98           	tya
  4196 0B:4BC2: 6B           	rtl
  4197                        ;}
  4198                        	.line	1390
  4199                        	.endblock	1390
  4200             00000018   L110	equ	24
  4201             00000011   L111	equ	17
  4202 0B:4BC3:              	ends
  4203                        	efunc
  4204                        	.endfunc	1390,17,24
  4205                        	.line	1390
  4206                        ;
  4207                        ;#endif /* !FF_FS_READONLY */
  4208                        ;
  4209                        ;#if FF_FS_EXFAT && !FF_FS_READONLY
  4210                        ;/*-----------------------------------------------
  Fri Jul 16 2021 14:42                                                Page 87


                    ------------------------*/
  4211                        ;/* exFAT: Accessing FAT and Allocation Bitmap    
                                            */
  4212                        ;/*-----------------------------------------------
                    ------------------------*/
  4213                        ;
  4214                        ;/*--------------------------------------*/
  4215                        ;/* Find a contiguous free cluster block */
  4216                        ;/*--------------------------------------*/
  4217                        ;
  4218                        ;static DWORD find_bitmap ( /* 0:Not found, 2..:Cl
                    uster block found, 0xFFFFFFFF:Disk error */
  4219                        ;		FATFS* fs, /* Filesystem object */
  4220                        ;		DWORD clst, /* Cluster number to scan fr
                    om */
  4221                        ;		DWORD ncl /* Number of contiguous cluste
                    rs to find (1..) */
  4222                        ;)
  4223                        ;{
  4224                        ;	BYTE bm, bv;
  4225                        ;	UINT i;
  4226                        ;	DWORD val, scl, ctr;
  4227                        ;
  4228                        ;	clst -= 2; /* The first bit in the bitmap corres
                    ponds to cluster #2 */
  4229                        ;	if (clst >= fs->n_fatent - 2) clst = 0;
  4230                        ;	scl = val = clst; ctr = 0;
  4231                        ;	for (;;)
  4232                        ;	{
  4233                        ;		if (move_window(fs, fs->bitbase + val / 
                    8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
  4234                        ;		i = val / 8 % SS(fs); bm = 1 << (val % 8
                    );
  4235                        ;		do
  4236                        ;		{
  4237                        ;			do
  4238                        ;			{
  4239                        ;				bv = fs->win[i] & bm; bm
                     <<= 1; /* Get bit value */
  4240                        ;				if (++val >= fs->n_faten
                    t - 2)
  4241                        ;				{ /* Next cluster (with 
                    wrap-around) */
  4242                        ;					val = 0; bm = 0;
                     i = SS(fs);
  4243                        ;				}
  4244                        ;				if (bv == 0)
  4245                        ;				{ /* Is it a free cluste
                    r? */
  4246                        ;					if (++ctr == ncl
                    ) return scl + 2; /* Check if run length is sufficient for r
                    equired */
  4247                        ;				}
  4248                        ;				else
  4249                        ;				{
  4250                        ;					scl = val; ctr =
                     0; /* Encountered a cluster in-use, restart to scan */
  4251                        ;				}
  Fri Jul 16 2021 14:42                                                Page 88


  4252                        ;				if (val == clst) return 
                    0; /* All cluster scanned? */
  4253                        ;			}while (bm != 0);
  4254                        ;			bm = 1;
  4255                        ;		}while (++i < SS(fs));
  4256                        ;	}
  4257                        ;}
  4258                        ;
  4259                        ;/*----------------------------------------*/
  4260                        ;/* Set/Clear a block of allocation bitmap */
  4261                        ;/*----------------------------------------*/
  4262                        ;
  4263                        ;static FRESULT change_bitmap (
  4264                        ;		FATFS* fs, /* Filesystem object */
  4265                        ;		DWORD clst, /* Cluster number to change 
                    from */
  4266                        ;		DWORD ncl, /* Number of clusters to be c
                    hanged */
  4267                        ;		int bv /* bit value to be set (0 or 1) *
                    /
  4268                        ;)
  4269                        ;{
  4270                        ;	BYTE bm;
  4271                        ;	UINT i;
  4272                        ;	LBA_t sect;
  4273                        ;
  4274                        ;	clst -= 2; /* The first bit corresponds to clust
                    er #2 */
  4275                        ;	sect = fs->bitbase + clst / 8 / SS(fs); /* Secto
                    r address */
  4276                        ;	i = clst / 8 % SS(fs); /* Byte offset in the sec
                    tor */
  4277                        ;	bm = 1 << (clst % 8); /* Bit mask in the byte */
  4278                        ;	for (;;)
  4279                        ;	{
  4280                        ;		if (move_window(fs, sect++) != FR_OK) re
                    turn FR_DISK_ERR;
  4281                        ;		do
  4282                        ;		{
  4283                        ;			do
  4284                        ;			{
  4285                        ;				if (bv == (int)((fs->win
                    [i] & bm) != 0)) return FR_INT_ERR; /* Is the bit expected v
                    alue? */
  4286                        ;				fs->win[i] ^= bm; /* Fli
                    p the bit */
  4287                        ;				fs->wflag = 1;
  4288                        ;				if (--ncl == 0) return F
                    R_OK; /* All bits processed? */
  4289                        ;			}while (bm <<= 1); /* Next bit *
                    /
  4290                        ;			bm = 1;
  4291                        ;		}while (++i < SS(fs)); /* Next byte */
  4292                        ;		i = 0;
  4293                        ;	}
  4294                        ;}
  4295                        ;
  4296                        ;/*---------------------------------------------*/
  Fri Jul 16 2021 14:42                                                Page 89


  4297                        ;/* Fill the first fragment of the FAT chain    */
  4298                        ;/*---------------------------------------------*/
  4299                        ;
  4300                        ;static FRESULT fill_first_frag (
  4301                        ;		FFOBJID* obj /* Pointer to the correspon
                    ding object */
  4302                        ;)
  4303                        ;{
  4304                        ;	FRESULT res;
  4305                        ;	DWORD cl, n;
  4306                        ;
  4307                        ;	if (obj->stat == 3)
  4308                        ;	{ /* Has the object been changed 'fragmented' in
                     this session? */
  4309                        ;		for (cl = obj->sclust, n = obj->n_cont; 
                    n; cl++, n--)
  4310                        ;		{ /* Create cluster chain on the FAT */
  4311                        ;			res = put_fat(obj->fs, cl, cl + 
                    1);
  4312                        ;			if (res != FR_OK) return res;
  4313                        ;		}
  4314                        ;		obj->stat = 0; /* Change status 'FAT cha
                    in is valid' */
  4315                        ;	}
  4316                        ;	return FR_OK;
  4317                        ;}
  4318                        ;
  4319                        ;/*---------------------------------------------*/
  4320                        ;/* Fill the last fragment of the FAT chain     */
  4321                        ;/*---------------------------------------------*/
  4322                        ;
  4323                        ;static FRESULT fill_last_frag (
  4324                        ;		FFOBJID* obj, /* Pointer to the correspo
                    nding object */
  4325                        ;		DWORD lcl, /* Last cluster of the fragme
                    nt */
  4326                        ;		DWORD term /* Value to set the last FAT 
                    entry */
  4327                        ;)
  4328                        ;{
  4329                        ;	FRESULT res;
  4330                        ;
  4331                        ;	while (obj->n_frag > 0)
  4332                        ;	{ /* Create the chain of last fragment */
  4333                        ;		res = put_fat(obj->fs, lcl - obj->n_frag
                     + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
  4334                        ;		if (res != FR_OK) return res;
  4335                        ;		obj->n_frag--;
  4336                        ;	}
  4337                        ;	return FR_OK;
  4338                        ;}
  4339                        ;
  4340                        ;#endif	/* FF_FS_EXFAT && !FF_FS_READONLY */
  4341                        ;
  4342                        ;#if !FF_FS_READONLY
  4343                        ;/*-----------------------------------------------
                    ------------------------*/
  4344                        ;/* FAT handling - Remove a cluster chain         
  Fri Jul 16 2021 14:42                                                Page 90


                                            */
  4345                        ;/*-----------------------------------------------
                    ------------------------*/
  4346                        ;
  4347                        ;static FRESULT remove_chain( /* FR_OK(0):succeede
                    d, !=0:error */
  4348                        ;FFOBJID* obj, /* Corresponding object */
  4349                        ;DWORD clst, /* Cluster to remove a chain from */
  4350                        ;DWORD pclst /* Previous cluster of clst (0 if ent
                    ire chain) */
  4351                        ;)
  4352                        ;{
  4353                        	.line	1532
  4354                        	.line	1537
  4355                        	FFDOS
  4356                        	func
  4357                        	.function	1537
  4358                        ~~remove_chain:
  4359                        	longa	on
  4360                        	longi	on
  4361 0B:4BC3: 3B           	tsc
  4362 0B:4BC4: 38           	sec
  4363 0B:4BC5: E9 0E 00     	sbc	#L128
  4364 0B:4BC8: 1B           	tcs
  4365 0B:4BC9: 0B           	phd
  4366 0B:4BCA: 5B           	tcd
  4367             00000004   obj_0	set	4
  4368             00000008   clst_0	set	8
  4369             0000000C   pclst_0	set	12
  4370                        	.block	1537
  4371                        ;	FRESULT res = FR_OK;
  4372                        ;	DWORD nxt;
  4373                        ;	FATFS *fs = obj->fs;
  4374                        ;#if FF_FS_EXFAT || FF_USE_TRIM
  4375                        ;	DWORD scl = clst, ecl = clst;
  4376                        ;#endif
  4377                        ;#if FF_USE_TRIM
  4378                        ;	LBA_t rt[2];
  4379                        ;#endif
  4380                        ;
  4381                        ;	if (clst < 2 || clst >= fs->n_fatent)
  4382             00000000   res_1	set	0
  4383             00000002   nxt_1	set	2
  4384             00000006   fs_1	set	6
  4385                        	.sym	res,0,5,1,16
  4386                        	.sym	nxt,2,18,1,32
  4387                        	.sym	fs,6,138,1,32,49
  4388                        	.sym	obj,4,138,6,32,50
  4389                        	.sym	clst,8,18,6,32
  4390                        	.sym	pclst,12,18,6,32
  4391 0B:4BCB: 64 05        	stz	<L129+res_1
  4392 0B:4BCD: A7 12        	lda	[<L128+obj_0]
  4393 0B:4BCF: 85 0B        	sta	<L129+fs_1
  4394 0B:4BD1: A0 02 00     	ldy	#$2
  4395 0B:4BD4: B7 12        	lda	[<L128+obj_0],Y
  4396 0B:4BD6: 85 0D        	sta	<L129+fs_1+2
  4397                        	.line	1548
  4398                        ;		return FR_INT_ERR; /* Check if in valid 
  Fri Jul 16 2021 14:42                                                Page 91


                    range */
  4399 0B:4BD8: A5 16        	lda	<L128+clst_0
  4400 0B:4BDA: C9 02 00     	cmp	#<$2
  4401 0B:4BDD: A5 18        	lda	<L128+clst_0+2
  4402 0B:4BDF: E9 00 00     	sbc	#^$2
  4403 0B:4BE2: B0 03        	bcs	L132
  4404 0B:4BE4: 82 13 00     	brl	L131
  4405                        L132:
  4406 0B:4BE7: A5 16        	lda	<L128+clst_0
  4407 0B:4BE9: A0 13 00     	ldy	#$13
  4408 0B:4BEC: D7 0B        	cmp	[<L129+fs_1],Y
  4409 0B:4BEE: A5 18        	lda	<L128+clst_0+2
  4410 0B:4BF0: A0 15 00     	ldy	#$15
  4411 0B:4BF3: F7 0B        	sbc	[<L129+fs_1],Y
  4412 0B:4BF5: B0 03        	bcs	L133
  4413 0B:4BF7: 82 15 00     	brl	L10042
  4414                        L133:
  4415                        L131:
  4416                        	.line	1549
  4417 0B:4BFA: A9 02 00     	lda	#$2
  4418                        L134:
  4419 0B:4BFD: A8           	tay
  4420 0B:4BFE: A5 10        	lda	<L128+2
  4421 0B:4C00: 85 1C        	sta	<L128+2+12
  4422 0B:4C02: A5 0F        	lda	<L128+1
  4423 0B:4C04: 85 1B        	sta	<L128+1+12
  4424 0B:4C06: 2B           	pld
  4425 0B:4C07: 3B           	tsc
  4426 0B:4C08: 18           	clc
  4427 0B:4C09: 69 1A 00     	adc	#L128+12
  4428 0B:4C0C: 1B           	tcs
  4429 0B:4C0D: 98           	tya
  4430 0B:4C0E: 6B           	rtl
  4431                        ;
  4432                        ;	/* Mark the previous cluster 'EOC' on the FAT if
                     it exists */
  4433                        ;	if (pclst != 0
  4434                        L10042:
  4435                        	.line	1552
  4436                        ;			&& (!FF_FS_EXFAT || fs->fs_type 
                    != FS_EXFAT || obj->stat != 2))
  4437                        ;	{
  4438 0B:4C0F: A5 1A        	lda	<L128+pclst_0
  4439 0B:4C11: 05 1C        	ora	<L128+pclst_0+2
  4440 0B:4C13: D0 03        	bne	L135
  4441 0B:4C15: 82 40 00     	brl	L10043
  4442                        L135:
  4443 0B:4C18: 82 1D 00     	brl	L136
  4444 0B:4C1B: E2 20        	sep	#$20
  4445                        	longa	off
  4446 0B:4C1D: A7 0B        	lda	[<L129+fs_1]
  4447 0B:4C1F: C9 04        	cmp	#<$4
  4448 0B:4C21: C2 20        	rep	#$20
  4449                        	longa	on
  4450 0B:4C23: F0 03        	beq	L137
  4451 0B:4C25: 82 10 00     	brl	L136
  4452                        L137:
  4453 0B:4C28: E2 20        	sep	#$20
  Fri Jul 16 2021 14:42                                                Page 92


  4454                        	longa	off
  4455 0B:4C2A: A0 07 00     	ldy	#$7
  4456 0B:4C2D: B7 12        	lda	[<L128+obj_0],Y
  4457 0B:4C2F: C9 02        	cmp	#<$2
  4458 0B:4C31: C2 20        	rep	#$20
  4459                        	longa	on
  4460 0B:4C33: D0 03        	bne	L138
  4461 0B:4C35: 82 20 00     	brl	L10043
  4462                        L138:
  4463                        L136:
  4464                        	.line	1554
  4465                        ;		res = put_fat(fs, pclst, 0xFFFFFFFF);
  4466                        	.line	1555
  4467 0B:4C38: F4 FF FF     	pea	#^$ffffffff
  4468 0B:4C3B: F4 FF FF     	pea	#<$ffffffff
  4469 0B:4C3E: D4 1C        	pei	<L128+pclst_0+2
  4470 0B:4C40: D4 1A        	pei	<L128+pclst_0
  4471 0B:4C42: D4 0D        	pei	<L129+fs_1+2
  4472 0B:4C44: D4 0B        	pei	<L129+fs_1
  4473 0B:4C46: 22 7D 48 0B  	jsl	~~put_fat
  4474 0B:4C4A: 85 05        	sta	<L129+res_1
  4475                        ;		if (res != FR_OK)
  4476                        	.line	1556
  4477                        ;			return res;
  4478 0B:4C4C: A5 05        	lda	<L129+res_1
  4479 0B:4C4E: D0 03        	bne	L139
  4480 0B:4C50: 82 05 00     	brl	L10044
  4481                        L139:
  4482                        	.line	1557
  4483 0B:4C53: A5 05        	lda	<L129+res_1
  4484 0B:4C55: 82 A5 FF     	brl	L134
  4485                        ;	}
  4486                        L10044:
  4487                        	.line	1558
  4488                        ;
  4489                        ;	/* Remove the chain */
  4490                        ;	do
  4491                        L10043:
  4492                        	.line	1561
  4493                        L10047:
  4494                        ;	{
  4495                        	.line	1562
  4496                        ;		nxt = get_fat(obj, clst); /* Get cluster
                     status */
  4497                        	.line	1563
  4498 0B:4C58: D4 18        	pei	<L128+clst_0+2
  4499 0B:4C5A: D4 16        	pei	<L128+clst_0
  4500 0B:4C5C: D4 14        	pei	<L128+obj_0+2
  4501 0B:4C5E: D4 12        	pei	<L128+obj_0
  4502 0B:4C60: 22 0D 46 0B  	jsl	~~get_fat
  4503 0B:4C64: 85 07        	sta	<L129+nxt_1
  4504 0B:4C66: 86 09        	stx	<L129+nxt_1+2
  4505                        ;		if (nxt == 0)
  4506                        	.line	1564
  4507                        ;			break; /* Empty cluster? */
  4508 0B:4C68: A5 07        	lda	<L129+nxt_1
  4509 0B:4C6A: 05 09        	ora	<L129+nxt_1+2
  4510 0B:4C6C: D0 03        	bne	L140
  Fri Jul 16 2021 14:42                                                Page 93


  4511 0B:4C6E: 82 D5 00     	brl	L10046
  4512                        L140:
  4513                        ;		if (nxt == 1)
  4514                        	.line	1566
  4515                        ;			return FR_INT_ERR; /* Internal e
                    rror? */
  4516 0B:4C71: A5 07        	lda	<L129+nxt_1
  4517 0B:4C73: C9 01 00     	cmp	#<$1
  4518 0B:4C76: D0 05        	bne	L141
  4519 0B:4C78: A5 09        	lda	<L129+nxt_1+2
  4520 0B:4C7A: C9 00 00     	cmp	#^$1
  4521                        L141:
  4522 0B:4C7D: F0 03        	beq	L142
  4523 0B:4C7F: 82 06 00     	brl	L10048
  4524                        L142:
  4525                        	.line	1567
  4526 0B:4C82: A9 02 00     	lda	#$2
  4527 0B:4C85: 82 75 FF     	brl	L134
  4528                        ;		if (nxt == 0xFFFFFFFF)
  4529                        L10048:
  4530                        	.line	1568
  4531                        ;			return FR_DISK_ERR; /* Disk erro
                    r? */
  4532 0B:4C88: A5 07        	lda	<L129+nxt_1
  4533 0B:4C8A: C9 FF FF     	cmp	#<$ffffffff
  4534 0B:4C8D: D0 05        	bne	L143
  4535 0B:4C8F: A5 09        	lda	<L129+nxt_1+2
  4536 0B:4C91: C9 FF FF     	cmp	#^$ffffffff
  4537                        L143:
  4538 0B:4C94: F0 03        	beq	L144
  4539 0B:4C96: 82 06 00     	brl	L10049
  4540                        L144:
  4541                        	.line	1569
  4542 0B:4C99: A9 01 00     	lda	#$1
  4543 0B:4C9C: 82 5E FF     	brl	L134
  4544                        ;		if (!FF_FS_EXFAT || fs->fs_type != FS_EX
                    FAT)
  4545                        L10049:
  4546                        	.line	1570
  4547                        ;		{
  4548 0B:4C9F: 82 0D 00     	brl	L145
  4549 0B:4CA2: E2 20        	sep	#$20
  4550                        	longa	off
  4551 0B:4CA4: A7 0B        	lda	[<L129+fs_1]
  4552 0B:4CA6: C9 04        	cmp	#<$4
  4553 0B:4CA8: C2 20        	rep	#$20
  4554                        	longa	on
  4555 0B:4CAA: D0 03        	bne	L146
  4556 0B:4CAC: 82 20 00     	brl	L10050
  4557                        L146:
  4558                        L145:
  4559                        	.line	1571
  4560                        ;			res = put_fat(fs, clst, 0); /* M
                    ark the cluster 'free' on the FAT */
  4561                        	.line	1572
  4562 0B:4CAF: F4 00 00     	pea	#^$0
  4563 0B:4CB2: F4 00 00     	pea	#<$0
  4564 0B:4CB5: D4 18        	pei	<L128+clst_0+2
  Fri Jul 16 2021 14:42                                                Page 94


  4565 0B:4CB7: D4 16        	pei	<L128+clst_0
  4566 0B:4CB9: D4 0D        	pei	<L129+fs_1+2
  4567 0B:4CBB: D4 0B        	pei	<L129+fs_1
  4568 0B:4CBD: 22 7D 48 0B  	jsl	~~put_fat
  4569 0B:4CC1: 85 05        	sta	<L129+res_1
  4570                        ;			if (res != FR_OK)
  4571                        	.line	1573
  4572                        ;				return res;
  4573 0B:4CC3: A5 05        	lda	<L129+res_1
  4574 0B:4CC5: D0 03        	bne	L147
  4575 0B:4CC7: 82 05 00     	brl	L10051
  4576                        L147:
  4577                        	.line	1574
  4578 0B:4CCA: A5 05        	lda	<L129+res_1
  4579 0B:4CCC: 82 2E FF     	brl	L134
  4580                        ;		}
  4581                        L10051:
  4582                        	.line	1575
  4583                        ;		if (fs->free_clst < fs->n_fatent - 2)
  4584                        L10050:
  4585                        	.line	1576
  4586                        ;		{ /* Update FSINFO */
  4587 0B:4CCF: 18           	clc
  4588 0B:4CD0: A9 FE FF     	lda	#$fffe
  4589 0B:4CD3: A0 13 00     	ldy	#$13
  4590 0B:4CD6: 77 0B        	adc	[<L129+fs_1],Y
  4591 0B:4CD8: 85 01        	sta	<R0
  4592 0B:4CDA: A9 FF FF     	lda	#$ffff
  4593 0B:4CDD: A0 15 00     	ldy	#$15
  4594 0B:4CE0: 77 0B        	adc	[<L129+fs_1],Y
  4595 0B:4CE2: 85 03        	sta	<R0+2
  4596 0B:4CE4: A0 0F 00     	ldy	#$f
  4597 0B:4CE7: B7 0B        	lda	[<L129+fs_1],Y
  4598 0B:4CE9: C5 01        	cmp	<R0
  4599 0B:4CEB: A0 11 00     	ldy	#$11
  4600 0B:4CEE: B7 0B        	lda	[<L129+fs_1],Y
  4601 0B:4CF0: E5 03        	sbc	<R0+2
  4602 0B:4CF2: 90 03        	bcc	L148
  4603 0B:4CF4: 82 34 00     	brl	L10052
  4604                        L148:
  4605                        	.line	1577
  4606                        ;			fs->free_clst++;
  4607                        	.line	1578
  4608 0B:4CF7: 18           	clc
  4609 0B:4CF8: A9 01 00     	lda	#$1
  4610 0B:4CFB: A0 0F 00     	ldy	#$f
  4611 0B:4CFE: 77 0B        	adc	[<L129+fs_1],Y
  4612 0B:4D00: A0 0F 00     	ldy	#$f
  4613 0B:4D03: 97 0B        	sta	[<L129+fs_1],Y
  4614 0B:4D05: A9 00 00     	lda	#$0
  4615 0B:4D08: A0 11 00     	ldy	#$11
  4616 0B:4D0B: 77 0B        	adc	[<L129+fs_1],Y
  4617 0B:4D0D: A0 11 00     	ldy	#$11
  4618 0B:4D10: 97 0B        	sta	[<L129+fs_1],Y
  4619                        ;			fs->fsi_flag |= 1;
  4620                        	.line	1579
  4621 0B:4D12: 18           	clc
  4622 0B:4D13: A9 04 00     	lda	#$4
  Fri Jul 16 2021 14:42                                                Page 95


  4623 0B:4D16: 65 0B        	adc	<L129+fs_1
  4624 0B:4D18: 85 01        	sta	<R0
  4625 0B:4D1A: A9 00 00     	lda	#$0
  4626 0B:4D1D: 65 0D        	adc	<L129+fs_1+2
  4627 0B:4D1F: 85 03        	sta	<R0+2
  4628 0B:4D21: E2 20        	sep	#$20
  4629                        	longa	off
  4630 0B:4D23: A7 01        	lda	[<R0]
  4631 0B:4D25: 09 01        	ora	#<$1
  4632 0B:4D27: 87 01        	sta	[<R0]
  4633 0B:4D29: C2 20        	rep	#$20
  4634                        	longa	on
  4635                        ;		}
  4636                        	.line	1580
  4637                        ;#if FF_FS_EXFAT || FF_USE_TRIM
  4638                        ;		if (ecl + 1 == nxt)
  4639                        ;		{ /* Is next cluster contiguous? */
  4640                        ;			ecl = nxt;
  4641                        ;		}
  4642                        ;		else
  4643                        ;		{ /* End of contiguous cluster block */
  4644                        ;#if FF_FS_EXFAT
  4645                        ;			if (fs->fs_type == FS_EXFAT)
  4646                        ;			{
  4647                        ;				res = change_bitmap(fs, 
                    scl, ecl - scl + 1, 0); /* Mark the cluster block 'free' on 
                    the bitmap */
  4648                        ;				if (res != FR_OK) return
                     res;
  4649                        ;			}
  4650                        ;#endif
  4651                        ;#if FF_USE_TRIM
  4652                        ;			rt[0] = clst2sect(fs, scl); /* S
                    tart of data area to be freed */
  4653                        ;			rt[1] = clst2sect(fs, ecl) + fs-
                    >csize - 1; /* End of data area to be freed */
  4654                        ;			disk_ioctl(fs->pdrv, CTRL_TRIM, 
                    rt); /* Inform storage device that the data in the block may
                     be erased */
  4655                        ;#endif
  4656                        ;			scl = ecl = nxt;
  4657                        ;		}
  4658                        ;#endif
  4659                        ;		clst = nxt; /* Next cluster */
  4660                        L10052:
  4661                        	.line	1603
  4662 0B:4D2B: A5 07        	lda	<L129+nxt_1
  4663 0B:4D2D: 85 16        	sta	<L128+clst_0
  4664 0B:4D2F: A5 09        	lda	<L129+nxt_1+2
  4665 0B:4D31: 85 18        	sta	<L128+clst_0+2
  4666                        ;	} while (clst < fs->n_fatent); /* Repeat while n
                    ot the last link */
  4667                        	.line	1604
  4668                        L10045:
  4669 0B:4D33: A5 16        	lda	<L128+clst_0
  4670 0B:4D35: A0 13 00     	ldy	#$13
  4671 0B:4D38: D7 0B        	cmp	[<L129+fs_1],Y
  4672 0B:4D3A: A5 18        	lda	<L128+clst_0+2
  Fri Jul 16 2021 14:42                                                Page 96


  4673 0B:4D3C: A0 15 00     	ldy	#$15
  4674 0B:4D3F: F7 0B        	sbc	[<L129+fs_1],Y
  4675 0B:4D41: B0 03        	bcs	L149
  4676 0B:4D43: 82 12 FF     	brl	L10047
  4677                        L149:
  4678                        L10046:
  4679                        ;
  4680                        ;#if FF_FS_EXFAT
  4681                        ;	/* Some post processes for chain status */
  4682                        ;	if (fs->fs_type == FS_EXFAT)
  4683                        ;	{
  4684                        ;		if (pclst == 0)
  4685                        ;		{ /* Has the entire chain been removed? 
                    */
  4686                        ;			obj->stat = 0; /* Change the cha
                    in status 'initial' */
  4687                        ;		}
  4688                        ;		else
  4689                        ;		{
  4690                        ;			if (obj->stat == 0)
  4691                        ;			{ /* Is it a fragmented chain fr
                    om the beginning of this session? */
  4692                        ;				clst = obj->sclust; /* F
                    ollow the chain to check if it gets contiguous */
  4693                        ;				while (clst != pclst)
  4694                        ;				{
  4695                        ;					nxt = get_fat(ob
                    j, clst);
  4696                        ;					if (nxt < 2) ret
                    urn FR_INT_ERR;
  4697                        ;					if (nxt == 0xFFF
                    FFFFF) return FR_DISK_ERR;
  4698                        ;					if (nxt != clst 
                    + 1) break; /* Not contiguous? */
  4699                        ;					clst++;
  4700                        ;				}
  4701                        ;				if (clst == pclst)
  4702                        ;				{ /* Has the chain got c
                    ontiguous again? */
  4703                        ;					obj->stat = 2; /
                    * Change the chain status 'contiguous' */
  4704                        ;				}
  4705                        ;			}
  4706                        ;			else
  4707                        ;			{
  4708                        ;				if (obj->stat == 3 && pc
                    lst >= obj->sclust && pclst <= obj->sclust + obj->n_cont)
  4709                        ;				{ /* Was the chain fragm
                    ented in this session and got contiguous again? */
  4710                        ;					obj->stat = 2; /
                    * Change the chain status 'contiguous' */
  4711                        ;				}
  4712                        ;			}
  4713                        ;		}
  4714                        ;	}
  4715                        ;#endif
  4716                        ;	return FR_OK;
  4717                        	.line	1642
  Fri Jul 16 2021 14:42                                                Page 97


  4718 0B:4D46: A9 00 00     	lda	#$0
  4719 0B:4D49: 82 B1 FE     	brl	L134
  4720                        ;}
  4721                        	.line	1643
  4722                        	.endblock	1643
  4723             0000000E   L128	equ	14
  4724             00000005   L129	equ	5
  4725 0B:4D4C:              	ends
  4726                        	efunc
  4727                        	.endfunc	1643,5,14
  4728                        	.line	1643
  4729                        ;
  4730                        ;/*-----------------------------------------------
                    ------------------------*/
  4731                        ;/* FAT handling - Stretch a chain or Create a new
                     chain                  */
  4732                        ;/*-----------------------------------------------
                    ------------------------*/
  4733                        ;
  4734                        ;static DWORD create_chain( /* 0:No free cluster, 
                    1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
  4735                        ;FFOBJID* obj, /* Corresponding object */
  4736                        ;DWORD clst /* Cluster# to stretch, 0:Create a new
                     chain */
  4737                        ;)
  4738                        ;{
  4739                        	.line	1649
  4740                        	.line	1653
  4741                        	FFDOS
  4742                        	func
  4743                        	.function	1653
  4744                        ~~create_chain:
  4745                        	longa	on
  4746                        	longi	on
  4747 0B:4D4C: 3B           	tsc
  4748 0B:4D4D: 38           	sec
  4749 0B:4D4E: E9 16 00     	sbc	#L150
  4750 0B:4D51: 1B           	tcs
  4751 0B:4D52: 0B           	phd
  4752 0B:4D53: 5B           	tcd
  4753             00000004   obj_0	set	4
  4754             00000008   clst_0	set	8
  4755                        	.block	1653
  4756                        ;	DWORD cs, ncl, scl;
  4757                        ;	FRESULT res;
  4758                        ;	FATFS *fs = obj->fs;
  4759                        ;
  4760                        ;	////k_debug_long("create_chain::clst:",clst);
  4761                        ;
  4762                        ;	if (clst == 0)
  4763             00000000   cs_1	set	0
  4764             00000004   ncl_1	set	4
  4765             00000008   scl_1	set	8
  4766             0000000C   res_1	set	12
  4767             0000000E   fs_1	set	14
  4768                        	.sym	cs,0,18,1,32
  4769                        	.sym	ncl,4,18,1,32
  4770                        	.sym	scl,8,18,1,32
  Fri Jul 16 2021 14:42                                                Page 98


  4771                        	.sym	res,12,5,1,16
  4772                        	.sym	fs,14,138,1,32,49
  4773                        	.sym	obj,4,138,6,32,50
  4774                        	.sym	clst,8,18,6,32
  4775 0B:4D54: A7 1A        	lda	[<L150+obj_0]
  4776 0B:4D56: 85 13        	sta	<L151+fs_1
  4777 0B:4D58: A0 02 00     	ldy	#$2
  4778 0B:4D5B: B7 1A        	lda	[<L150+obj_0],Y
  4779 0B:4D5D: 85 15        	sta	<L151+fs_1+2
  4780                        	.line	1660
  4781                        ;	{ /* Create a new chain */
  4782 0B:4D5F: A5 1E        	lda	<L150+clst_0
  4783 0B:4D61: 05 20        	ora	<L150+clst_0+2
  4784 0B:4D63: F0 03        	beq	L153
  4785 0B:4D65: 82 37 00     	brl	L10053
  4786                        L153:
  4787                        	.line	1661
  4788                        ;		scl = fs->last_clst; /* Suggested cluste
                    r to start to find */
  4789                        	.line	1662
  4790 0B:4D68: A0 0B 00     	ldy	#$b
  4791 0B:4D6B: B7 13        	lda	[<L151+fs_1],Y
  4792 0B:4D6D: 85 0D        	sta	<L151+scl_1
  4793 0B:4D6F: A0 0D 00     	ldy	#$d
  4794 0B:4D72: B7 13        	lda	[<L151+fs_1],Y
  4795 0B:4D74: 85 0F        	sta	<L151+scl_1+2
  4796                        ;		if (scl == 0 || scl >= fs->n_fatent)
  4797                        	.line	1663
  4798                        ;			scl = 1;
  4799 0B:4D76: A5 0D        	lda	<L151+scl_1
  4800 0B:4D78: 05 0F        	ora	<L151+scl_1+2
  4801 0B:4D7A: D0 03        	bne	L155
  4802 0B:4D7C: 82 13 00     	brl	L154
  4803                        L155:
  4804 0B:4D7F: A5 0D        	lda	<L151+scl_1
  4805 0B:4D81: A0 13 00     	ldy	#$13
  4806 0B:4D84: D7 13        	cmp	[<L151+fs_1],Y
  4807 0B:4D86: A5 0F        	lda	<L151+scl_1+2
  4808 0B:4D88: A0 15 00     	ldy	#$15
  4809 0B:4D8B: F7 13        	sbc	[<L151+fs_1],Y
  4810 0B:4D8D: B0 03        	bcs	L156
  4811 0B:4D8F: 82 0A 00     	brl	L10054
  4812                        L156:
  4813                        L154:
  4814                        	.line	1664
  4815 0B:4D92: A9 01 00     	lda	#$1
  4816 0B:4D95: 85 0D        	sta	<L151+scl_1
  4817 0B:4D97: A9 00 00     	lda	#$0
  4818 0B:4D9A: 85 0F        	sta	<L151+scl_1+2
  4819                        ;
  4820                        ;		////k_debug_long("create_chain::scl:",sc
                    l);
  4821                        ;	}
  4822                        L10054:
  4823                        	.line	1667
  4824                        ;	else
  4825 0B:4D9C: 82 72 00     	brl	L10055
  4826                        L10053:
  Fri Jul 16 2021 14:42                                                Page 99


  4827                        ;	{ /* Stretch a chain */
  4828                        	.line	1669
  4829                        ;		cs = get_fat(obj, clst); /* Check the cl
                    uster status */
  4830                        	.line	1670
  4831 0B:4D9F: D4 20        	pei	<L150+clst_0+2
  4832 0B:4DA1: D4 1E        	pei	<L150+clst_0
  4833 0B:4DA3: D4 1C        	pei	<L150+obj_0+2
  4834 0B:4DA5: D4 1A        	pei	<L150+obj_0
  4835 0B:4DA7: 22 0D 46 0B  	jsl	~~get_fat
  4836 0B:4DAB: 85 05        	sta	<L151+cs_1
  4837 0B:4DAD: 86 07        	stx	<L151+cs_1+2
  4838                        ;
  4839                        ;		////k_debug_long("create_chain::cs1:",cs
                    );
  4840                        ;
  4841                        ;
  4842                        ;		if (cs < 2)
  4843                        	.line	1675
  4844                        ;			return 1; /* Test for insanity *
                    /
  4845 0B:4DAF: A5 05        	lda	<L151+cs_1
  4846 0B:4DB1: C9 02 00     	cmp	#<$2
  4847 0B:4DB4: A5 07        	lda	<L151+cs_1+2
  4848 0B:4DB6: E9 00 00     	sbc	#^$2
  4849 0B:4DB9: 90 03        	bcc	L157
  4850 0B:4DBB: 82 19 00     	brl	L10056
  4851                        L157:
  4852                        	.line	1676
  4853 0B:4DBE: A9 00 00     	lda	#$0
  4854 0B:4DC1: AA           	tax
  4855 0B:4DC2: A9 01 00     	lda	#$1
  4856                        L158:
  4857 0B:4DC5: A8           	tay
  4858 0B:4DC6: A5 18        	lda	<L150+2
  4859 0B:4DC8: 85 20        	sta	<L150+2+8
  4860 0B:4DCA: A5 17        	lda	<L150+1
  4861 0B:4DCC: 85 1F        	sta	<L150+1+8
  4862 0B:4DCE: 2B           	pld
  4863 0B:4DCF: 3B           	tsc
  4864 0B:4DD0: 18           	clc
  4865 0B:4DD1: 69 1E 00     	adc	#L150+8
  4866 0B:4DD4: 1B           	tcs
  4867 0B:4DD5: 98           	tya
  4868 0B:4DD6: 6B           	rtl
  4869                        ;		if (cs == 0xFFFFFFFF)
  4870                        L10056:
  4871                        	.line	1677
  4872                        ;			return cs; /* Test for disk erro
                    r */
  4873 0B:4DD7: A5 05        	lda	<L151+cs_1
  4874 0B:4DD9: C9 FF FF     	cmp	#<$ffffffff
  4875 0B:4DDC: D0 05        	bne	L159
  4876 0B:4DDE: A5 07        	lda	<L151+cs_1+2
  4877 0B:4DE0: C9 FF FF     	cmp	#^$ffffffff
  4878                        L159:
  4879 0B:4DE3: F0 03        	beq	L160
  4880 0B:4DE5: 82 07 00     	brl	L10057
  Fri Jul 16 2021 14:42                                                Page 100


  4881                        L160:
  4882                        	.line	1678
  4883 0B:4DE8: A6 07        	ldx	<L151+cs_1+2
  4884 0B:4DEA: A5 05        	lda	<L151+cs_1
  4885 0B:4DEC: 82 D6 FF     	brl	L158
  4886                        ;		if (cs < fs->n_fatent)
  4887                        L10057:
  4888                        	.line	1679
  4889                        ;			return cs; /* It is already foll
                    owed by next cluster */
  4890 0B:4DEF: A5 05        	lda	<L151+cs_1
  4891 0B:4DF1: A0 13 00     	ldy	#$13
  4892 0B:4DF4: D7 13        	cmp	[<L151+fs_1],Y
  4893 0B:4DF6: A5 07        	lda	<L151+cs_1+2
  4894 0B:4DF8: A0 15 00     	ldy	#$15
  4895 0B:4DFB: F7 13        	sbc	[<L151+fs_1],Y
  4896 0B:4DFD: 90 03        	bcc	L161
  4897 0B:4DFF: 82 07 00     	brl	L10058
  4898                        L161:
  4899                        	.line	1680
  4900 0B:4E02: A6 07        	ldx	<L151+cs_1+2
  4901 0B:4E04: A5 05        	lda	<L151+cs_1
  4902 0B:4E06: 82 BC FF     	brl	L158
  4903                        ;		scl = clst; /* Cluster to start to find 
                    */
  4904                        L10058:
  4905                        	.line	1681
  4906 0B:4E09: A5 1E        	lda	<L150+clst_0
  4907 0B:4E0B: 85 0D        	sta	<L151+scl_1
  4908 0B:4E0D: A5 20        	lda	<L150+clst_0+2
  4909 0B:4E0F: 85 0F        	sta	<L151+scl_1+2
  4910                        ;	}
  4911                        	.line	1682
  4912                        L10055:
  4913                        ;
  4914                        ;	////k_debug_long("create_chain::fs->free_clst:",
                    fs->free_clst);
  4915                        ;
  4916                        ;	if (fs->free_clst == 0)
  4917                        	.line	1686
  4918                        ;		return 0; /* No free cluster */
  4919 0B:4E11: A0 0F 00     	ldy	#$f
  4920 0B:4E14: B7 13        	lda	[<L151+fs_1],Y
  4921 0B:4E16: A0 11 00     	ldy	#$11
  4922 0B:4E19: 17 13        	ora	[<L151+fs_1],Y
  4923 0B:4E1B: F0 03        	beq	L162
  4924 0B:4E1D: 82 0A 00     	brl	L10059
  4925                        L162:
  4926                        	.line	1687
  4927 0B:4E20: A9 00 00     	lda	#$0
  4928 0B:4E23: AA           	tax
  4929 0B:4E24: A9 00 00     	lda	#$0
  4930 0B:4E27: 82 9B FF     	brl	L158
  4931                        ;
  4932                        ;#if FF_FS_EXFAT
  4933                        ;	if (fs->fs_type == FS_EXFAT)
  4934                        ;	{ /* On the exFAT volume */
  4935                        ;		ncl = find_bitmap(fs, scl, 1); /* Find a
  Fri Jul 16 2021 14:42                                                Page 101


                     free cluster */
  4936                        ;		if (ncl == 0 || ncl == 0xFFFFFFFF) retur
                    n ncl; /* No free cluster or hard error? */
  4937                        ;		res = change_bitmap(fs, ncl, 1, 1); /* M
                    ark the cluster 'in use' */
  4938                        ;		if (res == FR_INT_ERR) return 1;
  4939                        ;		if (res == FR_DISK_ERR) return 0xFFFFFFF
                    F;
  4940                        ;		if (clst == 0)
  4941                        ;		{ /* Is it a new chain? */
  4942                        ;			obj->stat = 2; /* Set status 'co
                    ntiguous' */
  4943                        ;		}
  4944                        ;		else
  4945                        ;		{ /* It is a stretched chain */
  4946                        ;			if (obj->stat == 2 && ncl != scl
                     + 1)
  4947                        ;			{ /* Is the chain got fragmented
                    ? */
  4948                        ;				obj->n_cont = scl - obj-
                    >sclust; /* Set size of the contiguous part */
  4949                        ;				obj->stat = 3; /* Change
                     status 'just fragmented' */
  4950                        ;			}
  4951                        ;		}
  4952                        ;		if (obj->stat != 2)
  4953                        ;		{ /* Is the file non-contiguous? */
  4954                        ;			if (ncl == clst + 1)
  4955                        ;			{ /* Is the cluster next to prev
                    ious one? */
  4956                        ;				obj->n_frag = obj->n_fra
                    g ? obj->n_frag + 1 : 2; /* Increment size of last framgent 
                    */
  4957                        ;			}
  4958                        ;			else
  4959                        ;			{ /* New fragment */
  4960                        ;				if (obj->n_frag == 0) ob
                    j->n_frag = 1;
  4961                        ;				res = fill_last_frag(obj
                    , clst, ncl); /* Fill last fragment on the FAT and link it t
                    o new one */
  4962                        ;				if (res == FR_OK) obj->n
                    _frag = 1;
  4963                        ;			}
  4964                        ;		}
  4965                        ;	}
  4966                        ;	else
  4967                        ;#endif
  4968                        ;	{ /* On the FAT/FAT32 volume */
  4969                        L10059:
  4970                        	.line	1725
  4971                        ;		ncl = 0;
  4972                        	.line	1726
  4973 0B:4E2A: 64 09        	stz	<L151+ncl_1
  4974 0B:4E2C: 64 0B        	stz	<L151+ncl_1+2
  4975                        ;		if (scl == clst)
  4976                        	.line	1727
  4977                        ;		{
  Fri Jul 16 2021 14:42                                                Page 102


  4978 0B:4E2E: A5 0D        	lda	<L151+scl_1
  4979 0B:4E30: C5 1E        	cmp	<L150+clst_0
  4980 0B:4E32: D0 04        	bne	L163
  4981 0B:4E34: A5 0F        	lda	<L151+scl_1+2
  4982 0B:4E36: C5 20        	cmp	<L150+clst_0+2
  4983                        L163:
  4984 0B:4E38: F0 03        	beq	L164
  4985 0B:4E3A: 82 AA 00     	brl	L10060
  4986                        L164:
  4987                        	.line	1728
  4988                        ;			////k_debug_long("create_chain::
                    (scl == clst):",(scl == clst));
  4989                        ;
  4990                        ;			/* Stretching an existing chain?
                     */
  4991                        ;			ncl = scl + 1; /* Test if next c
                    luster is free */
  4992                        	.line	1732
  4993 0B:4E3D: 18           	clc
  4994 0B:4E3E: A9 01 00     	lda	#$1
  4995 0B:4E41: 65 0D        	adc	<L151+scl_1
  4996 0B:4E43: 85 09        	sta	<L151+ncl_1
  4997 0B:4E45: A9 00 00     	lda	#$0
  4998 0B:4E48: 65 0F        	adc	<L151+scl_1+2
  4999 0B:4E4A: 85 0B        	sta	<L151+ncl_1+2
  5000                        ;			if (ncl >= fs->n_fatent)
  5001                        	.line	1733
  5002                        ;				ncl = 2;
  5003 0B:4E4C: A5 09        	lda	<L151+ncl_1
  5004 0B:4E4E: A0 13 00     	ldy	#$13
  5005 0B:4E51: D7 13        	cmp	[<L151+fs_1],Y
  5006 0B:4E53: A5 0B        	lda	<L151+ncl_1+2
  5007 0B:4E55: A0 15 00     	ldy	#$15
  5008 0B:4E58: F7 13        	sbc	[<L151+fs_1],Y
  5009 0B:4E5A: B0 03        	bcs	L165
  5010 0B:4E5C: 82 0A 00     	brl	L10061
  5011                        L165:
  5012                        	.line	1734
  5013 0B:4E5F: A9 02 00     	lda	#$2
  5014 0B:4E62: 85 09        	sta	<L151+ncl_1
  5015 0B:4E64: A9 00 00     	lda	#$0
  5016 0B:4E67: 85 0B        	sta	<L151+ncl_1+2
  5017                        ;			cs = get_fat(obj, ncl); /* Get n
                    ext cluster status */
  5018                        L10061:
  5019                        	.line	1735
  5020 0B:4E69: D4 0B        	pei	<L151+ncl_1+2
  5021 0B:4E6B: D4 09        	pei	<L151+ncl_1
  5022 0B:4E6D: D4 1C        	pei	<L150+obj_0+2
  5023 0B:4E6F: D4 1A        	pei	<L150+obj_0
  5024 0B:4E71: 22 0D 46 0B  	jsl	~~get_fat
  5025 0B:4E75: 85 05        	sta	<L151+cs_1
  5026 0B:4E77: 86 07        	stx	<L151+cs_1+2
  5027                        ;
  5028                        ;			////k_debug_long("create_chain::
                    cs2:",cs);
  5029                        ;
  5030                        ;			if (cs == 1 || cs == 0xFFFFFFFF)
  Fri Jul 16 2021 14:42                                                Page 103


  5031                        	.line	1739
  5032                        ;				return cs; /* Test for e
                    rror */
  5033 0B:4E79: A5 05        	lda	<L151+cs_1
  5034 0B:4E7B: C9 01 00     	cmp	#<$1
  5035 0B:4E7E: D0 05        	bne	L167
  5036 0B:4E80: A5 07        	lda	<L151+cs_1+2
  5037 0B:4E82: C9 00 00     	cmp	#^$1
  5038                        L167:
  5039 0B:4E85: D0 03        	bne	L168
  5040 0B:4E87: 82 11 00     	brl	L166
  5041                        L168:
  5042 0B:4E8A: A5 05        	lda	<L151+cs_1
  5043 0B:4E8C: C9 FF FF     	cmp	#<$ffffffff
  5044 0B:4E8F: D0 05        	bne	L169
  5045 0B:4E91: A5 07        	lda	<L151+cs_1+2
  5046 0B:4E93: C9 FF FF     	cmp	#^$ffffffff
  5047                        L169:
  5048 0B:4E96: F0 03        	beq	L170
  5049 0B:4E98: 82 07 00     	brl	L10062
  5050                        L170:
  5051                        L166:
  5052                        	.line	1740
  5053 0B:4E9B: A6 07        	ldx	<L151+cs_1+2
  5054 0B:4E9D: A5 05        	lda	<L151+cs_1
  5055 0B:4E9F: 82 23 FF     	brl	L158
  5056                        ;			if (cs != 0)
  5057                        L10062:
  5058                        	.line	1741
  5059                        ;			{ /* Not free? */
  5060 0B:4EA2: A5 05        	lda	<L151+cs_1
  5061 0B:4EA4: 05 07        	ora	<L151+cs_1+2
  5062 0B:4EA6: D0 03        	bne	L171
  5063 0B:4EA8: 82 3C 00     	brl	L10063
  5064                        L171:
  5065                        	.line	1742
  5066                        ;				cs = fs->last_clst; /* S
                    tart at suggested cluster if it is valid */
  5067                        	.line	1743
  5068 0B:4EAB: A0 0B 00     	ldy	#$b
  5069 0B:4EAE: B7 13        	lda	[<L151+fs_1],Y
  5070 0B:4EB0: 85 05        	sta	<L151+cs_1
  5071 0B:4EB2: A0 0D 00     	ldy	#$d
  5072 0B:4EB5: B7 13        	lda	[<L151+fs_1],Y
  5073 0B:4EB7: 85 07        	sta	<L151+cs_1+2
  5074                        ;				if (cs >= 2 && cs < fs->
                    n_fatent)
  5075                        	.line	1744
  5076                        ;					scl = cs;
  5077 0B:4EB9: A5 05        	lda	<L151+cs_1
  5078 0B:4EBB: C9 02 00     	cmp	#<$2
  5079 0B:4EBE: A5 07        	lda	<L151+cs_1+2
  5080 0B:4EC0: E9 00 00     	sbc	#^$2
  5081 0B:4EC3: B0 03        	bcs	L172
  5082 0B:4EC5: 82 1B 00     	brl	L10064
  5083                        L172:
  5084 0B:4EC8: A5 05        	lda	<L151+cs_1
  5085 0B:4ECA: A0 13 00     	ldy	#$13
  Fri Jul 16 2021 14:42                                                Page 104


  5086 0B:4ECD: D7 13        	cmp	[<L151+fs_1],Y
  5087 0B:4ECF: A5 07        	lda	<L151+cs_1+2
  5088 0B:4ED1: A0 15 00     	ldy	#$15
  5089 0B:4ED4: F7 13        	sbc	[<L151+fs_1],Y
  5090 0B:4ED6: 90 03        	bcc	L173
  5091 0B:4ED8: 82 08 00     	brl	L10064
  5092                        L173:
  5093                        	.line	1745
  5094 0B:4EDB: A5 05        	lda	<L151+cs_1
  5095 0B:4EDD: 85 0D        	sta	<L151+scl_1
  5096 0B:4EDF: A5 07        	lda	<L151+cs_1+2
  5097 0B:4EE1: 85 0F        	sta	<L151+scl_1+2
  5098                        ;				ncl = 0;
  5099                        L10064:
  5100                        	.line	1746
  5101 0B:4EE3: 64 09        	stz	<L151+ncl_1
  5102 0B:4EE5: 64 0B        	stz	<L151+ncl_1+2
  5103                        ;			}
  5104                        	.line	1747
  5105                        ;		}
  5106                        L10063:
  5107                        	.line	1748
  5108                        ;		if (ncl == 0)
  5109                        L10060:
  5110                        	.line	1749
  5111                        ;		{ /* The new cluster cannot be contiguou
                    s and find another fragment */
  5112 0B:4EE7: A5 09        	lda	<L151+ncl_1
  5113 0B:4EE9: 05 0B        	ora	<L151+ncl_1+2
  5114 0B:4EEB: F0 03        	beq	L174
  5115 0B:4EED: 82 A0 00     	brl	L10065
  5116                        L174:
  5117                        	.line	1750
  5118                        ;			ncl = scl; /* Start cluster */
  5119                        	.line	1751
  5120 0B:4EF0: A5 0D        	lda	<L151+scl_1
  5121 0B:4EF2: 85 09        	sta	<L151+ncl_1
  5122 0B:4EF4: A5 0F        	lda	<L151+scl_1+2
  5123 0B:4EF6: 85 0B        	sta	<L151+ncl_1+2
  5124                        ;			for (;;)
  5125                        	.line	1752
  5126                        L10068:
  5127                        ;			{
  5128                        	.line	1753
  5129                        ;				ncl++; /* Next cluster *
                    /
  5130                        	.line	1754
  5131 0B:4EF8: E6 09        	inc	<L151+ncl_1
  5132 0B:4EFA: D0 02        	bne	L175
  5133 0B:4EFC: E6 0B        	inc	<L151+ncl_1+2
  5134                        L175:
  5135                        ;				if (ncl >= fs->n_fatent)
  5136                        	.line	1755
  5137                        ;				{ /* Check wrap-around *
                    /
  5138 0B:4EFE: A5 09        	lda	<L151+ncl_1
  5139 0B:4F00: A0 13 00     	ldy	#$13
  5140 0B:4F03: D7 13        	cmp	[<L151+fs_1],Y
  Fri Jul 16 2021 14:42                                                Page 105


  5141 0B:4F05: A5 0B        	lda	<L151+ncl_1+2
  5142 0B:4F07: A0 15 00     	ldy	#$15
  5143 0B:4F0A: F7 13        	sbc	[<L151+fs_1],Y
  5144 0B:4F0C: B0 03        	bcs	L176
  5145 0B:4F0E: 82 21 00     	brl	L10069
  5146                        L176:
  5147                        	.line	1756
  5148                        ;					ncl = 2;
  5149                        	.line	1757
  5150 0B:4F11: A9 02 00     	lda	#$2
  5151 0B:4F14: 85 09        	sta	<L151+ncl_1
  5152 0B:4F16: A9 00 00     	lda	#$0
  5153 0B:4F19: 85 0B        	sta	<L151+ncl_1+2
  5154                        ;					if (ncl > scl)
  5155                        	.line	1758
  5156                        ;						return 0
                    ; /* No free cluster found? */
  5157 0B:4F1B: A5 0D        	lda	<L151+scl_1
  5158 0B:4F1D: C5 09        	cmp	<L151+ncl_1
  5159 0B:4F1F: A5 0F        	lda	<L151+scl_1+2
  5160 0B:4F21: E5 0B        	sbc	<L151+ncl_1+2
  5161 0B:4F23: 90 03        	bcc	L177
  5162 0B:4F25: 82 0A 00     	brl	L10070
  5163                        L177:
  5164                        	.line	1759
  5165 0B:4F28: A9 00 00     	lda	#$0
  5166 0B:4F2B: AA           	tax
  5167 0B:4F2C: A9 00 00     	lda	#$0
  5168 0B:4F2F: 82 93 FE     	brl	L158
  5169                        ;				}
  5170                        L10070:
  5171                        	.line	1760
  5172                        ;				cs = get_fat(obj, ncl); 
                    /* Get the cluster status */
  5173                        L10069:
  5174                        	.line	1761
  5175 0B:4F32: D4 0B        	pei	<L151+ncl_1+2
  5176 0B:4F34: D4 09        	pei	<L151+ncl_1
  5177 0B:4F36: D4 1C        	pei	<L150+obj_0+2
  5178 0B:4F38: D4 1A        	pei	<L150+obj_0
  5179 0B:4F3A: 22 0D 46 0B  	jsl	~~get_fat
  5180 0B:4F3E: 85 05        	sta	<L151+cs_1
  5181 0B:4F40: 86 07        	stx	<L151+cs_1+2
  5182                        ;
  5183                        ;
  5184                        ;				////k_debug_long("create
                    _chain::get_fat::cs:",cs);
  5185                        ;
  5186                        ;
  5187                        ;				if (cs == 0)
  5188                        	.line	1767
  5189                        ;					break; /* Found 
                    a free cluster? */
  5190 0B:4F42: A5 05        	lda	<L151+cs_1
  5191 0B:4F44: 05 07        	ora	<L151+cs_1+2
  5192 0B:4F46: D0 03        	bne	L178
  5193 0B:4F48: 82 45 00     	brl	L10067
  5194                        L178:
  Fri Jul 16 2021 14:42                                                Page 106


  5195                        ;				if (cs == 1 || cs == 0xF
                    FFFFFFF)
  5196                        	.line	1769
  5197                        ;					return cs; /* Te
                    st for error */
  5198 0B:4F4B: A5 05        	lda	<L151+cs_1
  5199 0B:4F4D: C9 01 00     	cmp	#<$1
  5200 0B:4F50: D0 05        	bne	L180
  5201 0B:4F52: A5 07        	lda	<L151+cs_1+2
  5202 0B:4F54: C9 00 00     	cmp	#^$1
  5203                        L180:
  5204 0B:4F57: D0 03        	bne	L181
  5205 0B:4F59: 82 11 00     	brl	L179
  5206                        L181:
  5207 0B:4F5C: A5 05        	lda	<L151+cs_1
  5208 0B:4F5E: C9 FF FF     	cmp	#<$ffffffff
  5209 0B:4F61: D0 05        	bne	L182
  5210 0B:4F63: A5 07        	lda	<L151+cs_1+2
  5211 0B:4F65: C9 FF FF     	cmp	#^$ffffffff
  5212                        L182:
  5213 0B:4F68: F0 03        	beq	L183
  5214 0B:4F6A: 82 07 00     	brl	L10071
  5215                        L183:
  5216                        L179:
  5217                        	.line	1770
  5218 0B:4F6D: A6 07        	ldx	<L151+cs_1+2
  5219 0B:4F6F: A5 05        	lda	<L151+cs_1
  5220 0B:4F71: 82 51 FE     	brl	L158
  5221                        ;				if (ncl == scl)
  5222                        L10071:
  5223                        	.line	1771
  5224                        ;					return 0; /* No 
                    free cluster found? */
  5225 0B:4F74: A5 09        	lda	<L151+ncl_1
  5226 0B:4F76: C5 0D        	cmp	<L151+scl_1
  5227 0B:4F78: D0 04        	bne	L184
  5228 0B:4F7A: A5 0B        	lda	<L151+ncl_1+2
  5229 0B:4F7C: C5 0F        	cmp	<L151+scl_1+2
  5230                        L184:
  5231 0B:4F7E: F0 03        	beq	L185
  5232 0B:4F80: 82 0A 00     	brl	L10072
  5233                        L185:
  5234                        	.line	1772
  5235 0B:4F83: A9 00 00     	lda	#$0
  5236 0B:4F86: AA           	tax
  5237 0B:4F87: A9 00 00     	lda	#$0
  5238 0B:4F8A: 82 38 FE     	brl	L158
  5239                        ;			}
  5240                        L10072:
  5241                        	.line	1773
  5242                        L10066:
  5243 0B:4F8D: 82 68 FF     	brl	L10068
  5244                        L10067:
  5245                        ;		}
  5246                        	.line	1774
  5247                        ;		res = put_fat(fs, ncl, 0xFFFFFFFF); /* M
                    ark the new cluster 'EOC' */
  5248                        L10065:
  Fri Jul 16 2021 14:42                                                Page 107


  5249                        	.line	1775
  5250 0B:4F90: F4 FF FF     	pea	#^$ffffffff
  5251 0B:4F93: F4 FF FF     	pea	#<$ffffffff
  5252 0B:4F96: D4 0B        	pei	<L151+ncl_1+2
  5253 0B:4F98: D4 09        	pei	<L151+ncl_1
  5254 0B:4F9A: D4 15        	pei	<L151+fs_1+2
  5255 0B:4F9C: D4 13        	pei	<L151+fs_1
  5256 0B:4F9E: 22 7D 48 0B  	jsl	~~put_fat
  5257 0B:4FA2: 85 11        	sta	<L151+res_1
  5258                        ;		if (res == FR_OK && clst != 0)
  5259                        	.line	1776
  5260                        ;		{
  5261 0B:4FA4: A5 11        	lda	<L151+res_1
  5262 0B:4FA6: F0 03        	beq	L186
  5263 0B:4FA8: 82 1B 00     	brl	L10073
  5264                        L186:
  5265 0B:4FAB: A5 1E        	lda	<L150+clst_0
  5266 0B:4FAD: 05 20        	ora	<L150+clst_0+2
  5267 0B:4FAF: D0 03        	bne	L187
  5268 0B:4FB1: 82 12 00     	brl	L10073
  5269                        L187:
  5270                        	.line	1777
  5271                        ;			res = put_fat(fs, clst, ncl); /*
                     Link it from the previous one if needed */
  5272                        	.line	1778
  5273 0B:4FB4: D4 0B        	pei	<L151+ncl_1+2
  5274 0B:4FB6: D4 09        	pei	<L151+ncl_1
  5275 0B:4FB8: D4 20        	pei	<L150+clst_0+2
  5276 0B:4FBA: D4 1E        	pei	<L150+clst_0
  5277 0B:4FBC: D4 15        	pei	<L151+fs_1+2
  5278 0B:4FBE: D4 13        	pei	<L151+fs_1
  5279 0B:4FC0: 22 7D 48 0B  	jsl	~~put_fat
  5280 0B:4FC4: 85 11        	sta	<L151+res_1
  5281                        ;		}
  5282                        	.line	1779
  5283                        ;	}
  5284                        L10073:
  5285                        	.line	1780
  5286                        ;
  5287                        ;	if (res == FR_OK)
  5288                        	.line	1782
  5289                        ;	{ /* Update FSINFO if function succeeded. */
  5290 0B:4FC6: A5 11        	lda	<L151+res_1
  5291 0B:4FC8: F0 03        	beq	L188
  5292 0B:4FCA: 82 6D 00     	brl	L10074
  5293                        L188:
  5294                        	.line	1783
  5295                        ;		fs->last_clst = ncl;
  5296                        	.line	1784
  5297 0B:4FCD: A5 09        	lda	<L151+ncl_1
  5298 0B:4FCF: A0 0B 00     	ldy	#$b
  5299 0B:4FD2: 97 13        	sta	[<L151+fs_1],Y
  5300 0B:4FD4: A5 0B        	lda	<L151+ncl_1+2
  5301 0B:4FD6: A0 0D 00     	ldy	#$d
  5302 0B:4FD9: 97 13        	sta	[<L151+fs_1],Y
  5303                        ;		if (fs->free_clst <= fs->n_fatent - 2)
  5304                        	.line	1785
  5305                        ;			fs->free_clst--;
  Fri Jul 16 2021 14:42                                                Page 108


  5306 0B:4FDB: 18           	clc
  5307 0B:4FDC: A9 FE FF     	lda	#$fffe
  5308 0B:4FDF: A0 13 00     	ldy	#$13
  5309 0B:4FE2: 77 13        	adc	[<L151+fs_1],Y
  5310 0B:4FE4: 85 01        	sta	<R0
  5311 0B:4FE6: A9 FF FF     	lda	#$ffff
  5312 0B:4FE9: A0 15 00     	ldy	#$15
  5313 0B:4FEC: 77 13        	adc	[<L151+fs_1],Y
  5314 0B:4FEE: 85 03        	sta	<R0+2
  5315 0B:4FF0: A5 01        	lda	<R0
  5316 0B:4FF2: A0 0F 00     	ldy	#$f
  5317 0B:4FF5: D7 13        	cmp	[<L151+fs_1],Y
  5318 0B:4FF7: A5 03        	lda	<R0+2
  5319 0B:4FF9: A0 11 00     	ldy	#$11
  5320 0B:4FFC: F7 13        	sbc	[<L151+fs_1],Y
  5321 0B:4FFE: B0 03        	bcs	L189
  5322 0B:5000: 82 1B 00     	brl	L10075
  5323                        L189:
  5324                        	.line	1786
  5325 0B:5003: 18           	clc
  5326 0B:5004: A9 FF FF     	lda	#$ffff
  5327 0B:5007: A0 0F 00     	ldy	#$f
  5328 0B:500A: 77 13        	adc	[<L151+fs_1],Y
  5329 0B:500C: A0 0F 00     	ldy	#$f
  5330 0B:500F: 97 13        	sta	[<L151+fs_1],Y
  5331 0B:5011: A9 FF FF     	lda	#$ffff
  5332 0B:5014: A0 11 00     	ldy	#$11
  5333 0B:5017: 77 13        	adc	[<L151+fs_1],Y
  5334 0B:5019: A0 11 00     	ldy	#$11
  5335 0B:501C: 97 13        	sta	[<L151+fs_1],Y
  5336                        ;		fs->fsi_flag |= 1;
  5337                        L10075:
  5338                        	.line	1787
  5339 0B:501E: 18           	clc
  5340 0B:501F: A9 04 00     	lda	#$4
  5341 0B:5022: 65 13        	adc	<L151+fs_1
  5342 0B:5024: 85 01        	sta	<R0
  5343 0B:5026: A9 00 00     	lda	#$0
  5344 0B:5029: 65 15        	adc	<L151+fs_1+2
  5345 0B:502B: 85 03        	sta	<R0+2
  5346 0B:502D: E2 20        	sep	#$20
  5347                        	longa	off
  5348 0B:502F: A7 01        	lda	[<R0]
  5349 0B:5031: 09 01        	ora	#<$1
  5350 0B:5033: 87 01        	sta	[<R0]
  5351 0B:5035: C2 20        	rep	#$20
  5352                        	longa	on
  5353                        ;	}
  5354                        	.line	1788
  5355                        ;	else
  5356 0B:5037: 82 26 00     	brl	L10076
  5357                        L10074:
  5358                        ;	{
  5359                        	.line	1790
  5360                        ;		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF 
                    : 1; /* Failed. Generate error status */
  5361                        	.line	1791
  5362 0B:503A: A5 11        	lda	<L151+res_1
  Fri Jul 16 2021 14:42                                                Page 109


  5363 0B:503C: C9 01 00     	cmp	#<$1
  5364 0B:503F: F0 03        	beq	L191
  5365 0B:5041: 82 09 00     	brl	L190
  5366                        L191:
  5367 0B:5044: A9 FF FF     	lda	#$ffff
  5368 0B:5047: AA           	tax
  5369 0B:5048: A9 FF FF     	lda	#$ffff
  5370 0B:504B: 80 07        	bra	L192
  5371                        L190:
  5372 0B:504D: A9 00 00     	lda	#$0
  5373 0B:5050: AA           	tax
  5374 0B:5051: A9 01 00     	lda	#$1
  5375                        L192:
  5376 0B:5054: 85 01        	sta	<R0
  5377 0B:5056: 86 03        	stx	<R0+2
  5378 0B:5058: A5 01        	lda	<R0
  5379 0B:505A: 85 09        	sta	<L151+ncl_1
  5380 0B:505C: A5 03        	lda	<R0+2
  5381 0B:505E: 85 0B        	sta	<L151+ncl_1+2
  5382                        ;	}
  5383                        	.line	1792
  5384                        L10076:
  5385                        ;
  5386                        ;	return ncl; /* Return new cluster number or erro
                    r status */
  5387                        	.line	1794
  5388 0B:5060: A6 0B        	ldx	<L151+ncl_1+2
  5389 0B:5062: A5 09        	lda	<L151+ncl_1
  5390 0B:5064: 82 5E FD     	brl	L158
  5391                        ;}
  5392                        	.line	1795
  5393                        	.endblock	1795
  5394             00000016   L150	equ	22
  5395             00000005   L151	equ	5
  5396 0B:5067:              	ends
  5397                        	efunc
  5398                        	.endfunc	1795,5,22
  5399                        	.line	1795
  5400                        ;
  5401                        ;#endif /* !FF_FS_READONLY */
  5402                        ;
  5403                        ;#if FF_USE_FASTSEEK
  5404                        ;/*-----------------------------------------------
                    ------------------------*/
  5405                        ;/* FAT handling - Convert offset into cluster wit
                    h link map table        */
  5406                        ;/*-----------------------------------------------
                    ------------------------*/
  5407                        ;
  5408                        ;static DWORD clmt_clust ( /* <2:Error, >=2:Cluste
                    r number */
  5409                        ;		FIL* fp, /* Pointer to the file object *
                    /
  5410                        ;		FSIZE_t ofs /* File offset to be convert
                    ed to cluster# */
  5411                        ;)
  5412                        ;{
  5413                        ;	DWORD cl, ncl, *tbl;
  Fri Jul 16 2021 14:42                                                Page 110


  5414                        ;	FATFS *fs = fp->obj.fs;
  5415                        ;
  5416                        ;	tbl = fp->cltbl + 1; /* Top of CLMT */
  5417                        ;	cl = (DWORD)(ofs / SS(fs) / fs->csize); /* Clust
                    er order from top of the file */
  5418                        ;	for (;;)
  5419                        ;	{
  5420                        ;		ncl = *tbl++; /* Number of cluters in th
                    e fragment */
  5421                        ;		if (ncl == 0) return 0; /* End of table?
                     (error) */
  5422                        ;		if (cl < ncl) break; /* In this fragment
                    ? */
  5423                        ;		cl -= ncl; tbl++; /* Next fragment */
  5424                        ;	}
  5425                        ;	return cl + *tbl; /* Return the cluster number *
                    /
  5426                        ;}
  5427                        ;
  5428                        ;#endif	/* FF_USE_FASTSEEK */
  5429                        ;
  5430                        ;/*-----------------------------------------------
                    ------------------------*/
  5431                        ;/* Directory handling - Fill a cluster with zeros
                                            */
  5432                        ;/*-----------------------------------------------
                    ------------------------*/
  5433                        ;
  5434                        ;#if !FF_FS_READONLY
  5435                        ;static FRESULT dir_clear( /* Returns FR_OK or FR_
                    DISK_ERR */
  5436                        ;FATFS *fs, /* Filesystem object */
  5437                        ;DWORD clst /* Directory table to clear */
  5438                        ;)
  5439                        ;{
  5440                        	.line	1831
  5441                        	.line	1835
  5442                        	FFDOS
  5443                        	func
  5444                        	.function	1835
  5445                        ~~dir_clear:
  5446                        	longa	on
  5447                        	longi	on
  5448 0B:5067: 3B           	tsc
  5449 0B:5068: 38           	sec
  5450 0B:5069: E9 14 00     	sbc	#L193
  5451 0B:506C: 1B           	tcs
  5452 0B:506D: 0B           	phd
  5453 0B:506E: 5B           	tcd
  5454             00000004   fs_0	set	4
  5455             00000008   clst_0	set	8
  5456                        	.block	1835
  5457                        ;	LBA_t sect;
  5458                        ;	UINT n, szb;
  5459                        ;	BYTE *ibuf;
  5460                        ;
  5461                        ;	////k_debug_long("dir_clear:",clst);
  5462                        ;
  Fri Jul 16 2021 14:42                                                Page 111


  5463                        ;	if (sync_window(fs) != FR_OK)
  5464             00000000   sect_1	set	0
  5465             00000004   n_1	set	4
  5466             00000006   szb_1	set	6
  5467             00000008   ibuf_1	set	8
  5468                        	.sym	sect,0,18,1,32
  5469                        	.sym	n,4,16,1,16
  5470                        	.sym	szb,6,16,1,16
  5471                        	.sym	ibuf,8,142,1,32
  5472                        	.sym	fs,4,138,6,32,49
  5473                        	.sym	clst,8,18,6,32
  5474                        	.line	1842
  5475                        ;		return FR_DISK_ERR; /* Flush disk access
                     window */
  5476 0B:506F: D4 1A        	pei	<L193+fs_0+2
  5477 0B:5071: D4 18        	pei	<L193+fs_0
  5478 0B:5073: 22 91 42 0B  	jsl	~~sync_window
  5479 0B:5077: AA           	tax
  5480 0B:5078: D0 03        	bne	L196
  5481 0B:507A: 82 15 00     	brl	L10077
  5482                        L196:
  5483                        	.line	1843
  5484 0B:507D: A9 01 00     	lda	#$1
  5485                        L197:
  5486 0B:5080: A8           	tay
  5487 0B:5081: A5 16        	lda	<L193+2
  5488 0B:5083: 85 1E        	sta	<L193+2+8
  5489 0B:5085: A5 15        	lda	<L193+1
  5490 0B:5087: 85 1D        	sta	<L193+1+8
  5491 0B:5089: 2B           	pld
  5492 0B:508A: 3B           	tsc
  5493 0B:508B: 18           	clc
  5494 0B:508C: 69 1C 00     	adc	#L193+8
  5495 0B:508F: 1B           	tcs
  5496 0B:5090: 98           	tya
  5497 0B:5091: 6B           	rtl
  5498                        ;
  5499                        ;
  5500                        ;
  5501                        ;	sect = clst2sect(fs, clst); /* Top of the cluste
                    r */
  5502                        L10077:
  5503                        	.line	1847
  5504 0B:5092: D4 1E        	pei	<L193+clst_0+2
  5505 0B:5094: D4 1C        	pei	<L193+clst_0
  5506 0B:5096: D4 1A        	pei	<L193+fs_0+2
  5507 0B:5098: D4 18        	pei	<L193+fs_0
  5508 0B:509A: 22 7E 45 0B  	jsl	~~clst2sect
  5509 0B:509E: 85 09        	sta	<L194+sect_1
  5510 0B:50A0: 86 0B        	stx	<L194+sect_1+2
  5511                        ;	fs->winsect = sect; /* Set window to top of the 
                    cluster */
  5512                        	.line	1848
  5513 0B:50A2: A5 09        	lda	<L194+sect_1
  5514 0B:50A4: A0 2B 00     	ldy	#$2b
  5515 0B:50A7: 97 18        	sta	[<L193+fs_0],Y
  5516 0B:50A9: A5 0B        	lda	<L194+sect_1+2
  5517 0B:50AB: A0 2D 00     	ldy	#$2d
  Fri Jul 16 2021 14:42                                                Page 112


  5518 0B:50AE: 97 18        	sta	[<L193+fs_0],Y
  5519                        ;	mem_set(fs->win, 0, sizeof fs->win); /* Clear wi
                    ndow buffer */
  5520                        	.line	1849
  5521 0B:50B0: F4 00 02     	pea	#<$200
  5522 0B:50B3: F4 00 00     	pea	#<$0
  5523 0B:50B6: 18           	clc
  5524 0B:50B7: A9 2F 00     	lda	#$2f
  5525 0B:50BA: 65 18        	adc	<L193+fs_0
  5526 0B:50BC: 85 01        	sta	<R0
  5527 0B:50BE: A9 00 00     	lda	#$0
  5528 0B:50C1: 65 1A        	adc	<L193+fs_0+2
  5529 0B:50C3: 85 03        	sta	<R0+2
  5530 0B:50C5: D4 03        	pei	<R0+2
  5531 0B:50C7: D4 01        	pei	<R0
  5532 0B:50C9: 22 5F 41 0B  	jsl	~~mem_set
  5533                        ;#if FF_USE_LFN == 3		/* Quick table c
                    lear by using multi-secter write */
  5534                        ;	/* Allocate a temporary buffer */
  5535                        ;	for (szb = ((DWORD)fs->csize * SS(fs) >= MAX_MAL
                    LOC) ? MAX_MALLOC : fs->csize * SS(fs), ibuf = 0; szb > SS(f
                    s) && (ibuf = ff_memalloc(szb)) == 0; szb /= 2);
  5536                        ;
  5537                        ;
  5538                        ;	if (szb > SS(fs))
  5539                        ;	{ /* Buffer allocated? */
  5540                        ;		mem_set(ibuf, 0, szb);
  5541                        ;		szb /= SS(fs); /* Bytes -> Sectors */
  5542                        ;		for (n = 0; n < fs->csize && disk_write(
                    fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb); /* Fill
                     the cluster with 0 */
  5543                        ;		ff_memfree(ibuf);
  5544                        ;	}
  5545                        ;	else
  5546                        ;#endif
  5547                        ;	{
  5548                        	.line	1864
  5549                        ;		ibuf = fs->win;
  5550                        	.line	1865
  5551 0B:50CD: 18           	clc
  5552 0B:50CE: A9 2F 00     	lda	#$2f
  5553 0B:50D1: 65 18        	adc	<L193+fs_0
  5554 0B:50D3: 85 11        	sta	<L194+ibuf_1
  5555 0B:50D5: A9 00 00     	lda	#$0
  5556 0B:50D8: 65 1A        	adc	<L193+fs_0+2
  5557 0B:50DA: 85 13        	sta	<L194+ibuf_1+2
  5558                        ;		szb = 1; /* Use window buffer (many sing
                    le-sector writes may take a time) */
  5559                        	.line	1866
  5560 0B:50DC: A9 01 00     	lda	#$1
  5561 0B:50DF: 85 0F        	sta	<L194+szb_1
  5562                        ;		for (n = 0;
  5563                        	.line	1867
  5564                        ;				n < fs->csize
  5565                        ;						&& disk_
                    write(fs->pdrv, ibuf, sect + n, szb) == RES_OK;
  5566 0B:50E1: 64 0D        	stz	<L194+n_1
  5567 0B:50E3: 82 07 00     	brl	L10081
  Fri Jul 16 2021 14:42                                                Page 113


  5568                        ;				n += szb)
  5569                        L10080:
  5570                        ;			; /* Fill the cluster with 0 */
  5571                        	.line	1871
  5572                        L10078:
  5573 0B:50E6: 18           	clc
  5574 0B:50E7: A5 0D        	lda	<L194+n_1
  5575 0B:50E9: 65 0F        	adc	<L194+szb_1
  5576 0B:50EB: 85 0D        	sta	<L194+n_1
  5577                        L10081:
  5578 0B:50ED: A5 0D        	lda	<L194+n_1
  5579 0B:50EF: A0 09 00     	ldy	#$9
  5580 0B:50F2: D7 18        	cmp	[<L193+fs_0],Y
  5581 0B:50F4: 90 03        	bcc	L199
  5582 0B:50F6: 82 2D 00     	brl	L198
  5583                        L199:
  5584 0B:50F9: D4 0F        	pei	<L194+szb_1
  5585 0B:50FB: A5 0D        	lda	<L194+n_1
  5586 0B:50FD: 85 01        	sta	<R0
  5587 0B:50FF: 64 03        	stz	<R0+2
  5588 0B:5101: 18           	clc
  5589 0B:5102: A5 01        	lda	<R0
  5590 0B:5104: 65 09        	adc	<L194+sect_1
  5591 0B:5106: 85 05        	sta	<R1
  5592 0B:5108: A5 03        	lda	<R0+2
  5593 0B:510A: 65 0B        	adc	<L194+sect_1+2
  5594 0B:510C: 85 07        	sta	<R1+2
  5595 0B:510E: D4 07        	pei	<R1+2
  5596 0B:5110: D4 05        	pei	<R1
  5597 0B:5112: D4 13        	pei	<L194+ibuf_1+2
  5598 0B:5114: D4 11        	pei	<L194+ibuf_1
  5599 0B:5116: A0 01 00     	ldy	#$1
  5600 0B:5119: B7 18        	lda	[<L193+fs_0],Y
  5601 0B:511B: 48           	pha
  5602 0B:511C: 22 xx xx xx  	jsl	~~disk_write
  5603 0B:5120: AA           	tax
  5604 0B:5121: D0 03        	bne	L200
  5605 0B:5123: 82 C0 FF     	brl	L10080
  5606                        L200:
  5607                        L198:
  5608                        L10079:
  5609                        ;	}
  5610                        	.line	1872
  5611                        ;
  5612                        ;	////k_debug_long("dir_clear:ret:",(n == fs->csiz
                    e));
  5613                        ;
  5614                        ;	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
  5615                        	.line	1876
  5616 0B:5126: A5 0D        	lda	<L194+n_1
  5617 0B:5128: A0 09 00     	ldy	#$9
  5618 0B:512B: D7 18        	cmp	[<L193+fs_0],Y
  5619 0B:512D: F0 03        	beq	L202
  5620 0B:512F: 82 05 00     	brl	L201
  5621                        L202:
  5622 0B:5132: A9 00 00     	lda	#$0
  5623 0B:5135: 80 03        	bra	L203
  5624                        L201:
  Fri Jul 16 2021 14:42                                                Page 114


  5625 0B:5137: A9 01 00     	lda	#$1
  5626                        L203:
  5627 0B:513A: 82 43 FF     	brl	L197
  5628                        ;}
  5629                        	.line	1877
  5630                        	.endblock	1877
  5631             00000014   L193	equ	20
  5632             00000009   L194	equ	9
  5633 0B:513D:              	ends
  5634                        	efunc
  5635                        	.endfunc	1877,9,20
  5636                        	.line	1877
  5637                        ;#endif	/* !FF_FS_READONLY */
  5638                        ;
  5639                        ;/*-----------------------------------------------
                    ------------------------*/
  5640                        ;/* Directory handling - Set directory index      
                                            */
  5641                        ;/*-----------------------------------------------
                    ------------------------*/
  5642                        ;
  5643                        ;static FRESULT dir_sdi( /* FR_OK(0):succeeded, !=
                    0:error */
  5644                        ;DIR* dp, /* Pointer to directory object */
  5645                        ;DWORD ofs /* Offset of directory table */
  5646                        ;)
  5647                        ;{
  5648                        	.line	1884
  5649                        	.line	1888
  5650                        	FFDOS
  5651                        	func
  5652                        	.function	1888
  5653                        ~~dir_sdi:
  5654                        	longa	on
  5655                        	longi	on
  5656 0B:513D: 3B           	tsc
  5657 0B:513E: 38           	sec
  5658 0B:513F: E9 14 00     	sbc	#L204
  5659 0B:5142: 1B           	tcs
  5660 0B:5143: 0B           	phd
  5661 0B:5144: 5B           	tcd
  5662             00000004   dp_0	set	4
  5663             00000008   ofs_0	set	8
  5664                        	.block	1888
  5665                        ;	DWORD csz, clst;
  5666                        ;	FATFS *fs = dp->obj.fs;
  5667                        ;
  5668                        ;	if (ofs
  5669             00000000   csz_1	set	0
  5670             00000004   clst_1	set	4
  5671             00000008   fs_1	set	8
  5672                        	.sym	csz,0,18,1,32
  5673                        	.sym	clst,4,18,1,32
  5674                        	.sym	fs,8,138,1,32,49
  5675                        	.sym	dp,4,138,6,32,52
  5676                        	.sym	ofs,8,18,6,32
  5677 0B:5145: A7 18        	lda	[<L204+dp_0]
  5678 0B:5147: 85 11        	sta	<L205+fs_1
  Fri Jul 16 2021 14:42                                                Page 115


  5679 0B:5149: A0 02 00     	ldy	#$2
  5680 0B:514C: B7 18        	lda	[<L204+dp_0],Y
  5681 0B:514E: 85 13        	sta	<L205+fs_1+2
  5682                        	.line	1892
  5683                        ;			>= (DWORD) (
  5684                        ;					(FF_FS_EXFAT && 
                    fs->fs_type == FS_EXFAT) ?
  5685                        ;							
                    MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE)
  5686                        ;	{ /* Check range of offset and alignment */
  5687 0B:5150: 82 16 00     	brl	L208
  5688 0B:5153: E2 20        	sep	#$20
  5689                        	longa	off
  5690 0B:5155: A7 11        	lda	[<L205+fs_1]
  5691 0B:5157: C9 04        	cmp	#<$4
  5692 0B:5159: C2 20        	rep	#$20
  5693                        	longa	on
  5694 0B:515B: F0 03        	beq	L209
  5695 0B:515D: 82 09 00     	brl	L208
  5696                        L209:
  5697 0B:5160: A9 00 10     	lda	#$1000
  5698 0B:5163: AA           	tax
  5699 0B:5164: A9 00 00     	lda	#$0
  5700 0B:5167: 80 07        	bra	L210
  5701                        L208:
  5702 0B:5169: A9 20 00     	lda	#$20
  5703 0B:516C: AA           	tax
  5704 0B:516D: A9 00 00     	lda	#$0
  5705                        L210:
  5706 0B:5170: 85 01        	sta	<R0
  5707 0B:5172: 86 03        	stx	<R0+2
  5708 0B:5174: A5 1C        	lda	<L204+ofs_0
  5709 0B:5176: C5 01        	cmp	<R0
  5710 0B:5178: A5 1E        	lda	<L204+ofs_0+2
  5711 0B:517A: E5 03        	sbc	<R0+2
  5712 0B:517C: 90 03        	bcc	L211
  5713 0B:517E: 82 0A 00     	brl	L207
  5714                        L211:
  5715 0B:5181: A5 1C        	lda	<L204+ofs_0
  5716 0B:5183: 29 1F 00     	and	#<$1f
  5717 0B:5186: D0 03        	bne	L212
  5718 0B:5188: 82 15 00     	brl	L10082
  5719                        L212:
  5720                        L207:
  5721                        	.line	1896
  5722                        ;		return FR_INT_ERR;
  5723                        	.line	1897
  5724 0B:518B: A9 02 00     	lda	#$2
  5725                        L213:
  5726 0B:518E: A8           	tay
  5727 0B:518F: A5 16        	lda	<L204+2
  5728 0B:5191: 85 1E        	sta	<L204+2+8
  5729 0B:5193: A5 15        	lda	<L204+1
  5730 0B:5195: 85 1D        	sta	<L204+1+8
  5731 0B:5197: 2B           	pld
  5732 0B:5198: 3B           	tsc
  5733 0B:5199: 18           	clc
  5734 0B:519A: 69 1C 00     	adc	#L204+8
  Fri Jul 16 2021 14:42                                                Page 116


  5735 0B:519D: 1B           	tcs
  5736 0B:519E: 98           	tya
  5737 0B:519F: 6B           	rtl
  5738                        ;	}
  5739                        	.line	1898
  5740                        ;	dp->dptr = ofs; /* Set current offset */
  5741                        L10082:
  5742                        	.line	1899
  5743 0B:51A0: A5 1C        	lda	<L204+ofs_0
  5744 0B:51A2: A0 10 00     	ldy	#$10
  5745 0B:51A5: 97 18        	sta	[<L204+dp_0],Y
  5746 0B:51A7: A5 1E        	lda	<L204+ofs_0+2
  5747 0B:51A9: A0 12 00     	ldy	#$12
  5748 0B:51AC: 97 18        	sta	[<L204+dp_0],Y
  5749                        ;	clst = dp->obj.sclust; /* Table start cluster (0
                    :root) */
  5750                        	.line	1900
  5751 0B:51AE: A0 08 00     	ldy	#$8
  5752 0B:51B1: B7 18        	lda	[<L204+dp_0],Y
  5753 0B:51B3: 85 0D        	sta	<L205+clst_1
  5754 0B:51B5: A0 0A 00     	ldy	#$a
  5755 0B:51B8: B7 18        	lda	[<L204+dp_0],Y
  5756 0B:51BA: 85 0F        	sta	<L205+clst_1+2
  5757                        ;	if (clst == 0 && fs->fs_type >= FS_FAT32)
  5758                        	.line	1901
  5759                        ;	{ /* Replace cluster# 0 with root cluster# */
  5760 0B:51BC: A5 0D        	lda	<L205+clst_1
  5761 0B:51BE: 05 0F        	ora	<L205+clst_1+2
  5762 0B:51C0: F0 03        	beq	L214
  5763 0B:51C2: 82 29 00     	brl	L10083
  5764                        L214:
  5765 0B:51C5: E2 20        	sep	#$20
  5766                        	longa	off
  5767 0B:51C7: A7 11        	lda	[<L205+fs_1]
  5768 0B:51C9: C9 03        	cmp	#<$3
  5769 0B:51CB: C2 20        	rep	#$20
  5770                        	longa	on
  5771 0B:51CD: B0 03        	bcs	L215
  5772 0B:51CF: 82 1C 00     	brl	L10083
  5773                        L215:
  5774                        	.line	1902
  5775                        ;		clst = (DWORD) fs->dirbase;
  5776                        	.line	1903
  5777 0B:51D2: A0 23 00     	ldy	#$23
  5778 0B:51D5: B7 11        	lda	[<L205+fs_1],Y
  5779 0B:51D7: 85 0D        	sta	<L205+clst_1
  5780 0B:51D9: A0 25 00     	ldy	#$25
  5781 0B:51DC: B7 11        	lda	[<L205+fs_1],Y
  5782 0B:51DE: 85 0F        	sta	<L205+clst_1+2
  5783                        ;		if (FF_FS_EXFAT)
  5784                        	.line	1904
  5785                        ;			dp->obj.stat = 0; /* exFAT: Root
                     dir has an FAT chain */
  5786 0B:51E0: 82 0B 00     	brl	L10084
  5787                        	.line	1905
  5788 0B:51E3: E2 20        	sep	#$20
  5789                        	longa	off
  5790 0B:51E5: A9 00        	lda	#$0
  Fri Jul 16 2021 14:42                                                Page 117


  5791 0B:51E7: A0 07 00     	ldy	#$7
  5792 0B:51EA: 97 18        	sta	[<L204+dp_0],Y
  5793 0B:51EC: C2 20        	rep	#$20
  5794                        	longa	on
  5795                        ;	}
  5796                        L10084:
  5797                        	.line	1906
  5798                        ;
  5799                        ;	if (clst == 0)
  5800                        L10083:
  5801                        	.line	1908
  5802                        ;	{ /* Static table (root-directory on the FAT vol
                    ume) */
  5803 0B:51EE: A5 0D        	lda	<L205+clst_1
  5804 0B:51F0: 05 0F        	ora	<L205+clst_1+2
  5805 0B:51F2: F0 03        	beq	L216
  5806 0B:51F4: 82 4C 00     	brl	L10085
  5807                        L216:
  5808                        	.line	1909
  5809                        ;		if (ofs / SZDIRE >= fs->n_rootdir)
  5810                        	.line	1910
  5811                        ;			return FR_INT_ERR; /* Is index o
                    ut of range? */
  5812 0B:51F7: A0 00 00     	ldy	#$0
  5813 0B:51FA: 5A           	phy
  5814 0B:51FB: A0 07 00     	ldy	#$7
  5815 0B:51FE: B7 11        	lda	[<L205+fs_1],Y
  5816 0B:5200: 7A           	ply
  5817 0B:5201: 2A           	rol	A
  5818 0B:5202: 6A           	ror	A
  5819 0B:5203: 10 01        	bpl	L217
  5820 0B:5205: 88           	dey
  5821                        L217:
  5822 0B:5206: 85 01        	sta	<R0
  5823 0B:5208: 84 03        	sty	<R0+2
  5824 0B:520A: D4 1E        	pei	<L204+ofs_0+2
  5825 0B:520C: D4 1C        	pei	<L204+ofs_0
  5826 0B:520E: A9 05 00     	lda	#$5
  5827                        	xref	~~~llsr
  5828 0B:5211: 22 xx xx xx  	jsl	~~~llsr
  5829 0B:5215: 85 05        	sta	<R1
  5830 0B:5217: 86 07        	stx	<R1+2
  5831 0B:5219: A5 05        	lda	<R1
  5832 0B:521B: C5 01        	cmp	<R0
  5833 0B:521D: A5 07        	lda	<R1+2
  5834 0B:521F: E5 03        	sbc	<R0+2
  5835 0B:5221: B0 03        	bcs	L218
  5836 0B:5223: 82 06 00     	brl	L10086
  5837                        L218:
  5838                        	.line	1911
  5839 0B:5226: A9 02 00     	lda	#$2
  5840 0B:5229: 82 62 FF     	brl	L213
  5841                        ;		dp->sect = fs->dirbase;
  5842                        L10086:
  5843                        	.line	1912
  5844 0B:522C: A0 23 00     	ldy	#$23
  5845 0B:522F: B7 11        	lda	[<L205+fs_1],Y
  5846 0B:5231: A0 18 00     	ldy	#$18
  Fri Jul 16 2021 14:42                                                Page 118


  5847 0B:5234: 97 18        	sta	[<L204+dp_0],Y
  5848 0B:5236: A0 25 00     	ldy	#$25
  5849 0B:5239: B7 11        	lda	[<L205+fs_1],Y
  5850 0B:523B: A0 1A 00     	ldy	#$1a
  5851 0B:523E: 97 18        	sta	[<L204+dp_0],Y
  5852                        ;
  5853                        ;	}
  5854                        	.line	1914
  5855                        ;	else
  5856 0B:5240: 82 AC 00     	brl	L10087
  5857                        L10085:
  5858                        ;	{ /* Dynamic table (sub-directory or root-direct
                    ory on the FAT32/exFAT volume) */
  5859                        	.line	1916
  5860                        ;		csz = (DWORD) fs->csize * SS(fs); /* Byt
                    es per cluster */
  5861                        	.line	1917
  5862 0B:5243: A0 00 00     	ldy	#$0
  5863 0B:5246: 5A           	phy
  5864 0B:5247: A0 09 00     	ldy	#$9
  5865 0B:524A: B7 11        	lda	[<L205+fs_1],Y
  5866 0B:524C: 7A           	ply
  5867 0B:524D: 2A           	rol	A
  5868 0B:524E: 6A           	ror	A
  5869 0B:524F: 10 01        	bpl	L219
  5870 0B:5251: 88           	dey
  5871                        L219:
  5872 0B:5252: 85 01        	sta	<R0
  5873 0B:5254: 84 03        	sty	<R0+2
  5874 0B:5256: D4 03        	pei	<R0+2
  5875 0B:5258: D4 01        	pei	<R0
  5876 0B:525A: A9 09 00     	lda	#$9
  5877                        	xref	~~~lasl
  5878 0B:525D: 22 xx xx xx  	jsl	~~~lasl
  5879 0B:5261: 85 09        	sta	<L205+csz_1
  5880 0B:5263: 86 0B        	stx	<L205+csz_1+2
  5881                        ;		while (ofs >= csz)
  5882                        	.line	1918
  5883                        L10088:
  5884 0B:5265: A5 1C        	lda	<L204+ofs_0
  5885 0B:5267: C5 09        	cmp	<L205+csz_1
  5886 0B:5269: A5 1E        	lda	<L204+ofs_0+2
  5887 0B:526B: E5 0B        	sbc	<L205+csz_1+2
  5888 0B:526D: B0 03        	bcs	L220
  5889 0B:526F: 82 5F 00     	brl	L10089
  5890                        L220:
  5891                        ;		{ /* Follow cluster chain */
  5892                        	.line	1919
  5893                        ;			clst = get_fat(&dp->obj, clst); 
                    /* Get next cluster */
  5894                        	.line	1920
  5895 0B:5272: D4 0F        	pei	<L205+clst_1+2
  5896 0B:5274: D4 0D        	pei	<L205+clst_1
  5897 0B:5276: D4 1A        	pei	<L204+dp_0+2
  5898 0B:5278: D4 18        	pei	<L204+dp_0
  5899 0B:527A: 22 0D 46 0B  	jsl	~~get_fat
  5900 0B:527E: 85 0D        	sta	<L205+clst_1
  5901 0B:5280: 86 0F        	stx	<L205+clst_1+2
  Fri Jul 16 2021 14:42                                                Page 119


  5902                        ;			if (clst == 0xFFFFFFFF)
  5903                        	.line	1921
  5904                        ;				return FR_DISK_ERR; /* D
                    isk error */
  5905 0B:5282: A5 0D        	lda	<L205+clst_1
  5906 0B:5284: C9 FF FF     	cmp	#<$ffffffff
  5907 0B:5287: D0 05        	bne	L221
  5908 0B:5289: A5 0F        	lda	<L205+clst_1+2
  5909 0B:528B: C9 FF FF     	cmp	#^$ffffffff
  5910                        L221:
  5911 0B:528E: F0 03        	beq	L222
  5912 0B:5290: 82 06 00     	brl	L10090
  5913                        L222:
  5914                        	.line	1922
  5915 0B:5293: A9 01 00     	lda	#$1
  5916 0B:5296: 82 F5 FE     	brl	L213
  5917                        ;			if (clst < 2 || clst >= fs->n_fa
                    tent)
  5918                        L10090:
  5919                        	.line	1923
  5920                        ;				return FR_INT_ERR; /* Re
                    ached to end of table or internal error */
  5921 0B:5299: A5 0D        	lda	<L205+clst_1
  5922 0B:529B: C9 02 00     	cmp	#<$2
  5923 0B:529E: A5 0F        	lda	<L205+clst_1+2
  5924 0B:52A0: E9 00 00     	sbc	#^$2
  5925 0B:52A3: B0 03        	bcs	L224
  5926 0B:52A5: 82 13 00     	brl	L223
  5927                        L224:
  5928 0B:52A8: A5 0D        	lda	<L205+clst_1
  5929 0B:52AA: A0 13 00     	ldy	#$13
  5930 0B:52AD: D7 11        	cmp	[<L205+fs_1],Y
  5931 0B:52AF: A5 0F        	lda	<L205+clst_1+2
  5932 0B:52B1: A0 15 00     	ldy	#$15
  5933 0B:52B4: F7 11        	sbc	[<L205+fs_1],Y
  5934 0B:52B6: B0 03        	bcs	L225
  5935 0B:52B8: 82 06 00     	brl	L10091
  5936                        L225:
  5937                        L223:
  5938                        	.line	1924
  5939 0B:52BB: A9 02 00     	lda	#$2
  5940 0B:52BE: 82 CD FE     	brl	L213
  5941                        ;			ofs -= csz;
  5942                        L10091:
  5943                        	.line	1925
  5944 0B:52C1: 38           	sec
  5945 0B:52C2: A5 1C        	lda	<L204+ofs_0
  5946 0B:52C4: E5 09        	sbc	<L205+csz_1
  5947 0B:52C6: 85 1C        	sta	<L204+ofs_0
  5948 0B:52C8: A5 1E        	lda	<L204+ofs_0+2
  5949 0B:52CA: E5 0B        	sbc	<L205+csz_1+2
  5950 0B:52CC: 85 1E        	sta	<L204+ofs_0+2
  5951                        ;		}
  5952                        	.line	1926
  5953 0B:52CE: 82 94 FF     	brl	L10088
  5954                        L10089:
  5955                        ;		dp->sect = clst2sect(fs, clst);
  5956                        	.line	1927
  Fri Jul 16 2021 14:42                                                Page 120


  5957 0B:52D1: D4 0F        	pei	<L205+clst_1+2
  5958 0B:52D3: D4 0D        	pei	<L205+clst_1
  5959 0B:52D5: D4 13        	pei	<L205+fs_1+2
  5960 0B:52D7: D4 11        	pei	<L205+fs_1
  5961 0B:52D9: 22 7E 45 0B  	jsl	~~clst2sect
  5962 0B:52DD: 85 01        	sta	<R0
  5963 0B:52DF: 86 03        	stx	<R0+2
  5964 0B:52E1: A5 01        	lda	<R0
  5965 0B:52E3: A0 18 00     	ldy	#$18
  5966 0B:52E6: 97 18        	sta	[<L204+dp_0],Y
  5967 0B:52E8: A5 03        	lda	<R0+2
  5968 0B:52EA: A0 1A 00     	ldy	#$1a
  5969 0B:52ED: 97 18        	sta	[<L204+dp_0],Y
  5970                        ;	}
  5971                        	.line	1928
  5972                        L10087:
  5973                        ;	dp->clust = clst; /* Current cluster# */
  5974                        	.line	1929
  5975 0B:52EF: A5 0D        	lda	<L205+clst_1
  5976 0B:52F1: A0 14 00     	ldy	#$14
  5977 0B:52F4: 97 18        	sta	[<L204+dp_0],Y
  5978 0B:52F6: A5 0F        	lda	<L205+clst_1+2
  5979 0B:52F8: A0 16 00     	ldy	#$16
  5980 0B:52FB: 97 18        	sta	[<L204+dp_0],Y
  5981                        ;	if (dp->sect == 0)
  5982                        	.line	1930
  5983                        ;		return FR_INT_ERR;
  5984 0B:52FD: A0 18 00     	ldy	#$18
  5985 0B:5300: B7 18        	lda	[<L204+dp_0],Y
  5986 0B:5302: A0 1A 00     	ldy	#$1a
  5987 0B:5305: 17 18        	ora	[<L204+dp_0],Y
  5988 0B:5307: F0 03        	beq	L226
  5989 0B:5309: 82 06 00     	brl	L10092
  5990                        L226:
  5991                        	.line	1931
  5992 0B:530C: A9 02 00     	lda	#$2
  5993 0B:530F: 82 7C FE     	brl	L213
  5994                        ;	dp->sect += ofs / SS(fs); /* Sector# of the dire
                    ctory entry */
  5995                        L10092:
  5996                        	.line	1932
  5997 0B:5312: 18           	clc
  5998 0B:5313: A9 18 00     	lda	#$18
  5999 0B:5316: 65 18        	adc	<L204+dp_0
  6000 0B:5318: 85 01        	sta	<R0
  6001 0B:531A: A9 00 00     	lda	#$0
  6002 0B:531D: 65 1A        	adc	<L204+dp_0+2
  6003 0B:531F: 85 03        	sta	<R0+2
  6004 0B:5321: D4 1E        	pei	<L204+ofs_0+2
  6005 0B:5323: D4 1C        	pei	<L204+ofs_0
  6006 0B:5325: A9 09 00     	lda	#$9
  6007                        	xref	~~~llsr
  6008 0B:5328: 22 xx xx xx  	jsl	~~~llsr
  6009 0B:532C: 85 05        	sta	<R1
  6010 0B:532E: 86 07        	stx	<R1+2
  6011 0B:5330: 18           	clc
  6012 0B:5331: A5 05        	lda	<R1
  6013 0B:5333: 67 01        	adc	[<R0]
  Fri Jul 16 2021 14:42                                                Page 121


  6014 0B:5335: 87 01        	sta	[<R0]
  6015 0B:5337: A5 07        	lda	<R1+2
  6016 0B:5339: A0 02 00     	ldy	#$2
  6017 0B:533C: 77 01        	adc	[<R0],Y
  6018 0B:533E: A0 02 00     	ldy	#$2
  6019 0B:5341: 97 01        	sta	[<R0],Y
  6020                        ;	dp->dir = fs->win + (ofs % SS(fs)); /* Pointer t
                    o the entry in the win[] */
  6021                        	.line	1933
  6022 0B:5343: A5 1C        	lda	<L204+ofs_0
  6023 0B:5345: 29 FF 01     	and	#<$1ff
  6024 0B:5348: 85 01        	sta	<R0
  6025 0B:534A: 64 03        	stz	<R0+2
  6026 0B:534C: 18           	clc
  6027 0B:534D: A9 2F 00     	lda	#$2f
  6028 0B:5350: 65 01        	adc	<R0
  6029 0B:5352: 85 05        	sta	<R1
  6030 0B:5354: A9 00 00     	lda	#$0
  6031 0B:5357: 65 03        	adc	<R0+2
  6032 0B:5359: 85 07        	sta	<R1+2
  6033 0B:535B: 18           	clc
  6034 0B:535C: A5 11        	lda	<L205+fs_1
  6035 0B:535E: 65 05        	adc	<R1
  6036 0B:5360: 85 01        	sta	<R0
  6037 0B:5362: A5 13        	lda	<L205+fs_1+2
  6038 0B:5364: 65 07        	adc	<R1+2
  6039 0B:5366: 85 03        	sta	<R0+2
  6040 0B:5368: A5 01        	lda	<R0
  6041 0B:536A: A0 1C 00     	ldy	#$1c
  6042 0B:536D: 97 18        	sta	[<L204+dp_0],Y
  6043 0B:536F: A5 03        	lda	<R0+2
  6044 0B:5371: A0 1E 00     	ldy	#$1e
  6045 0B:5374: 97 18        	sta	[<L204+dp_0],Y
  6046                        ;
  6047                        ;	return FR_OK;
  6048                        	.line	1935
  6049 0B:5376: A9 00 00     	lda	#$0
  6050 0B:5379: 82 12 FE     	brl	L213
  6051                        ;}
  6052                        	.line	1936
  6053                        	.endblock	1936
  6054             00000014   L204	equ	20
  6055             00000009   L205	equ	9
  6056 0B:537C:              	ends
  6057                        	efunc
  6058                        	.endfunc	1936,9,20
  6059                        	.line	1936
  6060                        ;
  6061                        ;/*-----------------------------------------------
                    ------------------------*/
  6062                        ;/* Directory handling - Move directory table inde
                    x next                  */
  6063                        ;/*-----------------------------------------------
                    ------------------------*/
  6064                        ;
  6065                        ;static FRESULT dir_next( /* FR_OK(0):succeeded, F
                    R_NO_FILE:End of table, FR_DENIED:Could not stretch */
  6066                        ;DIR* dp, /* Pointer to the directory object */
  Fri Jul 16 2021 14:42                                                Page 122


  6067                        ;int stretch /* 0: Do not stretch table, 1: Stretc
                    h table if needed */
  6068                        ;)
  6069                        ;{
  6070                        	.line	1942
  6071                        	.line	1946
  6072                        	FFDOS
  6073                        	func
  6074                        	.function	1946
  6075                        ~~dir_next:
  6076                        	longa	on
  6077                        	longi	on
  6078 0B:537C: 3B           	tsc
  6079 0B:537D: 38           	sec
  6080 0B:537E: E9 18 00     	sbc	#L227
  6081 0B:5381: 1B           	tcs
  6082 0B:5382: 0B           	phd
  6083 0B:5383: 5B           	tcd
  6084             00000004   dp_0	set	4
  6085             00000008   stretch_0	set	8
  6086                        	.block	1946
  6087                        ;	DWORD ofs, clst;
  6088                        ;	FATFS *fs = dp->obj.fs;
  6089                        ;
  6090                        ;	ofs = dp->dptr + SZDIRE; /* Next entry */
  6091             00000000   ofs_1	set	0
  6092             00000004   clst_1	set	4
  6093             00000008   fs_1	set	8
  6094                        	.sym	ofs,0,18,1,32
  6095                        	.sym	clst,4,18,1,32
  6096                        	.sym	fs,8,138,1,32,49
  6097                        	.sym	dp,4,138,6,32,52
  6098                        	.sym	stretch,8,5,6,16
  6099 0B:5384: A7 1C        	lda	[<L227+dp_0]
  6100 0B:5386: 85 15        	sta	<L228+fs_1
  6101 0B:5388: A0 02 00     	ldy	#$2
  6102 0B:538B: B7 1C        	lda	[<L227+dp_0],Y
  6103 0B:538D: 85 17        	sta	<L228+fs_1+2
  6104                        	.line	1950
  6105 0B:538F: 18           	clc
  6106 0B:5390: A9 20 00     	lda	#$20
  6107 0B:5393: A0 10 00     	ldy	#$10
  6108 0B:5396: 77 1C        	adc	[<L227+dp_0],Y
  6109 0B:5398: 85 0D        	sta	<L228+ofs_1
  6110 0B:539A: A9 00 00     	lda	#$0
  6111 0B:539D: A0 12 00     	ldy	#$12
  6112 0B:53A0: 77 1C        	adc	[<L227+dp_0],Y
  6113 0B:53A2: 85 0F        	sta	<L228+ofs_1+2
  6114                        ;	if (ofs
  6115                        	.line	1951
  6116                        ;			>= (DWORD) (
  6117                        ;					(FF_FS_EXFAT && 
                    fs->fs_type == FS_EXFAT) ?
  6118                        ;							
                    MAX_DIR_EX : MAX_DIR))
  6119                        ;		dp->sect = 0; /* Disable it if the offse
                    t reached the max value */
  6120 0B:53A4: 82 16 00     	brl	L230
  Fri Jul 16 2021 14:42                                                Page 123


  6121 0B:53A7: E2 20        	sep	#$20
  6122                        	longa	off
  6123 0B:53A9: A7 15        	lda	[<L228+fs_1]
  6124 0B:53AB: C9 04        	cmp	#<$4
  6125 0B:53AD: C2 20        	rep	#$20
  6126                        	longa	on
  6127 0B:53AF: F0 03        	beq	L231
  6128 0B:53B1: 82 09 00     	brl	L230
  6129                        L231:
  6130 0B:53B4: A9 00 10     	lda	#$1000
  6131 0B:53B7: AA           	tax
  6132 0B:53B8: A9 00 00     	lda	#$0
  6133 0B:53BB: 80 07        	bra	L232
  6134                        L230:
  6135 0B:53BD: A9 20 00     	lda	#$20
  6136 0B:53C0: AA           	tax
  6137 0B:53C1: A9 00 00     	lda	#$0
  6138                        L232:
  6139 0B:53C4: 85 01        	sta	<R0
  6140 0B:53C6: 86 03        	stx	<R0+2
  6141 0B:53C8: A5 0D        	lda	<L228+ofs_1
  6142 0B:53CA: C5 01        	cmp	<R0
  6143 0B:53CC: A5 0F        	lda	<L228+ofs_1+2
  6144 0B:53CE: E5 03        	sbc	<R0+2
  6145 0B:53D0: B0 03        	bcs	L233
  6146 0B:53D2: 82 10 00     	brl	L10093
  6147                        L233:
  6148                        	.line	1955
  6149 0B:53D5: A9 00 00     	lda	#$0
  6150 0B:53D8: A0 18 00     	ldy	#$18
  6151 0B:53DB: 97 1C        	sta	[<L227+dp_0],Y
  6152 0B:53DD: A9 00 00     	lda	#$0
  6153 0B:53E0: A0 1A 00     	ldy	#$1a
  6154 0B:53E3: 97 1C        	sta	[<L227+dp_0],Y
  6155                        ;	if (dp->sect == 0)
  6156                        L10093:
  6157                        	.line	1956
  6158                        ;		return FR_NO_FILE; /* Report EOT if it h
                    as been disabled */
  6159 0B:53E5: A0 18 00     	ldy	#$18
  6160 0B:53E8: B7 1C        	lda	[<L227+dp_0],Y
  6161 0B:53EA: A0 1A 00     	ldy	#$1a
  6162 0B:53ED: 17 1C        	ora	[<L227+dp_0],Y
  6163 0B:53EF: F0 03        	beq	L234
  6164 0B:53F1: 82 15 00     	brl	L10094
  6165                        L234:
  6166                        	.line	1957
  6167 0B:53F4: A9 04 00     	lda	#$4
  6168                        L235:
  6169 0B:53F7: A8           	tay
  6170 0B:53F8: A5 1A        	lda	<L227+2
  6171 0B:53FA: 85 20        	sta	<L227+2+6
  6172 0B:53FC: A5 19        	lda	<L227+1
  6173 0B:53FE: 85 1F        	sta	<L227+1+6
  6174 0B:5400: 2B           	pld
  6175 0B:5401: 3B           	tsc
  6176 0B:5402: 18           	clc
  6177 0B:5403: 69 1E 00     	adc	#L227+6
  Fri Jul 16 2021 14:42                                                Page 124


  6178 0B:5406: 1B           	tcs
  6179 0B:5407: 98           	tya
  6180 0B:5408: 6B           	rtl
  6181                        ;
  6182                        ;	if (ofs % SS(fs) == 0)
  6183                        L10094:
  6184                        	.line	1959
  6185                        ;	{ /* Sector changed? */
  6186 0B:5409: A5 0D        	lda	<L228+ofs_1
  6187 0B:540B: 29 FF 01     	and	#<$1ff
  6188 0B:540E: F0 03        	beq	L236
  6189 0B:5410: 82 D6 01     	brl	L10095
  6190                        L236:
  6191                        	.line	1960
  6192                        ;		dp->sect++; /* Next sector */
  6193                        	.line	1961
  6194 0B:5413: 18           	clc
  6195 0B:5414: A9 01 00     	lda	#$1
  6196 0B:5417: A0 18 00     	ldy	#$18
  6197 0B:541A: 77 1C        	adc	[<L227+dp_0],Y
  6198 0B:541C: A0 18 00     	ldy	#$18
  6199 0B:541F: 97 1C        	sta	[<L227+dp_0],Y
  6200 0B:5421: A9 00 00     	lda	#$0
  6201 0B:5424: A0 1A 00     	ldy	#$1a
  6202 0B:5427: 77 1C        	adc	[<L227+dp_0],Y
  6203 0B:5429: A0 1A 00     	ldy	#$1a
  6204 0B:542C: 97 1C        	sta	[<L227+dp_0],Y
  6205                        ;
  6206                        ;		if (dp->clust == 0)
  6207                        	.line	1963
  6208                        ;		{ /* Static table */
  6209 0B:542E: A0 14 00     	ldy	#$14
  6210 0B:5431: B7 1C        	lda	[<L227+dp_0],Y
  6211 0B:5433: A0 16 00     	ldy	#$16
  6212 0B:5436: 17 1C        	ora	[<L227+dp_0],Y
  6213 0B:5438: F0 03        	beq	L237
  6214 0B:543A: 82 48 00     	brl	L10096
  6215                        L237:
  6216                        	.line	1964
  6217                        ;			if (ofs / SZDIRE >= fs->n_rootdi
                    r)
  6218                        	.line	1965
  6219                        ;			{ /* Report EOT if it reached en
                    d of static table */
  6220 0B:543D: A0 00 00     	ldy	#$0
  6221 0B:5440: 5A           	phy
  6222 0B:5441: A0 07 00     	ldy	#$7
  6223 0B:5444: B7 15        	lda	[<L228+fs_1],Y
  6224 0B:5446: 7A           	ply
  6225 0B:5447: 2A           	rol	A
  6226 0B:5448: 6A           	ror	A
  6227 0B:5449: 10 01        	bpl	L238
  6228 0B:544B: 88           	dey
  6229                        L238:
  6230 0B:544C: 85 01        	sta	<R0
  6231 0B:544E: 84 03        	sty	<R0+2
  6232 0B:5450: D4 0F        	pei	<L228+ofs_1+2
  6233 0B:5452: D4 0D        	pei	<L228+ofs_1
  Fri Jul 16 2021 14:42                                                Page 125


  6234 0B:5454: A9 05 00     	lda	#$5
  6235                        	xref	~~~llsr
  6236 0B:5457: 22 xx xx xx  	jsl	~~~llsr
  6237 0B:545B: 85 05        	sta	<R1
  6238 0B:545D: 86 07        	stx	<R1+2
  6239 0B:545F: A5 05        	lda	<R1
  6240 0B:5461: C5 01        	cmp	<R0
  6241 0B:5463: A5 07        	lda	<R1+2
  6242 0B:5465: E5 03        	sbc	<R0+2
  6243 0B:5467: B0 03        	bcs	L239
  6244 0B:5469: 82 16 00     	brl	L10097
  6245                        L239:
  6246                        	.line	1966
  6247                        ;				dp->sect = 0;
  6248                        	.line	1967
  6249 0B:546C: A9 00 00     	lda	#$0
  6250 0B:546F: A0 18 00     	ldy	#$18
  6251 0B:5472: 97 1C        	sta	[<L227+dp_0],Y
  6252 0B:5474: A9 00 00     	lda	#$0
  6253 0B:5477: A0 1A 00     	ldy	#$1a
  6254 0B:547A: 97 1C        	sta	[<L227+dp_0],Y
  6255                        ;				return FR_NO_FILE;
  6256                        	.line	1968
  6257 0B:547C: A9 04 00     	lda	#$4
  6258 0B:547F: 82 75 FF     	brl	L235
  6259                        ;			}
  6260                        	.line	1969
  6261                        ;		}
  6262                        L10097:
  6263                        	.line	1970
  6264                        ;		else
  6265 0B:5482: 82 64 01     	brl	L10098
  6266                        L10096:
  6267                        ;		{ /* Dynamic table */
  6268                        	.line	1972
  6269                        ;			if ((ofs / SS(fs) & (fs->csize -
                     1)) == 0)
  6270                        	.line	1973
  6271                        ;			{ /* Cluster changed? */
  6272 0B:5485: D4 0F        	pei	<L228+ofs_1+2
  6273 0B:5487: D4 0D        	pei	<L228+ofs_1
  6274 0B:5489: A9 09 00     	lda	#$9
  6275                        	xref	~~~llsr
  6276 0B:548C: 22 xx xx xx  	jsl	~~~llsr
  6277 0B:5490: 85 01        	sta	<R0
  6278 0B:5492: 86 03        	stx	<R0+2
  6279 0B:5494: 18           	clc
  6280 0B:5495: A9 FF FF     	lda	#$ffff
  6281 0B:5498: A0 09 00     	ldy	#$9
  6282 0B:549B: 77 15        	adc	[<L228+fs_1],Y
  6283 0B:549D: 85 05        	sta	<R1
  6284 0B:549F: A0 00 00     	ldy	#$0
  6285 0B:54A2: A5 05        	lda	<R1
  6286 0B:54A4: 10 01        	bpl	L240
  6287 0B:54A6: 88           	dey
  6288                        L240:
  6289 0B:54A7: 85 05        	sta	<R1
  6290 0B:54A9: 84 07        	sty	<R1+2
  Fri Jul 16 2021 14:42                                                Page 126


  6291 0B:54AB: A5 05        	lda	<R1
  6292 0B:54AD: 25 01        	and	<R0
  6293 0B:54AF: 85 09        	sta	<R2
  6294 0B:54B1: A5 07        	lda	<R1+2
  6295 0B:54B3: 25 03        	and	<R0+2
  6296 0B:54B5: 85 0B        	sta	<R2+2
  6297 0B:54B7: A5 09        	lda	<R2
  6298 0B:54B9: 05 0B        	ora	<R2+2
  6299 0B:54BB: F0 03        	beq	L241
  6300 0B:54BD: 82 29 01     	brl	L10099
  6301                        L241:
  6302                        	.line	1974
  6303                        ;				clst = get_fat(&dp->obj,
                     dp->clust); /* Get next cluster */
  6304                        	.line	1975
  6305 0B:54C0: A0 16 00     	ldy	#$16
  6306 0B:54C3: B7 1C        	lda	[<L227+dp_0],Y
  6307 0B:54C5: 48           	pha
  6308 0B:54C6: A0 14 00     	ldy	#$14
  6309 0B:54C9: B7 1C        	lda	[<L227+dp_0],Y
  6310 0B:54CB: 48           	pha
  6311 0B:54CC: D4 1E        	pei	<L227+dp_0+2
  6312 0B:54CE: D4 1C        	pei	<L227+dp_0
  6313 0B:54D0: 22 0D 46 0B  	jsl	~~get_fat
  6314 0B:54D4: 85 11        	sta	<L228+clst_1
  6315 0B:54D6: 86 13        	stx	<L228+clst_1+2
  6316                        ;				if (clst <= 1)
  6317                        	.line	1976
  6318                        ;					return FR_INT_ER
                    R; /* Internal error */
  6319 0B:54D8: A9 01 00     	lda	#$1
  6320 0B:54DB: C5 11        	cmp	<L228+clst_1
  6321 0B:54DD: A9 00 00     	lda	#$0
  6322 0B:54E0: E5 13        	sbc	<L228+clst_1+2
  6323 0B:54E2: B0 03        	bcs	L242
  6324 0B:54E4: 82 06 00     	brl	L10100
  6325                        L242:
  6326                        	.line	1977
  6327 0B:54E7: A9 02 00     	lda	#$2
  6328 0B:54EA: 82 0A FF     	brl	L235
  6329                        ;				if (clst == 0xFFFFFFFF)
  6330                        L10100:
  6331                        	.line	1978
  6332                        ;					return FR_DISK_E
                    RR; /* Disk error */
  6333 0B:54ED: A5 11        	lda	<L228+clst_1
  6334 0B:54EF: C9 FF FF     	cmp	#<$ffffffff
  6335 0B:54F2: D0 05        	bne	L243
  6336 0B:54F4: A5 13        	lda	<L228+clst_1+2
  6337 0B:54F6: C9 FF FF     	cmp	#^$ffffffff
  6338                        L243:
  6339 0B:54F9: F0 03        	beq	L244
  6340 0B:54FB: 82 06 00     	brl	L10101
  6341                        L244:
  6342                        	.line	1979
  6343 0B:54FE: A9 01 00     	lda	#$1
  6344 0B:5501: 82 F3 FE     	brl	L235
  6345                        ;				if (clst >= fs->n_fatent
  Fri Jul 16 2021 14:42                                                Page 127


                    )
  6346                        L10101:
  6347                        	.line	1980
  6348                        ;				{ /* It reached end of d
                    ynamic table */
  6349 0B:5504: A5 11        	lda	<L228+clst_1
  6350 0B:5506: A0 13 00     	ldy	#$13
  6351 0B:5509: D7 15        	cmp	[<L228+fs_1],Y
  6352 0B:550B: A5 13        	lda	<L228+clst_1+2
  6353 0B:550D: A0 15 00     	ldy	#$15
  6354 0B:5510: F7 15        	sbc	[<L228+fs_1],Y
  6355 0B:5512: B0 03        	bcs	L245
  6356 0B:5514: 82 A6 00     	brl	L10102
  6357                        L245:
  6358                        	.line	1981
  6359                        ;#if !FF_FS_READONLY
  6360                        ;					if (!stretch)
  6361                        	.line	1983
  6362                        ;					{ /* If no stret
                    ch, report EOT */
  6363 0B:5517: A5 20        	lda	<L227+stretch_0
  6364 0B:5519: F0 03        	beq	L246
  6365 0B:551B: 82 16 00     	brl	L10103
  6366                        L246:
  6367                        	.line	1984
  6368                        ;						dp->sect
                     = 0;
  6369                        	.line	1985
  6370 0B:551E: A9 00 00     	lda	#$0
  6371 0B:5521: A0 18 00     	ldy	#$18
  6372 0B:5524: 97 1C        	sta	[<L227+dp_0],Y
  6373 0B:5526: A9 00 00     	lda	#$0
  6374 0B:5529: A0 1A 00     	ldy	#$1a
  6375 0B:552C: 97 1C        	sta	[<L227+dp_0],Y
  6376                        ;						return F
                    R_NO_FILE;
  6377                        	.line	1986
  6378 0B:552E: A9 04 00     	lda	#$4
  6379 0B:5531: 82 C3 FE     	brl	L235
  6380                        ;					}
  6381                        	.line	1987
  6382                        ;					clst = create_ch
                    ain(&dp->obj, dp->clust); /* Allocate a cluster */
  6383                        L10103:
  6384                        	.line	1988
  6385 0B:5534: A0 16 00     	ldy	#$16
  6386 0B:5537: B7 1C        	lda	[<L227+dp_0],Y
  6387 0B:5539: 48           	pha
  6388 0B:553A: A0 14 00     	ldy	#$14
  6389 0B:553D: B7 1C        	lda	[<L227+dp_0],Y
  6390 0B:553F: 48           	pha
  6391 0B:5540: D4 1E        	pei	<L227+dp_0+2
  6392 0B:5542: D4 1C        	pei	<L227+dp_0
  6393 0B:5544: 22 4C 4D 0B  	jsl	~~create_chain
  6394 0B:5548: 85 11        	sta	<L228+clst_1
  6395 0B:554A: 86 13        	stx	<L228+clst_1+2
  6396                        ;					if (clst == 0)
  6397                        	.line	1989
  Fri Jul 16 2021 14:42                                                Page 128


  6398                        ;						return F
                    R_DENIED; /* No free cluster */
  6399 0B:554C: A5 11        	lda	<L228+clst_1
  6400 0B:554E: 05 13        	ora	<L228+clst_1+2
  6401 0B:5550: F0 03        	beq	L247
  6402 0B:5552: 82 06 00     	brl	L10104
  6403                        L247:
  6404                        	.line	1990
  6405 0B:5555: A9 07 00     	lda	#$7
  6406 0B:5558: 82 9C FE     	brl	L235
  6407                        ;					if (clst == 1)
  6408                        L10104:
  6409                        	.line	1991
  6410                        ;						return F
                    R_INT_ERR; /* Internal error */
  6411 0B:555B: A5 11        	lda	<L228+clst_1
  6412 0B:555D: C9 01 00     	cmp	#<$1
  6413 0B:5560: D0 05        	bne	L248
  6414 0B:5562: A5 13        	lda	<L228+clst_1+2
  6415 0B:5564: C9 00 00     	cmp	#^$1
  6416                        L248:
  6417 0B:5567: F0 03        	beq	L249
  6418 0B:5569: 82 06 00     	brl	L10105
  6419                        L249:
  6420                        	.line	1992
  6421 0B:556C: A9 02 00     	lda	#$2
  6422 0B:556F: 82 85 FE     	brl	L235
  6423                        ;					if (clst == 0xFF
                    FFFFFF)
  6424                        L10105:
  6425                        	.line	1993
  6426                        ;						return F
                    R_DISK_ERR; /* Disk error */
  6427 0B:5572: A5 11        	lda	<L228+clst_1
  6428 0B:5574: C9 FF FF     	cmp	#<$ffffffff
  6429 0B:5577: D0 05        	bne	L250
  6430 0B:5579: A5 13        	lda	<L228+clst_1+2
  6431 0B:557B: C9 FF FF     	cmp	#^$ffffffff
  6432                        L250:
  6433 0B:557E: F0 03        	beq	L251
  6434 0B:5580: 82 06 00     	brl	L10106
  6435                        L251:
  6436                        	.line	1994
  6437 0B:5583: A9 01 00     	lda	#$1
  6438 0B:5586: 82 6E FE     	brl	L235
  6439                        ;					if (dir_clear(fs
                    , clst) != FR_OK)
  6440                        L10106:
  6441                        	.line	1995
  6442                        ;						return F
                    R_DISK_ERR; /* Clean up the stretched table */
  6443 0B:5589: D4 13        	pei	<L228+clst_1+2
  6444 0B:558B: D4 11        	pei	<L228+clst_1
  6445 0B:558D: D4 17        	pei	<L228+fs_1+2
  6446 0B:558F: D4 15        	pei	<L228+fs_1
  6447 0B:5591: 22 67 50 0B  	jsl	~~dir_clear
  6448 0B:5595: AA           	tax
  6449 0B:5596: D0 03        	bne	L252
  Fri Jul 16 2021 14:42                                                Page 129


  6450 0B:5598: 82 06 00     	brl	L10107
  6451                        L252:
  6452                        	.line	1996
  6453 0B:559B: A9 01 00     	lda	#$1
  6454 0B:559E: 82 56 FE     	brl	L235
  6455                        ;					if (FF_FS_EXFAT)
  6456                        L10107:
  6457                        	.line	1997
  6458                        ;						dp->obj.
                    stat |= 4; /* exFAT: The directory has been stretched */
  6459 0B:55A1: 82 19 00     	brl	L10108
  6460                        	.line	1998
  6461 0B:55A4: 18           	clc
  6462 0B:55A5: A9 07 00     	lda	#$7
  6463 0B:55A8: 65 1C        	adc	<L227+dp_0
  6464 0B:55AA: 85 01        	sta	<R0
  6465 0B:55AC: A9 00 00     	lda	#$0
  6466 0B:55AF: 65 1E        	adc	<L227+dp_0+2
  6467 0B:55B1: 85 03        	sta	<R0+2
  6468 0B:55B3: E2 20        	sep	#$20
  6469                        	longa	off
  6470 0B:55B5: A7 01        	lda	[<R0]
  6471 0B:55B7: 09 04        	ora	#<$4
  6472 0B:55B9: 87 01        	sta	[<R0]
  6473 0B:55BB: C2 20        	rep	#$20
  6474                        	longa	on
  6475                        ;#else
  6476                        ;					if (!stretch) dp
                    ->sect = 0; /* (this line is to suppress compiler warning) *
                    /
  6477                        ;					dp->sect = 0; re
                    turn FR_NO_FILE; /* Report EOT */
  6478                        ;#endif
  6479                        ;				}
  6480                        L10108:
  6481                        	.line	2003
  6482                        ;				dp->clust = clst; /* Ini
                    tialize data for new cluster */
  6483                        L10102:
  6484                        	.line	2004
  6485 0B:55BD: A5 11        	lda	<L228+clst_1
  6486 0B:55BF: A0 14 00     	ldy	#$14
  6487 0B:55C2: 97 1C        	sta	[<L227+dp_0],Y
  6488 0B:55C4: A5 13        	lda	<L228+clst_1+2
  6489 0B:55C6: A0 16 00     	ldy	#$16
  6490 0B:55C9: 97 1C        	sta	[<L227+dp_0],Y
  6491                        ;				dp->sect = clst2sect(fs,
                     clst);
  6492                        	.line	2005
  6493 0B:55CB: D4 13        	pei	<L228+clst_1+2
  6494 0B:55CD: D4 11        	pei	<L228+clst_1
  6495 0B:55CF: D4 17        	pei	<L228+fs_1+2
  6496 0B:55D1: D4 15        	pei	<L228+fs_1
  6497 0B:55D3: 22 7E 45 0B  	jsl	~~clst2sect
  6498 0B:55D7: 85 01        	sta	<R0
  6499 0B:55D9: 86 03        	stx	<R0+2
  6500 0B:55DB: A5 01        	lda	<R0
  6501 0B:55DD: A0 18 00     	ldy	#$18
  Fri Jul 16 2021 14:42                                                Page 130


  6502 0B:55E0: 97 1C        	sta	[<L227+dp_0],Y
  6503 0B:55E2: A5 03        	lda	<R0+2
  6504 0B:55E4: A0 1A 00     	ldy	#$1a
  6505 0B:55E7: 97 1C        	sta	[<L227+dp_0],Y
  6506                        ;			}
  6507                        	.line	2006
  6508                        ;		}
  6509                        L10099:
  6510                        	.line	2007
  6511                        L10098:
  6512                        ;	}
  6513                        	.line	2008
  6514                        ;	dp->dptr = ofs; /* Current entry */
  6515                        L10095:
  6516                        	.line	2009
  6517 0B:55E9: A5 0D        	lda	<L228+ofs_1
  6518 0B:55EB: A0 10 00     	ldy	#$10
  6519 0B:55EE: 97 1C        	sta	[<L227+dp_0],Y
  6520 0B:55F0: A5 0F        	lda	<L228+ofs_1+2
  6521 0B:55F2: A0 12 00     	ldy	#$12
  6522 0B:55F5: 97 1C        	sta	[<L227+dp_0],Y
  6523                        ;	dp->dir = fs->win + ofs % SS(fs); /* Pointer to 
                    the entry in the win[] */
  6524                        	.line	2010
  6525 0B:55F7: A5 0D        	lda	<L228+ofs_1
  6526 0B:55F9: 29 FF 01     	and	#<$1ff
  6527 0B:55FC: 85 01        	sta	<R0
  6528 0B:55FE: 64 03        	stz	<R0+2
  6529 0B:5600: 18           	clc
  6530 0B:5601: A9 2F 00     	lda	#$2f
  6531 0B:5604: 65 01        	adc	<R0
  6532 0B:5606: 85 05        	sta	<R1
  6533 0B:5608: A9 00 00     	lda	#$0
  6534 0B:560B: 65 03        	adc	<R0+2
  6535 0B:560D: 85 07        	sta	<R1+2
  6536 0B:560F: 18           	clc
  6537 0B:5610: A5 15        	lda	<L228+fs_1
  6538 0B:5612: 65 05        	adc	<R1
  6539 0B:5614: 85 01        	sta	<R0
  6540 0B:5616: A5 17        	lda	<L228+fs_1+2
  6541 0B:5618: 65 07        	adc	<R1+2
  6542 0B:561A: 85 03        	sta	<R0+2
  6543 0B:561C: A5 01        	lda	<R0
  6544 0B:561E: A0 1C 00     	ldy	#$1c
  6545 0B:5621: 97 1C        	sta	[<L227+dp_0],Y
  6546 0B:5623: A5 03        	lda	<R0+2
  6547 0B:5625: A0 1E 00     	ldy	#$1e
  6548 0B:5628: 97 1C        	sta	[<L227+dp_0],Y
  6549                        ;
  6550                        ;	return FR_OK;
  6551                        	.line	2012
  6552 0B:562A: A9 00 00     	lda	#$0
  6553 0B:562D: 82 C7 FD     	brl	L235
  6554                        ;}
  6555                        	.line	2013
  6556                        	.endblock	2013
  6557             00000018   L227	equ	24
  6558             0000000D   L228	equ	13
  Fri Jul 16 2021 14:42                                                Page 131


  6559 0B:5630:              	ends
  6560                        	efunc
  6561                        	.endfunc	2013,13,24
  6562                        	.line	2013
  6563                        ;
  6564                        ;#if !FF_FS_READONLY
  6565                        ;/*-----------------------------------------------
                    ------------------------*/
  6566                        ;/* Directory handling - Reserve a block of direct
                    ory entries             */
  6567                        ;/*-----------------------------------------------
                    ------------------------*/
  6568                        ;
  6569                        ;static FRESULT dir_alloc( /* FR_OK(0):succeeded, 
                    !=0:error */
  6570                        ;DIR* dp, /* Pointer to the directory object */
  6571                        ;UINT nent /* Number of contiguous entries to allo
                    cate */
  6572                        ;)
  6573                        ;{
  6574                        	.line	2020
  6575                        	.line	2024
  6576                        	FFDOS
  6577                        	func
  6578                        	.function	2024
  6579                        ~~dir_alloc:
  6580                        	longa	on
  6581                        	longi	on
  6582 0B:5630: 3B           	tsc
  6583 0B:5631: 38           	sec
  6584 0B:5632: E9 0C 00     	sbc	#L253
  6585 0B:5635: 1B           	tcs
  6586 0B:5636: 0B           	phd
  6587 0B:5637: 5B           	tcd
  6588             00000004   dp_0	set	4
  6589             00000008   nent_0	set	8
  6590                        	.block	2024
  6591                        ;	FRESULT res;
  6592                        ;	UINT n;
  6593                        ;	FATFS *fs = dp->obj.fs;
  6594                        ;
  6595                        ;	res = dir_sdi(dp, 0);
  6596             00000000   res_1	set	0
  6597             00000002   n_1	set	2
  6598             00000004   fs_1	set	4
  6599                        	.sym	res,0,5,1,16
  6600                        	.sym	n,2,16,1,16
  6601                        	.sym	fs,4,138,1,32,49
  6602                        	.sym	dp,4,138,6,32,52
  6603                        	.sym	nent,8,16,6,16
  6604 0B:5638: A7 10        	lda	[<L253+dp_0]
  6605 0B:563A: 85 09        	sta	<L254+fs_1
  6606 0B:563C: A0 02 00     	ldy	#$2
  6607 0B:563F: B7 10        	lda	[<L253+dp_0],Y
  6608 0B:5641: 85 0B        	sta	<L254+fs_1+2
  6609                        	.line	2029
  6610 0B:5643: F4 00 00     	pea	#^$0
  6611 0B:5646: F4 00 00     	pea	#<$0
  Fri Jul 16 2021 14:42                                                Page 132


  6612 0B:5649: D4 12        	pei	<L253+dp_0+2
  6613 0B:564B: D4 10        	pei	<L253+dp_0
  6614 0B:564D: 22 3D 51 0B  	jsl	~~dir_sdi
  6615 0B:5651: 85 05        	sta	<L254+res_1
  6616                        ;	if (res == FR_OK)
  6617                        	.line	2030
  6618                        ;	{
  6619 0B:5653: A5 05        	lda	<L254+res_1
  6620 0B:5655: F0 03        	beq	L256
  6621 0B:5657: 82 76 00     	brl	L10109
  6622                        L256:
  6623                        	.line	2031
  6624                        ;		n = 0;
  6625                        	.line	2032
  6626 0B:565A: 64 07        	stz	<L254+n_1
  6627                        ;		do
  6628                        	.line	2033
  6629                        L10112:
  6630                        ;		{
  6631                        	.line	2034
  6632                        ;			res = move_window(fs, dp->sect);
  6633                        	.line	2035
  6634 0B:565C: A0 1A 00     	ldy	#$1a
  6635 0B:565F: B7 10        	lda	[<L253+dp_0],Y
  6636 0B:5661: 48           	pha
  6637 0B:5662: A0 18 00     	ldy	#$18
  6638 0B:5665: B7 10        	lda	[<L253+dp_0],Y
  6639 0B:5667: 48           	pha
  6640 0B:5668: D4 0B        	pei	<L254+fs_1+2
  6641 0B:566A: D4 09        	pei	<L254+fs_1
  6642 0B:566C: 22 7A 43 0B  	jsl	~~move_window
  6643 0B:5670: 85 05        	sta	<L254+res_1
  6644                        ;			if (res != FR_OK)
  6645                        	.line	2036
  6646                        ;				break;
  6647 0B:5672: A5 05        	lda	<L254+res_1
  6648 0B:5674: F0 03        	beq	L257
  6649 0B:5676: 82 57 00     	brl	L10111
  6650                        L257:
  6651                        ;#if FF_FS_EXFAT
  6652                        ;			if ((fs->fs_type == FS_EXFAT) ? 
                    (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_
                    Name] == DDEM || dp->dir[DIR_Name] == 0))
  6653                        ;			{
  6654                        ;#else
  6655                        ;			if (dp->dir[DIR_Name] == DDEM ||
                     dp->dir[DIR_Name] == 0)
  6656                        	.line	2042
  6657                        ;			{
  6658 0B:5679: A0 1C 00     	ldy	#$1c
  6659 0B:567C: B7 10        	lda	[<L253+dp_0],Y
  6660 0B:567E: 85 01        	sta	<R0
  6661 0B:5680: A0 1E 00     	ldy	#$1e
  6662 0B:5683: B7 10        	lda	[<L253+dp_0],Y
  6663 0B:5685: 85 03        	sta	<R0+2
  6664 0B:5687: E2 20        	sep	#$20
  6665                        	longa	off
  6666 0B:5689: A7 01        	lda	[<R0]
  Fri Jul 16 2021 14:42                                                Page 133


  6667 0B:568B: C9 E5        	cmp	#<$e5
  6668 0B:568D: C2 20        	rep	#$20
  6669                        	longa	on
  6670 0B:568F: D0 03        	bne	L259
  6671 0B:5691: 82 18 00     	brl	L258
  6672                        L259:
  6673 0B:5694: A0 1C 00     	ldy	#$1c
  6674 0B:5697: B7 10        	lda	[<L253+dp_0],Y
  6675 0B:5699: 85 01        	sta	<R0
  6676 0B:569B: A0 1E 00     	ldy	#$1e
  6677 0B:569E: B7 10        	lda	[<L253+dp_0],Y
  6678 0B:56A0: 85 03        	sta	<R0+2
  6679 0B:56A2: A7 01        	lda	[<R0]
  6680 0B:56A4: 29 FF 00     	and	#$ff
  6681 0B:56A7: F0 03        	beq	L260
  6682 0B:56A9: 82 0E 00     	brl	L10113
  6683                        L260:
  6684                        L258:
  6685                        	.line	2043
  6686                        ;#endif
  6687                        ;				if (++n == nent)
  6688                        	.line	2045
  6689                        ;					break; /* A bloc
                    k of contiguous free entries is found */
  6690 0B:56AC: E6 07        	inc	<L254+n_1
  6691 0B:56AE: A5 07        	lda	<L254+n_1
  6692 0B:56B0: C5 14        	cmp	<L253+nent_0
  6693 0B:56B2: D0 03        	bne	L261
  6694 0B:56B4: 82 19 00     	brl	L10111
  6695                        L261:
  6696                        ;			}
  6697                        	.line	2047
  6698                        ;			else
  6699 0B:56B7: 82 02 00     	brl	L10114
  6700                        L10113:
  6701                        ;			{
  6702                        	.line	2049
  6703                        ;				n = 0; /* Not a blank en
                    try. Restart to search */
  6704                        	.line	2050
  6705 0B:56BA: 64 07        	stz	<L254+n_1
  6706                        ;			}
  6707                        	.line	2051
  6708                        L10114:
  6709                        ;			res = dir_next(dp, 1);
  6710                        	.line	2052
  6711 0B:56BC: F4 01 00     	pea	#<$1
  6712 0B:56BF: D4 12        	pei	<L253+dp_0+2
  6713 0B:56C1: D4 10        	pei	<L253+dp_0
  6714 0B:56C3: 22 7C 53 0B  	jsl	~~dir_next
  6715 0B:56C7: 85 05        	sta	<L254+res_1
  6716                        ;		} while (res == FR_OK); /* Next entry wi
                    th table stretch enabled */
  6717                        	.line	2053
  6718                        L10110:
  6719 0B:56C9: A5 05        	lda	<L254+res_1
  6720 0B:56CB: D0 03        	bne	L262
  6721 0B:56CD: 82 8C FF     	brl	L10112
  Fri Jul 16 2021 14:42                                                Page 134


  6722                        L262:
  6723                        L10111:
  6724                        ;	}
  6725                        	.line	2054
  6726                        ;
  6727                        ;	if (res == FR_NO_FILE)
  6728                        L10109:
  6729                        	.line	2056
  6730                        ;		res = FR_DENIED; /* No directory entry t
                    o allocate */
  6731 0B:56D0: A5 05        	lda	<L254+res_1
  6732 0B:56D2: C9 04 00     	cmp	#<$4
  6733 0B:56D5: F0 03        	beq	L263
  6734 0B:56D7: 82 05 00     	brl	L10115
  6735                        L263:
  6736                        	.line	2057
  6737 0B:56DA: A9 07 00     	lda	#$7
  6738 0B:56DD: 85 05        	sta	<L254+res_1
  6739                        ;	return res;
  6740                        L10115:
  6741                        	.line	2058
  6742 0B:56DF: A5 05        	lda	<L254+res_1
  6743                        L264:
  6744 0B:56E1: A8           	tay
  6745 0B:56E2: A5 0E        	lda	<L253+2
  6746 0B:56E4: 85 14        	sta	<L253+2+6
  6747 0B:56E6: A5 0D        	lda	<L253+1
  6748 0B:56E8: 85 13        	sta	<L253+1+6
  6749 0B:56EA: 2B           	pld
  6750 0B:56EB: 3B           	tsc
  6751 0B:56EC: 18           	clc
  6752 0B:56ED: 69 12 00     	adc	#L253+6
  6753 0B:56F0: 1B           	tcs
  6754 0B:56F1: 98           	tya
  6755 0B:56F2: 6B           	rtl
  6756                        ;}
  6757                        	.line	2059
  6758                        	.endblock	2059
  6759             0000000C   L253	equ	12
  6760             00000005   L254	equ	5
  6761 0B:56F3:              	ends
  6762                        	efunc
  6763                        	.endfunc	2059,5,12
  6764                        	.line	2059
  6765                        ;
  6766                        ;#endif	/* !FF_FS_READONLY */
  6767                        ;
  6768                        ;/*-----------------------------------------------
                    ------------------------*/
  6769                        ;/* FAT: Directory handling - Load/Store start clu
                    ster number             */
  6770                        ;/*-----------------------------------------------
                    ------------------------*/
  6771                        ;
  6772                        ;static DWORD ld_clust( /* Returns the top cluster
                     value of the SFN entry */
  6773                        ;FATFS* fs, /* Pointer to the fs object */
  6774                        ;const BYTE* dir /* Pointer to the key entry */
  Fri Jul 16 2021 14:42                                                Page 135


  6775                        ;)
  6776                        ;{
  6777                        	.line	2067
  6778                        	.line	2071
  6779                        	FFDOS
  6780                        	func
  6781                        	.function	2071
  6782                        ~~ld_clust:
  6783                        	longa	on
  6784                        	longi	on
  6785 0B:56F3: 3B           	tsc
  6786 0B:56F4: 38           	sec
  6787 0B:56F5: E9 10 00     	sbc	#L265
  6788 0B:56F8: 1B           	tcs
  6789 0B:56F9: 0B           	phd
  6790 0B:56FA: 5B           	tcd
  6791             00000004   fs_0	set	4
  6792             00000008   dir_0	set	8
  6793                        	.block	2071
  6794                        ;	DWORD cl;
  6795                        ;
  6796                        ;	cl = ld_word(dir + DIR_FstClusLO);
  6797             00000000   cl_1	set	0
  6798                        	.sym	cl,0,18,1,32
  6799                        	.sym	fs,4,138,6,32,49
  6800                        	.sym	dir,8,142,6,32
  6801                        	.line	2074
  6802 0B:56FB: 18           	clc
  6803 0B:56FC: A9 1A 00     	lda	#$1a
  6804 0B:56FF: 65 18        	adc	<L265+dir_0
  6805 0B:5701: 85 01        	sta	<R0
  6806 0B:5703: A9 00 00     	lda	#$0
  6807 0B:5706: 65 1A        	adc	<L265+dir_0+2
  6808 0B:5708: 85 03        	sta	<R0+2
  6809 0B:570A: D4 03        	pei	<R0+2
  6810 0B:570C: D4 01        	pei	<R0
  6811 0B:570E: 22 80 3F 0B  	jsl	~~ld_word
  6812 0B:5712: 85 05        	sta	<R1
  6813 0B:5714: A0 00 00     	ldy	#$0
  6814 0B:5717: A5 05        	lda	<R1
  6815 0B:5719: 10 01        	bpl	L268
  6816 0B:571B: 88           	dey
  6817                        L268:
  6818 0B:571C: 85 0D        	sta	<L266+cl_1
  6819 0B:571E: 84 0F        	sty	<L266+cl_1+2
  6820                        ;	if (fs->fs_type == FS_FAT32)
  6821                        	.line	2075
  6822                        ;	{
  6823 0B:5720: E2 20        	sep	#$20
  6824                        	longa	off
  6825 0B:5722: A7 14        	lda	[<L265+fs_0]
  6826 0B:5724: C9 03        	cmp	#<$3
  6827 0B:5726: C2 20        	rep	#$20
  6828                        	longa	on
  6829 0B:5728: F0 03        	beq	L269
  6830 0B:572A: 82 40 00     	brl	L10116
  6831                        L269:
  6832                        	.line	2076
  Fri Jul 16 2021 14:42                                                Page 136


  6833                        ;		cl |= (DWORD) ld_word(dir + DIR_FstClusH
                    I) << 16;
  6834                        	.line	2077
  6835 0B:572D: 18           	clc
  6836 0B:572E: A9 14 00     	lda	#$14
  6837 0B:5731: 65 18        	adc	<L265+dir_0
  6838 0B:5733: 85 05        	sta	<R1
  6839 0B:5735: A9 00 00     	lda	#$0
  6840 0B:5738: 65 1A        	adc	<L265+dir_0+2
  6841 0B:573A: 85 07        	sta	<R1+2
  6842 0B:573C: D4 07        	pei	<R1+2
  6843 0B:573E: D4 05        	pei	<R1
  6844 0B:5740: 22 80 3F 0B  	jsl	~~ld_word
  6845 0B:5744: 85 09        	sta	<R2
  6846 0B:5746: A0 00 00     	ldy	#$0
  6847 0B:5749: A5 09        	lda	<R2
  6848 0B:574B: 10 01        	bpl	L270
  6849 0B:574D: 88           	dey
  6850                        L270:
  6851 0B:574E: 85 09        	sta	<R2
  6852 0B:5750: 84 0B        	sty	<R2+2
  6853 0B:5752: D4 0B        	pei	<R2+2
  6854 0B:5754: D4 09        	pei	<R2
  6855 0B:5756: A9 10 00     	lda	#$10
  6856                        	xref	~~~lasl
  6857 0B:5759: 22 xx xx xx  	jsl	~~~lasl
  6858 0B:575D: 85 01        	sta	<R0
  6859 0B:575F: 86 03        	stx	<R0+2
  6860 0B:5761: A5 0D        	lda	<L266+cl_1
  6861 0B:5763: 05 01        	ora	<R0
  6862 0B:5765: 85 0D        	sta	<L266+cl_1
  6863 0B:5767: A5 0F        	lda	<L266+cl_1+2
  6864 0B:5769: 05 03        	ora	<R0+2
  6865 0B:576B: 85 0F        	sta	<L266+cl_1+2
  6866                        ;	}
  6867                        	.line	2078
  6868                        ;
  6869                        ;	return cl;
  6870                        L10116:
  6871                        	.line	2080
  6872 0B:576D: A6 0F        	ldx	<L266+cl_1+2
  6873 0B:576F: A5 0D        	lda	<L266+cl_1
  6874                        L271:
  6875 0B:5771: A8           	tay
  6876 0B:5772: A5 12        	lda	<L265+2
  6877 0B:5774: 85 1A        	sta	<L265+2+8
  6878 0B:5776: A5 11        	lda	<L265+1
  6879 0B:5778: 85 19        	sta	<L265+1+8
  6880 0B:577A: 2B           	pld
  6881 0B:577B: 3B           	tsc
  6882 0B:577C: 18           	clc
  6883 0B:577D: 69 18 00     	adc	#L265+8
  6884 0B:5780: 1B           	tcs
  6885 0B:5781: 98           	tya
  6886 0B:5782: 6B           	rtl
  6887                        ;}
  6888                        	.line	2081
  6889                        	.endblock	2081
  Fri Jul 16 2021 14:42                                                Page 137


  6890             00000010   L265	equ	16
  6891             0000000D   L266	equ	13
  6892 0B:5783:              	ends
  6893                        	efunc
  6894                        	.endfunc	2081,13,16
  6895                        	.line	2081
  6896                        ;
  6897                        ;#if !FF_FS_READONLY
  6898                        ;static void st_clust(FATFS* fs, /* Pointer to the
                     fs object */
  6899                        ;BYTE* dir, /* Pointer to the key entry */
  6900                        ;DWORD cl /* Value to be set */
  6901                        ;)
  6902                        ;{
  6903                        	.line	2084
  6904                        	.line	2088
  6905                        	FFDOS
  6906                        	func
  6907                        	.function	2088
  6908                        ~~st_clust:
  6909                        	longa	on
  6910                        	longi	on
  6911 0B:5783: 3B           	tsc
  6912 0B:5784: 38           	sec
  6913 0B:5785: E9 08 00     	sbc	#L272
  6914 0B:5788: 1B           	tcs
  6915 0B:5789: 0B           	phd
  6916 0B:578A: 5B           	tcd
  6917             00000004   fs_0	set	4
  6918             00000008   dir_0	set	8
  6919             0000000C   cl_0	set	12
  6920                        	.block	2088
  6921                        ;	st_word(dir + DIR_FstClusLO, (WORD) cl);
  6922                        	.sym	fs,4,138,6,32,49
  6923                        	.sym	dir,8,142,6,32
  6924                        	.sym	cl,12,18,6,32
  6925                        	.line	2089
  6926 0B:578B: D4 14        	pei	<L272+cl_0
  6927 0B:578D: 18           	clc
  6928 0B:578E: A9 1A 00     	lda	#$1a
  6929 0B:5791: 65 10        	adc	<L272+dir_0
  6930 0B:5793: 85 01        	sta	<R0
  6931 0B:5795: A9 00 00     	lda	#$0
  6932 0B:5798: 65 12        	adc	<L272+dir_0+2
  6933 0B:579A: 85 03        	sta	<R0+2
  6934 0B:579C: D4 03        	pei	<R0+2
  6935 0B:579E: D4 01        	pei	<R0
  6936 0B:57A0: 22 57 40 0B  	jsl	~~st_word
  6937                        ;	if (fs->fs_type == FS_FAT32)
  6938                        	.line	2090
  6939                        ;	{
  6940 0B:57A4: E2 20        	sep	#$20
  6941                        	longa	off
  6942 0B:57A6: A7 0C        	lda	[<L272+fs_0]
  6943 0B:57A8: C9 03        	cmp	#<$3
  6944 0B:57AA: C2 20        	rep	#$20
  6945                        	longa	on
  6946 0B:57AC: F0 03        	beq	L275
  Fri Jul 16 2021 14:42                                                Page 138


  6947 0B:57AE: 82 28 00     	brl	L10117
  6948                        L275:
  6949                        	.line	2091
  6950                        ;		st_word(dir + DIR_FstClusHI, (WORD) (cl 
                    >> 16));
  6951                        	.line	2092
  6952 0B:57B1: D4 16        	pei	<L272+cl_0+2
  6953 0B:57B3: D4 14        	pei	<L272+cl_0
  6954 0B:57B5: A9 10 00     	lda	#$10
  6955                        	xref	~~~llsr
  6956 0B:57B8: 22 xx xx xx  	jsl	~~~llsr
  6957 0B:57BC: 85 01        	sta	<R0
  6958 0B:57BE: 86 03        	stx	<R0+2
  6959 0B:57C0: D4 01        	pei	<R0
  6960 0B:57C2: 18           	clc
  6961 0B:57C3: A9 14 00     	lda	#$14
  6962 0B:57C6: 65 10        	adc	<L272+dir_0
  6963 0B:57C8: 85 05        	sta	<R1
  6964 0B:57CA: A9 00 00     	lda	#$0
  6965 0B:57CD: 65 12        	adc	<L272+dir_0+2
  6966 0B:57CF: 85 07        	sta	<R1+2
  6967 0B:57D1: D4 07        	pei	<R1+2
  6968 0B:57D3: D4 05        	pei	<R1
  6969 0B:57D5: 22 57 40 0B  	jsl	~~st_word
  6970                        ;	}
  6971                        	.line	2093
  6972                        ;}
  6973                        L10117:
  6974                        	.line	2094
  6975                        L276:
  6976 0B:57D9: A5 0A        	lda	<L272+2
  6977 0B:57DB: 85 16        	sta	<L272+2+12
  6978 0B:57DD: A5 09        	lda	<L272+1
  6979 0B:57DF: 85 15        	sta	<L272+1+12
  6980 0B:57E1: 2B           	pld
  6981 0B:57E2: 3B           	tsc
  6982 0B:57E3: 18           	clc
  6983 0B:57E4: 69 14 00     	adc	#L272+12
  6984 0B:57E7: 1B           	tcs
  6985 0B:57E8: 6B           	rtl
  6986                        	.endblock	2094
  6987             00000008   L272	equ	8
  6988             00000009   L273	equ	9
  6989 0B:57E9:              	ends
  6990                        	efunc
  6991                        	.endfunc	2094,9,8
  6992                        	.line	2094
  6993                        ;#endif
  6994                        ;
  6995                        ;#if FF_USE_LFN
  6996                        ;/*-----------------------------------------------
                    ---------*/
  6997                        ;/* FAT-LFN: Compare a part of file name with an L
                    FN entry */
  6998                        ;/*-----------------------------------------------
                    ---------*/
  6999                        ;
  7000                        ;static int cmp_lfn ( /* 1:matched, 0:not matched 
  Fri Jul 16 2021 14:42                                                Page 139


                    */
  7001                        ;		const WCHAR* lfnbuf, /* Pointer to the L
                    FN working buffer to be compared */
  7002                        ;		BYTE* dir /* Pointer to the directory en
                    try containing the part of LFN */
  7003                        ;)
  7004                        ;{
  7005                        ;	UINT i, s;
  7006                        ;	WCHAR wc, uc;
  7007                        ;
  7008                        ;	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0
                    ; /* Check LDIR_FstClusLO */
  7009                        ;
  7010                        ;	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13; /* Offset
                     in the LFN buffer */
  7011                        ;
  7012                        ;	for (wc = 1, s = 0; s < 13; s++)
  7013                        ;	{ /* Process all characters in the entry */
  7014                        ;		uc = ld_word(dir + LfnOfs[s]); /* Pick a
                    n LFN character */
  7015                        ;		if (wc != 0)
  7016                        ;		{
  7017                        ;			if (i >= FF_MAX_LFN + 1 || ff_wt
                    oupper(uc) != ff_wtoupper(lfnbuf[i++]))
  7018                        ;			{ /* Compare it */
  7019                        ;				return 0; /* Not matched
                     */
  7020                        ;			}
  7021                        ;			wc = uc;
  7022                        ;		}
  7023                        ;		else
  7024                        ;		{
  7025                        ;			if (uc != 0xFFFF) return 0; /* C
                    heck filler */
  7026                        ;		}
  7027                        ;	}
  7028                        ;
  7029                        ;	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) r
                    eturn 0; /* Last segment matched but different length */
  7030                        ;
  7031                        ;	return 1; /* The part of LFN matched */
  7032                        ;}
  7033                        ;
  7034                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF
                    _USE_LABEL || FF_FS_EXFAT
  7035                        ;/*-----------------------------------------------
                    ------*/
  7036                        ;/* FAT-LFN: Pick a part of file name from an LFN 
                    entry */
  7037                        ;/*-----------------------------------------------
                    ------*/
  7038                        ;
  7039                        ;static int pick_lfn ( /* 1:succeeded, 0:buffer ov
                    erflow or invalid LFN entry */
  7040                        ;		WCHAR* lfnbuf, /* Pointer to the LFN wor
                    king buffer */
  7041                        ;		BYTE* dir /* Pointer to the LFN entry */
  7042                        ;)
  Fri Jul 16 2021 14:42                                                Page 140


  7043                        ;{
  7044                        ;	UINT i, s;
  7045                        ;	WCHAR wc, uc;
  7046                        ;
  7047                        ;	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0
                    ; /* Check LDIR_FstClusLO is 0 */
  7048                        ;
  7049                        ;	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13; /* Offse
                    t in the LFN buffer */
  7050                        ;
  7051                        ;	for (wc = 1, s = 0; s < 13; s++)
  7052                        ;	{ /* Process all characters in the entry */
  7053                        ;		uc = ld_word(dir + LfnOfs[s]); /* Pick a
                    n LFN character */
  7054                        ;		if (wc != 0)
  7055                        ;		{
  7056                        ;			if (i >= FF_MAX_LFN + 1) return 
                    0; /* Buffer overflow? */
  7057                        ;			lfnbuf[i++] = wc = uc; /* Store 
                    it */
  7058                        ;		}
  7059                        ;		else
  7060                        ;		{
  7061                        ;			if (uc != 0xFFFF) return 0; /* C
                    heck filler */
  7062                        ;		}
  7063                        ;	}
  7064                        ;
  7065                        ;	if (dir[LDIR_Ord] & LLEF && wc != 0)
  7066                        ;	{ /* Put terminator if it is the last LFN part a
                    nd not terminated */
  7067                        ;		if (i >= FF_MAX_LFN + 1) return 0; /* Bu
                    ffer overflow? */
  7068                        ;		lfnbuf[i] = 0;
  7069                        ;	}
  7070                        ;
  7071                        ;	return 1; /* The part of LFN is valid */
  7072                        ;}
  7073                        ;#endif
  7074                        ;
  7075                        ;#if !FF_FS_READONLY
  7076                        ;/*-----------------------------------------*/
  7077                        ;/* FAT-LFN: Create an entry of LFN entries */
  7078                        ;/*-----------------------------------------*/
  7079                        ;
  7080                        ;static void put_lfn (
  7081                        ;		const WCHAR* lfn, /* Pointer to the LFN 
                    */
  7082                        ;		BYTE* dir, /* Pointer to the LFN entry t
                    o be created */
  7083                        ;		BYTE ord, /* LFN order (1-20) */
  7084                        ;		BYTE sum /* Checksum of the correspondin
                    g SFN */
  7085                        ;)
  7086                        ;{
  7087                        ;	UINT i, s;
  7088                        ;	WCHAR wc;
  7089                        ;
  Fri Jul 16 2021 14:42                                                Page 141


  7090                        ;	dir[LDIR_Chksum] = sum; /* Set checksum */
  7091                        ;	dir[LDIR_Attr] = AM_LFN; /* Set attribute. LFN e
                    ntry */
  7092                        ;	dir[LDIR_Type] = 0;
  7093                        ;	st_word(dir + LDIR_FstClusLO, 0);
  7094                        ;
  7095                        ;	i = (ord - 1) * 13; /* Get offset in the LFN wor
                    king buffer */
  7096                        ;	s = wc = 0;
  7097                        ;	do
  7098                        ;	{
  7099                        ;		if (wc != 0xFFFF) wc = lfn[i++]; /* Get 
                    an effective character */
  7100                        ;		st_word(dir + LfnOfs[s], wc); /* Put it 
                    */
  7101                        ;		if (wc == 0) wc = 0xFFFF; /* Padding cha
                    racters for following items */
  7102                        ;	}while (++s < 13);
  7103                        ;	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF; /* Las
                    t LFN part is the start of LFN sequence */
  7104                        ;	dir[LDIR_Ord] = ord; /* Set the LFN order */
  7105                        ;}
  7106                        ;
  7107                        ;#endif	/* !FF_FS_READONLY */
  7108                        ;#endif	/* FF_USE_LFN */
  7109                        ;
  7110                        ;#if FF_USE_LFN && !FF_FS_READONLY
  7111                        ;/*-----------------------------------------------
                    ------------------------*/
  7112                        ;/* FAT-LFN: Create a Numbered SFN                
                                            */
  7113                        ;/*-----------------------------------------------
                    ------------------------*/
  7114                        ;
  7115                        ;static void gen_numname (
  7116                        ;		BYTE* dst, /* Pointer to the buffer to s
                    tore numbered SFN */
  7117                        ;		const BYTE* src, /* Pointer to SFN */
  7118                        ;		const WCHAR* lfn, /* Pointer to LFN */
  7119                        ;		UINT seq /* Sequence number */
  7120                        ;)
  7121                        ;{
  7122                        ;	BYTE ns[8], c;
  7123                        ;	UINT i, j;
  7124                        ;	WCHAR wc;
  7125                        ;	DWORD sreg;
  7126                        ;
  7127                        ;	mem_cpy(dst, src, 11);
  7128                        ;
  7129                        ;	if (seq > 5)
  7130                        ;	{ /* In case of many collisions, generate a hash
                     number instead of sequential number */
  7131                        ;		sreg = seq;
  7132                        ;		while (*lfn)
  7133                        ;		{ /* Create a CRC as hash value */
  7134                        ;			wc = *lfn++;
  7135                        ;			for (i = 0; i < 16; i++)
  7136                        ;			{
  Fri Jul 16 2021 14:42                                                Page 142


  7137                        ;				sreg = (sreg << 1) + (wc
                     & 1);
  7138                        ;				wc >>= 1;
  7139                        ;				if (sreg & 0x10000) sreg
                     ^= 0x11021;
  7140                        ;			}
  7141                        ;		}
  7142                        ;		seq = (UINT)sreg;
  7143                        ;	}
  7144                        ;
  7145                        ;	/* itoa (hexdecimal) */
  7146                        ;	i = 7;
  7147                        ;	do
  7148                        ;	{
  7149                        ;		c = (BYTE)((seq % 16) + '0');
  7150                        ;		if (c > '9') c += 7;
  7151                        ;		ns[i--] = c;
  7152                        ;		seq /= 16;
  7153                        ;	}while (seq);
  7154                        ;	ns[i] = '~';
  7155                        ;
  7156                        ;	/* Append the number to the SFN body */
  7157                        ;	for (j = 0; j < i && dst[j] != ' '; j++)
  7158                        ;	{
  7159                        ;		if (dbc_1st(dst[j]))
  7160                        ;		{
  7161                        ;			if (j == i - 1) break;
  7162                        ;			j++;
  7163                        ;		}
  7164                        ;	}
  7165                        ;	do
  7166                        ;	{
  7167                        ;		dst[j++] = (i < 8) ? ns[i++] : ' ';
  7168                        ;	}while (j < 8);
  7169                        ;}
  7170                        ;#endif	/* FF_USE_LFN && !FF_FS_READONLY */
  7171                        ;
  7172                        ;#if FF_USE_LFN
  7173                        ;/*-----------------------------------------------
                    ------------------------*/
  7174                        ;/* FAT-LFN: Calculate checksum of an SFN entry   
                                            */
  7175                        ;/*-----------------------------------------------
                    ------------------------*/
  7176                        ;
  7177                        ;static BYTE sum_sfn (
  7178                        ;		const BYTE* dir /* Pointer to the SFN en
                    try */
  7179                        ;)
  7180                        ;{
  7181                        ;	BYTE sum = 0;
  7182                        ;	UINT n = 11;
  7183                        ;
  7184                        ;	do
  7185                        ;	{
  7186                        ;		sum = (sum >> 1) + (sum << 7) + *dir++;
  7187                        ;	}while (--n);
  7188                        ;	return sum;
  Fri Jul 16 2021 14:42                                                Page 143


  7189                        ;}
  7190                        ;
  7191                        ;#endif	/* FF_USE_LFN */
  7192                        ;
  7193                        ;#if FF_FS_EXFAT
  7194                        ;/*-----------------------------------------------
                    ------------------------*/
  7195                        ;/* exFAT: Checksum                               
                                            */
  7196                        ;/*-----------------------------------------------
                    ------------------------*/
  7197                        ;
  7198                        ;static WORD xdir_sum ( /* Get checksum of the dir
                    ectoly entry block */
  7199                        ;		const BYTE* dir /* Directory entry block
                     to be calculated */
  7200                        ;)
  7201                        ;{
  7202                        ;	UINT i, szblk;
  7203                        ;	WORD sum;
  7204                        ;
  7205                        ;	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE; /* Numb
                    er of bytes of the entry block */
  7206                        ;	for (i = sum = 0; i < szblk; i++)
  7207                        ;	{
  7208                        ;		if (i == XDIR_SetSum)
  7209                        ;		{ /* Skip 2-byte sum field */
  7210                        ;			i++;
  7211                        ;		}
  7212                        ;		else
  7213                        ;		{
  7214                        ;			sum = ((sum & 1) ? 0x8000 : 0) +
                     (sum >> 1) + dir[i];
  7215                        ;		}
  7216                        ;	}
  7217                        ;	return sum;
  7218                        ;}
  7219                        ;
  7220                        ;static WORD xname_sum ( /* Get check sum (to be u
                    sed as hash) of the file name */
  7221                        ;		const WCHAR* name /* File name to be cal
                    culated */
  7222                        ;)
  7223                        ;{
  7224                        ;	WCHAR chr;
  7225                        ;	WORD sum = 0;
  7226                        ;
  7227                        ;	while ((chr = *name++) != 0)
  7228                        ;	{
  7229                        ;		chr = (WCHAR)ff_wtoupper(chr); /* File n
                    ame needs to be up-case converted */
  7230                        ;		sum = ((sum & 1) ? 0x8000 : 0) + (sum >>
                     1) + (chr & 0xFF);
  7231                        ;		sum = ((sum & 1) ? 0x8000 : 0) + (sum >>
                     1) + (chr >> 8);
  7232                        ;	}
  7233                        ;	return sum;
  7234                        ;}
  Fri Jul 16 2021 14:42                                                Page 144


  7235                        ;
  7236                        ;#if !FF_FS_READONLY && FF_USE_MKFS
  7237                        ;static DWORD xsum32 ( /* Returns 32-bit checksum 
                    */
  7238                        ;		BYTE dat, /* Byte to be calculated (byte
                    -by-byte processing) */
  7239                        ;		DWORD sum /* Previous sum value */
  7240                        ;)
  7241                        ;{
  7242                        ;	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) 
                    + dat;
  7243                        ;	return sum;
  7244                        ;}
  7245                        ;#endif
  7246                        ;
  7247                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
  7248                        ;/*-----------------------------------------------
                    -------*/
  7249                        ;/* exFAT: Get object information from a directory
                     block */
  7250                        ;/*-----------------------------------------------
                    -------*/
  7251                        ;
  7252                        ;static void get_xfileinfo (
  7253                        ;		BYTE* dirb, /* Pointer to the direcotry 
                    entry block 85+C0+C1s */
  7254                        ;		FILINFO* fno /* Buffer to store the extr
                    acted file information */
  7255                        ;)
  7256                        ;{
  7257                        ;	WCHAR wc, hs;
  7258                        ;	UINT di, si, nc;
  7259                        ;
  7260                        ;	/* Get file name from the entry block */
  7261                        ;	si = SZDIRE * 2; /* 1st C1 entry */
  7262                        ;	nc = 0; hs = 0; di = 0;
  7263                        ;	while (nc < dirb[XDIR_NumName])
  7264                        ;	{
  7265                        ;		if (si >= MAXDIRB(FF_MAX_LFN))
  7266                        ;		{	di = 0; break;} /* Truncated dir
                    ectory block? */
  7267                        ;		if ((si % SZDIRE) == 0) si += 2; /* Skip
                     entry type field */
  7268                        ;		wc = ld_word(dirb + si); si += 2; nc++; 
                    /* Get a character */
  7269                        ;		if (hs == 0 && IsSurrogate(wc))
  7270                        ;		{ /* Is it a surrogate? */
  7271                        ;			hs = wc; continue; /* Get low su
                    rrogate */
  7272                        ;		}
  7273                        ;		wc = put_utf((DWORD)hs << 16 | wc, &fno-
                    >fname[di], FF_LFN_BUF - di); /* Store it in API encoding */
  7274                        ;		if (wc == 0)
  7275                        ;		{	di = 0; break;} /* Buffer overfl
                    ow or wrong encoding? */
  7276                        ;		di += wc;
  7277                        ;		hs = 0;
  7278                        ;	}
  Fri Jul 16 2021 14:42                                                Page 145


  7279                        ;	if (hs != 0) di = 0; /* Broken surrogate pair? *
                    /
  7280                        ;	if (di == 0) fno->fname[di++] = '?'; /* Inaccess
                    ible object name? */
  7281                        ;	fno->fname[di] = 0; /* Terminate the name */
  7282                        ;	fno->altname[0] = 0; /* exFAT does not support S
                    FN */
  7283                        ;
  7284                        ;	fno->fattrib = dirb[XDIR_Attr]; /* Attribute */
  7285                        ;	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qw
                    ord(dirb + XDIR_FileSize); /* Size */
  7286                        ;	fno->ftime = ld_word(dirb + XDIR_ModTime + 0); /
                    * Time */
  7287                        ;	fno->fdate = ld_word(dirb + XDIR_ModTime + 2); /
                    * Date */
  7288                        ;}
  7289                        ;
  7290                        ;#endif	/* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >=
                     2 */
  7291                        ;
  7292                        ;/*-----------------------------------*/
  7293                        ;/* exFAT: Get a directry entry block */
  7294                        ;/*-----------------------------------*/
  7295                        ;
  7296                        ;static FRESULT load_xdir ( /* FR_INT_ERR: invalid
                     entry block */
  7297                        ;		DIR* dp /* Reading direcotry object poin
                    ting top of the entry block to load */
  7298                        ;)
  7299                        ;{
  7300                        ;	FRESULT res;
  7301                        ;	UINT i, sz_ent;
  7302                        ;	BYTE* dirb = dp->obj.fs->dirbuf; /* Pointer to t
                    he on-memory direcotry entry block 85+C0+C1s */
  7303                        ;
  7304                        ;	/* Load file-directory entry */
  7305                        ;	res = move_window(dp->obj.fs, dp->sect);
  7306                        ;	if (res != FR_OK) return res;
  7307                        ;	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_
                    INT_ERR; /* Invalid order */
  7308                        ;	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
  7309                        ;	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
  7310                        ;	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE)
                     return FR_INT_ERR;
  7311                        ;
  7312                        ;	/* Load stream-extension entry */
  7313                        ;	res = dir_next(dp, 0);
  7314                        ;	if (res == FR_NO_FILE) res = FR_INT_ERR; /* It c
                    annot be */
  7315                        ;	if (res != FR_OK) return res;
  7316                        ;	res = move_window(dp->obj.fs, dp->sect);
  7317                        ;	if (res != FR_OK) return res;
  7318                        ;	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_I
                    NT_ERR; /* Invalid order */
  7319                        ;	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
  7320                        ;	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return
                     FR_INT_ERR;
  7321                        ;
  Fri Jul 16 2021 14:42                                                Page 146


  7322                        ;	/* Load file-name entries */
  7323                        ;	i = 2 * SZDIRE; /* Name offset to load */
  7324                        ;	do
  7325                        ;	{
  7326                        ;		res = dir_next(dp, 0);
  7327                        ;		if (res == FR_NO_FILE) res = FR_INT_ERR;
                     /* It cannot be */
  7328                        ;		if (res != FR_OK) return res;
  7329                        ;		res = move_window(dp->obj.fs, dp->sect);
  7330                        ;		if (res != FR_OK) return res;
  7331                        ;		if (dp->dir[XDIR_Type] != ET_FILENAME) r
                    eturn FR_INT_ERR; /* Invalid order */
  7332                        ;		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dir
                    b + i, dp->dir, SZDIRE);
  7333                        ;	}while ((i += SZDIRE) < sz_ent);
  7334                        ;
  7335                        ;	/* Sanity check (do it for only accessible objec
                    t) */
  7336                        ;	if (i <= MAXDIRB(FF_MAX_LFN))
  7337                        ;	{
  7338                        ;		if (xdir_sum(dirb) != ld_word(dirb + XDI
                    R_SetSum)) return FR_INT_ERR;
  7339                        ;	}
  7340                        ;	return FR_OK;
  7341                        ;}
  7342                        ;
  7343                        ;/*-----------------------------------------------
                    -------------------*/
  7344                        ;/* exFAT: Initialize object allocation info with 
                    loaded entry block */
  7345                        ;/*-----------------------------------------------
                    -------------------*/
  7346                        ;
  7347                        ;static void init_alloc_info (
  7348                        ;		FATFS* fs, /* Filesystem object */
  7349                        ;		FFOBJID* obj /* Object allocation inform
                    ation to be initialized */
  7350                        ;)
  7351                        ;{
  7352                        ;	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus
                    ); /* Start cluster */
  7353                        ;	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSi
                    ze); /* Size */
  7354                        ;	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2; /* Al
                    location status */
  7355                        ;	obj->n_frag = 0; /* No last fragment info */
  7356                        ;}
  7357                        ;
  7358                        ;#if !FF_FS_READONLY || FF_FS_RPATH != 0
  7359                        ;/*-----------------------------------------------
                    -*/
  7360                        ;/* exFAT: Load the object's directory entry block
                     */
  7361                        ;/*-----------------------------------------------
                    -*/
  7362                        ;
  7363                        ;static FRESULT load_obj_xdir (
  7364                        ;		DIR* dp, /* Blank directory object to be
  Fri Jul 16 2021 14:42                                                Page 147


                     used to access containing direcotry */
  7365                        ;		const FFOBJID* obj /* Object with its co
                    ntaining directory information */
  7366                        ;)
  7367                        ;{
  7368                        ;	FRESULT res;
  7369                        ;
  7370                        ;	/* Open object containing directory */
  7371                        ;	dp->obj.fs = obj->fs;
  7372                        ;	dp->obj.sclust = obj->c_scl;
  7373                        ;	dp->obj.stat = (BYTE)obj->c_size;
  7374                        ;	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
  7375                        ;	dp->obj.n_frag = 0;
  7376                        ;	dp->blk_ofs = obj->c_ofs;
  7377                        ;
  7378                        ;	res = dir_sdi(dp, dp->blk_ofs); /* Goto object's
                     entry block */
  7379                        ;	if (res == FR_OK)
  7380                        ;	{
  7381                        ;		res = load_xdir(dp); /* Load the object'
                    s entry block */
  7382                        ;	}
  7383                        ;	return res;
  7384                        ;}
  7385                        ;#endif
  7386                        ;
  7387                        ;#if !FF_FS_READONLY
  7388                        ;/*----------------------------------------*/
  7389                        ;/* exFAT: Store the directory entry block */
  7390                        ;/*----------------------------------------*/
  7391                        ;
  7392                        ;static FRESULT store_xdir (
  7393                        ;		DIR* dp /* Pointer to the direcotry obje
                    ct */
  7394                        ;)
  7395                        ;{
  7396                        ;	FRESULT res;
  7397                        ;	UINT nent;
  7398                        ;	BYTE* dirb = dp->obj.fs->dirbuf; /* Pointer to t
                    he direcotry entry block 85+C0+C1s */
  7399                        ;
  7400                        ;	/* Create set sum */
  7401                        ;	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
  7402                        ;	nent = dirb[XDIR_NumSec] + 1;
  7403                        ;
  7404                        ;	/* Store the direcotry entry block to the direct
                    ory */
  7405                        ;	res = dir_sdi(dp, dp->blk_ofs);
  7406                        ;	while (res == FR_OK)
  7407                        ;	{
  7408                        ;		res = move_window(dp->obj.fs, dp->sect);
  7409                        ;		if (res != FR_OK) break;
  7410                        ;		mem_cpy(dp->dir, dirb, SZDIRE);
  7411                        ;		dp->obj.fs->wflag = 1;
  7412                        ;		if (--nent == 0) break;
  7413                        ;		dirb += SZDIRE;
  7414                        ;		res = dir_next(dp, 0);
  7415                        ;	}
  Fri Jul 16 2021 14:42                                                Page 148


  7416                        ;	return (res == FR_OK || res == FR_DISK_ERR) ? re
                    s : FR_INT_ERR;
  7417                        ;}
  7418                        ;
  7419                        ;/*-------------------------------------------*/
  7420                        ;/* exFAT: Create a new directory enrty block */
  7421                        ;/*-------------------------------------------*/
  7422                        ;
  7423                        ;static void create_xdir (
  7424                        ;		BYTE* dirb, /* Pointer to the direcotry 
                    entry block buffer */
  7425                        ;		const WCHAR* lfn /* Pointer to the objec
                    t name */
  7426                        ;)
  7427                        ;{
  7428                        ;	UINT i;
  7429                        ;	BYTE nc1, nlen;
  7430                        ;	WCHAR wc;
  7431                        ;
  7432                        ;	/* Create file-directory and stream-extension en
                    try */
  7433                        ;	mem_set(dirb, 0, 2 * SZDIRE);
  7434                        ;	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
  7435                        ;	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
  7436                        ;
  7437                        ;	/* Create file-name entries */
  7438                        ;	i = SZDIRE * 2; /* Top of file_name entries */
  7439                        ;	nlen = nc1 = 0; wc = 1;
  7440                        ;	do
  7441                        ;	{
  7442                        ;		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
  7443                        ;		do
  7444                        ;		{ /* Fill name field */
  7445                        ;			if (wc != 0 && (wc = lfn[nlen]) 
                    != 0) nlen++; /* Get a character if exist */
  7446                        ;			st_word(dirb + i, wc); /* Store 
                    it */
  7447                        ;			i += 2;
  7448                        ;		}while (i % SZDIRE != 0);
  7449                        ;		nc1++;
  7450                        ;	}while (lfn[nlen]); /* Fill next entry if any ch
                    ar follows */
  7451                        ;
  7452                        ;	dirb[XDIR_NumName] = nlen; /* Set name length */
  7453                        ;	dirb[XDIR_NumSec] = 1 + nc1; /* Set secondary co
                    unt (C0 + C1s) */
  7454                        ;	st_word(dirb + XDIR_NameHash, xname_sum(lfn)); /
                    * Set name hash */
  7455                        ;}
  7456                        ;
  7457                        ;#endif	/* !FF_FS_READONLY */
  7458                        ;#endif	/* FF_FS_EXFAT */
  7459                        ;
  7460                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF
                    _USE_LABEL || FF_FS_EXFAT
  7461                        ;/*-----------------------------------------------
                    ------------------------*/
  7462                        ;/* Read an object from the directory             
  Fri Jul 16 2021 14:42                                                Page 149


                                            */
  7463                        ;/*-----------------------------------------------
                    ------------------------*/
  7464                        ;
  7465                        ;#define DIR_READ_FILE(dp) dir_read(dp, 0)
  7466                        ;#define DIR_READ_LABEL(dp) dir_read(dp, 1)
  7467                        ;
  7468                        ;static FRESULT dir_read(DIR* dp, /* Pointer to th
                    e directory object */
  7469                        ;int vol /* Filtered by 0:file/directory or 1:volu
                    me label */
  7470                        ;)
  7471                        ;{
  7472                        	.line	2570
  7473                        	.line	2573
  7474                        	FFDOS
  7475                        	func
  7476                        	.function	2573
  7477                        ~~dir_read:
  7478                        	longa	on
  7479                        	longi	on
  7480 0B:57E9: 3B           	tsc
  7481 0B:57EA: 38           	sec
  7482 0B:57EB: E9 10 00     	sbc	#L277
  7483 0B:57EE: 1B           	tcs
  7484 0B:57EF: 0B           	phd
  7485 0B:57F0: 5B           	tcd
  7486             00000004   dp_0	set	4
  7487             00000008   vol_0	set	8
  7488                        	.block	2573
  7489                        ;	FRESULT res = FR_NO_FILE;
  7490                        ;	FATFS *fs = dp->obj.fs;
  7491                        ;	BYTE attr, b;
  7492                        ;#if FF_USE_LFN
  7493                        ;	BYTE ord = 0xFF, sum = 0xFF;
  7494                        ;#endif
  7495                        ;
  7496                        ;	while (dp->sect)
  7497             00000000   res_1	set	0
  7498             00000002   fs_1	set	2
  7499             00000006   attr_1	set	6
  7500             00000007   b_1	set	7
  7501                        	.sym	res,0,5,1,16
  7502                        	.sym	fs,2,138,1,32,49
  7503                        	.sym	attr,6,14,1,8
  7504                        	.sym	b,7,14,1,8
  7505                        	.sym	dp,4,138,6,32,52
  7506                        	.sym	vol,8,5,6,16
  7507 0B:57F1: A9 04 00     	lda	#$4
  7508 0B:57F4: 85 09        	sta	<L278+res_1
  7509 0B:57F6: A7 14        	lda	[<L277+dp_0]
  7510 0B:57F8: 85 0B        	sta	<L278+fs_1
  7511 0B:57FA: A0 02 00     	ldy	#$2
  7512 0B:57FD: B7 14        	lda	[<L277+dp_0],Y
  7513 0B:57FF: 85 0D        	sta	<L278+fs_1+2
  7514                        	.line	2581
  7515                        L10118:
  7516 0B:5801: A0 18 00     	ldy	#$18
  Fri Jul 16 2021 14:42                                                Page 150


  7517 0B:5804: B7 14        	lda	[<L277+dp_0],Y
  7518 0B:5806: A0 1A 00     	ldy	#$1a
  7519 0B:5809: 17 14        	ora	[<L277+dp_0],Y
  7520 0B:580B: D0 03        	bne	L280
  7521 0B:580D: 82 CD 00     	brl	L10119
  7522                        L280:
  7523                        ;	{
  7524                        	.line	2582
  7525                        ;		res = move_window(fs, dp->sect);
  7526                        	.line	2583
  7527 0B:5810: A0 1A 00     	ldy	#$1a
  7528 0B:5813: B7 14        	lda	[<L277+dp_0],Y
  7529 0B:5815: 48           	pha
  7530 0B:5816: A0 18 00     	ldy	#$18
  7531 0B:5819: B7 14        	lda	[<L277+dp_0],Y
  7532 0B:581B: 48           	pha
  7533 0B:581C: D4 0D        	pei	<L278+fs_1+2
  7534 0B:581E: D4 0B        	pei	<L278+fs_1
  7535 0B:5820: 22 7A 43 0B  	jsl	~~move_window
  7536 0B:5824: 85 09        	sta	<L278+res_1
  7537                        ;		if (res != FR_OK)
  7538                        	.line	2584
  7539                        ;			break;
  7540 0B:5826: A5 09        	lda	<L278+res_1
  7541 0B:5828: F0 03        	beq	L281
  7542 0B:582A: 82 B0 00     	brl	L10119
  7543                        L281:
  7544                        ;		b = dp->dir[DIR_Name]; /* Test for the e
                    ntry type */
  7545                        	.line	2586
  7546 0B:582D: A0 1C 00     	ldy	#$1c
  7547 0B:5830: B7 14        	lda	[<L277+dp_0],Y
  7548 0B:5832: 85 01        	sta	<R0
  7549 0B:5834: A0 1E 00     	ldy	#$1e
  7550 0B:5837: B7 14        	lda	[<L277+dp_0],Y
  7551 0B:5839: 85 03        	sta	<R0+2
  7552 0B:583B: E2 20        	sep	#$20
  7553                        	longa	off
  7554 0B:583D: A7 01        	lda	[<R0]
  7555 0B:583F: 85 10        	sta	<L278+b_1
  7556 0B:5841: C2 20        	rep	#$20
  7557                        	longa	on
  7558                        ;		if (b == 0)
  7559                        	.line	2587
  7560                        ;		{
  7561 0B:5843: A5 10        	lda	<L278+b_1
  7562 0B:5845: 29 FF 00     	and	#$ff
  7563 0B:5848: F0 03        	beq	L282
  7564 0B:584A: 82 08 00     	brl	L10120
  7565                        L282:
  7566                        	.line	2588
  7567                        ;			res = FR_NO_FILE;
  7568                        	.line	2589
  7569 0B:584D: A9 04 00     	lda	#$4
  7570 0B:5850: 85 09        	sta	<L278+res_1
  7571                        ;			break; /* Reached to end of the 
                    directory */
  7572                        	.line	2590
  Fri Jul 16 2021 14:42                                                Page 151


  7573 0B:5852: 82 88 00     	brl	L10119
  7574                        ;		}
  7575                        	.line	2591
  7576                        ;#if FF_FS_EXFAT
  7577                        ;		if (fs->fs_type == FS_EXFAT)
  7578                        ;		{ /* On the exFAT volume */
  7579                        ;			if (FF_USE_LABEL && vol)
  7580                        ;			{
  7581                        ;				if (b == ET_VLABEL) brea
                    k; /* Volume label entry? */
  7582                        ;			}
  7583                        ;			else
  7584                        ;			{
  7585                        ;				if (b == ET_FILEDIR)
  7586                        ;				{ /* Start of the file e
                    ntry block? */
  7587                        ;					dp->blk_ofs = dp
                    ->dptr; /* Get location of the block */
  7588                        ;					res = load_xdir(
                    dp); /* Load the entry block */
  7589                        ;					if (res == FR_OK
                    )
  7590                        ;					{
  7591                        ;						dp->obj.
                    attr = fs->dirbuf[XDIR_Attr] & AM_MASK; /* Get attribute */
  7592                        ;					}
  7593                        ;					break;
  7594                        ;				}
  7595                        ;			}
  7596                        ;		}
  7597                        ;		else
  7598                        ;#endif
  7599                        ;		{ /* On the FAT/FAT32 volume */
  7600                        L10120:
  7601                        	.line	2615
  7602                        ;			dp->obj.attr = attr = dp->dir[DI
                    R_Attr] & AM_MASK; /* Get attribute */
  7603                        	.line	2616
  7604 0B:5855: A0 1C 00     	ldy	#$1c
  7605 0B:5858: B7 14        	lda	[<L277+dp_0],Y
  7606 0B:585A: 85 01        	sta	<R0
  7607 0B:585C: A0 1E 00     	ldy	#$1e
  7608 0B:585F: B7 14        	lda	[<L277+dp_0],Y
  7609 0B:5861: 85 03        	sta	<R0+2
  7610 0B:5863: E2 20        	sep	#$20
  7611                        	longa	off
  7612 0B:5865: A0 0B 00     	ldy	#$b
  7613 0B:5868: B7 01        	lda	[<R0],Y
  7614 0B:586A: 29 3F        	and	#<$3f
  7615 0B:586C: 85 0F        	sta	<L278+attr_1
  7616 0B:586E: C2 20        	rep	#$20
  7617                        	longa	on
  7618 0B:5870: E2 20        	sep	#$20
  7619                        	longa	off
  7620 0B:5872: A5 0F        	lda	<L278+attr_1
  7621 0B:5874: A0 06 00     	ldy	#$6
  7622 0B:5877: 97 14        	sta	[<L277+dp_0],Y
  7623 0B:5879: C2 20        	rep	#$20
  Fri Jul 16 2021 14:42                                                Page 152


  7624                        	longa	on
  7625                        ;#if FF_USE_LFN		/* LFN configuration */
  7626                        ;			if (b == DDEM || b == '.' || (in
                    t)((attr & ~AM_ARC) == AM_VOL) != vol)
  7627                        ;			{ /* An entry without valid data
                     */
  7628                        ;				ord = 0xFF;
  7629                        ;			}
  7630                        ;			else
  7631                        ;			{
  7632                        ;				if (attr == AM_LFN)
  7633                        ;				{ /* An LFN entry is fou
                    nd */
  7634                        ;					if (b & LLEF)
  7635                        ;					{ /* Is it start
                     of an LFN sequence? */
  7636                        ;						sum = dp
                    ->dir[LDIR_Chksum];
  7637                        ;						b &= (BY
                    TE)~LLEF; ord = b;
  7638                        ;						dp->blk_
                    ofs = dp->dptr;
  7639                        ;					}
  7640                        ;					/* Check LFN val
                    idity and capture it */
  7641                        ;					ord = (b == ord 
                    && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->d
                    ir)) ? ord - 1 : 0xFF;
  7642                        ;				}
  7643                        ;				else
  7644                        ;				{ /* An SFN entry is fou
                    nd */
  7645                        ;					if (ord != 0 || 
                    sum != sum_sfn(dp->dir))
  7646                        ;					{ /* Is there a 
                    valid LFN? */
  7647                        ;						dp->blk_
                    ofs = 0xFFFFFFFF; /* It has no LFN. */
  7648                        ;					}
  7649                        ;					break;
  7650                        ;				}
  7651                        ;			}
  7652                        ;#else		/* Non LFN configuration */
  7653                        ;			if (b != DDEM && b != '.' && att
                    r != AM_LFN
  7654                        	.line	2645
  7655                        ;					&& (int) ((attr 
                    & ~AM_ARC) == AM_VOL) == vol)
  7656                        ;			{ /* Is it a valid entry? */
  7657 0B:587B: E2 20        	sep	#$20
  7658                        	longa	off
  7659 0B:587D: A5 10        	lda	<L278+b_1
  7660 0B:587F: C9 E5        	cmp	#<$e5
  7661 0B:5881: C2 20        	rep	#$20
  7662                        	longa	on
  7663 0B:5883: D0 03        	bne	L283
  7664 0B:5885: 82 3E 00     	brl	L10121
  7665                        L283:
  Fri Jul 16 2021 14:42                                                Page 153


  7666 0B:5888: E2 20        	sep	#$20
  7667                        	longa	off
  7668 0B:588A: A5 10        	lda	<L278+b_1
  7669 0B:588C: C9 2E        	cmp	#<$2e
  7670 0B:588E: C2 20        	rep	#$20
  7671                        	longa	on
  7672 0B:5890: D0 03        	bne	L284
  7673 0B:5892: 82 31 00     	brl	L10121
  7674                        L284:
  7675 0B:5895: E2 20        	sep	#$20
  7676                        	longa	off
  7677 0B:5897: A5 0F        	lda	<L278+attr_1
  7678 0B:5899: C9 0F        	cmp	#<$f
  7679 0B:589B: C2 20        	rep	#$20
  7680                        	longa	on
  7681 0B:589D: D0 03        	bne	L285
  7682 0B:589F: 82 24 00     	brl	L10121
  7683                        L285:
  7684 0B:58A2: 64 01        	stz	<R0
  7685 0B:58A4: A5 0F        	lda	<L278+attr_1
  7686 0B:58A6: 29 FF 00     	and	#$ff
  7687 0B:58A9: 29 DF FF     	and	#<$ffffffdf
  7688 0B:58AC: 85 05        	sta	<R1
  7689 0B:58AE: A5 05        	lda	<R1
  7690 0B:58B0: C9 08 00     	cmp	#<$8
  7691 0B:58B3: F0 03        	beq	L287
  7692 0B:58B5: 82 02 00     	brl	L286
  7693                        L287:
  7694 0B:58B8: E6 01        	inc	<R0
  7695                        L286:
  7696 0B:58BA: A5 01        	lda	<R0
  7697 0B:58BC: C5 18        	cmp	<L277+vol_0
  7698 0B:58BE: F0 03        	beq	L288
  7699 0B:58C0: 82 03 00     	brl	L10121
  7700                        L288:
  7701                        	.line	2647
  7702                        ;				break;
  7703                        	.line	2648
  7704 0B:58C3: 82 17 00     	brl	L10119
  7705                        ;			}
  7706                        	.line	2649
  7707                        ;#endif
  7708                        ;		}
  7709                        L10121:
  7710                        	.line	2651
  7711                        ;		res = dir_next(dp, 0); /* Next entry */
  7712                        	.line	2652
  7713 0B:58C6: F4 00 00     	pea	#<$0
  7714 0B:58C9: D4 16        	pei	<L277+dp_0+2
  7715 0B:58CB: D4 14        	pei	<L277+dp_0
  7716 0B:58CD: 22 7C 53 0B  	jsl	~~dir_next
  7717 0B:58D1: 85 09        	sta	<L278+res_1
  7718                        ;		if (res != FR_OK)
  7719                        	.line	2653
  7720                        ;			break;
  7721 0B:58D3: A5 09        	lda	<L278+res_1
  7722 0B:58D5: F0 03        	beq	L289
  7723 0B:58D7: 82 03 00     	brl	L10119
  Fri Jul 16 2021 14:42                                                Page 154


  7724                        L289:
  7725                        ;	}
  7726                        	.line	2655
  7727 0B:58DA: 82 24 FF     	brl	L10118
  7728                        L10119:
  7729                        ;
  7730                        ;	if (res != FR_OK)
  7731                        	.line	2657
  7732                        ;		dp->sect = 0; /* Terminate the read oper
                    ation on error or EOT */
  7733 0B:58DD: A5 09        	lda	<L278+res_1
  7734 0B:58DF: D0 03        	bne	L290
  7735 0B:58E1: 82 10 00     	brl	L10122
  7736                        L290:
  7737                        	.line	2658
  7738 0B:58E4: A9 00 00     	lda	#$0
  7739 0B:58E7: A0 18 00     	ldy	#$18
  7740 0B:58EA: 97 14        	sta	[<L277+dp_0],Y
  7741 0B:58EC: A9 00 00     	lda	#$0
  7742 0B:58EF: A0 1A 00     	ldy	#$1a
  7743 0B:58F2: 97 14        	sta	[<L277+dp_0],Y
  7744                        ;	return res;
  7745                        L10122:
  7746                        	.line	2659
  7747 0B:58F4: A5 09        	lda	<L278+res_1
  7748                        L291:
  7749 0B:58F6: A8           	tay
  7750 0B:58F7: A5 12        	lda	<L277+2
  7751 0B:58F9: 85 18        	sta	<L277+2+6
  7752 0B:58FB: A5 11        	lda	<L277+1
  7753 0B:58FD: 85 17        	sta	<L277+1+6
  7754 0B:58FF: 2B           	pld
  7755 0B:5900: 3B           	tsc
  7756 0B:5901: 18           	clc
  7757 0B:5902: 69 16 00     	adc	#L277+6
  7758 0B:5905: 1B           	tcs
  7759 0B:5906: 98           	tya
  7760 0B:5907: 6B           	rtl
  7761                        ;}
  7762                        	.line	2660
  7763                        	.endblock	2660
  7764             00000010   L277	equ	16
  7765             00000009   L278	equ	9
  7766 0B:5908:              	ends
  7767                        	efunc
  7768                        	.endfunc	2660,9,16
  7769                        	.line	2660
  7770                        ;
  7771                        ;#endif	/* FF_FS_MINIMIZE <= 1 || FF_USE_LABEL |
                    | FF_FS_RPATH >= 2 */
  7772                        ;
  7773                        ;/*-----------------------------------------------
                    ------------------------*/
  7774                        ;/* Directory handling - Find an object in the dir
                    ectory                  */
  7775                        ;/*-----------------------------------------------
                    ------------------------*/
  7776                        ;
  Fri Jul 16 2021 14:42                                                Page 155


  7777                        ;static FRESULT dir_find( /* FR_OK(0):succeeded, !
                    =0:error */
  7778                        ;DIR* dp /* Pointer to the directory object with t
                    he file name */
  7779                        ;)
  7780                        ;{
  7781                        	.line	2668
  7782                        	.line	2671
  7783                        	FFDOS
  7784                        	func
  7785                        	.function	2671
  7786                        ~~dir_find:
  7787                        	longa	on
  7788                        	longi	on
  7789 0B:5908: 3B           	tsc
  7790 0B:5909: 38           	sec
  7791 0B:590A: E9 0B 00     	sbc	#L292
  7792 0B:590D: 1B           	tcs
  7793 0B:590E: 0B           	phd
  7794 0B:590F: 5B           	tcd
  7795             00000004   dp_0	set	4
  7796                        	.block	2671
  7797                        ;	FRESULT res;
  7798                        ;	FATFS *fs = dp->obj.fs;
  7799                        ;	BYTE c;
  7800                        ;#if FF_USE_LFN
  7801                        ;	BYTE a, ord, sum;
  7802                        ;#endif
  7803                        ;
  7804                        ;	res = dir_sdi(dp, 0); /* Rewind directory object
                     */
  7805             00000000   res_1	set	0
  7806             00000002   fs_1	set	2
  7807             00000006   c_1	set	6
  7808                        	.sym	res,0,5,1,16
  7809                        	.sym	fs,2,138,1,32,49
  7810                        	.sym	c,6,14,1,8
  7811                        	.sym	dp,4,138,6,32,52
  7812 0B:5910: A7 0F        	lda	[<L292+dp_0]
  7813 0B:5912: 85 07        	sta	<L293+fs_1
  7814 0B:5914: A0 02 00     	ldy	#$2
  7815 0B:5917: B7 0F        	lda	[<L292+dp_0],Y
  7816 0B:5919: 85 09        	sta	<L293+fs_1+2
  7817                        	.line	2679
  7818 0B:591B: F4 00 00     	pea	#^$0
  7819 0B:591E: F4 00 00     	pea	#<$0
  7820 0B:5921: D4 11        	pei	<L292+dp_0+2
  7821 0B:5923: D4 0F        	pei	<L292+dp_0
  7822 0B:5925: 22 3D 51 0B  	jsl	~~dir_sdi
  7823 0B:5929: 85 05        	sta	<L293+res_1
  7824                        ;	if (res != FR_OK)
  7825                        	.line	2680
  7826                        ;		return res;
  7827 0B:592B: A5 05        	lda	<L293+res_1
  7828 0B:592D: D0 03        	bne	L295
  7829 0B:592F: 82 14 00     	brl	L10123
  7830                        L295:
  7831                        	.line	2681
  Fri Jul 16 2021 14:42                                                Page 156


  7832 0B:5932: A5 05        	lda	<L293+res_1
  7833                        L296:
  7834 0B:5934: A8           	tay
  7835 0B:5935: A5 0D        	lda	<L292+2
  7836 0B:5937: 85 11        	sta	<L292+2+4
  7837 0B:5939: A5 0C        	lda	<L292+1
  7838 0B:593B: 85 10        	sta	<L292+1+4
  7839 0B:593D: 2B           	pld
  7840 0B:593E: 3B           	tsc
  7841 0B:593F: 18           	clc
  7842 0B:5940: 69 0F 00     	adc	#L292+4
  7843 0B:5943: 1B           	tcs
  7844 0B:5944: 98           	tya
  7845 0B:5945: 6B           	rtl
  7846                        ;#if FF_FS_EXFAT
  7847                        ;	if (fs->fs_type == FS_EXFAT)
  7848                        ;	{ /* On the exFAT volume */
  7849                        ;		BYTE nc;
  7850                        ;		UINT di, ni;
  7851                        ;		WORD hash = xname_sum(fs->lfnbuf); /* Ha
                    sh value of the name to find */
  7852                        ;
  7853                        ;		while ((res = DIR_READ_FILE(dp)) == FR_O
                    K)
  7854                        ;		{ /* Read an item */
  7855                        ;#if FF_MAX_LFN < 255
  7856                        ;			if (fs->dirbuf[XDIR_NumName] > F
                    F_MAX_LFN) continue; /* Skip comparison if inaccessible obje
                    ct name */
  7857                        ;#endif
  7858                        ;			if (ld_word(fs->dirbuf + XDIR_Na
                    meHash) != hash) continue; /* Skip comparison if hash mismat
                    ched */
  7859                        ;			for (nc = fs->dirbuf[XDIR_NumNam
                    e], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++)
  7860                        ;			{ /* Compare the name */
  7861                        ;				if ((di % SZDIRE) == 0) 
                    di += 2;
  7862                        ;				if (ff_wtoupper(ld_word(
                    fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
  7863                        ;			}
  7864                        ;			if (nc == 0 && !fs->lfnbuf[ni]) 
                    break; /* Name matched? */
  7865                        ;		}
  7866                        ;		return res;
  7867                        ;	}
  7868                        ;#endif
  7869                        ;	/* On the FAT/FAT32 volume */
  7870                        ;#if FF_USE_LFN
  7871                        ;	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF; /* R
                    eset LFN sequence */
  7872                        ;#endif
  7873                        ;	do
  7874                        L10123:
  7875                        	.line	2709
  7876                        L10126:
  7877                        ;	{
  7878                        	.line	2710
  Fri Jul 16 2021 14:42                                                Page 157


  7879                        ;		res = move_window(fs, dp->sect);
  7880                        	.line	2711
  7881 0B:5946: A0 1A 00     	ldy	#$1a
  7882 0B:5949: B7 0F        	lda	[<L292+dp_0],Y
  7883 0B:594B: 48           	pha
  7884 0B:594C: A0 18 00     	ldy	#$18
  7885 0B:594F: B7 0F        	lda	[<L292+dp_0],Y
  7886 0B:5951: 48           	pha
  7887 0B:5952: D4 09        	pei	<L293+fs_1+2
  7888 0B:5954: D4 07        	pei	<L293+fs_1
  7889 0B:5956: 22 7A 43 0B  	jsl	~~move_window
  7890 0B:595A: 85 05        	sta	<L293+res_1
  7891                        ;		if (res != FR_OK)
  7892                        	.line	2712
  7893                        ;			break;
  7894 0B:595C: A5 05        	lda	<L293+res_1
  7895 0B:595E: F0 03        	beq	L297
  7896 0B:5960: 82 A8 00     	brl	L10125
  7897                        L297:
  7898                        ;		c = dp->dir[DIR_Name];
  7899                        	.line	2714
  7900 0B:5963: A0 1C 00     	ldy	#$1c
  7901 0B:5966: B7 0F        	lda	[<L292+dp_0],Y
  7902 0B:5968: 85 01        	sta	<R0
  7903 0B:596A: A0 1E 00     	ldy	#$1e
  7904 0B:596D: B7 0F        	lda	[<L292+dp_0],Y
  7905 0B:596F: 85 03        	sta	<R0+2
  7906 0B:5971: E2 20        	sep	#$20
  7907                        	longa	off
  7908 0B:5973: A7 01        	lda	[<R0]
  7909 0B:5975: 85 0B        	sta	<L293+c_1
  7910 0B:5977: C2 20        	rep	#$20
  7911                        	longa	on
  7912                        ;		if (c == 0)
  7913                        	.line	2715
  7914                        ;		{
  7915 0B:5979: A5 0B        	lda	<L293+c_1
  7916 0B:597B: 29 FF 00     	and	#$ff
  7917 0B:597E: F0 03        	beq	L298
  7918 0B:5980: 82 08 00     	brl	L10127
  7919                        L298:
  7920                        	.line	2716
  7921                        ;			res = FR_NO_FILE;
  7922                        	.line	2717
  7923 0B:5983: A9 04 00     	lda	#$4
  7924 0B:5986: 85 05        	sta	<L293+res_1
  7925                        ;			break;
  7926                        	.line	2718
  7927 0B:5988: 82 80 00     	brl	L10125
  7928                        ;		} /* Reached to end of table */
  7929                        	.line	2719
  7930                        ;#if FF_USE_LFN		/* LFN configuration */
  7931                        ;		dp->obj.attr = a = dp->dir[DIR_Attr] & A
                    M_MASK;
  7932                        ;		if (c == DDEM || ((a & AM_VOL) && a != A
                    M_LFN))
  7933                        ;		{ /* An entry without valid data */
  7934                        ;			ord = 0xFF; dp->blk_ofs = 0xFFFF
  Fri Jul 16 2021 14:42                                                Page 158


                    FFFF; /* Reset LFN sequence */
  7935                        ;		}
  7936                        ;		else
  7937                        ;		{
  7938                        ;			if (a == AM_LFN)
  7939                        ;			{ /* An LFN entry is found */
  7940                        ;				if (!(dp->fn[NSFLAG] & N
                    S_NOLFN))
  7941                        ;				{
  7942                        ;					if (c & LLEF)
  7943                        ;					{ /* Is it start
                     of LFN sequence? */
  7944                        ;						sum = dp
                    ->dir[LDIR_Chksum];
  7945                        ;						c &= (BY
                    TE)~LLEF; ord = c; /* LFN start order */
  7946                        ;						dp->blk_
                    ofs = dp->dptr; /* Start offset of LFN */
  7947                        ;					}
  7948                        ;					/* Check validit
                    y of the LFN entry and compare it with given name */
  7949                        ;					ord = (c == ord 
                    && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->di
                    r)) ? ord - 1 : 0xFF;
  7950                        ;				}
  7951                        ;			}
  7952                        ;			else
  7953                        ;			{ /* An SFN entry is found */
  7954                        ;				if (ord == 0 && sum == s
                    um_sfn(dp->dir)) break; /* LFN matched? */
  7955                        ;				if (!(dp->fn[NSFLAG] & N
                    S_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break; /* SFN matc
                    hed? */
  7956                        ;				ord = 0xFF; dp->blk_ofs 
                    = 0xFFFFFFFF; /* Reset LFN sequence */
  7957                        ;			}
  7958                        ;		}
  7959                        ;#else		/* Non LFN configuration */
  7960                        ;		dp->obj.attr = dp->dir[DIR_Attr] & AM_MA
                    SK;
  7961                        L10127:
  7962                        	.line	2750
  7963 0B:598B: A0 1C 00     	ldy	#$1c
  7964 0B:598E: B7 0F        	lda	[<L292+dp_0],Y
  7965 0B:5990: 85 01        	sta	<R0
  7966 0B:5992: A0 1E 00     	ldy	#$1e
  7967 0B:5995: B7 0F        	lda	[<L292+dp_0],Y
  7968 0B:5997: 85 03        	sta	<R0+2
  7969 0B:5999: E2 20        	sep	#$20
  7970                        	longa	off
  7971 0B:599B: A0 0B 00     	ldy	#$b
  7972 0B:599E: B7 01        	lda	[<R0],Y
  7973 0B:59A0: 29 3F        	and	#<$3f
  7974 0B:59A2: C2 20        	rep	#$20
  7975                        	longa	on
  7976 0B:59A4: E2 20        	sep	#$20
  7977                        	longa	off
  7978 0B:59A6: A0 06 00     	ldy	#$6
  Fri Jul 16 2021 14:42                                                Page 159


  7979 0B:59A9: 97 0F        	sta	[<L292+dp_0],Y
  7980 0B:59AB: C2 20        	rep	#$20
  7981                        	longa	on
  7982                        ;		if (!(dp->dir[DIR_Attr] & AM_VOL) && !me
                    m_cmp(dp->dir, dp->fn, 11))
  7983                        	.line	2751
  7984                        ;			break; /* Is it a valid entry? *
                    /
  7985 0B:59AD: A0 1C 00     	ldy	#$1c
  7986 0B:59B0: B7 0F        	lda	[<L292+dp_0],Y
  7987 0B:59B2: 85 01        	sta	<R0
  7988 0B:59B4: A0 1E 00     	ldy	#$1e
  7989 0B:59B7: B7 0F        	lda	[<L292+dp_0],Y
  7990 0B:59B9: 85 03        	sta	<R0+2
  7991 0B:59BB: E2 20        	sep	#$20
  7992                        	longa	off
  7993 0B:59BD: A0 0B 00     	ldy	#$b
  7994 0B:59C0: B7 01        	lda	[<R0],Y
  7995 0B:59C2: 29 08        	and	#<$8
  7996 0B:59C4: C2 20        	rep	#$20
  7997                        	longa	on
  7998 0B:59C6: F0 03        	beq	L300
  7999 0B:59C8: 82 2C 00     	brl	L299
  8000                        L300:
  8001 0B:59CB: F4 0B 00     	pea	#<$b
  8002 0B:59CE: 18           	clc
  8003 0B:59CF: A9 20 00     	lda	#$20
  8004 0B:59D2: 65 0F        	adc	<L292+dp_0
  8005 0B:59D4: 85 01        	sta	<R0
  8006 0B:59D6: A9 00 00     	lda	#$0
  8007 0B:59D9: 65 11        	adc	<L292+dp_0+2
  8008 0B:59DB: 85 03        	sta	<R0+2
  8009 0B:59DD: D4 03        	pei	<R0+2
  8010 0B:59DF: D4 01        	pei	<R0
  8011 0B:59E1: A0 1E 00     	ldy	#$1e
  8012 0B:59E4: B7 0F        	lda	[<L292+dp_0],Y
  8013 0B:59E6: 48           	pha
  8014 0B:59E7: A0 1C 00     	ldy	#$1c
  8015 0B:59EA: B7 0F        	lda	[<L292+dp_0],Y
  8016 0B:59EC: 48           	pha
  8017 0B:59ED: 22 96 41 0B  	jsl	~~mem_cmp
  8018 0B:59F1: AA           	tax
  8019 0B:59F2: D0 03        	bne	L301
  8020 0B:59F4: 82 14 00     	brl	L10125
  8021                        L301:
  8022                        L299:
  8023                        ;#endif
  8024                        ;		res = dir_next(dp, 0); /* Next entry */
  8025                        	.line	2754
  8026 0B:59F7: F4 00 00     	pea	#<$0
  8027 0B:59FA: D4 11        	pei	<L292+dp_0+2
  8028 0B:59FC: D4 0F        	pei	<L292+dp_0
  8029 0B:59FE: 22 7C 53 0B  	jsl	~~dir_next
  8030 0B:5A02: 85 05        	sta	<L293+res_1
  8031                        ;	} while (res == FR_OK);
  8032                        	.line	2755
  8033                        L10124:
  8034 0B:5A04: A5 05        	lda	<L293+res_1
  Fri Jul 16 2021 14:42                                                Page 160


  8035 0B:5A06: D0 03        	bne	L302
  8036 0B:5A08: 82 3B FF     	brl	L10126
  8037                        L302:
  8038                        L10125:
  8039                        ;
  8040                        ;	return res;
  8041                        	.line	2757
  8042 0B:5A0B: A5 05        	lda	<L293+res_1
  8043 0B:5A0D: 82 24 FF     	brl	L296
  8044                        ;}
  8045                        	.line	2758
  8046                        	.endblock	2758
  8047             0000000B   L292	equ	11
  8048             00000005   L293	equ	5
  8049 0B:5A10:              	ends
  8050                        	efunc
  8051                        	.endfunc	2758,5,11
  8052                        	.line	2758
  8053                        ;
  8054                        ;#if !FF_FS_READONLY
  8055                        ;/*-----------------------------------------------
                    ------------------------*/
  8056                        ;/* Register an object to the directory           
                                            */
  8057                        ;/*-----------------------------------------------
                    ------------------------*/
  8058                        ;
  8059                        ;static FRESULT dir_register( /* FR_OK:succeeded, 
                    FR_DENIED:no free entry or too many SFN collision, FR_DISK_E
                    RR:disk error */
  8060                        ;DIR* dp /* Target directory with object name to b
                    e created */
  8061                        ;)
  8062                        ;{
  8063                        	.line	2765
  8064                        	.line	2768
  8065                        	FFDOS
  8066                        	func
  8067                        	.function	2768
  8068                        ~~dir_register:
  8069                        	longa	on
  8070                        	longi	on
  8071 0B:5A10: 3B           	tsc
  8072 0B:5A11: 38           	sec
  8073 0B:5A12: E9 0A 00     	sbc	#L303
  8074 0B:5A15: 1B           	tcs
  8075 0B:5A16: 0B           	phd
  8076 0B:5A17: 5B           	tcd
  8077             00000004   dp_0	set	4
  8078                        	.block	2768
  8079                        ;	FRESULT res;
  8080                        ;	FATFS *fs = dp->obj.fs;
  8081                        ;#if FF_USE_LFN		/* LFN configuration */
  8082                        ;	UINT n, nlen, nent;
  8083                        ;	BYTE sn[12], sum;
  8084                        ;
  8085                        ;	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) retur
                    n FR_INVALID_NAME; /* Check name validity */
  Fri Jul 16 2021 14:42                                                Page 161


  8086                        ;	for (nlen = 0; fs->lfnbuf[nlen]; nlen++); /* Get
                     lfn length */
  8087                        ;
  8088                        ;#if FF_FS_EXFAT
  8089                        ;	if (fs->fs_type == FS_EXFAT)
  8090                        ;	{ /* On the exFAT volume */
  8091                        ;		nent = (nlen + 14) / 15 + 2; /* Number o
                    f entries to allocate (85+C0+C1s) */
  8092                        ;		res = dir_alloc(dp, nent); /* Allocate d
                    irectory entries */
  8093                        ;		if (res != FR_OK) return res;
  8094                        ;		dp->blk_ofs = dp->dptr - SZDIRE * (nent 
                    - 1); /* Set the allocated entry block offset */
  8095                        ;
  8096                        ;		if (dp->obj.stat & 4)
  8097                        ;		{ /* Has the directory been stretched by
                     new allocation? */
  8098                        ;			dp->obj.stat &= ~4;
  8099                        ;			res = fill_first_frag(&dp->obj);
                     /* Fill the first fragment on the FAT if needed */
  8100                        ;			if (res != FR_OK) return res;
  8101                        ;			res = fill_last_frag(&dp->obj, d
                    p->clust, 0xFFFFFFFF); /* Fill the last fragment on the FAT 
                    if needed */
  8102                        ;			if (res != FR_OK) return res;
  8103                        ;			if (dp->obj.sclust != 0)
  8104                        ;			{ /* Is it a sub-directory? */
  8105                        ;				DIR dj;
  8106                        ;
  8107                        ;				res = load_obj_xdir(&dj,
                     &dp->obj); /* Load the object status */
  8108                        ;				if (res != FR_OK) return
                     res;
  8109                        ;				dp->obj.objsize += (DWOR
                    D)fs->csize * SS(fs); /* Increase the directory size by clus
                    ter size */
  8110                        ;				st_qword(fs->dirbuf + XD
                    IR_FileSize, dp->obj.objsize);
  8111                        ;				st_qword(fs->dirbuf + XD
                    IR_ValidFileSize, dp->obj.objsize);
  8112                        ;				fs->dirbuf[XDIR_GenFlags
                    ] = dp->obj.stat | 1; /* Update the allocation status */
  8113                        ;				res = store_xdir(&dj); /
                    * Store the object status */
  8114                        ;				if (res != FR_OK) return
                     res;
  8115                        ;			}
  8116                        ;		}
  8117                        ;
  8118                        ;		create_xdir(fs->dirbuf, fs->lfnbuf); /* 
                    Create on-memory directory block to be written later */
  8119                        ;		return FR_OK;
  8120                        ;	}
  8121                        ;#endif
  8122                        ;	/* On the FAT/FAT32 volume */
  8123                        ;	mem_cpy(sn, dp->fn, 12);
  8124                        ;	if (sn[NSFLAG] & NS_LOSS)
  8125                        ;	{ /* When LFN is out of 8.3 format, generate a n
  Fri Jul 16 2021 14:42                                                Page 162


                    umbered name */
  8126                        ;		dp->fn[NSFLAG] = NS_NOLFN; /* Find only 
                    SFN */
  8127                        ;		for (n = 1; n < 100; n++)
  8128                        ;		{
  8129                        ;			gen_numname(dp->fn, sn, fs->lfnb
                    uf, n); /* Generate a numbered name */
  8130                        ;			res = dir_find(dp); /* Check if 
                    the name collides with existing SFN */
  8131                        ;			if (res != FR_OK) break;
  8132                        ;		}
  8133                        ;		if (n == 100) return FR_DENIED; /* Abort
                     if too many collisions */
  8134                        ;		if (res != FR_NO_FILE) return res; /* Ab
                    ort if the result is other than 'not collided' */
  8135                        ;		dp->fn[NSFLAG] = sn[NSFLAG];
  8136                        ;	}
  8137                        ;
  8138                        ;	/* Create an SFN with/without LFNs. */
  8139                        ;	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 
                    + 1 : 1; /* Number of entries to allocate */
  8140                        ;	res = dir_alloc(dp, nent); /* Allocate entries *
                    /
  8141                        ;	if (res == FR_OK && --nent)
  8142                        ;	{ /* Set LFN entry if needed */
  8143                        ;		res = dir_sdi(dp, dp->dptr - nent * SZDI
                    RE);
  8144                        ;		if (res == FR_OK)
  8145                        ;		{
  8146                        ;			sum = sum_sfn(dp->fn); /* Checks
                    um value of the SFN tied to the LFN */
  8147                        ;			do
  8148                        ;			{ /* Store LFN entries in bottom
                     first */
  8149                        ;				res = move_window(fs, dp
                    ->sect);
  8150                        ;				if (res != FR_OK) break;
  8151                        ;				put_lfn(fs->lfnbuf, dp->
                    dir, (BYTE)nent, sum);
  8152                        ;				fs->wflag = 1;
  8153                        ;				res = dir_next(dp, 0); /
                    * Next entry */
  8154                        ;			}while (res == FR_OK && --nent);
  8155                        ;		}
  8156                        ;	}
  8157                        ;
  8158                        ;#else	/* Non LFN configuration */
  8159                        ;	res = dir_alloc(dp, 1); /* Allocate an entry for
                     SFN */
  8160             00000000   res_1	set	0
  8161             00000002   fs_1	set	2
  8162                        	.sym	res,0,5,1,16
  8163                        	.sym	fs,2,138,1,32,49
  8164                        	.sym	dp,4,138,6,32,52
  8165 0B:5A18: A7 0E        	lda	[<L303+dp_0]
  8166 0B:5A1A: 85 07        	sta	<L304+fs_1
  8167 0B:5A1C: A0 02 00     	ldy	#$2
  8168 0B:5A1F: B7 0E        	lda	[<L303+dp_0],Y
  Fri Jul 16 2021 14:42                                                Page 163


  8169 0B:5A21: 85 09        	sta	<L304+fs_1+2
  8170                        	.line	2849
  8171 0B:5A23: F4 01 00     	pea	#<$1
  8172 0B:5A26: D4 10        	pei	<L303+dp_0+2
  8173 0B:5A28: D4 0E        	pei	<L303+dp_0
  8174 0B:5A2A: 22 30 56 0B  	jsl	~~dir_alloc
  8175 0B:5A2E: 85 05        	sta	<L304+res_1
  8176                        ;
  8177                        ;#endif
  8178                        ;
  8179                        ;	/* Set SFN entry */
  8180                        ;	if (res == FR_OK)
  8181                        	.line	2854
  8182                        ;	{
  8183 0B:5A30: A5 05        	lda	<L304+res_1
  8184 0B:5A32: F0 03        	beq	L306
  8185 0B:5A34: 82 64 00     	brl	L10128
  8186                        L306:
  8187                        	.line	2855
  8188                        ;		res = move_window(fs, dp->sect);
  8189                        	.line	2856
  8190 0B:5A37: A0 1A 00     	ldy	#$1a
  8191 0B:5A3A: B7 0E        	lda	[<L303+dp_0],Y
  8192 0B:5A3C: 48           	pha
  8193 0B:5A3D: A0 18 00     	ldy	#$18
  8194 0B:5A40: B7 0E        	lda	[<L303+dp_0],Y
  8195 0B:5A42: 48           	pha
  8196 0B:5A43: D4 09        	pei	<L304+fs_1+2
  8197 0B:5A45: D4 07        	pei	<L304+fs_1
  8198 0B:5A47: 22 7A 43 0B  	jsl	~~move_window
  8199 0B:5A4B: 85 05        	sta	<L304+res_1
  8200                        ;		if (res == FR_OK)
  8201                        	.line	2857
  8202                        ;		{
  8203 0B:5A4D: A5 05        	lda	<L304+res_1
  8204 0B:5A4F: F0 03        	beq	L307
  8205 0B:5A51: 82 47 00     	brl	L10129
  8206                        L307:
  8207                        	.line	2858
  8208                        ;			mem_set(dp->dir, 0, SZDIRE); /* 
                    Clean the entry */
  8209                        	.line	2859
  8210 0B:5A54: F4 20 00     	pea	#<$20
  8211 0B:5A57: F4 00 00     	pea	#<$0
  8212 0B:5A5A: A0 1E 00     	ldy	#$1e
  8213 0B:5A5D: B7 0E        	lda	[<L303+dp_0],Y
  8214 0B:5A5F: 48           	pha
  8215 0B:5A60: A0 1C 00     	ldy	#$1c
  8216 0B:5A63: B7 0E        	lda	[<L303+dp_0],Y
  8217 0B:5A65: 48           	pha
  8218 0B:5A66: 22 5F 41 0B  	jsl	~~mem_set
  8219                        ;			mem_cpy(dp->dir + DIR_Name, dp->
                    fn, 11); /* Put SFN */
  8220                        	.line	2860
  8221 0B:5A6A: F4 0B 00     	pea	#<$b
  8222 0B:5A6D: 18           	clc
  8223 0B:5A6E: A9 20 00     	lda	#$20
  8224 0B:5A71: 65 0E        	adc	<L303+dp_0
  Fri Jul 16 2021 14:42                                                Page 164


  8225 0B:5A73: 85 01        	sta	<R0
  8226 0B:5A75: A9 00 00     	lda	#$0
  8227 0B:5A78: 65 10        	adc	<L303+dp_0+2
  8228 0B:5A7A: 85 03        	sta	<R0+2
  8229 0B:5A7C: D4 03        	pei	<R0+2
  8230 0B:5A7E: D4 01        	pei	<R0
  8231 0B:5A80: A0 1E 00     	ldy	#$1e
  8232 0B:5A83: B7 0E        	lda	[<L303+dp_0],Y
  8233 0B:5A85: 48           	pha
  8234 0B:5A86: A0 1C 00     	ldy	#$1c
  8235 0B:5A89: B7 0E        	lda	[<L303+dp_0],Y
  8236 0B:5A8B: 48           	pha
  8237 0B:5A8C: 22 13 41 0B  	jsl	~~mem_cpy
  8238                        ;#if FF_USE_LFN
  8239                        ;			dp->dir[DIR_NTres] = dp->fn[NSFL
                    AG] & (NS_BODY | NS_EXT); /* Put NT flag */
  8240                        ;#endif
  8241                        ;			fs->wflag = 1;
  8242                        	.line	2864
  8243 0B:5A90: E2 20        	sep	#$20
  8244                        	longa	off
  8245 0B:5A92: A9 01        	lda	#$1
  8246 0B:5A94: A0 03 00     	ldy	#$3
  8247 0B:5A97: 97 07        	sta	[<L304+fs_1],Y
  8248 0B:5A99: C2 20        	rep	#$20
  8249                        	longa	on
  8250                        ;		}
  8251                        	.line	2865
  8252                        ;	}
  8253                        L10129:
  8254                        	.line	2866
  8255                        ;
  8256                        ;	return res;
  8257                        L10128:
  8258                        	.line	2868
  8259 0B:5A9B: A5 05        	lda	<L304+res_1
  8260                        L308:
  8261 0B:5A9D: A8           	tay
  8262 0B:5A9E: A5 0C        	lda	<L303+2
  8263 0B:5AA0: 85 10        	sta	<L303+2+4
  8264 0B:5AA2: A5 0B        	lda	<L303+1
  8265 0B:5AA4: 85 0F        	sta	<L303+1+4
  8266 0B:5AA6: 2B           	pld
  8267 0B:5AA7: 3B           	tsc
  8268 0B:5AA8: 18           	clc
  8269 0B:5AA9: 69 0E 00     	adc	#L303+4
  8270 0B:5AAC: 1B           	tcs
  8271 0B:5AAD: 98           	tya
  8272 0B:5AAE: 6B           	rtl
  8273                        ;}
  8274                        	.line	2869
  8275                        	.endblock	2869
  8276             0000000A   L303	equ	10
  8277             00000005   L304	equ	5
  8278 0B:5AAF:              	ends
  8279                        	efunc
  8280                        	.endfunc	2869,5,10
  8281                        	.line	2869
  Fri Jul 16 2021 14:42                                                Page 165


  8282                        ;
  8283                        ;#endif /* !FF_FS_READONLY */
  8284                        ;
  8285                        ;#if !FF_FS_READONLY && FF_FS_MINIMIZE == 0
  8286                        ;/*-----------------------------------------------
                    ------------------------*/
  8287                        ;/* Remove an object from the directory           
                                            */
  8288                        ;/*-----------------------------------------------
                    ------------------------*/
  8289                        ;
  8290                        ;static FRESULT dir_remove( /* FR_OK:Succeeded, FR
                    _DISK_ERR:A disk error */
  8291                        ;DIR* dp /* Directory object pointing the entry to
                     be removed */
  8292                        ;)
  8293                        ;{
  8294                        	.line	2878
  8295                        	.line	2881
  8296                        	FFDOS
  8297                        	func
  8298                        	.function	2881
  8299                        ~~dir_remove:
  8300                        	longa	on
  8301                        	longi	on
  8302 0B:5AAF: 3B           	tsc
  8303 0B:5AB0: 38           	sec
  8304 0B:5AB1: E9 0A 00     	sbc	#L309
  8305 0B:5AB4: 1B           	tcs
  8306 0B:5AB5: 0B           	phd
  8307 0B:5AB6: 5B           	tcd
  8308             00000004   dp_0	set	4
  8309                        	.block	2881
  8310                        ;	FRESULT res;
  8311                        ;	FATFS *fs = dp->obj.fs;
  8312                        ;#if FF_USE_LFN		/* LFN configuration */
  8313                        ;	DWORD last = dp->dptr;
  8314                        ;
  8315                        ;	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_
                    sdi(dp, dp->blk_ofs); /* Goto top of the entry block if LFN 
                    is exist */
  8316                        ;	if (res == FR_OK)
  8317                        ;	{
  8318                        ;		do
  8319                        ;		{
  8320                        ;			res = move_window(fs, dp->sect);
  8321                        ;			if (res != FR_OK) break;
  8322                        ;			if (FF_FS_EXFAT && fs->fs_type =
                    = FS_EXFAT)
  8323                        ;			{ /* On the exFAT volume */
  8324                        ;				dp->dir[XDIR_Type] &= 0x
                    7F; /* Clear the entry InUse flag. */
  8325                        ;			}
  8326                        ;			else
  8327                        ;			{ /* On the FAT/FAT32 volume */
  8328                        ;				dp->dir[DIR_Name] = DDEM
                    ; /* Mark the entry 'deleted'. */
  8329                        ;			}
  Fri Jul 16 2021 14:42                                                Page 166


  8330                        ;			fs->wflag = 1;
  8331                        ;			if (dp->dptr >= last) break; /* 
                    If reached last entry then all entries of the object has bee
                    n deleted. */
  8332                        ;			res = dir_next(dp, 0); /* Next e
                    ntry */
  8333                        ;		}while (res == FR_OK);
  8334                        ;		if (res == FR_NO_FILE) res = FR_INT_ERR;
  8335                        ;	}
  8336                        ;#else			/* Non LFN configuration
                     */
  8337                        ;
  8338                        ;	res = move_window(fs, dp->sect);
  8339             00000000   res_1	set	0
  8340             00000002   fs_1	set	2
  8341                        	.sym	res,0,5,1,16
  8342                        	.sym	fs,2,138,1,32,49
  8343                        	.sym	dp,4,138,6,32,52
  8344 0B:5AB7: A7 0E        	lda	[<L309+dp_0]
  8345 0B:5AB9: 85 07        	sta	<L310+fs_1
  8346 0B:5ABB: A0 02 00     	ldy	#$2
  8347 0B:5ABE: B7 0E        	lda	[<L309+dp_0],Y
  8348 0B:5AC0: 85 09        	sta	<L310+fs_1+2
  8349                        	.line	2910
  8350 0B:5AC2: A0 1A 00     	ldy	#$1a
  8351 0B:5AC5: B7 0E        	lda	[<L309+dp_0],Y
  8352 0B:5AC7: 48           	pha
  8353 0B:5AC8: A0 18 00     	ldy	#$18
  8354 0B:5ACB: B7 0E        	lda	[<L309+dp_0],Y
  8355 0B:5ACD: 48           	pha
  8356 0B:5ACE: D4 09        	pei	<L310+fs_1+2
  8357 0B:5AD0: D4 07        	pei	<L310+fs_1
  8358 0B:5AD2: 22 7A 43 0B  	jsl	~~move_window
  8359 0B:5AD6: 85 05        	sta	<L310+res_1
  8360                        ;	if (res == FR_OK)
  8361                        	.line	2911
  8362                        ;	{
  8363 0B:5AD8: A5 05        	lda	<L310+res_1
  8364 0B:5ADA: F0 03        	beq	L312
  8365 0B:5ADC: 82 21 00     	brl	L10130
  8366                        L312:
  8367                        	.line	2912
  8368                        ;		dp->dir[DIR_Name] = DDEM; /* Mark the en
                    try 'deleted'.*/
  8369                        	.line	2913
  8370 0B:5ADF: A0 1C 00     	ldy	#$1c
  8371 0B:5AE2: B7 0E        	lda	[<L309+dp_0],Y
  8372 0B:5AE4: 85 01        	sta	<R0
  8373 0B:5AE6: A0 1E 00     	ldy	#$1e
  8374 0B:5AE9: B7 0E        	lda	[<L309+dp_0],Y
  8375 0B:5AEB: 85 03        	sta	<R0+2
  8376 0B:5AED: E2 20        	sep	#$20
  8377                        	longa	off
  8378 0B:5AEF: A9 E5        	lda	#$e5
  8379 0B:5AF1: 87 01        	sta	[<R0]
  8380 0B:5AF3: C2 20        	rep	#$20
  8381                        	longa	on
  8382                        ;		fs->wflag = 1;
  Fri Jul 16 2021 14:42                                                Page 167


  8383                        	.line	2914
  8384 0B:5AF5: E2 20        	sep	#$20
  8385                        	longa	off
  8386 0B:5AF7: A9 01        	lda	#$1
  8387 0B:5AF9: A0 03 00     	ldy	#$3
  8388 0B:5AFC: 97 07        	sta	[<L310+fs_1],Y
  8389 0B:5AFE: C2 20        	rep	#$20
  8390                        	longa	on
  8391                        ;	}
  8392                        	.line	2915
  8393                        ;#endif
  8394                        ;
  8395                        ;	return res;
  8396                        L10130:
  8397                        	.line	2918
  8398 0B:5B00: A5 05        	lda	<L310+res_1
  8399                        L313:
  8400 0B:5B02: A8           	tay
  8401 0B:5B03: A5 0C        	lda	<L309+2
  8402 0B:5B05: 85 10        	sta	<L309+2+4
  8403 0B:5B07: A5 0B        	lda	<L309+1
  8404 0B:5B09: 85 0F        	sta	<L309+1+4
  8405 0B:5B0B: 2B           	pld
  8406 0B:5B0C: 3B           	tsc
  8407 0B:5B0D: 18           	clc
  8408 0B:5B0E: 69 0E 00     	adc	#L309+4
  8409 0B:5B11: 1B           	tcs
  8410 0B:5B12: 98           	tya
  8411 0B:5B13: 6B           	rtl
  8412                        ;}
  8413                        	.line	2919
  8414                        	.endblock	2919
  8415             0000000A   L309	equ	10
  8416             00000005   L310	equ	5
  8417 0B:5B14:              	ends
  8418                        	efunc
  8419                        	.endfunc	2919,5,10
  8420                        	.line	2919
  8421                        ;
  8422                        ;#endif /* !FF_FS_READONLY && FF_FS_MINIMIZE == 0 
                    */
  8423                        ;
  8424                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
  8425                        ;/*-----------------------------------------------
                    ------------------------*/
  8426                        ;/* Get file information from directory entry     
                                            */
  8427                        ;/*-----------------------------------------------
                    ------------------------*/
  8428                        ;
  8429                        ;static void get_fileinfo(DIR* dp, /* Pointer to t
                    he directory object */
  8430                        ;FILINFO* fno /* Pointer to the file information t
                    o be filled */
  8431                        ;)
  8432                        ;{
  8433                        	.line	2928
  8434                        	.line	2931
  Fri Jul 16 2021 14:42                                                Page 168


  8435                        	FFDOS
  8436                        	func
  8437                        	.function	2931
  8438                        ~~get_fileinfo:
  8439                        	longa	on
  8440                        	longi	on
  8441 0B:5B14: 3B           	tsc
  8442 0B:5B15: 38           	sec
  8443 0B:5B16: E9 0D 00     	sbc	#L314
  8444 0B:5B19: 1B           	tcs
  8445 0B:5B1A: 0B           	phd
  8446 0B:5B1B: 5B           	tcd
  8447             00000004   dp_0	set	4
  8448             00000008   fno_0	set	8
  8449                        	.block	2931
  8450                        ;	UINT si, di;
  8451                        ;#if FF_USE_LFN
  8452                        ;	BYTE lcf;
  8453                        ;	WCHAR wc, hs;
  8454                        ;	FATFS *fs = dp->obj.fs;
  8455                        ;#else
  8456                        ;	TCHAR c;
  8457                        ;#endif
  8458                        ;
  8459                        ;	fno->fname[0] = 0; /* Invaidate file info */
  8460             00000000   si_1	set	0
  8461             00000002   di_1	set	2
  8462             00000004   c_1	set	4
  8463                        	.sym	si,0,16,1,16
  8464                        	.sym	di,2,16,1,16
  8465                        	.sym	c,4,14,1,8
  8466                        	.sym	dp,4,138,6,32,52
  8467                        	.sym	fno,8,138,6,32,53
  8468                        	.line	2941
  8469 0B:5B1C: E2 20        	sep	#$20
  8470                        	longa	off
  8471 0B:5B1E: A9 00        	lda	#$0
  8472 0B:5B20: A0 09 00     	ldy	#$9
  8473 0B:5B23: 97 15        	sta	[<L314+fno_0],Y
  8474 0B:5B25: C2 20        	rep	#$20
  8475                        	longa	on
  8476                        ;	if (dp->sect == 0)
  8477                        	.line	2942
  8478                        ;		return; /* Exit if read pointer has reac
                    hed end of directory */
  8479 0B:5B27: A0 18 00     	ldy	#$18
  8480 0B:5B2A: B7 11        	lda	[<L314+dp_0],Y
  8481 0B:5B2C: A0 1A 00     	ldy	#$1a
  8482 0B:5B2F: 17 11        	ora	[<L314+dp_0],Y
  8483 0B:5B31: F0 03        	beq	L317
  8484 0B:5B33: 82 10 00     	brl	L10131
  8485                        L317:
  8486                        	.line	2943
  8487                        L318:
  8488 0B:5B36: A5 0F        	lda	<L314+2
  8489 0B:5B38: 85 17        	sta	<L314+2+8
  8490 0B:5B3A: A5 0E        	lda	<L314+1
  8491 0B:5B3C: 85 16        	sta	<L314+1+8
  Fri Jul 16 2021 14:42                                                Page 169


  8492 0B:5B3E: 2B           	pld
  8493 0B:5B3F: 3B           	tsc
  8494 0B:5B40: 18           	clc
  8495 0B:5B41: 69 15 00     	adc	#L314+8
  8496 0B:5B44: 1B           	tcs
  8497 0B:5B45: 6B           	rtl
  8498                        ;
  8499                        ;#if FF_USE_LFN		/* LFN configuration */
  8500                        ;#if FF_FS_EXFAT
  8501                        ;	if (fs->fs_type == FS_EXFAT)
  8502                        ;	{ /* On the exFAT volume */
  8503                        ;		get_xfileinfo(fs->dirbuf, fno);
  8504                        ;		return;
  8505                        ;	}
  8506                        ;	else
  8507                        ;#endif
  8508                        ;	{ /* On the FAT/FAT32 volume */
  8509                        ;		if (dp->blk_ofs != 0xFFFFFFFF)
  8510                        ;		{ /* Get LFN if available */
  8511                        ;			si = di = hs = 0;
  8512                        ;			while (fs->lfnbuf[si] != 0)
  8513                        ;			{
  8514                        ;				wc = fs->lfnbuf[si++]; /
                    * Get an LFN character (UTF-16) */
  8515                        ;				if (hs == 0 && IsSurroga
                    te(wc))
  8516                        ;				{ /* Is it a surrogate? 
                    */
  8517                        ;					hs = wc; continu
                    e; /* Get low surrogate */
  8518                        ;				}
  8519                        ;				wc = put_utf((DWORD)hs <
                    < 16 | wc, &fno->fname[di], FF_LFN_BUF - di); /* Store it in
                     UTF-16 or UTF-8 encoding */
  8520                        ;				if (wc == 0)
  8521                        ;				{	di = 0; break;} 
                    /* Invalid char or buffer overflow? */
  8522                        ;				di += wc;
  8523                        ;				hs = 0;
  8524                        ;			}
  8525                        ;			if (hs != 0) di = 0; /* Broken s
                    urrogate pair? */
  8526                        ;			fno->fname[di] = 0; /* Terminate
                     the LFN (null string means LFN is invalid) */
  8527                        ;		}
  8528                        ;	}
  8529                        ;
  8530                        ;	si = di = 0;
  8531                        ;	while (si < 11)
  8532                        ;	{ /* Get SFN from SFN entry */
  8533                        ;		wc = dp->dir[si++]; /* Get a char */
  8534                        ;		if (wc == ' ') continue; /* Skip padding
                     spaces */
  8535                        ;		if (wc == RDDEM) wc = DDEM; /* Restore r
                    eplaced DDEM character */
  8536                        ;		if (si == 9 && di < FF_SFN_BUF) fno->alt
                    name[di++] = '.'; /* Insert a . if extension is exist */
  8537                        ;#if FF_LFN_UNICODE >= 1	/* Unicode output */
  Fri Jul 16 2021 14:42                                                Page 170


  8538                        ;		if (dbc_1st((BYTE)wc) && si != 8 && si !
                    = 11 && dbc_2nd(dp->dir[si]))
  8539                        ;		{ /* Make a DBC if needed */
  8540                        ;			wc = wc << 8 | dp->dir[si++];
  8541                        ;		}
  8542                        ;		wc = ff_oem2uni(wc, CODEPAGE); /* ANSI/O
                    EM -> Unicode */
  8543                        ;		if (wc == 0)
  8544                        ;		{	di = 0; break;} /* Wrong char in
                     the current code page? */
  8545                        ;		wc = put_utf(wc, &fno->altname[di], FF_S
                    FN_BUF - di); /* Store it in Unicode */
  8546                        ;		if (wc == 0)
  8547                        ;		{	di = 0; break;} /* Buffer overfl
                    ow? */
  8548                        ;		di += wc;
  8549                        ;#else					/* ANSI/
                    OEM output */
  8550                        ;		fno->altname[di++] = (TCHAR)wc; /* Store
                     it without any conversion */
  8551                        ;#endif
  8552                        ;	}
  8553                        ;	fno->altname[di] = 0; /* Terminate the SFN  (nul
                    l string means SFN is invalid) */
  8554                        ;
  8555                        ;	if (fno->fname[0] == 0)
  8556                        ;	{ /* If LFN is invalid, altname[] needs to be co
                    pied to fname[] */
  8557                        ;		if (di == 0)
  8558                        ;		{ /* If LFN and SFN both are invalid, th
                    is object is inaccesible */
  8559                        ;			fno->fname[di++] = '?';
  8560                        ;		}
  8561                        ;		else
  8562                        ;		{
  8563                        ;			for (si = di = 0, lcf = NS_BODY;
                     fno->altname[si]; si++, di++)
  8564                        ;			{ /* Copy altname[] to fname[] w
                    ith case information */
  8565                        ;				wc = (WCHAR)fno->altname
                    [si];
  8566                        ;				if (wc == '.') lcf = NS_
                    EXT;
  8567                        ;				if (IsUpper(wc) && (dp->
                    dir[DIR_NTres] & lcf)) wc += 0x20;
  8568                        ;				fno->fname[di] = (TCHAR)
                    wc;
  8569                        ;			}
  8570                        ;		}
  8571                        ;		fno->fname[di] = 0; /* Terminate the LFN
                     */
  8572                        ;		if (!dp->dir[DIR_NTres]) fno->altname[0]
                     = 0; /* Altname is not needed if neither LFN nor case info 
                    is exist. */
  8573                        ;	}
  8574                        ;
  8575                        ;#else	/* Non-LFN configuration */
  8576                        ;	si = di = 0;
  Fri Jul 16 2021 14:42                                                Page 171


  8577                        L10131:
  8578                        	.line	3022
  8579 0B:5B46: 64 0B        	stz	<L315+di_1
  8580 0B:5B48: 64 09        	stz	<L315+si_1
  8581                        ;	while (si < 11)
  8582                        	.line	3023
  8583                        L10132:
  8584 0B:5B4A: A5 09        	lda	<L315+si_1
  8585 0B:5B4C: C9 0B 00     	cmp	#<$b
  8586 0B:5B4F: 90 03        	bcc	L319
  8587 0B:5B51: 82 71 00     	brl	L10133
  8588                        L319:
  8589                        ;	{ /* Copy name body and extension */
  8590                        	.line	3024
  8591                        ;		c = (TCHAR) dp->dir[si++];
  8592                        	.line	3025
  8593 0B:5B54: A0 1C 00     	ldy	#$1c
  8594 0B:5B57: B7 11        	lda	[<L314+dp_0],Y
  8595 0B:5B59: 85 01        	sta	<R0
  8596 0B:5B5B: A0 1E 00     	ldy	#$1e
  8597 0B:5B5E: B7 11        	lda	[<L314+dp_0],Y
  8598 0B:5B60: 85 03        	sta	<R0+2
  8599 0B:5B62: E2 20        	sep	#$20
  8600                        	longa	off
  8601 0B:5B64: A4 09        	ldy	<L315+si_1
  8602 0B:5B66: B7 01        	lda	[<R0],Y
  8603 0B:5B68: 85 0D        	sta	<L315+c_1
  8604 0B:5B6A: C2 20        	rep	#$20
  8605                        	longa	on
  8606 0B:5B6C: E6 09        	inc	<L315+si_1
  8607                        ;		if (c == ' ')
  8608                        	.line	3026
  8609                        ;			continue; /* Skip padding spaces
                     */
  8610 0B:5B6E: E2 20        	sep	#$20
  8611                        	longa	off
  8612 0B:5B70: A5 0D        	lda	<L315+c_1
  8613 0B:5B72: C9 20        	cmp	#<$20
  8614 0B:5B74: C2 20        	rep	#$20
  8615                        	longa	on
  8616 0B:5B76: D0 03        	bne	L320
  8617 0B:5B78: 82 CF FF     	brl	L10132
  8618                        L320:
  8619                        ;		if (c == RDDEM)
  8620                        	.line	3028
  8621                        ;			c = DDEM; /* Restore replaced DD
                    EM character */
  8622 0B:5B7B: E2 20        	sep	#$20
  8623                        	longa	off
  8624 0B:5B7D: A5 0D        	lda	<L315+c_1
  8625 0B:5B7F: C9 05        	cmp	#<$5
  8626 0B:5B81: C2 20        	rep	#$20
  8627                        	longa	on
  8628 0B:5B83: F0 03        	beq	L321
  8629 0B:5B85: 82 08 00     	brl	L10134
  8630                        L321:
  8631                        	.line	3029
  8632 0B:5B88: E2 20        	sep	#$20
  Fri Jul 16 2021 14:42                                                Page 172


  8633                        	longa	off
  8634 0B:5B8A: A9 E5        	lda	#$e5
  8635 0B:5B8C: 85 0D        	sta	<L315+c_1
  8636 0B:5B8E: C2 20        	rep	#$20
  8637                        	longa	on
  8638                        ;		if (si == 9)
  8639                        L10134:
  8640                        	.line	3030
  8641                        ;			fno->fname[di++] = '.';/* Insert
                     a . if extension is exist */
  8642 0B:5B90: A5 09        	lda	<L315+si_1
  8643 0B:5B92: C9 09 00     	cmp	#<$9
  8644 0B:5B95: F0 03        	beq	L322
  8645 0B:5B97: 82 14 00     	brl	L10135
  8646                        L322:
  8647                        	.line	3031
  8648 0B:5B9A: 18           	clc
  8649 0B:5B9B: A9 09 00     	lda	#$9
  8650 0B:5B9E: 65 0B        	adc	<L315+di_1
  8651 0B:5BA0: 85 01        	sta	<R0
  8652 0B:5BA2: E2 20        	sep	#$20
  8653                        	longa	off
  8654 0B:5BA4: A9 2E        	lda	#$2e
  8655 0B:5BA6: A4 01        	ldy	<R0
  8656 0B:5BA8: 97 15        	sta	[<L314+fno_0],Y
  8657 0B:5BAA: C2 20        	rep	#$20
  8658                        	longa	on
  8659 0B:5BAC: E6 0B        	inc	<L315+di_1
  8660                        ;		fno->fname[di++] = c;
  8661                        L10135:
  8662                        	.line	3032
  8663 0B:5BAE: 18           	clc
  8664 0B:5BAF: A9 09 00     	lda	#$9
  8665 0B:5BB2: 65 0B        	adc	<L315+di_1
  8666 0B:5BB4: 85 01        	sta	<R0
  8667 0B:5BB6: E2 20        	sep	#$20
  8668                        	longa	off
  8669 0B:5BB8: A5 0D        	lda	<L315+c_1
  8670 0B:5BBA: A4 01        	ldy	<R0
  8671 0B:5BBC: 97 15        	sta	[<L314+fno_0],Y
  8672 0B:5BBE: C2 20        	rep	#$20
  8673                        	longa	on
  8674 0B:5BC0: E6 0B        	inc	<L315+di_1
  8675                        ;	}
  8676                        	.line	3033
  8677 0B:5BC2: 82 85 FF     	brl	L10132
  8678                        L10133:
  8679                        ;	fno->fname[di] = 0;
  8680                        	.line	3034
  8681 0B:5BC5: 18           	clc
  8682 0B:5BC6: A9 09 00     	lda	#$9
  8683 0B:5BC9: 65 0B        	adc	<L315+di_1
  8684 0B:5BCB: 85 01        	sta	<R0
  8685 0B:5BCD: E2 20        	sep	#$20
  8686                        	longa	off
  8687 0B:5BCF: A9 00        	lda	#$0
  8688 0B:5BD1: A4 01        	ldy	<R0
  8689 0B:5BD3: 97 15        	sta	[<L314+fno_0],Y
  Fri Jul 16 2021 14:42                                                Page 173


  8690 0B:5BD5: C2 20        	rep	#$20
  8691                        	longa	on
  8692                        ;#endif
  8693                        ;
  8694                        ;	fno->fattrib = dp->dir[DIR_Attr]; /* Attribute *
                    /
  8695                        	.line	3037
  8696 0B:5BD7: A0 1C 00     	ldy	#$1c
  8697 0B:5BDA: B7 11        	lda	[<L314+dp_0],Y
  8698 0B:5BDC: 85 01        	sta	<R0
  8699 0B:5BDE: A0 1E 00     	ldy	#$1e
  8700 0B:5BE1: B7 11        	lda	[<L314+dp_0],Y
  8701 0B:5BE3: 85 03        	sta	<R0+2
  8702 0B:5BE5: E2 20        	sep	#$20
  8703                        	longa	off
  8704 0B:5BE7: A0 0B 00     	ldy	#$b
  8705 0B:5BEA: B7 01        	lda	[<R0],Y
  8706 0B:5BEC: A0 08 00     	ldy	#$8
  8707 0B:5BEF: 97 15        	sta	[<L314+fno_0],Y
  8708 0B:5BF1: C2 20        	rep	#$20
  8709                        	longa	on
  8710                        ;	fno->fsize = ld_dword(dp->dir + DIR_FileSize); /
                    * Size */
  8711                        	.line	3038
  8712 0B:5BF3: 18           	clc
  8713 0B:5BF4: A9 1C 00     	lda	#$1c
  8714 0B:5BF7: A0 1C 00     	ldy	#$1c
  8715 0B:5BFA: 77 11        	adc	[<L314+dp_0],Y
  8716 0B:5BFC: 85 01        	sta	<R0
  8717 0B:5BFE: A9 00 00     	lda	#$0
  8718 0B:5C01: A0 1E 00     	ldy	#$1e
  8719 0B:5C04: 77 11        	adc	[<L314+dp_0],Y
  8720 0B:5C06: 85 03        	sta	<R0+2
  8721 0B:5C08: D4 03        	pei	<R0+2
  8722 0B:5C0A: D4 01        	pei	<R0
  8723 0B:5C0C: 22 BB 3F 0B  	jsl	~~ld_dword
  8724 0B:5C10: 85 05        	sta	<R1
  8725 0B:5C12: 86 07        	stx	<R1+2
  8726 0B:5C14: A5 05        	lda	<R1
  8727 0B:5C16: 87 15        	sta	[<L314+fno_0]
  8728 0B:5C18: A5 07        	lda	<R1+2
  8729 0B:5C1A: A0 02 00     	ldy	#$2
  8730 0B:5C1D: 97 15        	sta	[<L314+fno_0],Y
  8731                        ;	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);
                     /* Time */
  8732                        	.line	3039
  8733 0B:5C1F: 18           	clc
  8734 0B:5C20: A9 16 00     	lda	#$16
  8735 0B:5C23: A0 1C 00     	ldy	#$1c
  8736 0B:5C26: 77 11        	adc	[<L314+dp_0],Y
  8737 0B:5C28: 85 01        	sta	<R0
  8738 0B:5C2A: A9 00 00     	lda	#$0
  8739 0B:5C2D: A0 1E 00     	ldy	#$1e
  8740 0B:5C30: 77 11        	adc	[<L314+dp_0],Y
  8741 0B:5C32: 85 03        	sta	<R0+2
  8742 0B:5C34: D4 03        	pei	<R0+2
  8743 0B:5C36: D4 01        	pei	<R0
  8744 0B:5C38: 22 80 3F 0B  	jsl	~~ld_word
  Fri Jul 16 2021 14:42                                                Page 174


  8745 0B:5C3C: A0 06 00     	ldy	#$6
  8746 0B:5C3F: 97 15        	sta	[<L314+fno_0],Y
  8747                        ;	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);
                     /* Date */
  8748                        	.line	3040
  8749 0B:5C41: 18           	clc
  8750 0B:5C42: A9 18 00     	lda	#$18
  8751 0B:5C45: A0 1C 00     	ldy	#$1c
  8752 0B:5C48: 77 11        	adc	[<L314+dp_0],Y
  8753 0B:5C4A: 85 01        	sta	<R0
  8754 0B:5C4C: A9 00 00     	lda	#$0
  8755 0B:5C4F: A0 1E 00     	ldy	#$1e
  8756 0B:5C52: 77 11        	adc	[<L314+dp_0],Y
  8757 0B:5C54: 85 03        	sta	<R0+2
  8758 0B:5C56: D4 03        	pei	<R0+2
  8759 0B:5C58: D4 01        	pei	<R0
  8760 0B:5C5A: 22 80 3F 0B  	jsl	~~ld_word
  8761 0B:5C5E: A0 04 00     	ldy	#$4
  8762 0B:5C61: 97 15        	sta	[<L314+fno_0],Y
  8763                        ;}
  8764                        	.line	3041
  8765 0B:5C63: 82 D0 FE     	brl	L318
  8766                        	.endblock	3041
  8767             0000000D   L314	equ	13
  8768             00000009   L315	equ	9
  8769 0B:5C66:              	ends
  8770                        	efunc
  8771                        	.endfunc	3041,9,13
  8772                        	.line	3041
  8773                        ;
  8774                        ;#endif /* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
                     */
  8775                        ;
  8776                        ;#if FF_USE_FIND && FF_FS_MINIMIZE <= 1
  8777                        ;/*-----------------------------------------------
                    ------------------------*/
  8778                        ;/* Pattern matching                              
                                            */
  8779                        ;/*-----------------------------------------------
                    ------------------------*/
  8780                        ;
  8781                        ;static DWORD get_achar ( /* Get a character and a
                    dvances ptr */
  8782                        ;		const TCHAR** ptr /* Pointer to pointer 
                    to the ANSI/OEM or Unicode string */
  8783                        ;)
  8784                        ;{
  8785                        	.line	3050
  8786                        	.line	3053
  8787                        	FFDOS
  8788                        	func
  8789                        	.function	3053
  8790                        ~~get_achar:
  8791                        	longa	on
  8792                        	longi	on
  8793 0B:5C66: 3B           	tsc
  8794 0B:5C67: 38           	sec
  8795 0B:5C68: E9 08 00     	sbc	#L323
  Fri Jul 16 2021 14:42                                                Page 175


  8796 0B:5C6B: 1B           	tcs
  8797 0B:5C6C: 0B           	phd
  8798 0B:5C6D: 5B           	tcd
  8799             00000004   ptr_0	set	4
  8800                        	.block	3053
  8801                        ;	DWORD chr;
  8802                        ;
  8803                        ;#if FF_USE_LFN && FF_LFN_UNICODE >= 1	/* Unico
                    de input */
  8804                        ;	chr = tchar2uni(ptr);
  8805                        ;	if (chr == 0xFFFFFFFF) chr = 0; /* Wrong UTF enc
                    oding is recognized as end of the string */
  8806                        ;	chr = ff_wtoupper(chr);
  8807                        ;
  8808                        ;#else						
                    			/* ANSI/OEM input */
  8809                        ;	chr = (BYTE)*(*ptr)++; /* Get a byte */
  8810             00000000   chr_1	set	0
  8811                        	.sym	chr,0,18,1,32
  8812                        	.sym	ptr,4,1166,6,32
  8813                        	.line	3062
  8814 0B:5C6E: A7 0C        	lda	[<L323+ptr_0]
  8815 0B:5C70: 85 01        	sta	<R0
  8816 0B:5C72: A0 02 00     	ldy	#$2
  8817 0B:5C75: B7 0C        	lda	[<L323+ptr_0],Y
  8818 0B:5C77: 85 03        	sta	<R0+2
  8819 0B:5C79: A7 01        	lda	[<R0]
  8820 0B:5C7B: 29 FF 00     	and	#$ff
  8821 0B:5C7E: 85 05        	sta	<L324+chr_1
  8822 0B:5C80: 64 07        	stz	<L324+chr_1+2
  8823 0B:5C82: 18           	clc
  8824 0B:5C83: A9 01 00     	lda	#$1
  8825 0B:5C86: 67 0C        	adc	[<L323+ptr_0]
  8826 0B:5C88: 87 0C        	sta	[<L323+ptr_0]
  8827 0B:5C8A: A9 00 00     	lda	#$0
  8828 0B:5C8D: A0 02 00     	ldy	#$2
  8829 0B:5C90: 77 0C        	adc	[<L323+ptr_0],Y
  8830 0B:5C92: A0 02 00     	ldy	#$2
  8831 0B:5C95: 97 0C        	sta	[<L323+ptr_0],Y
  8832                        ;	if (IsLower(chr)) chr -= 0x20; /* To upper ASCII
                     char */
  8833                        	.line	3063
  8834 0B:5C97: A5 05        	lda	<L324+chr_1
  8835 0B:5C99: C9 61 00     	cmp	#<$61
  8836 0B:5C9C: A5 07        	lda	<L324+chr_1+2
  8837 0B:5C9E: E9 00 00     	sbc	#^$61
  8838 0B:5CA1: B0 03        	bcs	L326
  8839 0B:5CA3: 82 1E 00     	brl	L10136
  8840                        L326:
  8841 0B:5CA6: A9 7A 00     	lda	#$7a
  8842 0B:5CA9: C5 05        	cmp	<L324+chr_1
  8843 0B:5CAB: A9 00 00     	lda	#$0
  8844 0B:5CAE: E5 07        	sbc	<L324+chr_1+2
  8845 0B:5CB0: B0 03        	bcs	L327
  8846 0B:5CB2: 82 0F 00     	brl	L10136
  8847                        L327:
  8848                        	.line	3063
  8849 0B:5CB5: 18           	clc
  Fri Jul 16 2021 14:42                                                Page 176


  8850 0B:5CB6: A9 E0 FF     	lda	#$ffe0
  8851 0B:5CB9: 65 05        	adc	<L324+chr_1
  8852 0B:5CBB: 85 05        	sta	<L324+chr_1
  8853 0B:5CBD: A9 FF FF     	lda	#$ffff
  8854 0B:5CC0: 65 07        	adc	<L324+chr_1+2
  8855 0B:5CC2: 85 07        	sta	<L324+chr_1+2
  8856                        ;#if FF_CODE_PAGE == 0
  8857                        ;	if (ExCvt && chr >= 0x80) chr = ExCvt[chr - 0x80
                    ]; /* To upper SBCS extended char */
  8858                        ;#elif FF_CODE_PAGE < 900
  8859                        ;	if (chr >= 0x80) chr = ExCvt[chr - 0x80]; /* To 
                    upper SBCS extended char */
  8860                        L10136:
  8861                        	.line	3067
  8862 0B:5CC4: A5 05        	lda	<L324+chr_1
  8863 0B:5CC6: C9 80 00     	cmp	#<$80
  8864 0B:5CC9: A5 07        	lda	<L324+chr_1+2
  8865 0B:5CCB: E9 00 00     	sbc	#^$80
  8866 0B:5CCE: B0 03        	bcs	L328
  8867 0B:5CD0: 82 1B 00     	brl	L10137
  8868                        L328:
  8869                        	.line	3067
  8870 0B:5CD3: 18           	clc
  8871 0B:5CD4: A9 80 FF     	lda	#$ff80
  8872 0B:5CD7: 65 05        	adc	<L324+chr_1
  8873 0B:5CD9: 85 01        	sta	<R0
  8874 0B:5CDB: A9 FF FF     	lda	#$ffff
  8875 0B:5CDE: 65 07        	adc	<L324+chr_1+2
  8876 0B:5CE0: 85 03        	sta	<R0+2
  8877 0B:5CE2: A6 01        	ldx	<R0
  8878 0B:5CE4: BD xx xx     	lda	|~~ExCvt,X
  8879 0B:5CE7: 29 FF 00     	and	#$ff
  8880 0B:5CEA: 85 05        	sta	<L324+chr_1
  8881 0B:5CEC: 64 07        	stz	<L324+chr_1+2
  8882                        ;#endif
  8883                        ;#if FF_CODE_PAGE == 0 || FF_CODE_PAGE >= 900
  8884                        ;	if (dbc_1st((BYTE)chr))
  8885                        ;	{ /* Get DBC 2nd byte if needed */
  8886                        ;		chr = dbc_2nd((BYTE)**ptr) ? chr << 8 | 
                    (BYTE)*(*ptr)++ : 0;
  8887                        ;	}
  8888                        ;#endif
  8889                        ;
  8890                        ;#endif
  8891                        ;	return chr;
  8892                        L10137:
  8893                        	.line	3077
  8894 0B:5CEE: A6 07        	ldx	<L324+chr_1+2
  8895 0B:5CF0: A5 05        	lda	<L324+chr_1
  8896                        L329:
  8897 0B:5CF2: A8           	tay
  8898 0B:5CF3: A5 0A        	lda	<L323+2
  8899 0B:5CF5: 85 0E        	sta	<L323+2+4
  8900 0B:5CF7: A5 09        	lda	<L323+1
  8901 0B:5CF9: 85 0D        	sta	<L323+1+4
  8902 0B:5CFB: 2B           	pld
  8903 0B:5CFC: 3B           	tsc
  8904 0B:5CFD: 18           	clc
  Fri Jul 16 2021 14:42                                                Page 177


  8905 0B:5CFE: 69 0C 00     	adc	#L323+4
  8906 0B:5D01: 1B           	tcs
  8907 0B:5D02: 98           	tya
  8908 0B:5D03: 6B           	rtl
  8909                        ;}
  8910                        	.line	3078
  8911                        	.endblock	3078
  8912             00000008   L323	equ	8
  8913             00000005   L324	equ	5
  8914 0B:5D04:              	ends
  8915                        	efunc
  8916                        	.endfunc	3078,5,8
  8917                        	.line	3078
  8918                        ;
  8919                        ;static int pattern_matching ( /* 0:not matched, 1
                    :matched */
  8920                        ;		const TCHAR* pat, /* Matching pattern */
  8921                        ;		const TCHAR* nam, /* String to be tested
                     */
  8922                        ;		int skip, /* Number of pre-skip chars (n
                    umber of ?s) */
  8923                        ;		int inf /* Infinite search (* specified)
                     */
  8924                        ;)
  8925                        ;{
  8926                        	.line	3080
  8927                        	.line	3086
  8928                        	FFDOS
  8929                        	func
  8930                        	.function	3086
  8931                        ~~pattern_matching:
  8932                        	longa	on
  8933                        	longi	on
  8934 0B:5D04: 3B           	tsc
  8935 0B:5D05: 38           	sec
  8936 0B:5D06: E9 18 00     	sbc	#L330
  8937 0B:5D09: 1B           	tcs
  8938 0B:5D0A: 0B           	phd
  8939 0B:5D0B: 5B           	tcd
  8940             00000004   pat_0	set	4
  8941             00000008   nam_0	set	8
  8942             0000000C   skip_0	set	12
  8943             0000000E   inf_0	set	14
  8944                        	.block	3086
  8945                        ;	const TCHAR *pp, *np;
  8946                        ;	DWORD pc, nc;
  8947                        ;	int nm, nx;
  8948                        ;
  8949                        ;	while (skip--)
  8950             00000000   pp_1	set	0
  8951             00000004   np_1	set	4
  8952             00000008   pc_1	set	8
  8953             0000000C   nc_1	set	12
  8954             00000010   nm_1	set	16
  8955             00000012   nx_1	set	18
  8956                        	.sym	pp,0,142,1,32
  8957                        	.sym	np,4,142,1,32
  8958                        	.sym	pc,8,18,1,32
  Fri Jul 16 2021 14:42                                                Page 178


  8959                        	.sym	nc,12,18,1,32
  8960                        	.sym	nm,16,5,1,16
  8961                        	.sym	nx,18,5,1,16
  8962                        	.sym	pat,4,142,6,32
  8963                        	.sym	nam,8,142,6,32
  8964                        	.sym	skip,12,5,6,16
  8965                        	.sym	inf,14,5,6,16
  8966                        	.line	3091
  8967                        L10138:
  8968 0B:5D0C: A5 24        	lda	<L330+skip_0
  8969 0B:5D0E: 85 01        	sta	<R0
  8970 0B:5D10: C6 24        	dec	<L330+skip_0
  8971 0B:5D12: A5 01        	lda	<R0
  8972 0B:5D14: D0 03        	bne	L333
  8973 0B:5D16: 82 32 00     	brl	L10139
  8974                        L333:
  8975                        ;	{ /* Pre-skip name chars */
  8976                        	.line	3092
  8977                        ;		if (!get_achar(&nam)) return 0; /* Branc
                    h mismatched if less name chars */
  8978                        	.line	3093
  8979 0B:5D19: F4 00 00     	pea	#0
  8980 0B:5D1C: 18           	clc
  8981 0B:5D1D: 7B           	tdc
  8982 0B:5D1E: 69 20 00     	adc	#<L330+nam_0
  8983 0B:5D21: 48           	pha
  8984 0B:5D22: 22 66 5C 0B  	jsl	~~get_achar
  8985 0B:5D26: 85 01        	sta	<R0
  8986 0B:5D28: 86 03        	stx	<R0+2
  8987 0B:5D2A: A5 01        	lda	<R0
  8988 0B:5D2C: 05 03        	ora	<R0+2
  8989 0B:5D2E: F0 03        	beq	L334
  8990 0B:5D30: 82 15 00     	brl	L10140
  8991                        L334:
  8992                        	.line	3093
  8993 0B:5D33: A9 00 00     	lda	#$0
  8994                        L335:
  8995 0B:5D36: A8           	tay
  8996 0B:5D37: A5 1A        	lda	<L330+2
  8997 0B:5D39: 85 26        	sta	<L330+2+12
  8998 0B:5D3B: A5 19        	lda	<L330+1
  8999 0B:5D3D: 85 25        	sta	<L330+1+12
  9000 0B:5D3F: 2B           	pld
  9001 0B:5D40: 3B           	tsc
  9002 0B:5D41: 18           	clc
  9003 0B:5D42: 69 24 00     	adc	#L330+12
  9004 0B:5D45: 1B           	tcs
  9005 0B:5D46: 98           	tya
  9006 0B:5D47: 6B           	rtl
  9007                        ;	}
  9008                        L10140:
  9009                        	.line	3094
  9010 0B:5D48: 82 C1 FF     	brl	L10138
  9011                        L10139:
  9012                        ;	if (*pat == 0 && inf) return 1; /* (short circui
                    t) */
  9013                        	.line	3095
  9014 0B:5D4B: A7 1C        	lda	[<L330+pat_0]
  Fri Jul 16 2021 14:42                                                Page 179


  9015 0B:5D4D: 29 FF 00     	and	#$ff
  9016 0B:5D50: F0 03        	beq	L336
  9017 0B:5D52: 82 0D 00     	brl	L10141
  9018                        L336:
  9019 0B:5D55: A5 26        	lda	<L330+inf_0
  9020 0B:5D57: D0 03        	bne	L337
  9021 0B:5D59: 82 06 00     	brl	L10141
  9022                        L337:
  9023                        	.line	3095
  9024 0B:5D5C: A9 01 00     	lda	#$1
  9025 0B:5D5F: 82 D4 FF     	brl	L335
  9026                        ;
  9027                        ;	do
  9028                        L10141:
  9029                        	.line	3097
  9030                        L10144:
  9031                        ;	{
  9032                        	.line	3098
  9033                        ;		pp = pat; np = nam; /* Top of pattern an
                    d name to match */
  9034                        	.line	3099
  9035 0B:5D62: A5 1C        	lda	<L330+pat_0
  9036 0B:5D64: 85 05        	sta	<L331+pp_1
  9037 0B:5D66: A5 1E        	lda	<L330+pat_0+2
  9038 0B:5D68: 85 07        	sta	<L331+pp_1+2
  9039                        	.line	3099
  9040 0B:5D6A: A5 20        	lda	<L330+nam_0
  9041 0B:5D6C: 85 09        	sta	<L331+np_1
  9042 0B:5D6E: A5 22        	lda	<L330+nam_0+2
  9043 0B:5D70: 85 0B        	sta	<L331+np_1+2
  9044                        ;		for (;;)
  9045                        	.line	3100
  9046                        L10147:
  9047                        ;		{
  9048                        	.line	3101
  9049                        ;			if (*pp == '?' || *pp == '*')
  9050                        	.line	3102
  9051                        ;			{ /* Wildcard? */
  9052 0B:5D72: E2 20        	sep	#$20
  9053                        	longa	off
  9054 0B:5D74: A7 05        	lda	[<L331+pp_1]
  9055 0B:5D76: C9 3F        	cmp	#<$3f
  9056 0B:5D78: C2 20        	rep	#$20
  9057                        	longa	on
  9058 0B:5D7A: D0 03        	bne	L339
  9059 0B:5D7C: 82 0D 00     	brl	L338
  9060                        L339:
  9061 0B:5D7F: E2 20        	sep	#$20
  9062                        	longa	off
  9063 0B:5D81: A7 05        	lda	[<L331+pp_1]
  9064 0B:5D83: C9 2A        	cmp	#<$2a
  9065 0B:5D85: C2 20        	rep	#$20
  9066                        	longa	on
  9067 0B:5D87: F0 03        	beq	L340
  9068 0B:5D89: 82 6B 00     	brl	L10148
  9069                        L340:
  9070                        L338:
  9071                        	.line	3103
  Fri Jul 16 2021 14:42                                                Page 180


  9072                        ;				nm = nx = 0;
  9073                        	.line	3104
  9074 0B:5D8C: 64 17        	stz	<L331+nx_1
  9075 0B:5D8E: 64 15        	stz	<L331+nm_1
  9076                        ;				do
  9077                        	.line	3105
  9078                        L10151:
  9079                        ;				{ /* Analyze the wildcar
                    d block */
  9080                        	.line	3106
  9081                        ;					if (*pp++ == '?'
                    ) nm++;
  9082                        	.line	3107
  9083 0B:5D90: A5 05        	lda	<L331+pp_1
  9084 0B:5D92: 85 01        	sta	<R0
  9085 0B:5D94: A5 07        	lda	<L331+pp_1+2
  9086 0B:5D96: 85 03        	sta	<R0+2
  9087 0B:5D98: E6 05        	inc	<L331+pp_1
  9088 0B:5D9A: D0 02        	bne	L341
  9089 0B:5D9C: E6 07        	inc	<L331+pp_1+2
  9090                        L341:
  9091 0B:5D9E: E2 20        	sep	#$20
  9092                        	longa	off
  9093 0B:5DA0: A7 01        	lda	[<R0]
  9094 0B:5DA2: C9 3F        	cmp	#<$3f
  9095 0B:5DA4: C2 20        	rep	#$20
  9096                        	longa	on
  9097 0B:5DA6: F0 03        	beq	L342
  9098 0B:5DA8: 82 05 00     	brl	L10152
  9099                        L342:
  9100                        	.line	3107
  9101 0B:5DAB: E6 15        	inc	<L331+nm_1
  9102                        ;					else nx = 1;
  9103 0B:5DAD: 82 05 00     	brl	L10153
  9104                        L10152:
  9105                        	.line	3108
  9106 0B:5DB0: A9 01 00     	lda	#$1
  9107 0B:5DB3: 85 17        	sta	<L331+nx_1
  9108                        L10153:
  9109                        ;				}while (*pp == '?' || *p
                    p == '*');
  9110                        	.line	3109
  9111                        L10149:
  9112 0B:5DB5: E2 20        	sep	#$20
  9113                        	longa	off
  9114 0B:5DB7: A7 05        	lda	[<L331+pp_1]
  9115 0B:5DB9: C9 3F        	cmp	#<$3f
  9116 0B:5DBB: C2 20        	rep	#$20
  9117                        	longa	on
  9118 0B:5DBD: D0 03        	bne	L343
  9119 0B:5DBF: 82 CE FF     	brl	L10151
  9120                        L343:
  9121 0B:5DC2: E2 20        	sep	#$20
  9122                        	longa	off
  9123 0B:5DC4: A7 05        	lda	[<L331+pp_1]
  9124 0B:5DC6: C9 2A        	cmp	#<$2a
  9125 0B:5DC8: C2 20        	rep	#$20
  9126                        	longa	on
  Fri Jul 16 2021 14:42                                                Page 181


  9127 0B:5DCA: D0 03        	bne	L344
  9128 0B:5DCC: 82 C1 FF     	brl	L10151
  9129                        L344:
  9130                        L10150:
  9131                        ;				if (pattern_matching(pp,
                     np, nm, nx)) return 1; /* Test new branch (recurs upto numb
                    er of wildcard blocks in the pattern) */
  9132                        	.line	3110
  9133 0B:5DCF: D4 17        	pei	<L331+nx_1
  9134 0B:5DD1: D4 15        	pei	<L331+nm_1
  9135 0B:5DD3: D4 0B        	pei	<L331+np_1+2
  9136 0B:5DD5: D4 09        	pei	<L331+np_1
  9137 0B:5DD7: D4 07        	pei	<L331+pp_1+2
  9138 0B:5DD9: D4 05        	pei	<L331+pp_1
  9139 0B:5DDB: 22 04 5D 0B  	jsl	~~pattern_matching
  9140 0B:5DDF: AA           	tax
  9141 0B:5DE0: D0 03        	bne	L345
  9142 0B:5DE2: 82 06 00     	brl	L10154
  9143                        L345:
  9144                        	.line	3110
  9145 0B:5DE5: A9 01 00     	lda	#$1
  9146 0B:5DE8: 82 4B FF     	brl	L335
  9147                        ;				nc = *np; break; /* Bran
                    ch mismatched */
  9148                        L10154:
  9149                        	.line	3111
  9150 0B:5DEB: A7 09        	lda	[<L331+np_1]
  9151 0B:5DED: 29 FF 00     	and	#$ff
  9152 0B:5DF0: 85 11        	sta	<L331+nc_1
  9153 0B:5DF2: 64 13        	stz	<L331+nc_1+2
  9154                        	.line	3111
  9155 0B:5DF4: 82 43 00     	brl	L10146
  9156                        ;			}
  9157                        	.line	3112
  9158                        ;			pc = get_achar(&pp); /* Get a pa
                    ttern char */
  9159                        L10148:
  9160                        	.line	3113
  9161 0B:5DF7: F4 00 00     	pea	#0
  9162 0B:5DFA: 18           	clc
  9163 0B:5DFB: 7B           	tdc
  9164 0B:5DFC: 69 05 00     	adc	#<L331+pp_1
  9165 0B:5DFF: 48           	pha
  9166 0B:5E00: 22 66 5C 0B  	jsl	~~get_achar
  9167 0B:5E04: 85 0D        	sta	<L331+pc_1
  9168 0B:5E06: 86 0F        	stx	<L331+pc_1+2
  9169                        ;			nc = get_achar(&np); /* Get a na
                    me char */
  9170                        	.line	3114
  9171 0B:5E08: F4 00 00     	pea	#0
  9172 0B:5E0B: 18           	clc
  9173 0B:5E0C: 7B           	tdc
  9174 0B:5E0D: 69 09 00     	adc	#<L331+np_1
  9175 0B:5E10: 48           	pha
  9176 0B:5E11: 22 66 5C 0B  	jsl	~~get_achar
  9177 0B:5E15: 85 11        	sta	<L331+nc_1
  9178 0B:5E17: 86 13        	stx	<L331+nc_1+2
  9179                        ;			if (pc != nc) break; /* Branch m
  Fri Jul 16 2021 14:42                                                Page 182


                    ismatched? */
  9180                        	.line	3115
  9181 0B:5E19: A5 0D        	lda	<L331+pc_1
  9182 0B:5E1B: C5 11        	cmp	<L331+nc_1
  9183 0B:5E1D: D0 04        	bne	L346
  9184 0B:5E1F: A5 0F        	lda	<L331+pc_1+2
  9185 0B:5E21: C5 13        	cmp	<L331+nc_1+2
  9186                        L346:
  9187 0B:5E23: F0 03        	beq	L347
  9188 0B:5E25: 82 12 00     	brl	L10146
  9189                        L347:
  9190                        ;			if (pc == 0) return 1; /* Branch
                     matched? (matched at end of both strings) */
  9191                        	.line	3116
  9192 0B:5E28: A5 0D        	lda	<L331+pc_1
  9193 0B:5E2A: 05 0F        	ora	<L331+pc_1+2
  9194 0B:5E2C: F0 03        	beq	L348
  9195 0B:5E2E: 82 06 00     	brl	L10155
  9196                        L348:
  9197                        	.line	3116
  9198 0B:5E31: A9 01 00     	lda	#$1
  9199 0B:5E34: 82 FF FE     	brl	L335
  9200                        ;		}
  9201                        L10155:
  9202                        	.line	3117
  9203                        L10145:
  9204 0B:5E37: 82 38 FF     	brl	L10147
  9205                        L10146:
  9206                        ;		get_achar(&nam); /* nam++ */
  9207                        	.line	3118
  9208 0B:5E3A: F4 00 00     	pea	#0
  9209 0B:5E3D: 18           	clc
  9210 0B:5E3E: 7B           	tdc
  9211 0B:5E3F: 69 20 00     	adc	#<L330+nam_0
  9212 0B:5E42: 48           	pha
  9213 0B:5E43: 22 66 5C 0B  	jsl	~~get_achar
  9214                        ;	}while (inf && nc); /* Retry until end of name i
                    f infinite search is specified */
  9215                        	.line	3119
  9216                        L10142:
  9217 0B:5E47: A5 26        	lda	<L330+inf_0
  9218 0B:5E49: D0 03        	bne	L350
  9219 0B:5E4B: 82 09 00     	brl	L349
  9220                        L350:
  9221 0B:5E4E: A5 11        	lda	<L331+nc_1
  9222 0B:5E50: 05 13        	ora	<L331+nc_1+2
  9223 0B:5E52: F0 03        	beq	L351
  9224 0B:5E54: 82 0B FF     	brl	L10144
  9225                        L351:
  9226                        L349:
  9227                        L10143:
  9228                        ;
  9229                        ;	return 0;
  9230                        	.line	3121
  9231 0B:5E57: A9 00 00     	lda	#$0
  9232 0B:5E5A: 82 D9 FE     	brl	L335
  9233                        ;}
  9234                        	.line	3122
  Fri Jul 16 2021 14:42                                                Page 183


  9235                        	.endblock	3122
  9236             00000018   L330	equ	24
  9237             00000005   L331	equ	5
  9238 0B:5E5D:              	ends
  9239                        	efunc
  9240                        	.endfunc	3122,5,24
  9241                        	.line	3122
  9242                        ;
  9243                        ;#endif /* FF_USE_FIND && FF_FS_MINIMIZE <= 1 */
  9244                        ;
  9245                        ;/*-----------------------------------------------
                    ------------------------*/
  9246                        ;/* Pick a top segment and create the object name 
                    in directory form       */
  9247                        ;/*-----------------------------------------------
                    ------------------------*/
  9248                        ;
  9249                        ;static FRESULT create_name( /* FR_OK: successful,
                     FR_INVALID_NAME: could not create */
  9250                        ;DIR* dp, /* Pointer to the directory object */
  9251                        ;const TCHAR** path /* Pointer to pointer to the s
                    egment in the path string */
  9252                        ;)
  9253                        ;{
  9254                        	.line	3130
  9255                        	.line	3134
  9256                        	FFDOS
  9257                        	func
  9258                        	.function	3134
  9259                        ~~create_name:
  9260                        	longa	on
  9261                        	longi	on
  9262 0B:5E5D: 3B           	tsc
  9263 0B:5E5E: 38           	sec
  9264 0B:5E5F: E9 18 00     	sbc	#L352
  9265 0B:5E62: 1B           	tcs
  9266 0B:5E63: 0B           	phd
  9267 0B:5E64: 5B           	tcd
  9268             00000004   dp_0	set	4
  9269             00000008   path_0	set	8
  9270                        	.block	3134
  9271                        ;#if FF_USE_LFN		/* LFN configuration */
  9272                        ;	BYTE b, cf;
  9273                        ;	WCHAR wc, *lfn;
  9274                        ;	DWORD uc;
  9275                        ;	UINT i, ni, si, di;
  9276                        ;	const TCHAR *p;
  9277                        ;
  9278                        ;	/* Create LFN into LFN working buffer */
  9279                        ;	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
  9280                        ;	for (;;)
  9281                        ;	{
  9282                        ;		uc = tchar2uni(&p); /* Get a character *
                    /
  9283                        ;		if (uc == 0xFFFFFFFF) return FR_INVALID_
                    NAME; /* Invalid code or UTF decode error */
  9284                        ;		if (uc >= 0x10000) lfn[di++] = (WCHAR)(u
                    c >> 16); /* Store high surrogate if needed */
  Fri Jul 16 2021 14:42                                                Page 184


  9285                        ;		wc = (WCHAR)uc;
  9286                        ;		if (wc < ' ' || wc == '/' || wc == '\\')
                     break; /* Break if end of the path or a separator is found 
                    */
  9287                        ;		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F"
                    , wc)) return FR_INVALID_NAME; /* Reject illegal characters 
                    for LFN */
  9288                        ;		if (di >= FF_MAX_LFN) return FR_INVALID_
                    NAME; /* Reject too long name */
  9289                        ;		lfn[di++] = wc; /* Store the Unicode cha
                    racter */
  9290                        ;	}
  9291                        ;	if (wc < ' ')
  9292                        ;	{ /* End of path? */
  9293                        ;		cf = NS_LAST; /* Set last segment flag *
                    /
  9294                        ;	}
  9295                        ;	else
  9296                        ;	{
  9297                        ;		cf = 0; /* Next segment follows */
  9298                        ;		while (*p == '/' || *p == '\\') p++; /* 
                    Skip duplicated separators if exist */
  9299                        ;	}
  9300                        ;	*path = p; /* Return pointer to the next segment
                     */
  9301                        ;
  9302                        ;#if FF_FS_RPATH != 0
  9303                        ;	if ((di == 1 && lfn[di - 1] == '.') ||
  9304                        ;			(di == 2 && lfn[di - 1] == '.' &
                    & lfn[di - 2] == '.'))
  9305                        ;	{ /* Is this segment a dot name? */
  9306                        ;		lfn[di] = 0;
  9307                        ;		for (i = 0; i < 11; i++)
  9308                        ;		{ /* Create dot name for SFN entry */
  9309                        ;			dp->fn[i] = (i < di) ? '.' : ' '
                    ;
  9310                        ;		}
  9311                        ;		dp->fn[i] = cf | NS_DOT; /* This is a do
                    t entry */
  9312                        ;		return FR_OK;
  9313                        ;	}
  9314                        ;#endif
  9315                        ;	while (di)
  9316                        ;	{ /* Snip off trailing spaces and dots if exist 
                    */
  9317                        ;		wc = lfn[di - 1];
  9318                        ;		if (wc != ' ' && wc != '.') break;
  9319                        ;		di--;
  9320                        ;	}
  9321                        ;	lfn[di] = 0; /* LFN is created into the working 
                    buffer */
  9322                        ;	if (di == 0) return FR_INVALID_NAME; /* Reject n
                    ull name */
  9323                        ;
  9324                        ;	/* Create SFN in directory form */
  9325                        ;	for (si = 0; lfn[si] == ' '; si++); /* Remove le
                    ading spaces */
  9326                        ;	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS
  Fri Jul 16 2021 14:42                                                Page 185


                    _LFN; /* Is there any leading space or dot? */
  9327                        ;	while (di > 0 && lfn[di - 1] != '.') di--; /* Fi
                    nd last dot (di<=si: no extension) */
  9328                        ;
  9329                        ;	mem_set(dp->fn, ' ', 11);
  9330                        ;	i = b = 0; ni = 8;
  9331                        ;	for (;;)
  9332                        ;	{
  9333                        ;		wc = lfn[si++]; /* Get an LFN character 
                    */
  9334                        ;		if (wc == 0) break; /* Break on end of t
                    he LFN */
  9335                        ;		if (wc == ' ' || (wc == '.' && si != di)
                    )
  9336                        ;		{ /* Remove embedded spaces and dots */
  9337                        ;			cf |= NS_LOSS | NS_LFN;
  9338                        ;			continue;
  9339                        ;		}
  9340                        ;
  9341                        ;		if (i >= ni || si == di)
  9342                        ;		{ /* End of field? */
  9343                        ;			if (ni == 11)
  9344                        ;			{ /* Name extension overflow? */
  9345                        ;				cf |= NS_LOSS | NS_LFN;
  9346                        ;				break;
  9347                        ;			}
  9348                        ;			if (si != di) cf |= NS_LOSS | NS
                    _LFN; /* Name body overflow? */
  9349                        ;			if (si > di) break; /* No name e
                    xtension? */
  9350                        ;			si = di; i = 8; ni = 11; b <<= 2
                    ; /* Enter name extension */
  9351                        ;			continue;
  9352                        ;		}
  9353                        ;
  9354                        ;		if (wc >= 0x80)
  9355                        ;		{ /* Is this a non-ASCII character? */
  9356                        ;			cf |= NS_LFN; /* LFN entry needs
                     to be created */
  9357                        ;#if FF_CODE_PAGE == 0
  9358                        ;			if (ExCvt)
  9359                        ;			{ /* At SBCS */
  9360                        ;				wc = ff_uni2oem(wc, CODE
                    PAGE); /* Unicode ==> ANSI/OEM code */
  9361                        ;				if (wc & 0x80) wc = ExCv
                    t[wc & 0x7F]; /* Convert extended character to upper (SBCS) 
                    */
  9362                        ;			}
  9363                        ;			else
  9364                        ;			{ /* At DBCS */
  9365                        ;				wc = ff_uni2oem(ff_wtoup
                    per(wc), CODEPAGE); /* Unicode ==> Upper convert ==> ANSI/OE
                    M code */
  9366                        ;			}
  9367                        ;#elif FF_CODE_PAGE < 900	/* SBCS cfg */
  9368                        ;			wc = ff_uni2oem(wc, CODEPAGE); /
                    * Unicode ==> ANSI/OEM code */
  9369                        ;			if (wc & 0x80) wc = ExCvt[wc & 0
  Fri Jul 16 2021 14:42                                                Page 186


                    x7F]; /* Convert extended character to upper (SBCS) */
  9370                        ;#else						
                    /* DBCS cfg */
  9371                        ;			wc = ff_uni2oem(ff_wtoupper(wc),
                     CODEPAGE); /* Unicode ==> Upper convert ==> ANSI/OEM code *
                    /
  9372                        ;#endif
  9373                        ;		}
  9374                        ;
  9375                        ;		if (wc >= 0x100)
  9376                        ;		{ /* Is this a DBC? */
  9377                        ;			if (i >= ni - 1)
  9378                        ;			{ /* Field overflow? */
  9379                        ;				cf |= NS_LOSS | NS_LFN;
  9380                        ;				i = ni; continue; /* Nex
                    t field */
  9381                        ;			}
  9382                        ;			dp->fn[i++] = (BYTE)(wc >> 8); /
                    * Put 1st byte */
  9383                        ;		}
  9384                        ;		else
  9385                        ;		{ /* SBC */
  9386                        ;			if (wc == 0 || chk_chr("+,;=[]",
                     wc))
  9387                        ;			{ /* Replace illegal characters 
                    for SFN if needed */
  9388                        ;				wc = '_'; cf |= NS_LOSS 
                    | NS_LFN;/* Lossy conversion */
  9389                        ;			}
  9390                        ;			else
  9391                        ;			{
  9392                        ;				if (IsUpper(wc))
  9393                        ;				{ /* ASCII upper case? *
                    /
  9394                        ;					b |= 2;
  9395                        ;				}
  9396                        ;				if (IsLower(wc))
  9397                        ;				{ /* ASCII lower case? *
                    /
  9398                        ;					b |= 1; wc -= 0x
                    20;
  9399                        ;				}
  9400                        ;			}
  9401                        ;		}
  9402                        ;		dp->fn[i++] = (BYTE)wc;
  9403                        ;	}
  9404                        ;
  9405                        ;	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM; /* If 
                    the first character collides with DDEM, replace it with RDDE
                    M */
  9406                        ;
  9407                        ;	if (ni == 8) b <<= 2; /* Shift capital flags if 
                    no extension */
  9408                        ;	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf
                     |= NS_LFN; /* LFN entry needs to be created if composite ca
                    pitals */
  9409                        ;	if (!(cf & NS_LFN))
  9410                        ;	{ /* When LFN is in 8.3 format without extended 
  Fri Jul 16 2021 14:42                                                Page 187


                    character, NT flags are created */
  9411                        ;		if (b & 0x01) cf |= NS_EXT; /* NT flag (
                    Extension has small capital letters only) */
  9412                        ;		if (b & 0x04) cf |= NS_BODY; /* NT flag 
                    (Body has small capital letters only) */
  9413                        ;	}
  9414                        ;
  9415                        ;	dp->fn[NSFLAG] = cf; /* SFN is created into dp->
                    fn[] */
  9416                        ;
  9417                        ;	return FR_OK;
  9418                        ;
  9419                        ;#else	/* FF_USE_LFN : Non-LFN configuration */
  9420                        ;	BYTE c, d, *sfn;
  9421                        ;	UINT ni, si, i;
  9422                        ;	const char *p;
  9423                        ;
  9424                        ;	/* Create file name in directory form */
  9425                        ;	p = *path;
  9426             00000000   c_1	set	0
  9427             00000001   d_1	set	1
  9428             00000002   sfn_1	set	2
  9429             00000006   ni_1	set	6
  9430             00000008   si_1	set	8
  9431             0000000A   i_1	set	10
  9432             0000000C   p_1	set	12
  9433                        	.sym	c,0,14,1,8
  9434                        	.sym	d,1,14,1,8
  9435                        	.sym	sfn,2,142,1,32
  9436                        	.sym	ni,6,16,1,16
  9437                        	.sym	si,8,16,1,16
  9438                        	.sym	i,10,16,1,16
  9439                        	.sym	p,12,142,1,32
  9440                        	.sym	dp,4,138,6,32,52
  9441                        	.sym	path,8,1166,6,32
  9442                        	.line	3289
  9443 0B:5E65: A7 20        	lda	[<L352+path_0]
  9444 0B:5E67: 85 15        	sta	<L353+p_1
  9445 0B:5E69: A0 02 00     	ldy	#$2
  9446 0B:5E6C: B7 20        	lda	[<L352+path_0],Y
  9447 0B:5E6E: 85 17        	sta	<L353+p_1+2
  9448                        ;	sfn = dp->fn;
  9449                        	.line	3290
  9450 0B:5E70: 18           	clc
  9451 0B:5E71: A9 20 00     	lda	#$20
  9452 0B:5E74: 65 1C        	adc	<L352+dp_0
  9453 0B:5E76: 85 0B        	sta	<L353+sfn_1
  9454 0B:5E78: A9 00 00     	lda	#$0
  9455 0B:5E7B: 65 1E        	adc	<L352+dp_0+2
  9456 0B:5E7D: 85 0D        	sta	<L353+sfn_1+2
  9457                        ;	mem_set(sfn, ' ', 11);
  9458                        	.line	3291
  9459 0B:5E7F: F4 0B 00     	pea	#<$b
  9460 0B:5E82: F4 20 00     	pea	#<$20
  9461 0B:5E85: D4 0D        	pei	<L353+sfn_1+2
  9462 0B:5E87: D4 0B        	pei	<L353+sfn_1
  9463 0B:5E89: 22 5F 41 0B  	jsl	~~mem_set
  9464                        ;	si = i = 0;
  Fri Jul 16 2021 14:42                                                Page 188


  9465                        	.line	3292
  9466 0B:5E8D: 64 13        	stz	<L353+i_1
  9467 0B:5E8F: 64 11        	stz	<L353+si_1
  9468                        ;	ni = 8;
  9469                        	.line	3293
  9470 0B:5E91: A9 08 00     	lda	#$8
  9471 0B:5E94: 85 0F        	sta	<L353+ni_1
  9472                        ;#if FF_FS_RPATH != 0
  9473                        ;	if (p[si] == '.')
  9474                        ;	{ /* Is this a dot entry? */
  9475                        ;		for (;;)
  9476                        ;		{
  9477                        ;			c = (BYTE)p[si++];
  9478                        ;			if (c != '.' || si >= 3) break;
  9479                        ;			sfn[i++] = c;
  9480                        ;		}
  9481                        ;		if (c != '/' && c != '\\' && c > ' ') re
                    turn FR_INVALID_NAME;
  9482                        ;		*path = p + si; /* Return pointer to the
                     next segment */
  9483                        ;		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_
                    DOT : NS_DOT; /* Set last segment flag if end of the path */
  9484                        ;		return FR_OK;
  9485                        ;	}
  9486                        ;#endif
  9487                        ;	for (;;)
  9488                        	.line	3309
  9489                        L10158:
  9490                        ;	{
  9491                        	.line	3310
  9492                        ;		c = (BYTE) p[si++]; /* Get a byte */
  9493                        	.line	3311
  9494 0B:5E96: E2 20        	sep	#$20
  9495                        	longa	off
  9496 0B:5E98: A4 11        	ldy	<L353+si_1
  9497 0B:5E9A: B7 15        	lda	[<L353+p_1],Y
  9498 0B:5E9C: 85 09        	sta	<L353+c_1
  9499 0B:5E9E: C2 20        	rep	#$20
  9500                        	longa	on
  9501 0B:5EA0: E6 11        	inc	<L353+si_1
  9502                        ;		if (c <= ' ')
  9503                        	.line	3312
  9504                        ;			break; /* Break if end of the pa
                    th name */
  9505 0B:5EA2: E2 20        	sep	#$20
  9506                        	longa	off
  9507 0B:5EA4: A9 20        	lda	#$20
  9508 0B:5EA6: C5 09        	cmp	<L353+c_1
  9509 0B:5EA8: C2 20        	rep	#$20
  9510                        	longa	on
  9511 0B:5EAA: 90 03        	bcc	L355
  9512 0B:5EAC: 82 60 01     	brl	L10157
  9513                        L355:
  9514                        ;		if (c == '/' || c == '\\')
  9515                        	.line	3314
  9516                        ;		{ /* Break if a separator is found */
  9517 0B:5EAF: E2 20        	sep	#$20
  9518                        	longa	off
  Fri Jul 16 2021 14:42                                                Page 189


  9519 0B:5EB1: A5 09        	lda	<L353+c_1
  9520 0B:5EB3: C9 2F        	cmp	#<$2f
  9521 0B:5EB5: C2 20        	rep	#$20
  9522                        	longa	on
  9523 0B:5EB7: D0 03        	bne	L357
  9524 0B:5EB9: 82 0D 00     	brl	L356
  9525                        L357:
  9526 0B:5EBC: E2 20        	sep	#$20
  9527                        	longa	off
  9528 0B:5EBE: A5 09        	lda	<L353+c_1
  9529 0B:5EC0: C9 5C        	cmp	#<$5c
  9530 0B:5EC2: C2 20        	rep	#$20
  9531                        	longa	on
  9532 0B:5EC4: F0 03        	beq	L358
  9533 0B:5EC6: 82 26 00     	brl	L10159
  9534                        L358:
  9535                        L356:
  9536                        	.line	3315
  9537                        ;			while (p[si] == '/' || p[si] == 
                    '\\')
  9538                        	.line	3316
  9539                        L10160:
  9540 0B:5EC9: E2 20        	sep	#$20
  9541                        	longa	off
  9542 0B:5ECB: A4 11        	ldy	<L353+si_1
  9543 0B:5ECD: B7 15        	lda	[<L353+p_1],Y
  9544 0B:5ECF: C9 2F        	cmp	#<$2f
  9545 0B:5ED1: C2 20        	rep	#$20
  9546                        	longa	on
  9547 0B:5ED3: D0 03        	bne	L360
  9548 0B:5ED5: 82 0F 00     	brl	L359
  9549                        L360:
  9550 0B:5ED8: E2 20        	sep	#$20
  9551                        	longa	off
  9552 0B:5EDA: A4 11        	ldy	<L353+si_1
  9553 0B:5EDC: B7 15        	lda	[<L353+p_1],Y
  9554 0B:5EDE: C9 5C        	cmp	#<$5c
  9555 0B:5EE0: C2 20        	rep	#$20
  9556                        	longa	on
  9557 0B:5EE2: F0 03        	beq	L361
  9558 0B:5EE4: 82 05 00     	brl	L10161
  9559                        L361:
  9560                        L359:
  9561                        ;				si++; /* Skip duplicated
                     separator if exist */
  9562                        	.line	3317
  9563 0B:5EE7: E6 11        	inc	<L353+si_1
  9564 0B:5EE9: 82 DD FF     	brl	L10160
  9565                        L10161:
  9566                        ;			break;
  9567                        	.line	3318
  9568 0B:5EEC: 82 20 01     	brl	L10157
  9569                        ;		}
  9570                        	.line	3319
  9571                        ;		if (c == '.' || i >= ni)
  9572                        L10159:
  9573                        	.line	3320
  9574                        ;		{ /* End of body or field overflow? */
  Fri Jul 16 2021 14:42                                                Page 190


  9575 0B:5EEF: E2 20        	sep	#$20
  9576                        	longa	off
  9577 0B:5EF1: A5 09        	lda	<L353+c_1
  9578 0B:5EF3: C9 2E        	cmp	#<$2e
  9579 0B:5EF5: C2 20        	rep	#$20
  9580                        	longa	on
  9581 0B:5EF7: D0 03        	bne	L363
  9582 0B:5EF9: 82 09 00     	brl	L362
  9583                        L363:
  9584 0B:5EFC: A5 13        	lda	<L353+i_1
  9585 0B:5EFE: C5 0F        	cmp	<L353+ni_1
  9586 0B:5F00: B0 03        	bcs	L364
  9587 0B:5F02: 82 39 00     	brl	L10162
  9588                        L364:
  9589                        L362:
  9590                        	.line	3321
  9591                        ;			if (ni == 11 || c != '.')
  9592                        	.line	3322
  9593                        ;				return FR_INVALID_NAME; 
                    /* Field overflow or invalid dot? */
  9594 0B:5F05: A5 0F        	lda	<L353+ni_1
  9595 0B:5F07: C9 0B 00     	cmp	#<$b
  9596 0B:5F0A: D0 03        	bne	L366
  9597 0B:5F0C: 82 0D 00     	brl	L365
  9598                        L366:
  9599 0B:5F0F: E2 20        	sep	#$20
  9600                        	longa	off
  9601 0B:5F11: A5 09        	lda	<L353+c_1
  9602 0B:5F13: C9 2E        	cmp	#<$2e
  9603 0B:5F15: C2 20        	rep	#$20
  9604                        	longa	on
  9605 0B:5F17: D0 03        	bne	L367
  9606 0B:5F19: 82 15 00     	brl	L10163
  9607                        L367:
  9608                        L365:
  9609                        	.line	3323
  9610 0B:5F1C: A9 06 00     	lda	#$6
  9611                        L368:
  9612 0B:5F1F: A8           	tay
  9613 0B:5F20: A5 1A        	lda	<L352+2
  9614 0B:5F22: 85 22        	sta	<L352+2+8
  9615 0B:5F24: A5 19        	lda	<L352+1
  9616 0B:5F26: 85 21        	sta	<L352+1+8
  9617 0B:5F28: 2B           	pld
  9618 0B:5F29: 3B           	tsc
  9619 0B:5F2A: 18           	clc
  9620 0B:5F2B: 69 20 00     	adc	#L352+8
  9621 0B:5F2E: 1B           	tcs
  9622 0B:5F2F: 98           	tya
  9623 0B:5F30: 6B           	rtl
  9624                        ;			i = 8;
  9625                        L10163:
  9626                        	.line	3324
  9627 0B:5F31: A9 08 00     	lda	#$8
  9628 0B:5F34: 85 13        	sta	<L353+i_1
  9629                        ;			ni = 11; /* Enter file extension
                     field */
  9630                        	.line	3325
  Fri Jul 16 2021 14:42                                                Page 191


  9631 0B:5F36: A9 0B 00     	lda	#$b
  9632 0B:5F39: 85 0F        	sta	<L353+ni_1
  9633                        ;			continue;
  9634                        	.line	3326
  9635 0B:5F3B: 82 CE 00     	brl	L10156
  9636                        ;		}
  9637                        	.line	3327
  9638                        ;#if FF_CODE_PAGE == 0
  9639                        ;		if (ExCvt && c >= 0x80)
  9640                        ;		{ /* Is SBC extended character? */
  9641                        ;			c = ExCvt[c & 0x7F]; /* To upper
                     SBC extended character */
  9642                        ;		}
  9643                        ;#elif FF_CODE_PAGE < 900
  9644                        ;		if (c >= 0x80)
  9645                        L10162:
  9646                        	.line	3334
  9647                        ;		{ /* Is SBC extended character? */
  9648 0B:5F3E: E2 20        	sep	#$20
  9649                        	longa	off
  9650 0B:5F40: A5 09        	lda	<L353+c_1
  9651 0B:5F42: C9 80        	cmp	#<$80
  9652 0B:5F44: C2 20        	rep	#$20
  9653                        	longa	on
  9654 0B:5F46: B0 03        	bcs	L369
  9655 0B:5F48: 82 12 00     	brl	L10164
  9656                        L369:
  9657                        	.line	3335
  9658                        ;			c = ExCvt[c & 0x7F]; /* To upper
                     SBC extended character */
  9659                        	.line	3336
  9660 0B:5F4B: A5 09        	lda	<L353+c_1
  9661 0B:5F4D: 29 7F 00     	and	#<$7f
  9662 0B:5F50: 85 01        	sta	<R0
  9663 0B:5F52: E2 20        	sep	#$20
  9664                        	longa	off
  9665 0B:5F54: A6 01        	ldx	<R0
  9666 0B:5F56: BD xx xx     	lda	|~~ExCvt,X
  9667 0B:5F59: 85 09        	sta	<L353+c_1
  9668 0B:5F5B: C2 20        	rep	#$20
  9669                        	longa	on
  9670                        ;		}
  9671                        	.line	3337
  9672                        ;#endif
  9673                        ;		if (dbc_1st(c))
  9674                        L10164:
  9675                        	.line	3339
  9676                        ;		{ /* Check if it is a DBC 1st byte */
  9677 0B:5F5D: D4 09        	pei	<L353+c_1
  9678 0B:5F5F: 22 37 42 0B  	jsl	~~dbc_1st
  9679 0B:5F63: AA           	tax
  9680 0B:5F64: D0 03        	bne	L370
  9681 0B:5F66: 82 4A 00     	brl	L10165
  9682                        L370:
  9683                        	.line	3340
  9684                        ;			d = (BYTE) p[si++]; /* Get 2nd b
                    yte */
  9685                        	.line	3341
  Fri Jul 16 2021 14:42                                                Page 192


  9686 0B:5F69: E2 20        	sep	#$20
  9687                        	longa	off
  9688 0B:5F6B: A4 11        	ldy	<L353+si_1
  9689 0B:5F6D: B7 15        	lda	[<L353+p_1],Y
  9690 0B:5F6F: 85 0A        	sta	<L353+d_1
  9691 0B:5F71: C2 20        	rep	#$20
  9692                        	longa	on
  9693 0B:5F73: E6 11        	inc	<L353+si_1
  9694                        ;			if (!dbc_2nd(d) || i >= ni - 1)
  9695                        	.line	3342
  9696                        ;				return FR_INVALID_NAME; 
                    /* Reject invalid DBC */
  9697 0B:5F75: D4 0A        	pei	<L353+d_1
  9698 0B:5F77: 22 64 42 0B  	jsl	~~dbc_2nd
  9699 0B:5F7B: AA           	tax
  9700 0B:5F7C: D0 03        	bne	L372
  9701 0B:5F7E: 82 11 00     	brl	L371
  9702                        L372:
  9703 0B:5F81: 18           	clc
  9704 0B:5F82: A9 FF FF     	lda	#$ffff
  9705 0B:5F85: 65 0F        	adc	<L353+ni_1
  9706 0B:5F87: 85 01        	sta	<R0
  9707 0B:5F89: A5 13        	lda	<L353+i_1
  9708 0B:5F8B: C5 01        	cmp	<R0
  9709 0B:5F8D: B0 03        	bcs	L373
  9710 0B:5F8F: 82 06 00     	brl	L10166
  9711                        L373:
  9712                        L371:
  9713                        	.line	3343
  9714 0B:5F92: A9 06 00     	lda	#$6
  9715 0B:5F95: 82 87 FF     	brl	L368
  9716                        ;			sfn[i++] = c;
  9717                        L10166:
  9718                        	.line	3344
  9719 0B:5F98: E2 20        	sep	#$20
  9720                        	longa	off
  9721 0B:5F9A: A5 09        	lda	<L353+c_1
  9722 0B:5F9C: A4 13        	ldy	<L353+i_1
  9723 0B:5F9E: 97 0B        	sta	[<L353+sfn_1],Y
  9724 0B:5FA0: C2 20        	rep	#$20
  9725                        	longa	on
  9726 0B:5FA2: E6 13        	inc	<L353+i_1
  9727                        ;			sfn[i++] = d;
  9728                        	.line	3345
  9729 0B:5FA4: E2 20        	sep	#$20
  9730                        	longa	off
  9731 0B:5FA6: A5 0A        	lda	<L353+d_1
  9732 0B:5FA8: A4 13        	ldy	<L353+i_1
  9733 0B:5FAA: 97 0B        	sta	[<L353+sfn_1],Y
  9734 0B:5FAC: C2 20        	rep	#$20
  9735                        	longa	on
  9736 0B:5FAE: E6 13        	inc	<L353+i_1
  9737                        ;		}
  9738                        	.line	3346
  9739                        ;		else
  9740 0B:5FB0: 82 59 00     	brl	L10167
  9741                        L10165:
  9742                        ;		{ /* SBC */
  Fri Jul 16 2021 14:42                                                Page 193


  9743                        	.line	3348
  9744                        ;			if (chk_chr("\"*+,:;<=>\?[]|\x7F
                    ", c))
  9745                        	.line	3349
  9746                        ;				return FR_INVALID_NAME; 
                    /* Reject illegal chrs for SFN */
  9747 0B:5FB3: A5 09        	lda	<L353+c_1
  9748 0B:5FB5: 29 FF 00     	and	#$ff
  9749 0B:5FB8: 48           	pha
  9750 0B:5FB9: F4 xx xx     	pea	#^L2
  9751 0B:5FBC: F4 xx xx     	pea	#<L2
  9752 0B:5FBF: 22 F5 41 0B  	jsl	~~chk_chr
  9753 0B:5FC3: AA           	tax
  9754 0B:5FC4: D0 03        	bne	L374
  9755 0B:5FC6: 82 06 00     	brl	L10168
  9756                        L374:
  9757                        	.line	3350
  9758 0B:5FC9: A9 06 00     	lda	#$6
  9759 0B:5FCC: 82 50 FF     	brl	L368
  9760                        ;			if (IsLower(c))
  9761                        L10168:
  9762                        	.line	3351
  9763                        ;				c -= 0x20; /* To upper *
                    /
  9764 0B:5FCF: E2 20        	sep	#$20
  9765                        	longa	off
  9766 0B:5FD1: A5 09        	lda	<L353+c_1
  9767 0B:5FD3: C9 61        	cmp	#<$61
  9768 0B:5FD5: C2 20        	rep	#$20
  9769                        	longa	on
  9770 0B:5FD7: B0 03        	bcs	L375
  9771 0B:5FD9: 82 24 00     	brl	L10169
  9772                        L375:
  9773 0B:5FDC: E2 20        	sep	#$20
  9774                        	longa	off
  9775 0B:5FDE: A9 7A        	lda	#$7a
  9776 0B:5FE0: C5 09        	cmp	<L353+c_1
  9777 0B:5FE2: C2 20        	rep	#$20
  9778                        	longa	on
  9779 0B:5FE4: B0 03        	bcs	L376
  9780 0B:5FE6: 82 17 00     	brl	L10169
  9781                        L376:
  9782                        	.line	3352
  9783 0B:5FE9: A5 09        	lda	<L353+c_1
  9784 0B:5FEB: 29 FF 00     	and	#$ff
  9785 0B:5FEE: 85 01        	sta	<R0
  9786 0B:5FF0: 18           	clc
  9787 0B:5FF1: A9 E0 FF     	lda	#$ffe0
  9788 0B:5FF4: 65 01        	adc	<R0
  9789 0B:5FF6: 85 05        	sta	<R1
  9790 0B:5FF8: E2 20        	sep	#$20
  9791                        	longa	off
  9792 0B:5FFA: A5 05        	lda	<R1
  9793 0B:5FFC: 85 09        	sta	<L353+c_1
  9794 0B:5FFE: C2 20        	rep	#$20
  9795                        	longa	on
  9796                        ;			sfn[i++] = c;
  9797                        L10169:
  Fri Jul 16 2021 14:42                                                Page 194


  9798                        	.line	3353
  9799 0B:6000: E2 20        	sep	#$20
  9800                        	longa	off
  9801 0B:6002: A5 09        	lda	<L353+c_1
  9802 0B:6004: A4 13        	ldy	<L353+i_1
  9803 0B:6006: 97 0B        	sta	[<L353+sfn_1],Y
  9804 0B:6008: C2 20        	rep	#$20
  9805                        	longa	on
  9806 0B:600A: E6 13        	inc	<L353+i_1
  9807                        ;		}
  9808                        	.line	3354
  9809                        L10167:
  9810                        ;	}
  9811                        	.line	3355
  9812                        L10156:
  9813 0B:600C: 82 87 FE     	brl	L10158
  9814                        L10157:
  9815                        ;	*path = p + si; /* Return pointer to the next se
                    gment */
  9816                        	.line	3356
  9817 0B:600F: A5 11        	lda	<L353+si_1
  9818 0B:6011: 85 01        	sta	<R0
  9819 0B:6013: 64 03        	stz	<R0+2
  9820 0B:6015: 18           	clc
  9821 0B:6016: A5 15        	lda	<L353+p_1
  9822 0B:6018: 65 01        	adc	<R0
  9823 0B:601A: 85 05        	sta	<R1
  9824 0B:601C: A5 17        	lda	<L353+p_1+2
  9825 0B:601E: 65 03        	adc	<R0+2
  9826 0B:6020: 85 07        	sta	<R1+2
  9827 0B:6022: A5 05        	lda	<R1
  9828 0B:6024: 87 20        	sta	[<L352+path_0]
  9829 0B:6026: A5 07        	lda	<R1+2
  9830 0B:6028: A0 02 00     	ldy	#$2
  9831 0B:602B: 97 20        	sta	[<L352+path_0],Y
  9832                        ;	if (i == 0)
  9833                        	.line	3357
  9834                        ;		return FR_INVALID_NAME; /* Reject nul st
                    ring */
  9835 0B:602D: A5 13        	lda	<L353+i_1
  9836 0B:602F: F0 03        	beq	L377
  9837 0B:6031: 82 06 00     	brl	L10170
  9838                        L377:
  9839                        	.line	3358
  9840 0B:6034: A9 06 00     	lda	#$6
  9841 0B:6037: 82 E5 FE     	brl	L368
  9842                        ;
  9843                        ;	if (sfn[0] == DDEM)
  9844                        L10170:
  9845                        	.line	3360
  9846                        ;		sfn[0] = RDDEM; /* If the first characte
                    r collides with DDEM, replace it with RDDEM */
  9847 0B:603A: E2 20        	sep	#$20
  9848                        	longa	off
  9849 0B:603C: A7 0B        	lda	[<L353+sfn_1]
  9850 0B:603E: C9 E5        	cmp	#<$e5
  9851 0B:6040: C2 20        	rep	#$20
  9852                        	longa	on
  Fri Jul 16 2021 14:42                                                Page 195


  9853 0B:6042: F0 03        	beq	L378
  9854 0B:6044: 82 08 00     	brl	L10171
  9855                        L378:
  9856                        	.line	3361
  9857 0B:6047: E2 20        	sep	#$20
  9858                        	longa	off
  9859 0B:6049: A9 05        	lda	#$5
  9860 0B:604B: 87 0B        	sta	[<L353+sfn_1]
  9861 0B:604D: C2 20        	rep	#$20
  9862                        	longa	on
  9863                        ;	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0; /* Set l
                    ast segment flag if end of the path */
  9864                        L10171:
  9865                        	.line	3362
  9866 0B:604F: E2 20        	sep	#$20
  9867                        	longa	off
  9868 0B:6051: A9 20        	lda	#$20
  9869 0B:6053: C5 09        	cmp	<L353+c_1
  9870 0B:6055: C2 20        	rep	#$20
  9871                        	longa	on
  9872 0B:6057: B0 03        	bcs	L380
  9873 0B:6059: 82 05 00     	brl	L379
  9874                        L380:
  9875 0B:605C: A9 04 00     	lda	#$4
  9876 0B:605F: 80 03        	bra	L381
  9877                        L379:
  9878 0B:6061: A9 00 00     	lda	#$0
  9879                        L381:
  9880 0B:6064: E2 20        	sep	#$20
  9881                        	longa	off
  9882 0B:6066: A0 0B 00     	ldy	#$b
  9883 0B:6069: 97 0B        	sta	[<L353+sfn_1],Y
  9884 0B:606B: C2 20        	rep	#$20
  9885                        	longa	on
  9886                        ;
  9887                        ;	return FR_OK;
  9888                        	.line	3364
  9889 0B:606D: A9 00 00     	lda	#$0
  9890 0B:6070: 82 AC FE     	brl	L368
  9891                        ;#endif /* FF_USE_LFN */
  9892                        ;}
  9893                        	.line	3366
  9894                        	.endblock	3366
  9895             00000018   L352	equ	24
  9896             00000009   L353	equ	9
  9897 0B:6073:              	ends
  9898                        	efunc
  9899                        	.endfunc	3366,9,24
  9900                        	.line	3366
  9901                        	data
  9902                        L2:
  9903 00:00C0: 22 2A 2B 2C  	db	$22,$2A,$2B,$2C,$3A,$3B,$3C,$3D,$3E,$3F,
                    $5B,$5D,$7C,$7F,$00
       00:00C4: 3A 3B 3C 3D 
       00:00C8: 3E 3F 5B 5D 
       00:00CC: 7C 7F 00 
  9904 00:00CF:              	ends
  9905                        ;
  Fri Jul 16 2021 14:42                                                Page 196


  9906                        ;/*-----------------------------------------------
                    ------------------------*/
  9907                        ;/* Follow a file path                            
                                            */
  9908                        ;/*-----------------------------------------------
                    ------------------------*/
  9909                        ;
  9910                        ;static FRESULT follow_path( /* FR_OK(0): successf
                    ul, !=0: error code */
  9911                        ;DIR* dp, /* Directory object to return last direc
                    tory and found object */
  9912                        ;const TCHAR* path /* Full-path string to find a f
                    ile or directory */
  9913                        ;)
  9914                        ;{
  9915                        	.line	3372
  9916                        	.line	3376
  9917                        	FFDOS
  9918                        	func
  9919                        	.function	3376
  9920                        ~~follow_path:
  9921                        	longa	on
  9922                        	longi	on
  9923 0B:6073: 3B           	tsc
  9924 0B:6074: 38           	sec
  9925 0B:6075: E9 13 00     	sbc	#L383
  9926 0B:6078: 1B           	tcs
  9927 0B:6079: 0B           	phd
  9928 0B:607A: 5B           	tcd
  9929             00000004   dp_0	set	4
  9930             00000008   path_0	set	8
  9931                        	.block	3376
  9932                        ;	FRESULT res;
  9933                        ;	BYTE ns;
  9934                        ;	FATFS *fs = dp->obj.fs;
  9935                        ;
  9936                        ;	////k_debug_string("follow_path...\r\n");
  9937                        ;
  9938                        ;#if FF_FS_RPATH != 0
  9939                        ;	if (*path != '/' && *path != '\\')
  9940                        ;	{ /* Without heading separator */
  9941                        ;		dp->obj.sclust = fs->cdir; /* Start from
                     current directory */
  9942                        ;	}
  9943                        ;	else
  9944                        ;#endif
  9945                        ;	{ /* With heading separator */
  9946             00000000   res_1	set	0
  9947             00000002   ns_1	set	2
  9948             00000003   fs_1	set	3
  9949                        	.sym	res,0,5,1,16
  9950                        	.sym	ns,2,14,1,8
  9951                        	.sym	fs,3,138,1,32,49
  9952                        	.sym	dp,4,138,6,32,52
  9953                        	.sym	path,8,142,6,32
  9954 0B:607B: A7 17        	lda	[<L383+dp_0]
  9955 0B:607D: 85 10        	sta	<L384+fs_1
  9956 0B:607F: A0 02 00     	ldy	#$2
  Fri Jul 16 2021 14:42                                                Page 197


  9957 0B:6082: B7 17        	lda	[<L383+dp_0],Y
  9958 0B:6084: 85 12        	sta	<L384+fs_1+2
  9959                        	.line	3390
  9960                        ;		while (*path == '/' || *path == '\\')
  9961                        	.line	3391
  9962                        L10172:
  9963 0B:6086: E2 20        	sep	#$20
  9964                        	longa	off
  9965 0B:6088: A7 1B        	lda	[<L383+path_0]
  9966 0B:608A: C9 2F        	cmp	#<$2f
  9967 0B:608C: C2 20        	rep	#$20
  9968                        	longa	on
  9969 0B:608E: D0 03        	bne	L387
  9970 0B:6090: 82 0D 00     	brl	L386
  9971                        L387:
  9972 0B:6093: E2 20        	sep	#$20
  9973                        	longa	off
  9974 0B:6095: A7 1B        	lda	[<L383+path_0]
  9975 0B:6097: C9 5C        	cmp	#<$5c
  9976 0B:6099: C2 20        	rep	#$20
  9977                        	longa	on
  9978 0B:609B: F0 03        	beq	L388
  9979 0B:609D: 82 09 00     	brl	L10173
  9980                        L388:
  9981                        L386:
  9982                        ;			path++; /* Strip heading separat
                    or */
  9983                        	.line	3392
  9984 0B:60A0: E6 1B        	inc	<L383+path_0
  9985 0B:60A2: D0 02        	bne	L389
  9986 0B:60A4: E6 1D        	inc	<L383+path_0+2
  9987                        L389:
  9988 0B:60A6: 82 DD FF     	brl	L10172
  9989                        L10173:
  9990                        ;		dp->obj.sclust = 0; /* Start from root d
                    irectory */
  9991                        	.line	3393
  9992 0B:60A9: A9 00 00     	lda	#$0
  9993 0B:60AC: A0 08 00     	ldy	#$8
  9994 0B:60AF: 97 17        	sta	[<L383+dp_0],Y
  9995 0B:60B1: A9 00 00     	lda	#$0
  9996 0B:60B4: A0 0A 00     	ldy	#$a
  9997 0B:60B7: 97 17        	sta	[<L383+dp_0],Y
  9998                        ;	}
  9999                        	.line	3394
 10000                        ;#if FF_FS_EXFAT
 10001                        ;	dp->obj.n_frag = 0; /* Invalidate last fragment 
                    counter of the object */
 10002                        ;#if FF_FS_RPATH != 0
 10003                        ;	if (fs->fs_type == FS_EXFAT && dp->obj.sclust)
 10004                        ;	{ /* exFAT: Retrieve the sub-directory's status 
                    */
 10005                        ;		DIR dj;
 10006                        ;
 10007                        ;		dp->obj.c_scl = fs->cdc_scl;
 10008                        ;		dp->obj.c_size = fs->cdc_size;
 10009                        ;		dp->obj.c_ofs = fs->cdc_ofs;
 10010                        ;		res = load_obj_xdir(&dj, &dp->obj);
  Fri Jul 16 2021 14:42                                                Page 198


 10011                        ;		if (res != FR_OK) return res;
 10012                        ;		dp->obj.objsize = ld_dword(fs->dirbuf + 
                    XDIR_FileSize);
 10013                        ;		dp->obj.stat = fs->dirbuf[XDIR_GenFlags]
                     & 2;
 10014                        ;	}
 10015                        ;#endif
 10016                        ;#endif
 10017                        ;
 10018                        ;	if ((UINT) *path < ' ')
 10019                        	.line	3413
 10020                        ;	{ /* Null path name is the origin directory itse
                    lf */
 10021 0B:60B9: E2 20        	sep	#$20
 10022                        	longa	off
 10023 0B:60BB: A7 1B        	lda	[<L383+path_0]
 10024 0B:60BD: C9 20        	cmp	#<$20
 10025 0B:60BF: C2 20        	rep	#$20
 10026                        	longa	on
 10027 0B:60C1: 90 03        	bcc	L390
 10028 0B:60C3: 82 1E 00     	brl	L10174
 10029                        L390:
 10030                        	.line	3414
 10031                        ;		dp->fn[NSFLAG] = NS_NONAME;
 10032                        	.line	3415
 10033 0B:60C6: E2 20        	sep	#$20
 10034                        	longa	off
 10035 0B:60C8: A9 80        	lda	#$80
 10036 0B:60CA: A0 2B 00     	ldy	#$2b
 10037 0B:60CD: 97 17        	sta	[<L383+dp_0],Y
 10038 0B:60CF: C2 20        	rep	#$20
 10039                        	longa	on
 10040                        ;		res = dir_sdi(dp, 0);
 10041                        	.line	3416
 10042 0B:60D1: F4 00 00     	pea	#^$0
 10043 0B:60D4: F4 00 00     	pea	#<$0
 10044 0B:60D7: D4 19        	pei	<L383+dp_0+2
 10045 0B:60D9: D4 17        	pei	<L383+dp_0
 10046 0B:60DB: 22 3D 51 0B  	jsl	~~dir_sdi
 10047 0B:60DF: 85 0D        	sta	<L384+res_1
 10048                        ;
 10049                        ;	}
 10050                        	.line	3418
 10051                        ;	else
 10052 0B:60E1: 82 F0 00     	brl	L10175
 10053                        L10174:
 10054                        ;	{ /* Follow path */
 10055                        	.line	3420
 10056                        ;		for (;;)
 10057                        	.line	3421
 10058                        L10178:
 10059                        ;		{
 10060                        	.line	3422
 10061                        ;			res = create_name(dp, &path); /*
                     Get a segment name of the path */
 10062                        	.line	3423
 10063 0B:60E4: F4 00 00     	pea	#0
 10064 0B:60E7: 18           	clc
  Fri Jul 16 2021 14:42                                                Page 199


 10065 0B:60E8: 7B           	tdc
 10066 0B:60E9: 69 1B 00     	adc	#<L383+path_0
 10067 0B:60EC: 48           	pha
 10068 0B:60ED: D4 19        	pei	<L383+dp_0+2
 10069 0B:60EF: D4 17        	pei	<L383+dp_0
 10070 0B:60F1: 22 5D 5E 0B  	jsl	~~create_name
 10071 0B:60F5: 85 0D        	sta	<L384+res_1
 10072                        ;			if (res != FR_OK)
 10073                        	.line	3424
 10074                        ;				break;
 10075 0B:60F7: A5 0D        	lda	<L384+res_1
 10076 0B:60F9: F0 03        	beq	L391
 10077 0B:60FB: 82 D6 00     	brl	L10177
 10078                        L391:
 10079                        ;			res = dir_find(dp); /* Find an o
                    bject with the segment name */
 10080                        	.line	3426
 10081 0B:60FE: D4 19        	pei	<L383+dp_0+2
 10082 0B:6100: D4 17        	pei	<L383+dp_0
 10083 0B:6102: 22 08 59 0B  	jsl	~~dir_find
 10084 0B:6106: 85 0D        	sta	<L384+res_1
 10085                        ;			ns = dp->fn[NSFLAG];
 10086                        	.line	3427
 10087 0B:6108: E2 20        	sep	#$20
 10088                        	longa	off
 10089 0B:610A: A0 2B 00     	ldy	#$2b
 10090 0B:610D: B7 17        	lda	[<L383+dp_0],Y
 10091 0B:610F: 85 0F        	sta	<L384+ns_1
 10092 0B:6111: C2 20        	rep	#$20
 10093                        	longa	on
 10094                        ;			if (res != FR_OK)
 10095                        	.line	3428
 10096                        ;			{ /* Failed to find the object *
                    /
 10097 0B:6113: A5 0D        	lda	<L384+res_1
 10098 0B:6115: D0 03        	bne	L392
 10099 0B:6117: 82 4C 00     	brl	L10179
 10100                        L392:
 10101                        	.line	3429
 10102                        ;				if (res == FR_NO_FILE)
 10103                        	.line	3430
 10104                        ;				{ /* Object is not found
                     */
 10105 0B:611A: A5 0D        	lda	<L384+res_1
 10106 0B:611C: C9 04 00     	cmp	#<$4
 10107 0B:611F: F0 03        	beq	L393
 10108 0B:6121: 82 3F 00     	brl	L10180
 10109                        L393:
 10110                        	.line	3431
 10111                        ;					if (FF_FS_RPATH 
                    && (ns & NS_DOT))
 10112                        	.line	3432
 10113                        ;					{ /* If dot entr
                    y is not exist, stay there */
 10114 0B:6124: 82 2A 00     	brl	L10181
 10115 0B:6127: E2 20        	sep	#$20
 10116                        	longa	off
 10117 0B:6129: A5 0F        	lda	<L384+ns_1
  Fri Jul 16 2021 14:42                                                Page 200


 10118 0B:612B: 29 20        	and	#<$20
 10119 0B:612D: C2 20        	rep	#$20
 10120                        	longa	on
 10121 0B:612F: D0 03        	bne	L394
 10122 0B:6131: 82 1D 00     	brl	L10181
 10123                        L394:
 10124                        	.line	3433
 10125                        ;						if (!(ns
                     & NS_LAST))
 10126                        	.line	3434
 10127                        ;							
                    continue; /* Continue to follow if not last segment */
 10128 0B:6134: E2 20        	sep	#$20
 10129                        	longa	off
 10130 0B:6136: A5 0F        	lda	<L384+ns_1
 10131 0B:6138: 29 04        	and	#<$4
 10132 0B:613A: C2 20        	rep	#$20
 10133                        	longa	on
 10134 0B:613C: D0 03        	bne	L395
 10135 0B:613E: 82 90 00     	brl	L10176
 10136                        L395:
 10137                        ;						dp->fn[N
                    SFLAG] = NS_NONAME;
 10138                        	.line	3436
 10139 0B:6141: E2 20        	sep	#$20
 10140                        	longa	off
 10141 0B:6143: A9 80        	lda	#$80
 10142 0B:6145: A0 2B 00     	ldy	#$2b
 10143 0B:6148: 97 17        	sta	[<L383+dp_0],Y
 10144 0B:614A: C2 20        	rep	#$20
 10145                        	longa	on
 10146                        ;						res = FR
                    _OK;
 10147                        	.line	3437
 10148 0B:614C: 64 0D        	stz	<L384+res_1
 10149                        ;					}
 10150                        	.line	3438
 10151                        ;					else
 10152 0B:614E: 82 12 00     	brl	L10182
 10153                        L10181:
 10154                        ;					{ /* Could not f
                    ind the object */
 10155                        	.line	3440
 10156                        ;						if (!(ns
                     & NS_LAST))
 10157                        	.line	3441
 10158                        ;							
                    res = FR_NO_PATH; /* Adjust error code if not last segment *
                    /
 10159 0B:6151: E2 20        	sep	#$20
 10160                        	longa	off
 10161 0B:6153: A5 0F        	lda	<L384+ns_1
 10162 0B:6155: 29 04        	and	#<$4
 10163 0B:6157: C2 20        	rep	#$20
 10164                        	longa	on
 10165 0B:6159: F0 03        	beq	L396
 10166 0B:615B: 82 05 00     	brl	L10183
 10167                        L396:
  Fri Jul 16 2021 14:42                                                Page 201


 10168                        	.line	3442
 10169 0B:615E: A9 05 00     	lda	#$5
 10170 0B:6161: 85 0D        	sta	<L384+res_1
 10171                        ;					}
 10172                        L10183:
 10173                        	.line	3443
 10174                        L10182:
 10175                        ;				}
 10176                        	.line	3444
 10177                        ;				break;
 10178                        L10180:
 10179                        	.line	3445
 10180 0B:6163: 82 6E 00     	brl	L10177
 10181                        ;			}
 10182                        	.line	3446
 10183                        ;			if (ns & NS_LAST)
 10184                        L10179:
 10185                        	.line	3447
 10186                        ;				break; /* Last segment m
                    atched. Function completed. */
 10187 0B:6166: E2 20        	sep	#$20
 10188                        	longa	off
 10189 0B:6168: A5 0F        	lda	<L384+ns_1
 10190 0B:616A: 29 04        	and	#<$4
 10191 0B:616C: C2 20        	rep	#$20
 10192                        	longa	on
 10193 0B:616E: F0 03        	beq	L397
 10194 0B:6170: 82 61 00     	brl	L10177
 10195                        L397:
 10196                        ;			/* Get into the sub-directory */
 10197                        ;			if (!(dp->obj.attr & AM_DIR))
 10198                        	.line	3450
 10199                        ;			{ /* It is not a sub-directory a
                    nd cannot follow */
 10200 0B:6173: E2 20        	sep	#$20
 10201                        	longa	off
 10202 0B:6175: A0 06 00     	ldy	#$6
 10203 0B:6178: B7 17        	lda	[<L383+dp_0],Y
 10204 0B:617A: 29 10        	and	#<$10
 10205 0B:617C: C2 20        	rep	#$20
 10206                        	longa	on
 10207 0B:617E: F0 03        	beq	L398
 10208 0B:6180: 82 08 00     	brl	L10184
 10209                        L398:
 10210                        	.line	3451
 10211                        ;				res = FR_NO_PATH;
 10212                        	.line	3452
 10213 0B:6183: A9 05 00     	lda	#$5
 10214 0B:6186: 85 0D        	sta	<L384+res_1
 10215                        ;				break;
 10216                        	.line	3453
 10217 0B:6188: 82 49 00     	brl	L10177
 10218                        ;			}
 10219                        	.line	3454
 10220                        ;#if FF_FS_EXFAT
 10221                        ;			if (fs->fs_type == FS_EXFAT)
 10222                        ;			{ /* Save containing directory i
                    nformation for next dir */
  Fri Jul 16 2021 14:42                                                Page 202


 10223                        ;				dp->obj.c_scl = dp->obj.
                    sclust;
 10224                        ;				dp->obj.c_size = ((DWORD
                    )dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 10225                        ;				dp->obj.c_ofs = dp->blk_
                    ofs;
 10226                        ;				init_alloc_info(fs, &dp-
                    >obj); /* Open next directory */
 10227                        ;			}
 10228                        ;			else
 10229                        ;#endif
 10230                        ;			{
 10231                        L10184:
 10232                        	.line	3465
 10233                        ;				dp->obj.sclust = ld_clus
                    t(fs, fs->win + dp->dptr % SS(fs)); /* Open next directory *
                    /
 10234                        	.line	3466
 10235 0B:618B: A0 10 00     	ldy	#$10
 10236 0B:618E: B7 17        	lda	[<L383+dp_0],Y
 10237 0B:6190: 29 FF 01     	and	#<$1ff
 10238 0B:6193: 85 01        	sta	<R0
 10239 0B:6195: 64 03        	stz	<R0+2
 10240 0B:6197: 18           	clc
 10241 0B:6198: A9 2F 00     	lda	#$2f
 10242 0B:619B: 65 01        	adc	<R0
 10243 0B:619D: 85 05        	sta	<R1
 10244 0B:619F: A9 00 00     	lda	#$0
 10245 0B:61A2: 65 03        	adc	<R0+2
 10246 0B:61A4: 85 07        	sta	<R1+2
 10247 0B:61A6: 18           	clc
 10248 0B:61A7: A5 10        	lda	<L384+fs_1
 10249 0B:61A9: 65 05        	adc	<R1
 10250 0B:61AB: 85 01        	sta	<R0
 10251 0B:61AD: A5 12        	lda	<L384+fs_1+2
 10252 0B:61AF: 65 07        	adc	<R1+2
 10253 0B:61B1: 85 03        	sta	<R0+2
 10254 0B:61B3: D4 03        	pei	<R0+2
 10255 0B:61B5: D4 01        	pei	<R0
 10256 0B:61B7: D4 12        	pei	<L384+fs_1+2
 10257 0B:61B9: D4 10        	pei	<L384+fs_1
 10258 0B:61BB: 22 F3 56 0B  	jsl	~~ld_clust
 10259 0B:61BF: 85 09        	sta	<R2
 10260 0B:61C1: 86 0B        	stx	<R2+2
 10261 0B:61C3: A5 09        	lda	<R2
 10262 0B:61C5: A0 08 00     	ldy	#$8
 10263 0B:61C8: 97 17        	sta	[<L383+dp_0],Y
 10264 0B:61CA: A5 0B        	lda	<R2+2
 10265 0B:61CC: A0 0A 00     	ldy	#$a
 10266 0B:61CF: 97 17        	sta	[<L383+dp_0],Y
 10267                        ;			}
 10268                        	.line	3467
 10269                        ;		}
 10270                        	.line	3468
 10271                        L10176:
 10272 0B:61D1: 82 10 FF     	brl	L10178
 10273                        L10177:
 10274                        ;	}
  Fri Jul 16 2021 14:42                                                Page 203


 10275                        	.line	3469
 10276                        L10175:
 10277                        ;
 10278                        ;	return res;
 10279                        	.line	3471
 10280 0B:61D4: A5 0D        	lda	<L384+res_1
 10281                        L399:
 10282 0B:61D6: A8           	tay
 10283 0B:61D7: A5 15        	lda	<L383+2
 10284 0B:61D9: 85 1D        	sta	<L383+2+8
 10285 0B:61DB: A5 14        	lda	<L383+1
 10286 0B:61DD: 85 1C        	sta	<L383+1+8
 10287 0B:61DF: 2B           	pld
 10288 0B:61E0: 3B           	tsc
 10289 0B:61E1: 18           	clc
 10290 0B:61E2: 69 1B 00     	adc	#L383+8
 10291 0B:61E5: 1B           	tcs
 10292 0B:61E6: 98           	tya
 10293 0B:61E7: 6B           	rtl
 10294                        ;}
 10295                        	.line	3472
 10296                        	.endblock	3472
 10297             00000013   L383	equ	19
 10298             0000000D   L384	equ	13
 10299 0B:61E8:              	ends
 10300                        	efunc
 10301                        	.endfunc	3472,13,19
 10302                        	.line	3472
 10303                        ;
 10304                        ;/*-----------------------------------------------
                    ------------------------*/
 10305                        ;/* Get logical drive number from path name       
                                            */
 10306                        ;/*-----------------------------------------------
                    ------------------------*/
 10307                        ;
 10308                        ;static int get_ldnumber( /* Returns logical drive
                     number (-1:invalid drive number or null pointer) */
 10309                        ;const TCHAR** path /* Pointer to pointer to the p
                    ath name */
 10310                        ;)
 10311                        ;{
 10312                        	.line	3478
 10313                        	.line	3481
 10314                        	FFDOS
 10315                        	func
 10316                        	.function	3481
 10317                        ~~get_ldnumber:
 10318                        	longa	on
 10319                        	longi	on
 10320 0B:61E8: 3B           	tsc
 10321 0B:61E9: 38           	sec
 10322 0B:61EA: E9 1A 00     	sbc	#L400
 10323 0B:61ED: 1B           	tcs
 10324 0B:61EE: 0B           	phd
 10325 0B:61EF: 5B           	tcd
 10326             00000004   path_0	set	4
 10327                        	.block	3481
  Fri Jul 16 2021 14:42                                                Page 204


 10328                        ;	const TCHAR *tp, *tt;
 10329                        ;	TCHAR tc;
 10330                        ;	int i, vol = -1;
 10331                        ;#if FF_STR_VOLUME_ID		/* Find string v
                    olume ID */
 10332                        ;	const char *sp;
 10333                        ;	char c;
 10334                        ;#endif
 10335                        ;
 10336                        ;	tt = tp = *path;
 10337             00000000   tp_1	set	0
 10338             00000004   tt_1	set	4
 10339             00000008   tc_1	set	8
 10340             00000009   i_1	set	9
 10341             0000000B   vol_1	set	11
 10342             0000000D   sp_1	set	13
 10343             00000011   c_1	set	17
 10344                        	.sym	tp,0,142,1,32
 10345                        	.sym	tt,4,142,1,32
 10346                        	.sym	tc,8,14,1,8
 10347                        	.sym	i,9,5,1,16
 10348                        	.sym	vol,11,5,1,16
 10349                        	.sym	sp,13,142,1,32
 10350                        	.sym	c,17,14,1,8
 10351                        	.sym	path,4,1166,6,32
 10352 0B:61F0: A9 FF FF     	lda	#$ffff
 10353 0B:61F3: 85 14        	sta	<L401+vol_1
 10354                        	.line	3490
 10355 0B:61F5: A7 1E        	lda	[<L400+path_0]
 10356 0B:61F7: 85 09        	sta	<L401+tp_1
 10357 0B:61F9: A0 02 00     	ldy	#$2
 10358 0B:61FC: B7 1E        	lda	[<L400+path_0],Y
 10359 0B:61FE: 85 0B        	sta	<L401+tp_1+2
 10360 0B:6200: A5 09        	lda	<L401+tp_1
 10361 0B:6202: 85 0D        	sta	<L401+tt_1
 10362 0B:6204: A5 0B        	lda	<L401+tp_1+2
 10363 0B:6206: 85 0F        	sta	<L401+tt_1+2
 10364                        ;	if (!tp)
 10365                        	.line	3491
 10366                        ;		return vol; /* Invalid path name? */
 10367 0B:6208: A5 09        	lda	<L401+tp_1
 10368 0B:620A: 05 0B        	ora	<L401+tp_1+2
 10369 0B:620C: F0 03        	beq	L403
 10370 0B:620E: 82 14 00     	brl	L10185
 10371                        L403:
 10372                        	.line	3492
 10373 0B:6211: A5 14        	lda	<L401+vol_1
 10374                        L404:
 10375 0B:6213: A8           	tay
 10376 0B:6214: A5 1C        	lda	<L400+2
 10377 0B:6216: 85 20        	sta	<L400+2+4
 10378 0B:6218: A5 1B        	lda	<L400+1
 10379 0B:621A: 85 1F        	sta	<L400+1+4
 10380 0B:621C: 2B           	pld
 10381 0B:621D: 3B           	tsc
 10382 0B:621E: 18           	clc
 10383 0B:621F: 69 1E 00     	adc	#L400+4
 10384 0B:6222: 1B           	tcs
  Fri Jul 16 2021 14:42                                                Page 205


 10385 0B:6223: 98           	tya
 10386 0B:6224: 6B           	rtl
 10387                        ;	do
 10388                        L10185:
 10389                        	.line	3493
 10390                        L10188:
 10391                        ;		tc = *tt++;
 10392                        	.line	3494
 10393 0B:6225: E2 20        	sep	#$20
 10394                        	longa	off
 10395 0B:6227: A7 0D        	lda	[<L401+tt_1]
 10396 0B:6229: 85 11        	sta	<L401+tc_1
 10397 0B:622B: C2 20        	rep	#$20
 10398                        	longa	on
 10399 0B:622D: E6 0D        	inc	<L401+tt_1
 10400 0B:622F: D0 02        	bne	L405
 10401 0B:6231: E6 0F        	inc	<L401+tt_1+2
 10402                        L405:
 10403                        ;	while ((UINT) tc >= (FF_USE_LFN ? ' ' : '!') && 
                    tc != ':'); /* Find a colon in the path */
 10404                        L10186:
 10405 0B:6233: E2 20        	sep	#$20
 10406                        	longa	off
 10407 0B:6235: A5 11        	lda	<L401+tc_1
 10408 0B:6237: C9 21        	cmp	#<$21
 10409 0B:6239: C2 20        	rep	#$20
 10410                        	longa	on
 10411 0B:623B: B0 03        	bcs	L407
 10412 0B:623D: 82 0D 00     	brl	L406
 10413                        L407:
 10414 0B:6240: E2 20        	sep	#$20
 10415                        	longa	off
 10416 0B:6242: A5 11        	lda	<L401+tc_1
 10417 0B:6244: C9 3A        	cmp	#<$3a
 10418 0B:6246: C2 20        	rep	#$20
 10419                        	longa	on
 10420 0B:6248: F0 03        	beq	L408
 10421 0B:624A: 82 D8 FF     	brl	L10188
 10422                        L408:
 10423                        L406:
 10424                        L10187:
 10425                        ;
 10426                        ;	if (tc == ':')
 10427                        	.line	3497
 10428                        ;	{ /* DOS/Windows style volume ID? */
 10429 0B:624D: E2 20        	sep	#$20
 10430                        	longa	off
 10431 0B:624F: A5 11        	lda	<L401+tc_1
 10432 0B:6251: C9 3A        	cmp	#<$3a
 10433 0B:6253: C2 20        	rep	#$20
 10434                        	longa	on
 10435 0B:6255: F0 03        	beq	L409
 10436 0B:6257: 82 59 01     	brl	L10189
 10437                        L409:
 10438                        	.line	3498
 10439                        ;		i = FF_VOLUMES;
 10440                        	.line	3499
 10441 0B:625A: A9 08 00     	lda	#$8
  Fri Jul 16 2021 14:42                                                Page 206


 10442 0B:625D: 85 12        	sta	<L401+i_1
 10443                        ;		if (IsDigit(*tp) && tp + 2 == tt)
 10444                        	.line	3500
 10445                        ;		{ /* Is there a numeric volume ID + colo
                    n? */
 10446 0B:625F: E2 20        	sep	#$20
 10447                        	longa	off
 10448 0B:6261: A7 09        	lda	[<L401+tp_1]
 10449 0B:6263: C9 30        	cmp	#<$30
 10450 0B:6265: C2 20        	rep	#$20
 10451                        	longa	on
 10452 0B:6267: B0 03        	bcs	L410
 10453 0B:6269: 82 3D 00     	brl	L10190
 10454                        L410:
 10455 0B:626C: E2 20        	sep	#$20
 10456                        	longa	off
 10457 0B:626E: A9 39        	lda	#$39
 10458 0B:6270: C7 09        	cmp	[<L401+tp_1]
 10459 0B:6272: C2 20        	rep	#$20
 10460                        	longa	on
 10461 0B:6274: B0 03        	bcs	L411
 10462 0B:6276: 82 30 00     	brl	L10190
 10463                        L411:
 10464 0B:6279: 18           	clc
 10465 0B:627A: A9 02 00     	lda	#$2
 10466 0B:627D: 65 09        	adc	<L401+tp_1
 10467 0B:627F: 85 01        	sta	<R0
 10468 0B:6281: A9 00 00     	lda	#$0
 10469 0B:6284: 65 0B        	adc	<L401+tp_1+2
 10470 0B:6286: 85 03        	sta	<R0+2
 10471 0B:6288: A5 0D        	lda	<L401+tt_1
 10472 0B:628A: C5 01        	cmp	<R0
 10473 0B:628C: D0 04        	bne	L412
 10474 0B:628E: A5 0F        	lda	<L401+tt_1+2
 10475 0B:6290: C5 03        	cmp	<R0+2
 10476                        L412:
 10477 0B:6292: F0 03        	beq	L413
 10478 0B:6294: 82 12 00     	brl	L10190
 10479                        L413:
 10480                        	.line	3501
 10481                        ;			i = (int) *tp - '0'; /* Get the 
                    LD number */
 10482                        	.line	3502
 10483 0B:6297: A7 09        	lda	[<L401+tp_1]
 10484 0B:6299: 29 FF 00     	and	#$ff
 10485 0B:629C: 85 01        	sta	<R0
 10486 0B:629E: 18           	clc
 10487 0B:629F: A9 D0 FF     	lda	#$ffd0
 10488 0B:62A2: 65 01        	adc	<R0
 10489 0B:62A4: 85 12        	sta	<L401+i_1
 10490                        ;		}
 10491                        	.line	3503
 10492                        ;#if FF_STR_VOLUME_ID == 1	/* Arbitrary str
                    ing is enabled */
 10493                        ;		else
 10494 0B:62A6: 82 E6 00     	brl	L10191
 10495                        L10190:
 10496                        ;		{
  Fri Jul 16 2021 14:42                                                Page 207


 10497                        	.line	3506
 10498                        ;			i = 0;
 10499                        	.line	3507
 10500 0B:62A9: 64 12        	stz	<L401+i_1
 10501                        ;			do
 10502                        	.line	3508
 10503                        L10194:
 10504                        ;			{
 10505                        	.line	3509
 10506                        ;				sp = VolumeStr[i]; tp = 
                    *path; /* This string volume ID and path name */
 10507                        	.line	3510
 10508 0B:62AB: A5 12        	lda	<L401+i_1
 10509 0B:62AD: 0A           	asl	A
 10510 0B:62AE: 0A           	asl	A
 10511 0B:62AF: 85 01        	sta	<R0
 10512 0B:62B1: 18           	clc
 10513 0B:62B2: A9 xx xx     	lda	#<~~VolumeStr
 10514 0B:62B5: 65 01        	adc	<R0
 10515 0B:62B7: 85 05        	sta	<R1
 10516 0B:62B9: B2 05        	lda	(<R1)
 10517 0B:62BB: 85 16        	sta	<L401+sp_1
 10518 0B:62BD: A0 02 00     	ldy	#$2
 10519 0B:62C0: B1 05        	lda	(<R1),Y
 10520 0B:62C2: 85 18        	sta	<L401+sp_1+2
 10521                        	.line	3510
 10522 0B:62C4: A7 1E        	lda	[<L400+path_0]
 10523 0B:62C6: 85 09        	sta	<L401+tp_1
 10524 0B:62C8: A0 02 00     	ldy	#$2
 10525 0B:62CB: B7 1E        	lda	[<L400+path_0],Y
 10526 0B:62CD: 85 0B        	sta	<L401+tp_1+2
 10527                        ;				do
 10528                        	.line	3511
 10529                        L10197:
 10530                        ;				{ /* Compare the volume 
                    ID with path name */
 10531                        	.line	3512
 10532                        ;					c = *sp++; tc = 
                    *tp++;
 10533                        	.line	3513
 10534 0B:62CF: E2 20        	sep	#$20
 10535                        	longa	off
 10536 0B:62D1: A7 16        	lda	[<L401+sp_1]
 10537 0B:62D3: 85 1A        	sta	<L401+c_1
 10538 0B:62D5: C2 20        	rep	#$20
 10539                        	longa	on
 10540 0B:62D7: E6 16        	inc	<L401+sp_1
 10541 0B:62D9: D0 02        	bne	L414
 10542 0B:62DB: E6 18        	inc	<L401+sp_1+2
 10543                        L414:
 10544                        	.line	3513
 10545 0B:62DD: E2 20        	sep	#$20
 10546                        	longa	off
 10547 0B:62DF: A7 09        	lda	[<L401+tp_1]
 10548 0B:62E1: 85 11        	sta	<L401+tc_1
 10549 0B:62E3: C2 20        	rep	#$20
 10550                        	longa	on
 10551 0B:62E5: E6 09        	inc	<L401+tp_1
  Fri Jul 16 2021 14:42                                                Page 208


 10552 0B:62E7: D0 02        	bne	L415
 10553 0B:62E9: E6 0B        	inc	<L401+tp_1+2
 10554                        L415:
 10555                        ;					if (IsLower(c)) 
                    c -= 0x20;
 10556                        	.line	3514
 10557 0B:62EB: E2 20        	sep	#$20
 10558                        	longa	off
 10559 0B:62ED: A5 1A        	lda	<L401+c_1
 10560 0B:62EF: C9 61        	cmp	#<$61
 10561 0B:62F1: C2 20        	rep	#$20
 10562                        	longa	on
 10563 0B:62F3: B0 03        	bcs	L416
 10564 0B:62F5: 82 24 00     	brl	L10198
 10565                        L416:
 10566 0B:62F8: E2 20        	sep	#$20
 10567                        	longa	off
 10568 0B:62FA: A9 7A        	lda	#$7a
 10569 0B:62FC: C5 1A        	cmp	<L401+c_1
 10570 0B:62FE: C2 20        	rep	#$20
 10571                        	longa	on
 10572 0B:6300: B0 03        	bcs	L417
 10573 0B:6302: 82 17 00     	brl	L10198
 10574                        L417:
 10575                        	.line	3514
 10576 0B:6305: A5 1A        	lda	<L401+c_1
 10577 0B:6307: 29 FF 00     	and	#$ff
 10578 0B:630A: 85 01        	sta	<R0
 10579 0B:630C: 18           	clc
 10580 0B:630D: A9 E0 FF     	lda	#$ffe0
 10581 0B:6310: 65 01        	adc	<R0
 10582 0B:6312: 85 05        	sta	<R1
 10583 0B:6314: E2 20        	sep	#$20
 10584                        	longa	off
 10585 0B:6316: A5 05        	lda	<R1
 10586 0B:6318: 85 1A        	sta	<L401+c_1
 10587 0B:631A: C2 20        	rep	#$20
 10588                        	longa	on
 10589                        ;					if (IsLower(tc))
                     tc -= 0x20;
 10590                        L10198:
 10591                        	.line	3515
 10592 0B:631C: E2 20        	sep	#$20
 10593                        	longa	off
 10594 0B:631E: A5 11        	lda	<L401+tc_1
 10595 0B:6320: C9 61        	cmp	#<$61
 10596 0B:6322: C2 20        	rep	#$20
 10597                        	longa	on
 10598 0B:6324: B0 03        	bcs	L418
 10599 0B:6326: 82 24 00     	brl	L10199
 10600                        L418:
 10601 0B:6329: E2 20        	sep	#$20
 10602                        	longa	off
 10603 0B:632B: A9 7A        	lda	#$7a
 10604 0B:632D: C5 11        	cmp	<L401+tc_1
 10605 0B:632F: C2 20        	rep	#$20
 10606                        	longa	on
 10607 0B:6331: B0 03        	bcs	L419
  Fri Jul 16 2021 14:42                                                Page 209


 10608 0B:6333: 82 17 00     	brl	L10199
 10609                        L419:
 10610                        	.line	3515
 10611 0B:6336: A5 11        	lda	<L401+tc_1
 10612 0B:6338: 29 FF 00     	and	#$ff
 10613 0B:633B: 85 01        	sta	<R0
 10614 0B:633D: 18           	clc
 10615 0B:633E: A9 E0 FF     	lda	#$ffe0
 10616 0B:6341: 65 01        	adc	<R0
 10617 0B:6343: 85 05        	sta	<R1
 10618 0B:6345: E2 20        	sep	#$20
 10619                        	longa	off
 10620 0B:6347: A5 05        	lda	<R1
 10621 0B:6349: 85 11        	sta	<L401+tc_1
 10622 0B:634B: C2 20        	rep	#$20
 10623                        	longa	on
 10624                        ;				}while (c && (TCHAR)c ==
                     tc);
 10625                        L10199:
 10626                        	.line	3516
 10627                        L10195:
 10628 0B:634D: A5 1A        	lda	<L401+c_1
 10629 0B:634F: 29 FF 00     	and	#$ff
 10630 0B:6352: D0 03        	bne	L421
 10631 0B:6354: 82 0D 00     	brl	L420
 10632                        L421:
 10633 0B:6357: E2 20        	sep	#$20
 10634                        	longa	off
 10635 0B:6359: A5 1A        	lda	<L401+c_1
 10636 0B:635B: C5 11        	cmp	<L401+tc_1
 10637 0B:635D: C2 20        	rep	#$20
 10638                        	longa	on
 10639 0B:635F: D0 03        	bne	L422
 10640 0B:6361: 82 6B FF     	brl	L10197
 10641                        L422:
 10642                        L420:
 10643                        L10196:
 10644                        ;			}while ((c || tp != tt) && ++i <
                     FF_VOLUMES); /* Repeat for each id until pattern match */
 10645                        	.line	3517
 10646                        L10192:
 10647 0B:6364: A5 1A        	lda	<L401+c_1
 10648 0B:6366: 29 FF 00     	and	#$ff
 10649 0B:6369: F0 03        	beq	L425
 10650 0B:636B: 82 0F 00     	brl	L424
 10651                        L425:
 10652 0B:636E: A5 09        	lda	<L401+tp_1
 10653 0B:6370: C5 0D        	cmp	<L401+tt_1
 10654 0B:6372: D0 04        	bne	L426
 10655 0B:6374: A5 0B        	lda	<L401+tp_1+2
 10656 0B:6376: C5 0F        	cmp	<L401+tt_1+2
 10657                        L426:
 10658 0B:6378: D0 03        	bne	L427
 10659 0B:637A: 82 12 00     	brl	L423
 10660                        L427:
 10661                        L424:
 10662 0B:637D: E6 12        	inc	<L401+i_1
 10663 0B:637F: 38           	sec
  Fri Jul 16 2021 14:42                                                Page 210


 10664 0B:6380: A5 12        	lda	<L401+i_1
 10665 0B:6382: E9 08 00     	sbc	#<$8
 10666 0B:6385: 70 03        	bvs	L428
 10667 0B:6387: 49 00 80     	eor	#$8000
 10668                        L428:
 10669 0B:638A: 30 03        	bmi	L429
 10670 0B:638C: 82 1C FF     	brl	L10194
 10671                        L429:
 10672                        L423:
 10673                        L10193:
 10674                        ;		}
 10675                        	.line	3518
 10676                        L10191:
 10677                        ;#endif
 10678                        ;		if (i < FF_VOLUMES)
 10679                        	.line	3520
 10680                        ;		{ /* If a volume ID is found, get the dr
                    ive number and strip it */
 10681 0B:638F: 38           	sec
 10682 0B:6390: A5 12        	lda	<L401+i_1
 10683 0B:6392: E9 08 00     	sbc	#<$8
 10684 0B:6395: 70 03        	bvs	L430
 10685 0B:6397: 49 00 80     	eor	#$8000
 10686                        L430:
 10687 0B:639A: 10 03        	bpl	L431
 10688 0B:639C: 82 0F 00     	brl	L10200
 10689                        L431:
 10690                        	.line	3521
 10691                        ;			vol = i; /* Drive number */
 10692                        	.line	3522
 10693 0B:639F: A5 12        	lda	<L401+i_1
 10694 0B:63A1: 85 14        	sta	<L401+vol_1
 10695                        ;			*path = tt; /* Snip the drive pr
                    efix off */
 10696                        	.line	3523
 10697 0B:63A3: A5 0D        	lda	<L401+tt_1
 10698 0B:63A5: 87 1E        	sta	[<L400+path_0]
 10699 0B:63A7: A5 0F        	lda	<L401+tt_1+2
 10700 0B:63A9: A0 02 00     	ldy	#$2
 10701 0B:63AC: 97 1E        	sta	[<L400+path_0],Y
 10702                        ;		}
 10703                        	.line	3524
 10704                        ;		return vol;
 10705                        L10200:
 10706                        	.line	3525
 10707 0B:63AE: A5 14        	lda	<L401+vol_1
 10708 0B:63B0: 82 60 FE     	brl	L404
 10709                        ;	}
 10710                        	.line	3526
 10711                        ;#if FF_STR_VOLUME_ID == 2		/* Unix 
                    style volume ID is enabled */
 10712                        ;	if (*tp == '/')
 10713                        ;	{
 10714                        ;		i = 0;
 10715                        ;		do
 10716                        ;		{
 10717                        ;			sp = VolumeStr[i]; tp = *path; /
                    * This string volume ID and path name */
  Fri Jul 16 2021 14:42                                                Page 211


 10718                        ;			do
 10719                        ;			{ /* Compare the volume ID with 
                    path name */
 10720                        ;				c = *sp++; tc = *(++tp);
 10721                        ;				if (IsLower(c)) c -= 0x2
                    0;
 10722                        ;				if (IsLower(tc)) tc -= 0
                    x20;
 10723                        ;			}while (c && (TCHAR)c == tc);
 10724                        ;		}while ((c || (tc != '/' && (UINT)tc >= 
                    (FF_USE_LFN ? ' ' : '!'))) && ++i < FF_VOLUMES); /* Repeat f
                    or each ID until pattern match */
 10725                        ;		if (i < FF_VOLUMES)
 10726                        ;		{ /* If a volume ID is found, get the dr
                    ive number and strip it */
 10727                        ;			vol = i; /* Drive number */
 10728                        ;			*path = tp; /* Snip the drive pr
                    efix off */
 10729                        ;			return vol;
 10730                        ;		}
 10731                        ;	}
 10732                        ;#endif
 10733                        ;	/* No drive prefix is found */
 10734                        ;#if FF_FS_RPATH != 0
 10735                        ;	vol = CurrVol; /* Default drive is current drive
                     */
 10736                        ;#else
 10737                        ;	vol = 0; /* Default drive is 0 */
 10738                        L10189:
 10739                        	.line	3553
 10740 0B:63B3: 64 14        	stz	<L401+vol_1
 10741                        ;#endif
 10742                        ;	return vol; /* Return the default drive */
 10743                        	.line	3555
 10744 0B:63B5: A5 14        	lda	<L401+vol_1
 10745 0B:63B7: 82 59 FE     	brl	L404
 10746                        ;}
 10747                        	.line	3556
 10748                        	.endblock	3556
 10749             0000001A   L400	equ	26
 10750             00000009   L401	equ	9
 10751 0B:63BA:              	ends
 10752                        	efunc
 10753                        	.endfunc	3556,9,26
 10754                        	.line	3556
 10755                        ;
 10756                        ;/*-----------------------------------------------
                    ------------------------*/
 10757                        ;/* GPT support functions                         
                                            */
 10758                        ;/*-----------------------------------------------
                    ------------------------*/
 10759                        ;
 10760                        ;#if FF_LBA64
 10761                        ;
 10762                        ;/* Calculate CRC32 in byte-by-byte */
 10763                        ;
 10764                        ;static DWORD crc32 ( /* Returns next CRC value */
  Fri Jul 16 2021 14:42                                                Page 212


 10765                        ;		DWORD crc, /* Current CRC value */
 10766                        ;		BYTE d /* A byte to be processed */
 10767                        ;)
 10768                        ;{
 10769                        ;	BYTE b;
 10770                        ;
 10771                        ;	for (b = 1; b; b <<= 1)
 10772                        ;	{
 10773                        ;		crc ^= (d & b) ? 1 : 0;
 10774                        ;		crc = (crc & 1) ? crc >> 1 ^ 0xEDB88320 
                    : crc >> 1;
 10775                        ;	}
 10776                        ;	return crc;
 10777                        ;}
 10778                        ;
 10779                        ;/* Check validity of GPT header */
 10780                        ;
 10781                        ;static int test_gpt_header ( /* 0:Invalid, 1:Vali
                    d */
 10782                        ;		const BYTE* gpth /* Pointer to the GPT h
                    eader */
 10783                        ;)
 10784                        ;{
 10785                        ;	UINT i;
 10786                        ;	DWORD bcc;
 10787                        ;
 10788                        ;	if (mem_cmp(gpth + GPTH_Sign, "EFI PART" "\0\0\1
                    \0" "\x5C\0\0", 16)) return 0; /* Check sign, version (1.0) 
                    and length (92) */
 10789                        ;	for (i = 0, bcc = 0xFFFFFFFF; i < 92; i++)
 10790                        ;	{ /* Check header BCC */
 10791                        ;		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : 
                    gpth[i]);
 10792                        ;	}
 10793                        ;	if (~bcc != ld_dword(gpth + GPTH_Bcc)) return 0;
 10794                        ;	if (ld_dword(gpth + GPTH_PteSize) != SZ_GPTE) re
                    turn 0; /* Table entry size (must be SZ_GPTE bytes) */
 10795                        ;	if (ld_dword(gpth + GPTH_PtNum) > 128) return 0;
                     /* Table size (must be 128 entries or less) */
 10796                        ;
 10797                        ;	return 1;
 10798                        ;}
 10799                        ;
 10800                        ;#if !FF_FS_READONLY && FF_USE_MKFS
 10801                        ;
 10802                        ;/* Generate random value */
 10803                        ;static DWORD make_rand (
 10804                        ;		DWORD seed, /* Seed value */
 10805                        ;		BYTE* buff, /* Output buffer */
 10806                        ;		UINT n /* Data length */
 10807                        ;)
 10808                        ;{
 10809                        ;	UINT r;
 10810                        ;
 10811                        ;	if (seed == 0) seed = 1;
 10812                        ;	do
 10813                        ;	{
 10814                        ;		for (r = 0; r < 8; r++) seed = seed & 1 
  Fri Jul 16 2021 14:42                                                Page 213


                    ? seed >> 1 ^ 0xA3000000 : seed >> 1; /* Shift 8 bits the 32
                    -bit LFSR */
 10815                        ;		*buff++ = (BYTE)seed;
 10816                        ;	}while (--n);
 10817                        ;	return seed;
 10818                        ;}
 10819                        ;
 10820                        ;#endif
 10821                        ;#endif
 10822                        ;
 10823                        ;/*-----------------------------------------------
                    ------------------------*/
 10824                        ;/* Load a sector and check if it is an FAT VBR   
                                            */
 10825                        ;/*-----------------------------------------------
                    ------------------------*/
 10826                        ;
 10827                        ;/* Check what the sector is */
 10828                        ;
 10829                        ;static UINT check_fs( /* 0:FAT VBR, 1:exFAT VBR, 
                    2:Valid BS but not FAT, 3:Invalid BS, 4:Disk error */
 10830                        ;FATFS* fs, /* Filesystem object */
 10831                        ;LBA_t sect /* Sector to load and check if it is a
                    n FAT-VBR or not */
 10832                        ;)
 10833                        ;{
 10834                        	.line	3631
 10835                        	.line	3635
 10836                        	FFDOS
 10837                        	func
 10838                        	.function	3635
 10839                        ~~check_fs:
 10840                        	longa	on
 10841                        	longi	on
 10842 0B:63BA: 3B           	tsc
 10843 0B:63BB: 38           	sec
 10844 0B:63BC: E9 08 00     	sbc	#L432
 10845 0B:63BF: 1B           	tcs
 10846 0B:63C0: 0B           	phd
 10847 0B:63C1: 5B           	tcd
 10848             00000004   fs_0	set	4
 10849             00000008   sect_0	set	8
 10850                        	.block	3635
 10851                        ;
 10852                        ;	//////k_debug_long("check_fs:", sect);
 10853                        ;
 10854                        ;	fs->wflag = 0;
 10855                        	.sym	fs,4,138,6,32,49
 10856                        	.sym	sect,8,18,6,32
 10857                        	.line	3639
 10858 0B:63C2: E2 20        	sep	#$20
 10859                        	longa	off
 10860 0B:63C4: A9 00        	lda	#$0
 10861 0B:63C6: A0 03 00     	ldy	#$3
 10862 0B:63C9: 97 0C        	sta	[<L432+fs_0],Y
 10863 0B:63CB: C2 20        	rep	#$20
 10864                        	longa	on
 10865                        ;	fs->winsect = (LBA_t) 0 - 1; /* Invaidate window
  Fri Jul 16 2021 14:42                                                Page 214


                     */
 10866                        	.line	3640
 10867 0B:63CD: A9 FF FF     	lda	#$ffff
 10868 0B:63D0: A0 2B 00     	ldy	#$2b
 10869 0B:63D3: 97 0C        	sta	[<L432+fs_0],Y
 10870 0B:63D5: A9 FF FF     	lda	#$ffff
 10871 0B:63D8: A0 2D 00     	ldy	#$2d
 10872 0B:63DB: 97 0C        	sta	[<L432+fs_0],Y
 10873                        ;	if (move_window(fs, sect) != FR_OK)
 10874                        	.line	3641
 10875                        ;		return 4; /* Load the boot sector */
 10876 0B:63DD: D4 12        	pei	<L432+sect_0+2
 10877 0B:63DF: D4 10        	pei	<L432+sect_0
 10878 0B:63E1: D4 0E        	pei	<L432+fs_0+2
 10879 0B:63E3: D4 0C        	pei	<L432+fs_0
 10880 0B:63E5: 22 7A 43 0B  	jsl	~~move_window
 10881 0B:63E9: AA           	tax
 10882 0B:63EA: D0 03        	bne	L435
 10883 0B:63EC: 82 15 00     	brl	L10201
 10884                        L435:
 10885                        	.line	3642
 10886 0B:63EF: A9 04 00     	lda	#$4
 10887                        L436:
 10888 0B:63F2: A8           	tay
 10889 0B:63F3: A5 0A        	lda	<L432+2
 10890 0B:63F5: 85 12        	sta	<L432+2+8
 10891 0B:63F7: A5 09        	lda	<L432+1
 10892 0B:63F9: 85 11        	sta	<L432+1+8
 10893 0B:63FB: 2B           	pld
 10894 0B:63FC: 3B           	tsc
 10895 0B:63FD: 18           	clc
 10896 0B:63FE: 69 10 00     	adc	#L432+8
 10897 0B:6401: 1B           	tcs
 10898 0B:6402: 98           	tya
 10899 0B:6403: 6B           	rtl
 10900                        ;
 10901                        ;	////k_debug_integer("check_fs:ld_word(&fs->win[B
                    S_55AA]):",ld_word(&fs->win[BS_55AA]));
 10902                        ;	if (ld_word(&fs->win[BS_55AA]) != 0xAA55)
 10903                        L10201:
 10904                        	.line	3645
 10905                        ;		return 3; /* Check boot signature (alway
                    s here regardless of the sector size) */
 10906 0B:6404: 18           	clc
 10907 0B:6405: A9 2D 02     	lda	#$22d
 10908 0B:6408: 65 0C        	adc	<L432+fs_0
 10909 0B:640A: 85 01        	sta	<R0
 10910 0B:640C: A9 00 00     	lda	#$0
 10911 0B:640F: 65 0E        	adc	<L432+fs_0+2
 10912 0B:6411: 85 03        	sta	<R0+2
 10913 0B:6413: D4 03        	pei	<R0+2
 10914 0B:6415: D4 01        	pei	<R0
 10915 0B:6417: 22 80 3F 0B  	jsl	~~ld_word
 10916 0B:641B: 85 05        	sta	<R1
 10917 0B:641D: A5 05        	lda	<R1
 10918 0B:641F: C9 55 AA     	cmp	#<$aa55
 10919 0B:6422: D0 03        	bne	L437
 10920 0B:6424: 82 06 00     	brl	L10202
  Fri Jul 16 2021 14:42                                                Page 215


 10921                        L437:
 10922                        	.line	3646
 10923 0B:6427: A9 03 00     	lda	#$3
 10924 0B:642A: 82 C5 FF     	brl	L436
 10925                        ;
 10926                        ;	if (FF_FS_EXFAT
 10927                        L10202:
 10928                        	.line	3648
 10929                        ;			&& !mem_cmp(&(fs->win[BS_JmpBoot
                    ]), "\xEB\x76\x90" "EXFAT   ", 11))
 10930                        ;		return 1; /* Check if exFAT VBR */
 10931 0B:642D: 82 2C 00     	brl	L10203
 10932 0B:6430: F4 0B 00     	pea	#<$b
 10933 0B:6433: F4 xx xx     	pea	#^L382
 10934 0B:6436: F4 xx xx     	pea	#<L382
 10935 0B:6439: 18           	clc
 10936 0B:643A: A9 2F 00     	lda	#$2f
 10937 0B:643D: 65 0C        	adc	<L432+fs_0
 10938 0B:643F: 85 01        	sta	<R0
 10939 0B:6441: A9 00 00     	lda	#$0
 10940 0B:6444: 65 0E        	adc	<L432+fs_0+2
 10941 0B:6446: 85 03        	sta	<R0+2
 10942 0B:6448: D4 03        	pei	<R0+2
 10943 0B:644A: D4 01        	pei	<R0
 10944 0B:644C: 22 96 41 0B  	jsl	~~mem_cmp
 10945 0B:6450: AA           	tax
 10946 0B:6451: F0 03        	beq	L438
 10947 0B:6453: 82 06 00     	brl	L10203
 10948                        L438:
 10949                        	.line	3650
 10950 0B:6456: A9 01 00     	lda	#$1
 10951 0B:6459: 82 96 FF     	brl	L436
 10952                        ;
 10953                        ;	//////k_debug_hex("check_fs:BS_JmpBoot:", fs->wi
                    n[BS_JmpBoot]);
 10954                        ;
 10955                        ;	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_Jm
                    pBoot] == 0xEB
 10956                        L10203:
 10957                        	.line	3654
 10958                        ;			|| fs->win[BS_JmpBoot] == 0xE8)
 10959                        ;	{ /* Valid JumpBoot code? */
 10960 0B:645C: E2 20        	sep	#$20
 10961                        	longa	off
 10962 0B:645E: A0 2F 00     	ldy	#$2f
 10963 0B:6461: B7 0C        	lda	[<L432+fs_0],Y
 10964 0B:6463: C9 E9        	cmp	#<$e9
 10965 0B:6465: C2 20        	rep	#$20
 10966                        	longa	on
 10967 0B:6467: D0 03        	bne	L440
 10968 0B:6469: 82 20 00     	brl	L439
 10969                        L440:
 10970 0B:646C: E2 20        	sep	#$20
 10971                        	longa	off
 10972 0B:646E: A0 2F 00     	ldy	#$2f
 10973 0B:6471: B7 0C        	lda	[<L432+fs_0],Y
 10974 0B:6473: C9 EB        	cmp	#<$eb
 10975 0B:6475: C2 20        	rep	#$20
  Fri Jul 16 2021 14:42                                                Page 216


 10976                        	longa	on
 10977 0B:6477: D0 03        	bne	L441
 10978 0B:6479: 82 10 00     	brl	L439
 10979                        L441:
 10980 0B:647C: E2 20        	sep	#$20
 10981                        	longa	off
 10982 0B:647E: A0 2F 00     	ldy	#$2f
 10983 0B:6481: B7 0C        	lda	[<L432+fs_0],Y
 10984 0B:6483: C9 E8        	cmp	#<$e8
 10985 0B:6485: C2 20        	rep	#$20
 10986                        	longa	on
 10987 0B:6487: F0 03        	beq	L442
 10988 0B:6489: 82 58 00     	brl	L10204
 10989                        L442:
 10990                        L439:
 10991                        	.line	3656
 10992                        ;		if (!mem_cmp(&(fs->win[BS_FilSysType]), 
                    "FAT", 3))
 10993                        	.line	3657
 10994                        ;			return 0; /* Is it an FAT VBR? *
                    /
 10995 0B:648C: F4 03 00     	pea	#<$3
 10996 0B:648F: F4 xx xx     	pea	#^L382+12
 10997 0B:6492: F4 xx xx     	pea	#<L382+12
 10998 0B:6495: 18           	clc
 10999 0B:6496: A9 65 00     	lda	#$65
 11000 0B:6499: 65 0C        	adc	<L432+fs_0
 11001 0B:649B: 85 01        	sta	<R0
 11002 0B:649D: A9 00 00     	lda	#$0
 11003 0B:64A0: 65 0E        	adc	<L432+fs_0+2
 11004 0B:64A2: 85 03        	sta	<R0+2
 11005 0B:64A4: D4 03        	pei	<R0+2
 11006 0B:64A6: D4 01        	pei	<R0
 11007 0B:64A8: 22 96 41 0B  	jsl	~~mem_cmp
 11008 0B:64AC: AA           	tax
 11009 0B:64AD: F0 03        	beq	L443
 11010 0B:64AF: 82 06 00     	brl	L10205
 11011                        L443:
 11012                        	.line	3658
 11013 0B:64B2: A9 00 00     	lda	#$0
 11014 0B:64B5: 82 3A FF     	brl	L436
 11015                        ;		if (!mem_cmp(&(fs->win[BS_FilSysType32])
                    , "FAT32", 5))
 11016                        L10205:
 11017                        	.line	3659
 11018                        ;			return 0; /* Is it an FAT32 VBR?
                     */
 11019 0B:64B8: F4 05 00     	pea	#<$5
 11020 0B:64BB: F4 xx xx     	pea	#^L382+16
 11021 0B:64BE: F4 xx xx     	pea	#<L382+16
 11022 0B:64C1: 18           	clc
 11023 0B:64C2: A9 81 00     	lda	#$81
 11024 0B:64C5: 65 0C        	adc	<L432+fs_0
 11025 0B:64C7: 85 01        	sta	<R0
 11026 0B:64C9: A9 00 00     	lda	#$0
 11027 0B:64CC: 65 0E        	adc	<L432+fs_0+2
 11028 0B:64CE: 85 03        	sta	<R0+2
 11029 0B:64D0: D4 03        	pei	<R0+2
  Fri Jul 16 2021 14:42                                                Page 217


 11030 0B:64D2: D4 01        	pei	<R0
 11031 0B:64D4: 22 96 41 0B  	jsl	~~mem_cmp
 11032 0B:64D8: AA           	tax
 11033 0B:64D9: F0 03        	beq	L444
 11034 0B:64DB: 82 06 00     	brl	L10206
 11035                        L444:
 11036                        	.line	3660
 11037 0B:64DE: A9 00 00     	lda	#$0
 11038 0B:64E1: 82 0E FF     	brl	L436
 11039                        ;	}
 11040                        L10206:
 11041                        	.line	3661
 11042                        ;	return 2; /* Valid BS but not FAT */
 11043                        L10204:
 11044                        	.line	3662
 11045 0B:64E4: A9 02 00     	lda	#$2
 11046 0B:64E7: 82 08 FF     	brl	L436
 11047                        ;}
 11048                        	.line	3663
 11049                        	.endblock	3663
 11050             00000008   L432	equ	8
 11051             00000009   L433	equ	9
 11052 0B:64EA:              	ends
 11053                        	efunc
 11054                        	.endfunc	3663,9,8
 11055                        	.line	3663
 11056                        	data
 11057                        L382:
 11058 00:00CF: EB 76 90 45  	db	$EB,$76,$FFFFFF90,$45,$58,$46,$41,$54,$2
                    0,$20,$20,$00,$46,$41,$54
       00:00D3: 58 46 41 54 
       00:00D7: 20 20 20 00 
       00:00DB: 46 41 54 
 11059 00:00DE: 00 46 41 54  	db	$00,$46,$41,$54,$33,$32,$00
       00:00E2: 33 32 00 
 11060 00:00E5:              	ends
 11061                        ;
 11062                        ;/* Find an FAT volume */
 11063                        ;/* (It supports only generic partitioning rules, 
                    MBR, GPT and SFD) */
 11064                        ;
 11065                        ;static UINT find_volume( /* Returns BS status fou
                    nd in the hosting drive */
 11066                        ;FATFS* fs, /* Filesystem object */
 11067                        ;UINT part /* Partition to fined = 0:auto, 1..:for
                    ced */
 11068                        ;)
 11069                        ;{
 11070                        	.line	3668
 11071                        	.line	3672
 11072                        	FFDOS
 11073                        	func
 11074                        	.function	3672
 11075                        ~~find_volume:
 11076                        	longa	on
 11077                        	longi	on
 11078 0B:64EA: 3B           	tsc
 11079 0B:64EB: 38           	sec
  Fri Jul 16 2021 14:42                                                Page 218


 11080 0B:64EC: E9 3C 00     	sbc	#L446
 11081 0B:64EF: 1B           	tcs
 11082 0B:64F0: 0B           	phd
 11083 0B:64F1: 5B           	tcd
 11084             00000004   fs_0	set	4
 11085             00000008   part_0	set	8
 11086                        	.block	3672
 11087                        ;	UINT fmt, i;
 11088                        ;	DWORD mbr_pt[4];
 11089                        ;
 11090                        ;	PPARTITIONTABLE ppt[4];
 11091                        ;
 11092                        ;	////k_debug_string("find_volume...\r\n");
 11093                        ;
 11094                        ;	fmt = check_fs(fs, 0); /* Load sector 0 and chec
                    k if it is an FAT VBR as SFD */
 11095             00000000   fmt_1	set	0
 11096             00000002   i_1	set	2
 11097             00000004   mbr_pt_1	set	4
 11098             00000014   ppt_1	set	20
 11099                        	.sym	fmt,0,16,1,16
 11100                        	.sym	i,2,16,1,16
 11101                        	.sym	mbr_pt,4,114,1,0,4
 11102                        	.sym	ppt,20,1130,1,32,55,4
 11103                        	.sym	fs,4,138,6,32,49
 11104                        	.sym	part,8,16,6,16
 11105                        	.line	3680
 11106 0B:64F2: F4 00 00     	pea	#^$0
 11107 0B:64F5: F4 00 00     	pea	#<$0
 11108 0B:64F8: D4 42        	pei	<L446+fs_0+2
 11109 0B:64FA: D4 40        	pei	<L446+fs_0
 11110 0B:64FC: 22 BA 63 0B  	jsl	~~check_fs
 11111 0B:6500: 85 19        	sta	<L447+fmt_1
 11112                        ;
 11113                        ;	////k_debug_integer("find_volume:fmt:", fmt);
 11114                        ;
 11115                        ;	if (fmt != 2 && (fmt >= 3 || part == 0))
 11116                        	.line	3684
 11117                        ;	{
 11118 0B:6502: A5 19        	lda	<L447+fmt_1
 11119 0B:6504: C9 02 00     	cmp	#<$2
 11120 0B:6507: D0 03        	bne	L449
 11121 0B:6509: 82 25 00     	brl	L10207
 11122                        L449:
 11123 0B:650C: A5 19        	lda	<L447+fmt_1
 11124 0B:650E: C9 03 00     	cmp	#<$3
 11125 0B:6511: 90 03        	bcc	L451
 11126 0B:6513: 82 07 00     	brl	L450
 11127                        L451:
 11128 0B:6516: A5 44        	lda	<L446+part_0
 11129 0B:6518: F0 03        	beq	L452
 11130 0B:651A: 82 14 00     	brl	L10207
 11131                        L452:
 11132                        L450:
 11133                        	.line	3685
 11134                        ;		return fmt; /* Returns if it is a FAT VB
                    R as auto scan, not a BS or disk error */
 11135                        	.line	3686
  Fri Jul 16 2021 14:42                                                Page 219


 11136 0B:651D: A5 19        	lda	<L447+fmt_1
 11137                        L453:
 11138 0B:651F: A8           	tay
 11139 0B:6520: A5 3E        	lda	<L446+2
 11140 0B:6522: 85 44        	sta	<L446+2+6
 11141 0B:6524: A5 3D        	lda	<L446+1
 11142 0B:6526: 85 43        	sta	<L446+1+6
 11143 0B:6528: 2B           	pld
 11144 0B:6529: 3B           	tsc
 11145 0B:652A: 18           	clc
 11146 0B:652B: 69 42 00     	adc	#L446+6
 11147 0B:652E: 1B           	tcs
 11148 0B:652F: 98           	tya
 11149 0B:6530: 6B           	rtl
 11150                        ;	}
 11151                        	.line	3687
 11152                        ;	/* Sector 0 is not an FAT VBR or forced partitio
                    n number wants a partition */
 11153                        ;
 11154                        ;#if FF_LBA64
 11155                        ;	if (fs->win[MBR_Table + PTE_System] == 0xEE)
 11156                        ;	{ /* GPT protective MBR? */
 11157                        ;		DWORD n_ent, v_ent, ofs;
 11158                        ;		QWORD pt_lba;
 11159                        ;
 11160                        ;		if (move_window(fs, 1) != FR_OK) return 
                    4; /* Load GPT header sector (next to MBR) */
 11161                        ;		if (!test_gpt_header(fs->win)) return 3;
                     /* Check if GPT header is valid */
 11162                        ;		n_ent = ld_dword(fs->win + GPTH_PtNum); 
                    /* Number of entries */
 11163                        ;		pt_lba = ld_qword(fs->win + GPTH_PtOfs);
                     /* Table location */
 11164                        ;		for (v_ent = i = 0; i < n_ent; i++)
 11165                        ;		{ /* Find FAT partition */
 11166                        ;			if (move_window(fs, pt_lba + i *
                     SZ_GPTE / SS(fs)) != FR_OK) return 4; /* PT sector */
 11167                        ;			ofs = i * SZ_GPTE % SS(fs); /* O
                    ffset in the sector */
 11168                        ;			if (!mem_cmp(fs->win + ofs + GPT
                    E_PtGuid, GUID_MS_Basic, 16))
 11169                        ;			{ /* MS basic data partition? */
 11170                        ;				v_ent++;
 11171                        ;				fmt = check_fs(fs, ld_qw
                    ord(fs->win + ofs + GPTE_FstLba)); /* Load VBR and check sta
                    tus */
 11172                        ;				if (part == 0 && fmt <= 
                    1) return fmt; /* Auto search (valid FAT volume found first)
                     */
 11173                        ;				if (part != 0 && v_ent =
                    = part) return fmt; /* Forced partition order (regardless of
                     it is valid or not) */
 11174                        ;			}
 11175                        ;		}
 11176                        ;		return 3; /* Not found */
 11177                        ;	}
 11178                        ;#endif
 11179                        ;	if (FF_MULTI_PARTITION && part > 4)
  Fri Jul 16 2021 14:42                                                Page 220


 11180                        L10207:
 11181                        	.line	3715
 11182                        ;		return 3; /* MBR has 4 partitions max */
 11183 0B:6531: 82 10 00     	brl	L10208
 11184 0B:6534: A9 04 00     	lda	#$4
 11185 0B:6537: C5 44        	cmp	<L446+part_0
 11186 0B:6539: 90 03        	bcc	L454
 11187 0B:653B: 82 06 00     	brl	L10208
 11188                        L454:
 11189                        	.line	3716
 11190 0B:653E: A9 03 00     	lda	#$3
 11191 0B:6541: 82 DB FF     	brl	L453
 11192                        ;	for (i = 0; i < 4; i++)
 11193                        L10208:
 11194                        	.line	3717
 11195 0B:6544: 64 1B        	stz	<L447+i_1
 11196                        L10211:
 11197                        ;	{ /* Load partition offset in the MBR */
 11198                        	.line	3718
 11199                        ;		//mbr_pt[i] = ld_dword(&(fs->win[ MBR_Ta
                    ble + i * SZ_PTE + PTE_StLba ]));
 11200                        ;
 11201                        ;		ppt[i] = (PPARTITIONTABLE) &(fs->win[(UL
                    ONG) MBR_Table
 11202                        	.line	3721
 11203                        ;				+ ((ULONG) i * 0x10L)]);
 11204 0B:6546: A5 1B        	lda	<L447+i_1
 11205 0B:6548: 85 05        	sta	<R1
 11206 0B:654A: 64 07        	stz	<R1+2
 11207 0B:654C: D4 07        	pei	<R1+2
 11208 0B:654E: D4 05        	pei	<R1
 11209 0B:6550: A9 02 00     	lda	#$2
 11210                        	xref	~~~lasl
 11211 0B:6553: 22 xx xx xx  	jsl	~~~lasl
 11212 0B:6557: 85 01        	sta	<R0
 11213 0B:6559: 86 03        	stx	<R0+2
 11214 0B:655B: 18           	clc
 11215 0B:655C: 7B           	tdc
 11216 0B:655D: 69 2D 00     	adc	#<L447+ppt_1
 11217 0B:6560: 85 09        	sta	<R2
 11218 0B:6562: A9 00 00     	lda	#$0
 11219 0B:6565: 85 0B        	sta	<R2+2
 11220 0B:6567: 18           	clc
 11221 0B:6568: A5 09        	lda	<R2
 11222 0B:656A: 65 01        	adc	<R0
 11223 0B:656C: 85 0D        	sta	<R3
 11224 0B:656E: A5 0B        	lda	<R2+2
 11225 0B:6570: 65 03        	adc	<R0+2
 11226 0B:6572: 85 0F        	sta	<R3+2
 11227 0B:6574: A5 1B        	lda	<L447+i_1
 11228 0B:6576: 85 09        	sta	<R2
 11229 0B:6578: 64 0B        	stz	<R2+2
 11230 0B:657A: D4 0B        	pei	<R2+2
 11231 0B:657C: D4 09        	pei	<R2
 11232 0B:657E: A9 04 00     	lda	#$4
 11233                        	xref	~~~lasl
 11234 0B:6581: 22 xx xx xx  	jsl	~~~lasl
 11235 0B:6585: 85 01        	sta	<R0
  Fri Jul 16 2021 14:42                                                Page 221


 11236 0B:6587: 86 03        	stx	<R0+2
 11237 0B:6589: 18           	clc
 11238 0B:658A: A9 ED 01     	lda	#$1ed
 11239 0B:658D: 65 01        	adc	<R0
 11240 0B:658F: 85 11        	sta	<17
 11241 0B:6591: A9 00 00     	lda	#$0
 11242 0B:6594: 65 03        	adc	<R0+2
 11243 0B:6596: 85 13        	sta	<17+2
 11244 0B:6598: 18           	clc
 11245 0B:6599: A5 40        	lda	<L446+fs_0
 11246 0B:659B: 65 11        	adc	<17
 11247 0B:659D: 85 01        	sta	<R0
 11248 0B:659F: A5 42        	lda	<L446+fs_0+2
 11249 0B:65A1: 65 13        	adc	<17+2
 11250 0B:65A3: 85 03        	sta	<R0+2
 11251 0B:65A5: A5 01        	lda	<R0
 11252 0B:65A7: 87 0D        	sta	[<R3]
 11253 0B:65A9: A5 03        	lda	<R0+2
 11254 0B:65AB: A0 02 00     	ldy	#$2
 11255 0B:65AE: 97 0D        	sta	[<R3],Y
 11256                        ;		//////k_debug_hex("find_volume:ppt[i].pa
                    rtition_type:",ppt[i]->partition_type);
 11257                        ;		//////k_debug_long("find_volume:ppt[i].s
                    tart_sector:", ppt[i]->start_sector);
 11258                        ;
 11259                        ;		mbr_pt[i] = ld_dword(
 11260                        	.line	3726
 11261                        ;				&(fs->win[(ULONG) MBR_Ta
                    ble + ((ULONG) i * 0x10L)]));
 11262 0B:65B0: A5 1B        	lda	<L447+i_1
 11263 0B:65B2: 85 05        	sta	<R1
 11264 0B:65B4: 64 07        	stz	<R1+2
 11265 0B:65B6: D4 07        	pei	<R1+2
 11266 0B:65B8: D4 05        	pei	<R1
 11267 0B:65BA: A9 02 00     	lda	#$2
 11268                        	xref	~~~lasl
 11269 0B:65BD: 22 xx xx xx  	jsl	~~~lasl
 11270 0B:65C1: 85 01        	sta	<R0
 11271 0B:65C3: 86 03        	stx	<R0+2
 11272 0B:65C5: 18           	clc
 11273 0B:65C6: 7B           	tdc
 11274 0B:65C7: 69 1D 00     	adc	#<L447+mbr_pt_1
 11275 0B:65CA: 85 09        	sta	<R2
 11276 0B:65CC: A9 00 00     	lda	#$0
 11277 0B:65CF: 85 0B        	sta	<R2+2
 11278 0B:65D1: 18           	clc
 11279 0B:65D2: A5 09        	lda	<R2
 11280 0B:65D4: 65 01        	adc	<R0
 11281 0B:65D6: 85 0D        	sta	<R3
 11282 0B:65D8: A5 0B        	lda	<R2+2
 11283 0B:65DA: 65 03        	adc	<R0+2
 11284 0B:65DC: 85 0F        	sta	<R3+2
 11285 0B:65DE: A5 1B        	lda	<L447+i_1
 11286 0B:65E0: 85 09        	sta	<R2
 11287 0B:65E2: 64 0B        	stz	<R2+2
 11288 0B:65E4: D4 0B        	pei	<R2+2
 11289 0B:65E6: D4 09        	pei	<R2
 11290 0B:65E8: A9 04 00     	lda	#$4
  Fri Jul 16 2021 14:42                                                Page 222


 11291                        	xref	~~~lasl
 11292 0B:65EB: 22 xx xx xx  	jsl	~~~lasl
 11293 0B:65EF: 85 01        	sta	<R0
 11294 0B:65F1: 86 03        	stx	<R0+2
 11295 0B:65F3: 18           	clc
 11296 0B:65F4: A9 ED 01     	lda	#$1ed
 11297 0B:65F7: 65 01        	adc	<R0
 11298 0B:65F9: 85 11        	sta	<17
 11299 0B:65FB: A9 00 00     	lda	#$0
 11300 0B:65FE: 65 03        	adc	<R0+2
 11301 0B:6600: 85 13        	sta	<17+2
 11302 0B:6602: 18           	clc
 11303 0B:6603: A5 40        	lda	<L446+fs_0
 11304 0B:6605: 65 11        	adc	<17
 11305 0B:6607: 85 01        	sta	<R0
 11306 0B:6609: A5 42        	lda	<L446+fs_0+2
 11307 0B:660B: 65 13        	adc	<17+2
 11308 0B:660D: 85 03        	sta	<R0+2
 11309 0B:660F: D4 03        	pei	<R0+2
 11310 0B:6611: D4 01        	pei	<R0
 11311 0B:6613: 22 BB 3F 0B  	jsl	~~ld_dword
 11312 0B:6617: 85 15        	sta	<21
 11313 0B:6619: 86 17        	stx	<21+2
 11314 0B:661B: A5 15        	lda	<21
 11315 0B:661D: 87 0D        	sta	[<R3]
 11316 0B:661F: A5 17        	lda	<21+2
 11317 0B:6621: A0 02 00     	ldy	#$2
 11318 0B:6624: 97 0D        	sta	[<R3],Y
 11319                        ;		//////k_debug_long("find_volume:mbr_pt[i
                    ]:", mbr_pt[i]);
 11320                        ;	}
 11321                        	.line	3729
 11322                        L10209:
 11323 0B:6626: E6 1B        	inc	<L447+i_1
 11324 0B:6628: A5 1B        	lda	<L447+i_1
 11325 0B:662A: C9 04 00     	cmp	#<$4
 11326 0B:662D: B0 03        	bcs	L455
 11327 0B:662F: 82 14 FF     	brl	L10211
 11328                        L455:
 11329                        L10210:
 11330                        ;
 11331                        ;	i = part ? part - 1 : 0; /* Table index to find 
                    first */
 11332                        	.line	3731
 11333 0B:6632: A5 44        	lda	<L446+part_0
 11334 0B:6634: D0 03        	bne	L457
 11335 0B:6636: 82 08 00     	brl	L456
 11336                        L457:
 11337 0B:6639: 18           	clc
 11338 0B:663A: A9 FF FF     	lda	#$ffff
 11339 0B:663D: 65 44        	adc	<L446+part_0
 11340 0B:663F: 80 03        	bra	L458
 11341                        L456:
 11342 0B:6641: A9 00 00     	lda	#$0
 11343                        L458:
 11344 0B:6644: 85 1B        	sta	<L447+i_1
 11345                        ;
 11346                        ;	do
  Fri Jul 16 2021 14:42                                                Page 223


 11347                        	.line	3733
 11348                        L10214:
 11349                        ;	{ /* Find an FAT volume */
 11350                        	.line	3734
 11351                        ;
 11352                        ;		//fmt = mbr_pt[i] ? check_fs(fs,  mbr_pt
                    [i]) : 3;	/* Check if the partition is FAT */
 11353                        ;		fmt = mbr_pt[i] ? check_fs(fs, ppt[i]->s
                    tart_sector) : 3; /* Check if the partition is FAT */
 11354                        	.line	3737
 11355 0B:6646: A5 1B        	lda	<L447+i_1
 11356 0B:6648: 85 05        	sta	<R1
 11357 0B:664A: 64 07        	stz	<R1+2
 11358 0B:664C: D4 07        	pei	<R1+2
 11359 0B:664E: D4 05        	pei	<R1
 11360 0B:6650: A9 02 00     	lda	#$2
 11361                        	xref	~~~lasl
 11362 0B:6653: 22 xx xx xx  	jsl	~~~lasl
 11363 0B:6657: 85 01        	sta	<R0
 11364 0B:6659: 86 03        	stx	<R0+2
 11365 0B:665B: 18           	clc
 11366 0B:665C: 7B           	tdc
 11367 0B:665D: 69 1D 00     	adc	#<L447+mbr_pt_1
 11368 0B:6660: 85 09        	sta	<R2
 11369 0B:6662: A9 00 00     	lda	#$0
 11370 0B:6665: 85 0B        	sta	<R2+2
 11371 0B:6667: 18           	clc
 11372 0B:6668: A5 09        	lda	<R2
 11373 0B:666A: 65 01        	adc	<R0
 11374 0B:666C: 85 0D        	sta	<R3
 11375 0B:666E: A5 0B        	lda	<R2+2
 11376 0B:6670: 65 03        	adc	<R0+2
 11377 0B:6672: 85 0F        	sta	<R3+2
 11378 0B:6674: A7 0D        	lda	[<R3]
 11379 0B:6676: A0 02 00     	ldy	#$2
 11380 0B:6679: 17 0D        	ora	[<R3],Y
 11381 0B:667B: D0 03        	bne	L460
 11382 0B:667D: 82 4F 00     	brl	L459
 11383                        L460:
 11384 0B:6680: A5 1B        	lda	<L447+i_1
 11385 0B:6682: 85 09        	sta	<R2
 11386 0B:6684: 64 0B        	stz	<R2+2
 11387 0B:6686: D4 0B        	pei	<R2+2
 11388 0B:6688: D4 09        	pei	<R2
 11389 0B:668A: A9 02 00     	lda	#$2
 11390                        	xref	~~~lasl
 11391 0B:668D: 22 xx xx xx  	jsl	~~~lasl
 11392 0B:6691: 85 01        	sta	<R0
 11393 0B:6693: 86 03        	stx	<R0+2
 11394 0B:6695: 18           	clc
 11395 0B:6696: 7B           	tdc
 11396 0B:6697: 69 2D 00     	adc	#<L447+ppt_1
 11397 0B:669A: 85 0D        	sta	<R3
 11398 0B:669C: A9 00 00     	lda	#$0
 11399 0B:669F: 85 0F        	sta	<R3+2
 11400 0B:66A1: 18           	clc
 11401 0B:66A2: A5 0D        	lda	<R3
 11402 0B:66A4: 65 01        	adc	<R0
  Fri Jul 16 2021 14:42                                                Page 224


 11403 0B:66A6: 85 11        	sta	<17
 11404 0B:66A8: A5 0F        	lda	<R3+2
 11405 0B:66AA: 65 03        	adc	<R0+2
 11406 0B:66AC: 85 13        	sta	<17+2
 11407 0B:66AE: A7 11        	lda	[<17]
 11408 0B:66B0: 85 01        	sta	<R0
 11409 0B:66B2: A0 02 00     	ldy	#$2
 11410 0B:66B5: B7 11        	lda	[<17],Y
 11411 0B:66B7: 85 03        	sta	<R0+2
 11412 0B:66B9: A0 0A 00     	ldy	#$a
 11413 0B:66BC: B7 01        	lda	[<R0],Y
 11414 0B:66BE: 48           	pha
 11415 0B:66BF: A0 08 00     	ldy	#$8
 11416 0B:66C2: B7 01        	lda	[<R0],Y
 11417 0B:66C4: 48           	pha
 11418 0B:66C5: D4 42        	pei	<L446+fs_0+2
 11419 0B:66C7: D4 40        	pei	<L446+fs_0
 11420 0B:66C9: 22 BA 63 0B  	jsl	~~check_fs
 11421 0B:66CD: 80 03        	bra	L461
 11422                        L459:
 11423 0B:66CF: A9 03 00     	lda	#$3
 11424                        L461:
 11425 0B:66D2: 85 19        	sta	<L447+fmt_1
 11426                        ;		//////k_debug_integer("find_volume:part-
                    fmt:", fmt);
 11427                        ;	} while (part == 0 && fmt >= 2 && ++i < 4);
 11428                        	.line	3739
 11429                        L10212:
 11430 0B:66D4: A5 44        	lda	<L446+part_0
 11431 0B:66D6: F0 03        	beq	L463
 11432 0B:66D8: 82 16 00     	brl	L462
 11433                        L463:
 11434 0B:66DB: A5 19        	lda	<L447+fmt_1
 11435 0B:66DD: C9 02 00     	cmp	#<$2
 11436 0B:66E0: B0 03        	bcs	L464
 11437 0B:66E2: 82 0C 00     	brl	L462
 11438                        L464:
 11439 0B:66E5: E6 1B        	inc	<L447+i_1
 11440 0B:66E7: A5 1B        	lda	<L447+i_1
 11441 0B:66E9: C9 04 00     	cmp	#<$4
 11442 0B:66EC: B0 03        	bcs	L465
 11443 0B:66EE: 82 55 FF     	brl	L10214
 11444                        L465:
 11445                        L462:
 11446                        L10213:
 11447                        ;
 11448                        ;	////k_debug_integer("find_volume:fmt2:", fmt);
 11449                        ;
 11450                        ;	return fmt;
 11451                        	.line	3743
 11452 0B:66F1: A5 19        	lda	<L447+fmt_1
 11453 0B:66F3: 82 29 FE     	brl	L453
 11454                        ;}
 11455                        	.line	3744
 11456                        	.endblock	3744
 11457             0000003C   L446	equ	60
 11458             00000019   L447	equ	25
 11459 0B:66F6:              	ends
  Fri Jul 16 2021 14:42                                                Page 225


 11460                        	efunc
 11461                        	.endfunc	3744,25,60
 11462                        	.line	3744
 11463                        ;
 11464                        ;/*-----------------------------------------------
                    ------------------------*/
 11465                        ;/* Determine logical drive number and mount the v
                    olume if needed         */
 11466                        ;/*-----------------------------------------------
                    ------------------------*/
 11467                        ;
 11468                        ;static FRESULT mount_volume( /* FR_OK(0): success
                    ful, !=0: an error occurred */
 11469                        ;const TCHAR** path, /* Pointer to pointer to the 
                    path name (drive number) */
 11470                        ;FATFS** rfs, /* Pointer to pointer to the found f
                    ilesystem object */
 11471                        ;BYTE mode /* !=0: Check write protection for writ
                    e access */
 11472                        ;)
 11473                        ;{
 11474                        	.line	3750
 11475                        	.line	3755
 11476                        	FFDOS
 11477                        	func
 11478                        	.function	3755
 11479                        ~~mount_volume:
 11480                        	longa	on
 11481                        	longi	on
 11482 0B:66F6: 3B           	tsc
 11483 0B:66F7: 38           	sec
 11484 0B:66F8: E9 33 00     	sbc	#L466
 11485 0B:66FB: 1B           	tcs
 11486 0B:66FC: 0B           	phd
 11487 0B:66FD: 5B           	tcd
 11488             00000004   path_0	set	4
 11489             00000008   rfs_0	set	8
 11490             0000000C   mode_0	set	12
 11491                        	.block	3755
 11492                        ;	int vol;
 11493                        ;	DSTATUS stat;
 11494                        ;	LBA_t bsect;
 11495                        ;	DWORD tsect, sysect, fasize, nclst, szbfat;
 11496                        ;	WORD nrsv;
 11497                        ;	FATFS *fs;
 11498                        ;	UINT fmt;
 11499                        ;
 11500                        ;	////k_debug_string("mount_volume...\r\n");
 11501                        ;
 11502                        ;	/* Get logical drive number */
 11503                        ;	*rfs = 0;
 11504             00000000   vol_1	set	0
 11505             00000002   stat_1	set	2
 11506             00000003   bsect_1	set	3
 11507             00000007   tsect_1	set	7
 11508             0000000B   sysect_1	set	11
 11509             0000000F   fasize_1	set	15
 11510             00000013   nclst_1	set	19
  Fri Jul 16 2021 14:42                                                Page 226


 11511             00000017   szbfat_1	set	23
 11512             0000001B   nrsv_1	set	27
 11513             0000001D   fs_1	set	29
 11514             00000021   fmt_1	set	33
 11515                        	.sym	vol,0,5,1,16
 11516                        	.sym	stat,2,14,1,8
 11517                        	.sym	bsect,3,18,1,32
 11518                        	.sym	tsect,7,18,1,32
 11519                        	.sym	sysect,11,18,1,32
 11520                        	.sym	fasize,15,18,1,32
 11521                        	.sym	nclst,19,18,1,32
 11522                        	.sym	szbfat,23,18,1,32
 11523                        	.sym	nrsv,27,5,1,16
 11524                        	.sym	fs,29,138,1,32,49
 11525                        	.sym	fmt,33,16,1,16
 11526                        	.sym	path,4,1166,6,32
 11527                        	.sym	rfs,8,1162,6,32,49
 11528                        	.sym	mode,12,14,6,8
 11529                        	.line	3767
 11530 0B:66FE: A9 00 00     	lda	#$0
 11531 0B:6701: 87 3B        	sta	[<L466+rfs_0]
 11532 0B:6703: A9 00 00     	lda	#$0
 11533 0B:6706: A0 02 00     	ldy	#$2
 11534 0B:6709: 97 3B        	sta	[<L466+rfs_0],Y
 11535                        ;	vol = get_ldnumber(path);
 11536                        	.line	3768
 11537 0B:670B: D4 39        	pei	<L466+path_0+2
 11538 0B:670D: D4 37        	pei	<L466+path_0
 11539 0B:670F: 22 E8 61 0B  	jsl	~~get_ldnumber
 11540 0B:6713: 85 11        	sta	<L467+vol_1
 11541                        ;
 11542                        ;	//////k_debug_integer("mount_volume:vol:", vol);
 11543                        ;
 11544                        ;	if (vol < 0)
 11545                        	.line	3772
 11546                        ;		return FR_INVALID_DRIVE;
 11547 0B:6715: A5 11        	lda	<L467+vol_1
 11548 0B:6717: 30 03        	bmi	L469
 11549 0B:6719: 82 15 00     	brl	L10215
 11550                        L469:
 11551                        	.line	3773
 11552 0B:671C: A9 0B 00     	lda	#$b
 11553                        L470:
 11554 0B:671F: A8           	tay
 11555 0B:6720: A5 35        	lda	<L466+2
 11556 0B:6722: 85 3F        	sta	<L466+2+10
 11557 0B:6724: A5 34        	lda	<L466+1
 11558 0B:6726: 85 3E        	sta	<L466+1+10
 11559 0B:6728: 2B           	pld
 11560 0B:6729: 3B           	tsc
 11561 0B:672A: 18           	clc
 11562 0B:672B: 69 3D 00     	adc	#L466+10
 11563 0B:672E: 1B           	tcs
 11564 0B:672F: 98           	tya
 11565 0B:6730: 6B           	rtl
 11566                        ;
 11567                        ;	/* Check if the filesystem object is valid or no
                    t */
  Fri Jul 16 2021 14:42                                                Page 227


 11568                        ;	fs = FatFs[vol]; /* Get pointer to the filesyste
                    m object */
 11569                        L10215:
 11570                        	.line	3776
 11571 0B:6731: A5 11        	lda	<L467+vol_1
 11572 0B:6733: 0A           	asl	A
 11573 0B:6734: 0A           	asl	A
 11574 0B:6735: 85 01        	sta	<R0
 11575 0B:6737: 18           	clc
 11576 0B:6738: A9 xx xx     	lda	#<~~FatFs
 11577 0B:673B: 65 01        	adc	<R0
 11578 0B:673D: 85 05        	sta	<R1
 11579 0B:673F: B2 05        	lda	(<R1)
 11580 0B:6741: 85 2E        	sta	<L467+fs_1
 11581 0B:6743: A0 02 00     	ldy	#$2
 11582 0B:6746: B1 05        	lda	(<R1),Y
 11583 0B:6748: 85 30        	sta	<L467+fs_1+2
 11584                        ;	if (!fs)
 11585                        	.line	3777
 11586                        ;		return FR_NOT_ENABLED; /* Is the filesys
                    tem object available? */
 11587 0B:674A: A5 2E        	lda	<L467+fs_1
 11588 0B:674C: 05 30        	ora	<L467+fs_1+2
 11589 0B:674E: F0 03        	beq	L471
 11590 0B:6750: 82 06 00     	brl	L10216
 11591                        L471:
 11592                        	.line	3778
 11593 0B:6753: A9 0C 00     	lda	#$c
 11594 0B:6756: 82 C6 FF     	brl	L470
 11595                        ;#if FF_FS_REENTRANT
 11596                        ;	if (!lock_fs(fs)) return FR_TIMEOUT; /* Lock the
                     volume */
 11597                        ;#endif
 11598                        ;	*rfs = fs; /* Return pointer to the filesystem o
                    bject */
 11599                        L10216:
 11600                        	.line	3782
 11601 0B:6759: A5 2E        	lda	<L467+fs_1
 11602 0B:675B: 87 3B        	sta	[<L466+rfs_0]
 11603 0B:675D: A5 30        	lda	<L467+fs_1+2
 11604 0B:675F: A0 02 00     	ldy	#$2
 11605 0B:6762: 97 3B        	sta	[<L466+rfs_0],Y
 11606                        ;
 11607                        ;	mode &= (BYTE) ~FA_READ; /* Desired access mode,
                     write access or not */
 11608                        	.line	3784
 11609 0B:6764: E2 20        	sep	#$20
 11610                        	longa	off
 11611 0B:6766: A9 01        	lda	#$1
 11612 0B:6768: 14 3F        	trb	<L466+mode_0
 11613 0B:676A: C2 20        	rep	#$20
 11614                        	longa	on
 11615                        ;	if (fs->fs_type != 0)
 11616                        	.line	3785
 11617                        ;	{ /* If the volume has been mounted */
 11618 0B:676C: A7 2E        	lda	[<L467+fs_1]
 11619 0B:676E: 29 FF 00     	and	#$ff
 11620 0B:6771: D0 03        	bne	L472
  Fri Jul 16 2021 14:42                                                Page 228


 11621 0B:6773: 82 40 00     	brl	L10217
 11622                        L472:
 11623                        	.line	3786
 11624                        ;		stat = disk_status(fs->pdrv);
 11625                        	.line	3787
 11626 0B:6776: A0 01 00     	ldy	#$1
 11627 0B:6779: B7 2E        	lda	[<L467+fs_1],Y
 11628 0B:677B: 48           	pha
 11629 0B:677C: 22 xx xx xx  	jsl	~~disk_status
 11630 0B:6780: E2 20        	sep	#$20
 11631                        	longa	off
 11632 0B:6782: 85 13        	sta	<L467+stat_1
 11633 0B:6784: C2 20        	rep	#$20
 11634                        	longa	on
 11635                        ;		if (!(stat & STA_NOINIT))
 11636                        	.line	3788
 11637                        ;		{ /* and the physical drive is kept init
                    ialized */
 11638 0B:6786: E2 20        	sep	#$20
 11639                        	longa	off
 11640 0B:6788: A5 13        	lda	<L467+stat_1
 11641 0B:678A: 29 01        	and	#<$1
 11642 0B:678C: C2 20        	rep	#$20
 11643                        	longa	on
 11644 0B:678E: F0 03        	beq	L473
 11645 0B:6790: 82 23 00     	brl	L10218
 11646                        L473:
 11647                        	.line	3789
 11648                        ;			if (!FF_FS_READONLY && mode && (
                    stat & STA_PROTECT))
 11649                        	.line	3790
 11650                        ;			{ /* Check write protection if n
                    eeded */
 11651 0B:6793: A5 3F        	lda	<L466+mode_0
 11652 0B:6795: 29 FF 00     	and	#$ff
 11653 0B:6798: D0 03        	bne	L474
 11654 0B:679A: 82 13 00     	brl	L10219
 11655                        L474:
 11656 0B:679D: E2 20        	sep	#$20
 11657                        	longa	off
 11658 0B:679F: A5 13        	lda	<L467+stat_1
 11659 0B:67A1: 29 04        	and	#<$4
 11660 0B:67A3: C2 20        	rep	#$20
 11661                        	longa	on
 11662 0B:67A5: D0 03        	bne	L475
 11663 0B:67A7: 82 06 00     	brl	L10219
 11664                        L475:
 11665                        	.line	3791
 11666                        ;				return FR_WRITE_PROTECTE
                    D;
 11667                        	.line	3792
 11668 0B:67AA: A9 0A 00     	lda	#$a
 11669 0B:67AD: 82 6F FF     	brl	L470
 11670                        ;			}
 11671                        	.line	3793
 11672                        ;
 11673                        ;			//////k_debug_integer("mount_vol
                    ume:FR_OK:", FR_OK);
  Fri Jul 16 2021 14:42                                                Page 229


 11674                        ;
 11675                        ;			return FR_OK; /* The filesystem 
                    object is already valid */
 11676                        L10219:
 11677                        	.line	3797
 11678 0B:67B0: A9 00 00     	lda	#$0
 11679 0B:67B3: 82 69 FF     	brl	L470
 11680                        ;		}
 11681                        	.line	3798
 11682                        ;	}
 11683                        L10218:
 11684                        	.line	3799
 11685                        ;
 11686                        ;	/* The filesystem object is not valid. */
 11687                        ;	/* Following code attempts to mount the volume. 
                    (find a FAT volume, analyze the BPB and initialize the files
                    ystem object) */
 11688                        ;
 11689                        ;	fs->fs_type = 0; /* Clear the filesystem object 
                    */
 11690                        L10217:
 11691                        	.line	3804
 11692 0B:67B6: E2 20        	sep	#$20
 11693                        	longa	off
 11694 0B:67B8: A9 00        	lda	#$0
 11695 0B:67BA: 87 2E        	sta	[<L467+fs_1]
 11696 0B:67BC: C2 20        	rep	#$20
 11697                        	longa	on
 11698                        ;	fs->pdrv = LD2PD(vol); /* Volume hosting physica
                    l drive */
 11699                        	.line	3805
 11700 0B:67BE: E2 20        	sep	#$20
 11701                        	longa	off
 11702 0B:67C0: A5 11        	lda	<L467+vol_1
 11703 0B:67C2: A0 01 00     	ldy	#$1
 11704 0B:67C5: 97 2E        	sta	[<L467+fs_1],Y
 11705 0B:67C7: C2 20        	rep	#$20
 11706                        	longa	on
 11707                        ;	stat = disk_initialize(fs->pdrv); /* Initialize 
                    the physical drive */
 11708                        	.line	3806
 11709 0B:67C9: A0 01 00     	ldy	#$1
 11710 0B:67CC: B7 2E        	lda	[<L467+fs_1],Y
 11711 0B:67CE: 48           	pha
 11712 0B:67CF: 22 xx xx xx  	jsl	~~disk_initialize
 11713 0B:67D3: E2 20        	sep	#$20
 11714                        	longa	off
 11715 0B:67D5: 85 13        	sta	<L467+stat_1
 11716 0B:67D7: C2 20        	rep	#$20
 11717                        	longa	on
 11718                        ;	if (stat & STA_NOINIT)
 11719                        	.line	3807
 11720                        ;	{ /* Check if the initialization succeeded */
 11721 0B:67D9: E2 20        	sep	#$20
 11722                        	longa	off
 11723 0B:67DB: A5 13        	lda	<L467+stat_1
 11724 0B:67DD: 29 01        	and	#<$1
 11725 0B:67DF: C2 20        	rep	#$20
  Fri Jul 16 2021 14:42                                                Page 230


 11726                        	longa	on
 11727 0B:67E1: D0 03        	bne	L476
 11728 0B:67E3: 82 06 00     	brl	L10220
 11729                        L476:
 11730                        	.line	3808
 11731                        ;		return FR_NOT_READY; /* Failed to initia
                    lize due to no medium or hard error */
 11732                        	.line	3809
 11733 0B:67E6: A9 03 00     	lda	#$3
 11734 0B:67E9: 82 33 FF     	brl	L470
 11735                        ;	}
 11736                        	.line	3810
 11737                        ;	if (!FF_FS_READONLY && mode && (stat & STA_PROTE
                    CT))
 11738                        L10220:
 11739                        	.line	3811
 11740                        ;	{ /* Check disk write protection if needed */
 11741 0B:67EC: A5 3F        	lda	<L466+mode_0
 11742 0B:67EE: 29 FF 00     	and	#$ff
 11743 0B:67F1: D0 03        	bne	L477
 11744 0B:67F3: 82 13 00     	brl	L10221
 11745                        L477:
 11746 0B:67F6: E2 20        	sep	#$20
 11747                        	longa	off
 11748 0B:67F8: A5 13        	lda	<L467+stat_1
 11749 0B:67FA: 29 04        	and	#<$4
 11750 0B:67FC: C2 20        	rep	#$20
 11751                        	longa	on
 11752 0B:67FE: D0 03        	bne	L478
 11753 0B:6800: 82 06 00     	brl	L10221
 11754                        L478:
 11755                        	.line	3812
 11756                        ;		return FR_WRITE_PROTECTED;
 11757                        	.line	3813
 11758 0B:6803: A9 0A 00     	lda	#$a
 11759 0B:6806: 82 16 FF     	brl	L470
 11760                        ;	}
 11761                        	.line	3814
 11762                        ;#if FF_MAX_SS != FF_MIN_SS			
                    	/* Get sector size (multiple sector size cfg only) */
 11763                        ;	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs
                    )) != RES_OK) return FR_DISK_ERR;
 11764                        ;	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || 
                    (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 11765                        ;#endif
 11766                        ;
 11767                        ;	/* Find an FAT volume on the drive */
 11768                        ;	fmt = find_volume(fs, LD2PT(vol));
 11769                        L10221:
 11770                        	.line	3821
 11771 0B:6809: F4 00 00     	pea	#<$0
 11772 0B:680C: D4 30        	pei	<L467+fs_1+2
 11773 0B:680E: D4 2E        	pei	<L467+fs_1
 11774 0B:6810: 22 EA 64 0B  	jsl	~~find_volume
 11775 0B:6814: 85 32        	sta	<L467+fmt_1
 11776                        ;
 11777                        ;	//////k_debug_integer("mount_volume:fmt:", fmt);
 11778                        ;	////k_debug_integer("mount_volume::fmt:",fmt);
  Fri Jul 16 2021 14:42                                                Page 231


 11779                        ;
 11780                        ;	if (fmt == 4)
 11781                        	.line	3826
 11782                        ;		return FR_DISK_ERR; /* An error occured 
                    in the disk I/O layer */
 11783 0B:6816: A5 32        	lda	<L467+fmt_1
 11784 0B:6818: C9 04 00     	cmp	#<$4
 11785 0B:681B: F0 03        	beq	L479
 11786 0B:681D: 82 06 00     	brl	L10222
 11787                        L479:
 11788                        	.line	3827
 11789 0B:6820: A9 01 00     	lda	#$1
 11790 0B:6823: 82 F9 FE     	brl	L470
 11791                        ;	//if (fmt >= 2) return FR_NO_FILESYSTEM;	
                    /* No FAT volume is found */
 11792                        ;	if (fmt == 2)
 11793                        L10222:
 11794                        	.line	3829
 11795                        ;		return FR_NO_FILESYSTEM; /* No FAT volum
                    e is found */
 11796 0B:6826: A5 32        	lda	<L467+fmt_1
 11797 0B:6828: C9 02 00     	cmp	#<$2
 11798 0B:682B: F0 03        	beq	L480
 11799 0B:682D: 82 06 00     	brl	L10223
 11800                        L480:
 11801                        	.line	3830
 11802 0B:6830: A9 0D 00     	lda	#$d
 11803 0B:6833: 82 E9 FE     	brl	L470
 11804                        ;	bsect = fs->winsect; /* Volume location */
 11805                        L10223:
 11806                        	.line	3831
 11807 0B:6836: A0 2B 00     	ldy	#$2b
 11808 0B:6839: B7 2E        	lda	[<L467+fs_1],Y
 11809 0B:683B: 85 14        	sta	<L467+bsect_1
 11810 0B:683D: A0 2D 00     	ldy	#$2d
 11811 0B:6840: B7 2E        	lda	[<L467+fs_1],Y
 11812 0B:6842: 85 16        	sta	<L467+bsect_1+2
 11813                        ;
 11814                        ;	//////k_debug_long("mount_volume:bsect:", bsect)
                    ;
 11815                        ;	/* An FAT volume is found (bsect). Following cod
                    e initializes the filesystem object */
 11816                        ;
 11817                        ;#if FF_FS_EXFAT
 11818                        ;	if (fmt == 1)
 11819                        ;	{
 11820                        ;		QWORD maxlba;
 11821                        ;		DWORD so, cv, bcl, i;
 11822                        ;
 11823                        ;		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx 
                    + 53 && fs->win[i] == 0; i++); /* Check zero filler */
 11824                        ;		if (i < BPB_ZeroedEx + 53) return FR_NO_
                    FILESYSTEM;
 11825                        ;
 11826                        ;		if (ld_word(FADDR(BPB_FSVerEx)) != 0x100
                    ) return FR_NO_FILESYSTEM; /* Check exFAT version (must be v
                    ersion 1.0) */
 11827                        ;
  Fri Jul 16 2021 14:42                                                Page 232


 11828                        ;		if (1 << fs->win[BPB_BytsPerSecEx] != SS
                    (fs))
 11829                        ;		{ /* (BPB_BytsPerSecEx must be equal to 
                    the physical sector size) */
 11830                        ;			return FR_NO_FILESYSTEM;
 11831                        ;		}
 11832                        ;
 11833                        ;		maxlba = ld_qword(FADDR(BPB_TotSecEx)) +
                     bsect; /* Last LBA + 1 of the volume */
 11834                        ;		if (!FF_LBA64 && maxlba >= 0x100000000) 
                    return FR_NO_FILESYSTEM; /* (It cannot be handled in 32-bit 
                    LBA) */
 11835                        ;
 11836                        ;		fs->fsize = ld_dword(fs->win[BPB_FatSzEx
                    ]); /* Number of sectors per FAT */
 11837                        ;
 11838                        ;		fs->n_fats = fs->win[BPB_NumFATsEx]; /* 
                    Number of FATs */
 11839                        ;		if (fs->n_fats != 1) return FR_NO_FILESY
                    STEM; /* (Supports only 1 FAT) */
 11840                        ;
 11841                        ;		fs->csize = 1 << fs->win[BPB_SecPerClusE
                    x]; /* Cluster size */
 11842                        ;		if (fs->csize == 0) return FR_NO_FILESYS
                    TEM; /* (Must be 1..32768) */
 11843                        ;
 11844                        ;		nclst = ld_dword(fs->win + BPB_NumClusEx
                    ); /* Number of clusters */
 11845                        ;		if (nclst > MAX_EXFAT) return FR_NO_FILE
                    SYSTEM; /* (Too many clusters) */
 11846                        ;		fs->n_fatent = nclst + 2;
 11847                        ;
 11848                        ;		/* Boundaries and Limits */
 11849                        ;		fs->volbase = bsect;
 11850                        ;		fs->database = bsect + ld_dword(fs->win 
                    + BPB_DataOfsEx);
 11851                        ;		fs->fatbase = bsect + ld_dword(fs->win +
                     BPB_FatOfsEx);
 11852                        ;		if (maxlba < (QWORD)fs->database + nclst
                     * fs->csize) return FR_NO_FILESYSTEM; /* (Volume size must 
                    not be smaller than the size requiered) */
 11853                        ;		fs->dirbase = ld_dword(fs->win + BPB_Roo
                    tClusEx);
 11854                        ;
 11855                        ;		/* Get bitmap location and check if it i
                    s contiguous (implementation assumption) */
 11856                        ;		so = i = 0;
 11857                        ;		for (;;)
 11858                        ;		{ /* Find the bitmap entry in the root d
                    irectory (in only first cluster) */
 11859                        ;			if (i == 0)
 11860                        ;			{
 11861                        ;				if (so >= fs->csize) ret
                    urn FR_NO_FILESYSTEM; /* Not found? */
 11862                        ;				if (move_window(fs, clst
                    2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK
                    _ERR;
 11863                        ;				so++;
  Fri Jul 16 2021 14:42                                                Page 233


 11864                        ;			}
 11865                        ;			if (fs->win[i] == ET_BITMAP) bre
                    ak; /* Is it a bitmap entry? */
 11866                        ;			i = (i + SZDIRE) % SS(fs); /* Ne
                    xt entry */
 11867                        ;		}
 11868                        ;		bcl = ld_dword(fs->win + i + 20); /* Bit
                    map cluster */
 11869                        ;		if (bcl < 2 || bcl >= fs->n_fatent) retu
                    rn FR_NO_FILESYSTEM;
 11870                        ;		fs->bitbase = fs->database + fs->csize *
                     (bcl - 2); /* Bitmap sector */
 11871                        ;		for (;;)
 11872                        ;		{ /* Check if bitmap is contiguous */
 11873                        ;			if (move_window(fs, fs->fatbase 
                    + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 11874                        ;			cv = ld_dword(fs->win + bcl % (S
                    S(fs) / 4) * 4);
 11875                        ;			if (cv == 0xFFFFFFFF) break; /* 
                    Last link? */
 11876                        ;			if (cv != ++bcl) return FR_NO_FI
                    LESYSTEM; /* Fragmented? */
 11877                        ;		}
 11878                        ;
 11879                        ;#if !FF_FS_READONLY
 11880                        ;		fs->last_clst = fs->free_clst = 0xFFFFFF
                    FF; /* Initialize cluster allocation information */
 11881                        ;#endif
 11882                        ;		fmt = FS_EXFAT; /* FAT sub-type */
 11883                        ;	}
 11884                        ;	else
 11885                        ;#endif	/* FF_FS_EXFAT */
 11886                        ;	{
 11887                        	.line	3905
 11888                        ;
 11889                        ;		//////k_debug_pointer("mount_volume:fs->
                    win:", fs->win);
 11890                        ;		////k_debug_long( "mount_volume:BPB_Byts
                    PerSec:",(long)BPB_BytsPerSec);
 11891                        ;		////k_debug_integer("mount_volume:SS(fs)
                    :", SS(fs));
 11892                        ;		////k_debug_integer("mount_volume:fs->wi
                    n + BPB_BytsPerSec:",ld_word(FADDR(BPB_BytsPerSec)));
 11893                        ;
 11894                        ;
 11895                        ;		if (ld_word(FADDR(BPB_BytsPerSec)) != SS
                    (fs))
 11896                        	.line	3913
 11897                        ;			return FR_NO_FILESYSTEM; /* (BPB
                    _BytsPerSec must be equal to the physical sector size) */
 11898 0B:6844: 18           	clc
 11899 0B:6845: A9 3A 00     	lda	#$3a
 11900 0B:6848: 65 2E        	adc	<L467+fs_1
 11901 0B:684A: 85 01        	sta	<R0
 11902 0B:684C: A9 00 00     	lda	#$0
 11903 0B:684F: 65 30        	adc	<L467+fs_1+2
 11904 0B:6851: 85 03        	sta	<R0+2
 11905 0B:6853: D4 03        	pei	<R0+2
  Fri Jul 16 2021 14:42                                                Page 234


 11906 0B:6855: D4 01        	pei	<R0
 11907 0B:6857: 22 80 3F 0B  	jsl	~~ld_word
 11908 0B:685B: 85 05        	sta	<R1
 11909 0B:685D: A5 05        	lda	<R1
 11910 0B:685F: C9 00 02     	cmp	#<$200
 11911 0B:6862: D0 03        	bne	L481
 11912 0B:6864: 82 06 00     	brl	L10224
 11913                        L481:
 11914                        	.line	3914
 11915 0B:6867: A9 0D 00     	lda	#$d
 11916 0B:686A: 82 B2 FE     	brl	L470
 11917                        ;
 11918                        ;		fasize = ld_word(FADDR(BPB_FATSz16)); /*
                     Number of sectors per FAT */
 11919                        L10224:
 11920                        	.line	3916
 11921 0B:686D: 18           	clc
 11922 0B:686E: A9 45 00     	lda	#$45
 11923 0B:6871: 65 2E        	adc	<L467+fs_1
 11924 0B:6873: 85 01        	sta	<R0
 11925 0B:6875: A9 00 00     	lda	#$0
 11926 0B:6878: 65 30        	adc	<L467+fs_1+2
 11927 0B:687A: 85 03        	sta	<R0+2
 11928 0B:687C: D4 03        	pei	<R0+2
 11929 0B:687E: D4 01        	pei	<R0
 11930 0B:6880: 22 80 3F 0B  	jsl	~~ld_word
 11931 0B:6884: 85 05        	sta	<R1
 11932 0B:6886: A0 00 00     	ldy	#$0
 11933 0B:6889: A5 05        	lda	<R1
 11934 0B:688B: 10 01        	bpl	L482
 11935 0B:688D: 88           	dey
 11936                        L482:
 11937 0B:688E: 85 20        	sta	<L467+fasize_1
 11938 0B:6890: 84 22        	sty	<L467+fasize_1+2
 11939                        ;		if (fasize == 0)
 11940                        	.line	3917
 11941                        ;			fasize = ld_dword(&(fs->win[BPB_
                    FATSz32]));
 11942 0B:6892: A5 20        	lda	<L467+fasize_1
 11943 0B:6894: 05 22        	ora	<L467+fasize_1+2
 11944 0B:6896: F0 03        	beq	L483
 11945 0B:6898: 82 1B 00     	brl	L10225
 11946                        L483:
 11947                        	.line	3918
 11948 0B:689B: 18           	clc
 11949 0B:689C: A9 53 00     	lda	#$53
 11950 0B:689F: 65 2E        	adc	<L467+fs_1
 11951 0B:68A1: 85 01        	sta	<R0
 11952 0B:68A3: A9 00 00     	lda	#$0
 11953 0B:68A6: 65 30        	adc	<L467+fs_1+2
 11954 0B:68A8: 85 03        	sta	<R0+2
 11955 0B:68AA: D4 03        	pei	<R0+2
 11956 0B:68AC: D4 01        	pei	<R0
 11957 0B:68AE: 22 BB 3F 0B  	jsl	~~ld_dword
 11958 0B:68B2: 85 20        	sta	<L467+fasize_1
 11959 0B:68B4: 86 22        	stx	<L467+fasize_1+2
 11960                        ;		fs->fsize = fasize;
 11961                        L10225:
  Fri Jul 16 2021 14:42                                                Page 235


 11962                        	.line	3919
 11963 0B:68B6: A5 20        	lda	<L467+fasize_1
 11964 0B:68B8: A0 17 00     	ldy	#$17
 11965 0B:68BB: 97 2E        	sta	[<L467+fs_1],Y
 11966 0B:68BD: A5 22        	lda	<L467+fasize_1+2
 11967 0B:68BF: A0 19 00     	ldy	#$19
 11968 0B:68C2: 97 2E        	sta	[<L467+fs_1],Y
 11969                        ;
 11970                        ;		fs->n_fats = fs->win[BPB_NumFATs]; /* Nu
                    mber of FATs */
 11971                        	.line	3921
 11972 0B:68C4: E2 20        	sep	#$20
 11973                        	longa	off
 11974 0B:68C6: A0 3F 00     	ldy	#$3f
 11975 0B:68C9: B7 2E        	lda	[<L467+fs_1],Y
 11976 0B:68CB: A0 02 00     	ldy	#$2
 11977 0B:68CE: 97 2E        	sta	[<L467+fs_1],Y
 11978 0B:68D0: C2 20        	rep	#$20
 11979                        	longa	on
 11980                        ;
 11981                        ;		////k_debug_long("mount_volume:n_fats:",
                     fs->n_fats);
 11982                        ;
 11983                        ;		if (fs->n_fats != 1 && fs->n_fats != 2)
 11984                        	.line	3925
 11985                        ;			return FR_NO_FILESYSTEM; /* (Mus
                    t be 1 or 2) */
 11986 0B:68D2: E2 20        	sep	#$20
 11987                        	longa	off
 11988 0B:68D4: A0 02 00     	ldy	#$2
 11989 0B:68D7: B7 2E        	lda	[<L467+fs_1],Y
 11990 0B:68D9: C9 01        	cmp	#<$1
 11991 0B:68DB: C2 20        	rep	#$20
 11992                        	longa	on
 11993 0B:68DD: D0 03        	bne	L484
 11994 0B:68DF: 82 16 00     	brl	L10226
 11995                        L484:
 11996 0B:68E2: E2 20        	sep	#$20
 11997                        	longa	off
 11998 0B:68E4: A0 02 00     	ldy	#$2
 11999 0B:68E7: B7 2E        	lda	[<L467+fs_1],Y
 12000 0B:68E9: C9 02        	cmp	#<$2
 12001 0B:68EB: C2 20        	rep	#$20
 12002                        	longa	on
 12003 0B:68ED: D0 03        	bne	L485
 12004 0B:68EF: 82 06 00     	brl	L10226
 12005                        L485:
 12006                        	.line	3926
 12007 0B:68F2: A9 0D 00     	lda	#$d
 12008 0B:68F5: 82 27 FE     	brl	L470
 12009                        ;		fasize *= fs->n_fats; /* Number of secto
                    rs for FAT area */
 12010                        L10226:
 12011                        	.line	3927
 12012 0B:68F8: A0 02 00     	ldy	#$2
 12013 0B:68FB: B7 2E        	lda	[<L467+fs_1],Y
 12014 0B:68FD: 29 FF 00     	and	#$ff
 12015 0B:6900: 85 01        	sta	<R0
  Fri Jul 16 2021 14:42                                                Page 236


 12016 0B:6902: 64 03        	stz	<R0+2
 12017 0B:6904: D4 22        	pei	<L467+fasize_1+2
 12018 0B:6906: D4 20        	pei	<L467+fasize_1
 12019 0B:6908: D4 03        	pei	<R0+2
 12020 0B:690A: D4 01        	pei	<R0
 12021                        	xref	~~~lmul
 12022 0B:690C: 22 xx xx xx  	jsl	~~~lmul
 12023 0B:6910: 85 20        	sta	<L467+fasize_1
 12024 0B:6912: 86 22        	stx	<L467+fasize_1+2
 12025                        ;
 12026                        ;		fs->csize = fs->win[BPB_SecPerClus]; /* 
                    Cluster size */
 12027                        	.line	3929
 12028 0B:6914: A0 3C 00     	ldy	#$3c
 12029 0B:6917: B7 2E        	lda	[<L467+fs_1],Y
 12030 0B:6919: 29 FF 00     	and	#$ff
 12031 0B:691C: A0 09 00     	ldy	#$9
 12032 0B:691F: 97 2E        	sta	[<L467+fs_1],Y
 12033                        ;		if (fs->csize == 0 || (fs->csize & (fs->
                    csize - 1)))
 12034                        	.line	3930
 12035                        ;			return FR_NO_FILESYSTEM; /* (Mus
                    t be power of 2) */
 12036 0B:6921: A0 09 00     	ldy	#$9
 12037 0B:6924: B7 2E        	lda	[<L467+fs_1],Y
 12038 0B:6926: D0 03        	bne	L487
 12039 0B:6928: 82 17 00     	brl	L486
 12040                        L487:
 12041 0B:692B: 18           	clc
 12042 0B:692C: A9 FF FF     	lda	#$ffff
 12043 0B:692F: A0 09 00     	ldy	#$9
 12044 0B:6932: 77 2E        	adc	[<L467+fs_1],Y
 12045 0B:6934: 85 01        	sta	<R0
 12046 0B:6936: A0 09 00     	ldy	#$9
 12047 0B:6939: B7 2E        	lda	[<L467+fs_1],Y
 12048 0B:693B: 25 01        	and	<R0
 12049 0B:693D: D0 03        	bne	L488
 12050 0B:693F: 82 06 00     	brl	L10227
 12051                        L488:
 12052                        L486:
 12053                        	.line	3931
 12054 0B:6942: A9 0D 00     	lda	#$d
 12055 0B:6945: 82 D7 FD     	brl	L470
 12056                        ;
 12057                        ;		fs->n_rootdir = ld_word(FADDR(BPB_RootEn
                    tCnt)); /* Number of root directory entries */
 12058                        L10227:
 12059                        	.line	3933
 12060 0B:6948: 18           	clc
 12061 0B:6949: A9 40 00     	lda	#$40
 12062 0B:694C: 65 2E        	adc	<L467+fs_1
 12063 0B:694E: 85 01        	sta	<R0
 12064 0B:6950: A9 00 00     	lda	#$0
 12065 0B:6953: 65 30        	adc	<L467+fs_1+2
 12066 0B:6955: 85 03        	sta	<R0+2
 12067 0B:6957: D4 03        	pei	<R0+2
 12068 0B:6959: D4 01        	pei	<R0
 12069 0B:695B: 22 80 3F 0B  	jsl	~~ld_word
  Fri Jul 16 2021 14:42                                                Page 237


 12070 0B:695F: A0 07 00     	ldy	#$7
 12071 0B:6962: 97 2E        	sta	[<L467+fs_1],Y
 12072                        ;		if (fs->n_rootdir % (SS(fs) / SZDIRE))
 12073                        	.line	3934
 12074                        ;			return FR_NO_FILESYSTEM; /* (Mus
                    t be sector aligned) */
 12075 0B:6964: A0 07 00     	ldy	#$7
 12076 0B:6967: B7 2E        	lda	[<L467+fs_1],Y
 12077 0B:6969: 29 0F 00     	and	#<$f
 12078 0B:696C: D0 03        	bne	L489
 12079 0B:696E: 82 06 00     	brl	L10228
 12080                        L489:
 12081                        	.line	3935
 12082 0B:6971: A9 0D 00     	lda	#$d
 12083 0B:6974: 82 A8 FD     	brl	L470
 12084                        ;
 12085                        ;		tsect = ld_word(FADDR(BPB_TotSec16)); /*
                     Number of sectors on the volume */
 12086                        L10228:
 12087                        	.line	3937
 12088 0B:6977: 18           	clc
 12089 0B:6978: A9 42 00     	lda	#$42
 12090 0B:697B: 65 2E        	adc	<L467+fs_1
 12091 0B:697D: 85 01        	sta	<R0
 12092 0B:697F: A9 00 00     	lda	#$0
 12093 0B:6982: 65 30        	adc	<L467+fs_1+2
 12094 0B:6984: 85 03        	sta	<R0+2
 12095 0B:6986: D4 03        	pei	<R0+2
 12096 0B:6988: D4 01        	pei	<R0
 12097 0B:698A: 22 80 3F 0B  	jsl	~~ld_word
 12098 0B:698E: 85 05        	sta	<R1
 12099 0B:6990: A0 00 00     	ldy	#$0
 12100 0B:6993: A5 05        	lda	<R1
 12101 0B:6995: 10 01        	bpl	L490
 12102 0B:6997: 88           	dey
 12103                        L490:
 12104 0B:6998: 85 18        	sta	<L467+tsect_1
 12105 0B:699A: 84 1A        	sty	<L467+tsect_1+2
 12106                        ;		if (tsect == 0)
 12107                        	.line	3938
 12108                        ;			tsect = ld_dword(fs->win + BPB_T
                    otSec32);
 12109 0B:699C: A5 18        	lda	<L467+tsect_1
 12110 0B:699E: 05 1A        	ora	<L467+tsect_1+2
 12111 0B:69A0: F0 03        	beq	L491
 12112 0B:69A2: 82 1B 00     	brl	L10229
 12113                        L491:
 12114                        	.line	3939
 12115 0B:69A5: 18           	clc
 12116 0B:69A6: A9 4F 00     	lda	#$4f
 12117 0B:69A9: 65 2E        	adc	<L467+fs_1
 12118 0B:69AB: 85 01        	sta	<R0
 12119 0B:69AD: A9 00 00     	lda	#$0
 12120 0B:69B0: 65 30        	adc	<L467+fs_1+2
 12121 0B:69B2: 85 03        	sta	<R0+2
 12122 0B:69B4: D4 03        	pei	<R0+2
 12123 0B:69B6: D4 01        	pei	<R0
 12124 0B:69B8: 22 BB 3F 0B  	jsl	~~ld_dword
  Fri Jul 16 2021 14:42                                                Page 238


 12125 0B:69BC: 85 18        	sta	<L467+tsect_1
 12126 0B:69BE: 86 1A        	stx	<L467+tsect_1+2
 12127                        ;
 12128                        ;		nrsv = ld_word(FADDR(BPB_RsvdSecCnt)); /
                    * Number of reserved sectors */
 12129                        L10229:
 12130                        	.line	3941
 12131 0B:69C0: 18           	clc
 12132 0B:69C1: A9 3D 00     	lda	#$3d
 12133 0B:69C4: 65 2E        	adc	<L467+fs_1
 12134 0B:69C6: 85 01        	sta	<R0
 12135 0B:69C8: A9 00 00     	lda	#$0
 12136 0B:69CB: 65 30        	adc	<L467+fs_1+2
 12137 0B:69CD: 85 03        	sta	<R0+2
 12138 0B:69CF: D4 03        	pei	<R0+2
 12139 0B:69D1: D4 01        	pei	<R0
 12140 0B:69D3: 22 80 3F 0B  	jsl	~~ld_word
 12141 0B:69D7: 85 2C        	sta	<L467+nrsv_1
 12142                        ;		if (nrsv == 0)
 12143                        	.line	3942
 12144                        ;			return FR_NO_FILESYSTEM; /* (Mus
                    t not be 0) */
 12145 0B:69D9: A5 2C        	lda	<L467+nrsv_1
 12146 0B:69DB: F0 03        	beq	L492
 12147 0B:69DD: 82 06 00     	brl	L10230
 12148                        L492:
 12149                        	.line	3943
 12150 0B:69E0: A9 0D 00     	lda	#$d
 12151 0B:69E3: 82 39 FD     	brl	L470
 12152                        ;
 12153                        ;		/* Determine the FAT sub type */
 12154                        ;		sysect = nrsv + fasize + fs->n_rootdir /
                     (SS(fs) / SZDIRE); /* RSV + FAT + DIR */
 12155                        L10230:
 12156                        	.line	3946
 12157 0B:69E6: A0 07 00     	ldy	#$7
 12158 0B:69E9: B7 2E        	lda	[<L467+fs_1],Y
 12159 0B:69EB: 4A           	lsr	A
 12160 0B:69EC: 4A           	lsr	A
 12161 0B:69ED: 4A           	lsr	A
 12162 0B:69EE: 4A           	lsr	A
 12163 0B:69EF: 85 01        	sta	<R0
 12164 0B:69F1: A5 01        	lda	<R0
 12165 0B:69F3: 85 01        	sta	<R0
 12166 0B:69F5: 64 03        	stz	<R0+2
 12167 0B:69F7: A0 00 00     	ldy	#$0
 12168 0B:69FA: A5 2C        	lda	<L467+nrsv_1
 12169 0B:69FC: 10 01        	bpl	L493
 12170 0B:69FE: 88           	dey
 12171                        L493:
 12172 0B:69FF: 85 05        	sta	<R1
 12173 0B:6A01: 84 07        	sty	<R1+2
 12174 0B:6A03: 18           	clc
 12175 0B:6A04: A5 05        	lda	<R1
 12176 0B:6A06: 65 01        	adc	<R0
 12177 0B:6A08: 85 09        	sta	<R2
 12178 0B:6A0A: A5 07        	lda	<R1+2
 12179 0B:6A0C: 65 03        	adc	<R0+2
  Fri Jul 16 2021 14:42                                                Page 239


 12180 0B:6A0E: 85 0B        	sta	<R2+2
 12181 0B:6A10: 18           	clc
 12182 0B:6A11: A5 09        	lda	<R2
 12183 0B:6A13: 65 20        	adc	<L467+fasize_1
 12184 0B:6A15: 85 1C        	sta	<L467+sysect_1
 12185 0B:6A17: A5 0B        	lda	<R2+2
 12186 0B:6A19: 65 22        	adc	<L467+fasize_1+2
 12187 0B:6A1B: 85 1E        	sta	<L467+sysect_1+2
 12188                        ;		if (tsect < sysect)
 12189                        	.line	3947
 12190                        ;			return FR_NO_FILESYSTEM; /* (Inv
                    alid volume size) */
 12191 0B:6A1D: A5 18        	lda	<L467+tsect_1
 12192 0B:6A1F: C5 1C        	cmp	<L467+sysect_1
 12193 0B:6A21: A5 1A        	lda	<L467+tsect_1+2
 12194 0B:6A23: E5 1E        	sbc	<L467+sysect_1+2
 12195 0B:6A25: 90 03        	bcc	L494
 12196 0B:6A27: 82 06 00     	brl	L10231
 12197                        L494:
 12198                        	.line	3948
 12199 0B:6A2A: A9 0D 00     	lda	#$d
 12200 0B:6A2D: 82 EF FC     	brl	L470
 12201                        ;		nclst = (tsect - sysect) / fs->csize; /*
                     Number of clusters */
 12202                        L10231:
 12203                        	.line	3949
 12204 0B:6A30: A0 00 00     	ldy	#$0
 12205 0B:6A33: 5A           	phy
 12206 0B:6A34: A0 09 00     	ldy	#$9
 12207 0B:6A37: B7 2E        	lda	[<L467+fs_1],Y
 12208 0B:6A39: 7A           	ply
 12209 0B:6A3A: 2A           	rol	A
 12210 0B:6A3B: 6A           	ror	A
 12211 0B:6A3C: 10 01        	bpl	L495
 12212 0B:6A3E: 88           	dey
 12213                        L495:
 12214 0B:6A3F: 85 01        	sta	<R0
 12215 0B:6A41: 84 03        	sty	<R0+2
 12216 0B:6A43: 38           	sec
 12217 0B:6A44: A5 18        	lda	<L467+tsect_1
 12218 0B:6A46: E5 1C        	sbc	<L467+sysect_1
 12219 0B:6A48: 85 05        	sta	<R1
 12220 0B:6A4A: A5 1A        	lda	<L467+tsect_1+2
 12221 0B:6A4C: E5 1E        	sbc	<L467+sysect_1+2
 12222 0B:6A4E: 85 07        	sta	<R1+2
 12223 0B:6A50: D4 03        	pei	<R0+2
 12224 0B:6A52: D4 01        	pei	<R0
 12225 0B:6A54: D4 07        	pei	<R1+2
 12226 0B:6A56: D4 05        	pei	<R1
 12227                        	xref	~~~ludv
 12228 0B:6A58: 22 xx xx xx  	jsl	~~~ludv
 12229 0B:6A5C: 85 24        	sta	<L467+nclst_1
 12230 0B:6A5E: 86 26        	stx	<L467+nclst_1+2
 12231                        ;		if (nclst == 0)
 12232                        	.line	3950
 12233                        ;			return FR_NO_FILESYSTEM; /* (Inv
                    alid volume size) */
 12234 0B:6A60: A5 24        	lda	<L467+nclst_1
  Fri Jul 16 2021 14:42                                                Page 240


 12235 0B:6A62: 05 26        	ora	<L467+nclst_1+2
 12236 0B:6A64: F0 03        	beq	L496
 12237 0B:6A66: 82 06 00     	brl	L10232
 12238                        L496:
 12239                        	.line	3951
 12240 0B:6A69: A9 0D 00     	lda	#$d
 12241 0B:6A6C: 82 B0 FC     	brl	L470
 12242                        ;		fmt = 0;
 12243                        L10232:
 12244                        	.line	3952
 12245 0B:6A6F: 64 32        	stz	<L467+fmt_1
 12246                        ;		if (nclst <= MAX_FAT32)
 12247                        	.line	3953
 12248                        ;			fmt = FS_FAT32;
 12249 0B:6A71: A9 F5 FF     	lda	#$fff5
 12250 0B:6A74: C5 24        	cmp	<L467+nclst_1
 12251 0B:6A76: A9 FF 0F     	lda	#$fff
 12252 0B:6A79: E5 26        	sbc	<L467+nclst_1+2
 12253 0B:6A7B: B0 03        	bcs	L497
 12254 0B:6A7D: 82 05 00     	brl	L10233
 12255                        L497:
 12256                        	.line	3954
 12257 0B:6A80: A9 03 00     	lda	#$3
 12258 0B:6A83: 85 32        	sta	<L467+fmt_1
 12259                        ;		if (nclst <= MAX_FAT16)
 12260                        L10233:
 12261                        	.line	3955
 12262                        ;			fmt = FS_FAT16;
 12263 0B:6A85: A9 F5 FF     	lda	#$fff5
 12264 0B:6A88: C5 24        	cmp	<L467+nclst_1
 12265 0B:6A8A: A9 00 00     	lda	#$0
 12266 0B:6A8D: E5 26        	sbc	<L467+nclst_1+2
 12267 0B:6A8F: B0 03        	bcs	L498
 12268 0B:6A91: 82 05 00     	brl	L10234
 12269                        L498:
 12270                        	.line	3956
 12271 0B:6A94: A9 02 00     	lda	#$2
 12272 0B:6A97: 85 32        	sta	<L467+fmt_1
 12273                        ;		if (nclst <= MAX_FAT12)
 12274                        L10234:
 12275                        	.line	3957
 12276                        ;			fmt = FS_FAT12;
 12277 0B:6A99: A9 F5 0F     	lda	#$ff5
 12278 0B:6A9C: C5 24        	cmp	<L467+nclst_1
 12279 0B:6A9E: A9 00 00     	lda	#$0
 12280 0B:6AA1: E5 26        	sbc	<L467+nclst_1+2
 12281 0B:6AA3: B0 03        	bcs	L499
 12282 0B:6AA5: 82 05 00     	brl	L10235
 12283                        L499:
 12284                        	.line	3958
 12285 0B:6AA8: A9 01 00     	lda	#$1
 12286 0B:6AAB: 85 32        	sta	<L467+fmt_1
 12287                        ;		if (fmt == 0)
 12288                        L10235:
 12289                        	.line	3959
 12290                        ;			return FR_NO_FILESYSTEM;
 12291 0B:6AAD: A5 32        	lda	<L467+fmt_1
 12292 0B:6AAF: F0 03        	beq	L500
  Fri Jul 16 2021 14:42                                                Page 241


 12293 0B:6AB1: 82 06 00     	brl	L10236
 12294                        L500:
 12295                        	.line	3960
 12296 0B:6AB4: A9 0D 00     	lda	#$d
 12297 0B:6AB7: 82 65 FC     	brl	L470
 12298                        ;
 12299                        ;		/* Boundaries and Limits */
 12300                        ;		fs->n_fatent = nclst + 2; /* Number of F
                    AT entries */
 12301                        L10236:
 12302                        	.line	3963
 12303 0B:6ABA: 18           	clc
 12304 0B:6ABB: A9 02 00     	lda	#$2
 12305 0B:6ABE: 65 24        	adc	<L467+nclst_1
 12306 0B:6AC0: 85 01        	sta	<R0
 12307 0B:6AC2: A9 00 00     	lda	#$0
 12308 0B:6AC5: 65 26        	adc	<L467+nclst_1+2
 12309 0B:6AC7: 85 03        	sta	<R0+2
 12310 0B:6AC9: A5 01        	lda	<R0
 12311 0B:6ACB: A0 13 00     	ldy	#$13
 12312 0B:6ACE: 97 2E        	sta	[<L467+fs_1],Y
 12313 0B:6AD0: A5 03        	lda	<R0+2
 12314 0B:6AD2: A0 15 00     	ldy	#$15
 12315 0B:6AD5: 97 2E        	sta	[<L467+fs_1],Y
 12316                        ;		fs->volbase = bsect; /* Volume start sec
                    tor */
 12317                        	.line	3964
 12318 0B:6AD7: A5 14        	lda	<L467+bsect_1
 12319 0B:6AD9: A0 1B 00     	ldy	#$1b
 12320 0B:6ADC: 97 2E        	sta	[<L467+fs_1],Y
 12321 0B:6ADE: A5 16        	lda	<L467+bsect_1+2
 12322 0B:6AE0: A0 1D 00     	ldy	#$1d
 12323 0B:6AE3: 97 2E        	sta	[<L467+fs_1],Y
 12324                        ;		fs->fatbase = bsect + nrsv; /* FAT start
                     sector */
 12325                        	.line	3965
 12326 0B:6AE5: A0 00 00     	ldy	#$0
 12327 0B:6AE8: A5 2C        	lda	<L467+nrsv_1
 12328 0B:6AEA: 10 01        	bpl	L501
 12329 0B:6AEC: 88           	dey
 12330                        L501:
 12331 0B:6AED: 85 01        	sta	<R0
 12332 0B:6AEF: 84 03        	sty	<R0+2
 12333 0B:6AF1: 18           	clc
 12334 0B:6AF2: A5 01        	lda	<R0
 12335 0B:6AF4: 65 14        	adc	<L467+bsect_1
 12336 0B:6AF6: 85 05        	sta	<R1
 12337 0B:6AF8: A5 03        	lda	<R0+2
 12338 0B:6AFA: 65 16        	adc	<L467+bsect_1+2
 12339 0B:6AFC: 85 07        	sta	<R1+2
 12340 0B:6AFE: A5 05        	lda	<R1
 12341 0B:6B00: A0 1F 00     	ldy	#$1f
 12342 0B:6B03: 97 2E        	sta	[<L467+fs_1],Y
 12343 0B:6B05: A5 07        	lda	<R1+2
 12344 0B:6B07: A0 21 00     	ldy	#$21
 12345 0B:6B0A: 97 2E        	sta	[<L467+fs_1],Y
 12346                        ;		fs->database = bsect + sysect; /* Data s
                    tart sector */
  Fri Jul 16 2021 14:42                                                Page 242


 12347                        	.line	3966
 12348 0B:6B0C: 18           	clc
 12349 0B:6B0D: A5 14        	lda	<L467+bsect_1
 12350 0B:6B0F: 65 1C        	adc	<L467+sysect_1
 12351 0B:6B11: 85 01        	sta	<R0
 12352 0B:6B13: A5 16        	lda	<L467+bsect_1+2
 12353 0B:6B15: 65 1E        	adc	<L467+sysect_1+2
 12354 0B:6B17: 85 03        	sta	<R0+2
 12355 0B:6B19: A5 01        	lda	<R0
 12356 0B:6B1B: A0 27 00     	ldy	#$27
 12357 0B:6B1E: 97 2E        	sta	[<L467+fs_1],Y
 12358 0B:6B20: A5 03        	lda	<R0+2
 12359 0B:6B22: A0 29 00     	ldy	#$29
 12360 0B:6B25: 97 2E        	sta	[<L467+fs_1],Y
 12361                        ;		if (fmt == FS_FAT32)
 12362                        	.line	3967
 12363                        ;		{
 12364 0B:6B27: A5 32        	lda	<L467+fmt_1
 12365 0B:6B29: C9 03 00     	cmp	#<$3
 12366 0B:6B2C: F0 03        	beq	L502
 12367 0B:6B2E: 82 76 00     	brl	L10237
 12368                        L502:
 12369                        	.line	3968
 12370                        ;			if (ld_word(FADDR(BPB_FSVer32)) 
                    != 0)
 12371                        	.line	3969
 12372                        ;				return FR_NO_FILESYSTEM;
                     /* (Must be FAT32 revision 0.0) */
 12373 0B:6B31: 18           	clc
 12374 0B:6B32: A9 59 00     	lda	#$59
 12375 0B:6B35: 65 2E        	adc	<L467+fs_1
 12376 0B:6B37: 85 01        	sta	<R0
 12377 0B:6B39: A9 00 00     	lda	#$0
 12378 0B:6B3C: 65 30        	adc	<L467+fs_1+2
 12379 0B:6B3E: 85 03        	sta	<R0+2
 12380 0B:6B40: D4 03        	pei	<R0+2
 12381 0B:6B42: D4 01        	pei	<R0
 12382 0B:6B44: 22 80 3F 0B  	jsl	~~ld_word
 12383 0B:6B48: AA           	tax
 12384 0B:6B49: D0 03        	bne	L503
 12385 0B:6B4B: 82 06 00     	brl	L10238
 12386                        L503:
 12387                        	.line	3970
 12388 0B:6B4E: A9 0D 00     	lda	#$d
 12389 0B:6B51: 82 CB FB     	brl	L470
 12390                        ;			if (fs->n_rootdir != 0)
 12391                        L10238:
 12392                        	.line	3971
 12393                        ;				return FR_NO_FILESYSTEM;
                     /* (BPB_RootEntCnt must be 0) */
 12394 0B:6B54: A0 07 00     	ldy	#$7
 12395 0B:6B57: B7 2E        	lda	[<L467+fs_1],Y
 12396 0B:6B59: D0 03        	bne	L504
 12397 0B:6B5B: 82 06 00     	brl	L10239
 12398                        L504:
 12399                        	.line	3972
 12400 0B:6B5E: A9 0D 00     	lda	#$d
 12401 0B:6B61: 82 BB FB     	brl	L470
  Fri Jul 16 2021 14:42                                                Page 243


 12402                        ;			fs->dirbase = ld_dword(fs->win +
                     BPB_RootClus32); /* Root directory start cluster */
 12403                        L10239:
 12404                        	.line	3973
 12405 0B:6B64: 18           	clc
 12406 0B:6B65: A9 5B 00     	lda	#$5b
 12407 0B:6B68: 65 2E        	adc	<L467+fs_1
 12408 0B:6B6A: 85 01        	sta	<R0
 12409 0B:6B6C: A9 00 00     	lda	#$0
 12410 0B:6B6F: 65 30        	adc	<L467+fs_1+2
 12411 0B:6B71: 85 03        	sta	<R0+2
 12412 0B:6B73: D4 03        	pei	<R0+2
 12413 0B:6B75: D4 01        	pei	<R0
 12414 0B:6B77: 22 BB 3F 0B  	jsl	~~ld_dword
 12415 0B:6B7B: 85 05        	sta	<R1
 12416 0B:6B7D: 86 07        	stx	<R1+2
 12417 0B:6B7F: A5 05        	lda	<R1
 12418 0B:6B81: A0 23 00     	ldy	#$23
 12419 0B:6B84: 97 2E        	sta	[<L467+fs_1],Y
 12420 0B:6B86: A5 07        	lda	<R1+2
 12421 0B:6B88: A0 25 00     	ldy	#$25
 12422 0B:6B8B: 97 2E        	sta	[<L467+fs_1],Y
 12423                        ;			szbfat = fs->n_fatent * 4; /* (N
                    eeded FAT size) */
 12424                        	.line	3974
 12425 0B:6B8D: A0 15 00     	ldy	#$15
 12426 0B:6B90: B7 2E        	lda	[<L467+fs_1],Y
 12427 0B:6B92: 48           	pha
 12428 0B:6B93: A0 13 00     	ldy	#$13
 12429 0B:6B96: B7 2E        	lda	[<L467+fs_1],Y
 12430 0B:6B98: 48           	pha
 12431 0B:6B99: A9 02 00     	lda	#$2
 12432                        	xref	~~~lasl
 12433 0B:6B9C: 22 xx xx xx  	jsl	~~~lasl
 12434 0B:6BA0: 85 28        	sta	<L467+szbfat_1
 12435 0B:6BA2: 86 2A        	stx	<L467+szbfat_1+2
 12436                        ;		}
 12437                        	.line	3975
 12438                        ;		else
 12439 0B:6BA4: 82 AA 00     	brl	L10240
 12440                        L10237:
 12441                        ;		{
 12442                        	.line	3977
 12443                        ;			if (fs->n_rootdir == 0)
 12444                        	.line	3978
 12445                        ;				return FR_NO_FILESYSTEM;
                     /* (BPB_RootEntCnt must not be 0) */
 12446 0B:6BA7: A0 07 00     	ldy	#$7
 12447 0B:6BAA: B7 2E        	lda	[<L467+fs_1],Y
 12448 0B:6BAC: F0 03        	beq	L505
 12449 0B:6BAE: 82 06 00     	brl	L10241
 12450                        L505:
 12451                        	.line	3979
 12452 0B:6BB1: A9 0D 00     	lda	#$d
 12453 0B:6BB4: 82 68 FB     	brl	L470
 12454                        ;			fs->dirbase = fs->fatbase + fasi
                    ze; /* Root directory start sector */
 12455                        L10241:
  Fri Jul 16 2021 14:42                                                Page 244


 12456                        	.line	3980
 12457 0B:6BB7: 18           	clc
 12458 0B:6BB8: A0 1F 00     	ldy	#$1f
 12459 0B:6BBB: B7 2E        	lda	[<L467+fs_1],Y
 12460 0B:6BBD: 65 20        	adc	<L467+fasize_1
 12461 0B:6BBF: 85 01        	sta	<R0
 12462 0B:6BC1: A0 21 00     	ldy	#$21
 12463 0B:6BC4: B7 2E        	lda	[<L467+fs_1],Y
 12464 0B:6BC6: 65 22        	adc	<L467+fasize_1+2
 12465 0B:6BC8: 85 03        	sta	<R0+2
 12466 0B:6BCA: A5 01        	lda	<R0
 12467 0B:6BCC: A0 23 00     	ldy	#$23
 12468 0B:6BCF: 97 2E        	sta	[<L467+fs_1],Y
 12469 0B:6BD1: A5 03        	lda	<R0+2
 12470 0B:6BD3: A0 25 00     	ldy	#$25
 12471 0B:6BD6: 97 2E        	sta	[<L467+fs_1],Y
 12472                        ;			szbfat = (fmt == FS_FAT16) ? /* 
                    (Needed FAT size) */
 12473                        	.line	3981
 12474                        ;			fs->n_fatent * 2 : fs->n_fatent 
                    * 3 / 2 + (fs->n_fatent & 1);
 12475 0B:6BD8: A5 32        	lda	<L467+fmt_1
 12476 0B:6BDA: C9 02 00     	cmp	#<$2
 12477 0B:6BDD: F0 03        	beq	L507
 12478 0B:6BDF: 82 1D 00     	brl	L506
 12479                        L507:
 12480 0B:6BE2: A0 15 00     	ldy	#$15
 12481 0B:6BE5: B7 2E        	lda	[<L467+fs_1],Y
 12482 0B:6BE7: 48           	pha
 12483 0B:6BE8: A0 13 00     	ldy	#$13
 12484 0B:6BEB: B7 2E        	lda	[<L467+fs_1],Y
 12485 0B:6BED: 48           	pha
 12486 0B:6BEE: A9 01 00     	lda	#$1
 12487                        	xref	~~~lasl
 12488 0B:6BF1: 22 xx xx xx  	jsl	~~~lasl
 12489 0B:6BF5: 85 01        	sta	<R0
 12490 0B:6BF7: 86 03        	stx	<R0+2
 12491 0B:6BF9: A6 03        	ldx	<R0+2
 12492 0B:6BFB: A5 01        	lda	<R0
 12493 0B:6BFD: 80 46        	bra	L508
 12494                        L506:
 12495 0B:6BFF: A0 13 00     	ldy	#$13
 12496 0B:6C02: B7 2E        	lda	[<L467+fs_1],Y
 12497 0B:6C04: 29 01 00     	and	#<$1
 12498 0B:6C07: 85 01        	sta	<R0
 12499 0B:6C09: 64 03        	stz	<R0+2
 12500 0B:6C0B: F4 00 00     	pea	#^$3
 12501 0B:6C0E: F4 03 00     	pea	#<$3
 12502 0B:6C11: A0 15 00     	ldy	#$15
 12503 0B:6C14: B7 2E        	lda	[<L467+fs_1],Y
 12504 0B:6C16: 48           	pha
 12505 0B:6C17: A0 13 00     	ldy	#$13
 12506 0B:6C1A: B7 2E        	lda	[<L467+fs_1],Y
 12507 0B:6C1C: 48           	pha
 12508                        	xref	~~~lmul
 12509 0B:6C1D: 22 xx xx xx  	jsl	~~~lmul
 12510 0B:6C21: 85 09        	sta	<R2
 12511 0B:6C23: 86 0B        	stx	<R2+2
  Fri Jul 16 2021 14:42                                                Page 245


 12512 0B:6C25: D4 0B        	pei	<R2+2
 12513 0B:6C27: D4 09        	pei	<R2
 12514 0B:6C29: A9 01 00     	lda	#$1
 12515                        	xref	~~~llsr
 12516 0B:6C2C: 22 xx xx xx  	jsl	~~~llsr
 12517 0B:6C30: 85 05        	sta	<R1
 12518 0B:6C32: 86 07        	stx	<R1+2
 12519 0B:6C34: 18           	clc
 12520 0B:6C35: A5 05        	lda	<R1
 12521 0B:6C37: 65 01        	adc	<R0
 12522 0B:6C39: 85 0D        	sta	<R3
 12523 0B:6C3B: A5 07        	lda	<R1+2
 12524 0B:6C3D: 65 03        	adc	<R0+2
 12525 0B:6C3F: 85 0F        	sta	<R3+2
 12526 0B:6C41: A6 0F        	ldx	<R3+2
 12527 0B:6C43: A5 0D        	lda	<R3
 12528                        L508:
 12529 0B:6C45: 85 01        	sta	<R0
 12530 0B:6C47: 86 03        	stx	<R0+2
 12531 0B:6C49: A5 01        	lda	<R0
 12532 0B:6C4B: 85 28        	sta	<L467+szbfat_1
 12533 0B:6C4D: A5 03        	lda	<R0+2
 12534 0B:6C4F: 85 2A        	sta	<L467+szbfat_1+2
 12535                        ;		}
 12536                        	.line	3983
 12537                        L10240:
 12538                        ;		if (fs->fsize < (szbfat + (SS(fs) - 1)) 
                    / SS(fs))
 12539                        	.line	3984
 12540                        ;			return FR_NO_FILESYSTEM; /* (BPB
                    _FATSz must not be less than the size needed) */
 12541 0B:6C51: 18           	clc
 12542 0B:6C52: A9 FF 01     	lda	#$1ff
 12543 0B:6C55: 65 28        	adc	<L467+szbfat_1
 12544 0B:6C57: 85 05        	sta	<R1
 12545 0B:6C59: A9 00 00     	lda	#$0
 12546 0B:6C5C: 65 2A        	adc	<L467+szbfat_1+2
 12547 0B:6C5E: 85 07        	sta	<R1+2
 12548 0B:6C60: D4 07        	pei	<R1+2
 12549 0B:6C62: D4 05        	pei	<R1
 12550 0B:6C64: A9 09 00     	lda	#$9
 12551                        	xref	~~~llsr
 12552 0B:6C67: 22 xx xx xx  	jsl	~~~llsr
 12553 0B:6C6B: 85 01        	sta	<R0
 12554 0B:6C6D: 86 03        	stx	<R0+2
 12555 0B:6C6F: A0 17 00     	ldy	#$17
 12556 0B:6C72: B7 2E        	lda	[<L467+fs_1],Y
 12557 0B:6C74: C5 01        	cmp	<R0
 12558 0B:6C76: A0 19 00     	ldy	#$19
 12559 0B:6C79: B7 2E        	lda	[<L467+fs_1],Y
 12560 0B:6C7B: E5 03        	sbc	<R0+2
 12561 0B:6C7D: 90 03        	bcc	L509
 12562 0B:6C7F: 82 06 00     	brl	L10242
 12563                        L509:
 12564                        	.line	3985
 12565 0B:6C82: A9 0D 00     	lda	#$d
 12566 0B:6C85: 82 97 FA     	brl	L470
 12567                        ;
  Fri Jul 16 2021 14:42                                                Page 246


 12568                        ;#if !FF_FS_READONLY
 12569                        ;		/* Get FSInfo if available */
 12570                        ;		fs->last_clst = fs->free_clst = 0xFFFFFF
                    FF; /* Initialize cluster allocation information */
 12571                        L10242:
 12572                        	.line	3989
 12573 0B:6C88: A9 FF FF     	lda	#$ffff
 12574 0B:6C8B: A0 0F 00     	ldy	#$f
 12575 0B:6C8E: 97 2E        	sta	[<L467+fs_1],Y
 12576 0B:6C90: A9 FF FF     	lda	#$ffff
 12577 0B:6C93: A0 11 00     	ldy	#$11
 12578 0B:6C96: 97 2E        	sta	[<L467+fs_1],Y
 12579 0B:6C98: A9 FF FF     	lda	#$ffff
 12580 0B:6C9B: A0 0B 00     	ldy	#$b
 12581 0B:6C9E: 97 2E        	sta	[<L467+fs_1],Y
 12582 0B:6CA0: A9 FF FF     	lda	#$ffff
 12583 0B:6CA3: A0 0D 00     	ldy	#$d
 12584 0B:6CA6: 97 2E        	sta	[<L467+fs_1],Y
 12585                        ;		fs->fsi_flag = 0x80;
 12586                        	.line	3990
 12587 0B:6CA8: E2 20        	sep	#$20
 12588                        	longa	off
 12589 0B:6CAA: A9 80        	lda	#$80
 12590 0B:6CAC: A0 04 00     	ldy	#$4
 12591 0B:6CAF: 97 2E        	sta	[<L467+fs_1],Y
 12592 0B:6CB1: C2 20        	rep	#$20
 12593                        	longa	on
 12594                        ;#if (FF_FS_NOFSINFO & 3) != 3
 12595                        ;		if (fmt == FS_FAT32 /* Allow to update F
                    SInfo only if BPB_FSInfo32 == 1 */
 12596                        	.line	3992
 12597                        ;		&& ld_word(fs->win + BPB_FSInfo32) == 1
 12598                        ;				&& move_window(fs, bsect
                     + 1) == FR_OK)
 12599                        ;		{
 12600 0B:6CB3: A5 32        	lda	<L467+fmt_1
 12601 0B:6CB5: C9 03 00     	cmp	#<$3
 12602 0B:6CB8: F0 03        	beq	L510
 12603 0B:6CBA: 82 F3 00     	brl	L10243
 12604                        L510:
 12605 0B:6CBD: 18           	clc
 12606 0B:6CBE: A9 5F 00     	lda	#$5f
 12607 0B:6CC1: 65 2E        	adc	<L467+fs_1
 12608 0B:6CC3: 85 01        	sta	<R0
 12609 0B:6CC5: A9 00 00     	lda	#$0
 12610 0B:6CC8: 65 30        	adc	<L467+fs_1+2
 12611 0B:6CCA: 85 03        	sta	<R0+2
 12612 0B:6CCC: D4 03        	pei	<R0+2
 12613 0B:6CCE: D4 01        	pei	<R0
 12614 0B:6CD0: 22 80 3F 0B  	jsl	~~ld_word
 12615 0B:6CD4: 85 05        	sta	<R1
 12616 0B:6CD6: A5 05        	lda	<R1
 12617 0B:6CD8: C9 01 00     	cmp	#<$1
 12618 0B:6CDB: F0 03        	beq	L511
 12619 0B:6CDD: 82 D0 00     	brl	L10243
 12620                        L511:
 12621 0B:6CE0: 18           	clc
 12622 0B:6CE1: A9 01 00     	lda	#$1
  Fri Jul 16 2021 14:42                                                Page 247


 12623 0B:6CE4: 65 14        	adc	<L467+bsect_1
 12624 0B:6CE6: 85 05        	sta	<R1
 12625 0B:6CE8: A9 00 00     	lda	#$0
 12626 0B:6CEB: 65 16        	adc	<L467+bsect_1+2
 12627 0B:6CED: 85 07        	sta	<R1+2
 12628 0B:6CEF: D4 07        	pei	<R1+2
 12629 0B:6CF1: D4 05        	pei	<R1
 12630 0B:6CF3: D4 30        	pei	<L467+fs_1+2
 12631 0B:6CF5: D4 2E        	pei	<L467+fs_1
 12632 0B:6CF7: 22 7A 43 0B  	jsl	~~move_window
 12633 0B:6CFB: AA           	tax
 12634 0B:6CFC: F0 03        	beq	L512
 12635 0B:6CFE: 82 AF 00     	brl	L10243
 12636                        L512:
 12637                        	.line	3995
 12638                        ;			fs->fsi_flag = 0;
 12639                        	.line	3996
 12640 0B:6D01: E2 20        	sep	#$20
 12641                        	longa	off
 12642 0B:6D03: A9 00        	lda	#$0
 12643 0B:6D05: A0 04 00     	ldy	#$4
 12644 0B:6D08: 97 2E        	sta	[<L467+fs_1],Y
 12645 0B:6D0A: C2 20        	rep	#$20
 12646                        	longa	on
 12647                        ;			if (ld_word(fs->win + BS_55AA) =
                    = 0xAA55 /* Load FSInfo data if available */
 12648                        	.line	3997
 12649                        ;			&& ld_dword(fs->win + FSI_LeadSi
                    g) == 0x41615252
 12650                        ;					&& ld_dword(fs->
                    win + FSI_StrucSig) == 0x61417272)
 12651                        ;			{
 12652 0B:6D0C: 18           	clc
 12653 0B:6D0D: A9 2D 02     	lda	#$22d
 12654 0B:6D10: 65 2E        	adc	<L467+fs_1
 12655 0B:6D12: 85 01        	sta	<R0
 12656 0B:6D14: A9 00 00     	lda	#$0
 12657 0B:6D17: 65 30        	adc	<L467+fs_1+2
 12658 0B:6D19: 85 03        	sta	<R0+2
 12659 0B:6D1B: D4 03        	pei	<R0+2
 12660 0B:6D1D: D4 01        	pei	<R0
 12661 0B:6D1F: 22 80 3F 0B  	jsl	~~ld_word
 12662 0B:6D23: 85 05        	sta	<R1
 12663 0B:6D25: A5 05        	lda	<R1
 12664 0B:6D27: C9 55 AA     	cmp	#<$aa55
 12665 0B:6D2A: F0 03        	beq	L513
 12666 0B:6D2C: 82 81 00     	brl	L10244
 12667                        L513:
 12668 0B:6D2F: 18           	clc
 12669 0B:6D30: A9 2F 00     	lda	#$2f
 12670 0B:6D33: 65 2E        	adc	<L467+fs_1
 12671 0B:6D35: 85 05        	sta	<R1
 12672 0B:6D37: A9 00 00     	lda	#$0
 12673 0B:6D3A: 65 30        	adc	<L467+fs_1+2
 12674 0B:6D3C: 85 07        	sta	<R1+2
 12675 0B:6D3E: D4 07        	pei	<R1+2
 12676 0B:6D40: D4 05        	pei	<R1
 12677 0B:6D42: 22 BB 3F 0B  	jsl	~~ld_dword
  Fri Jul 16 2021 14:42                                                Page 248


 12678 0B:6D46: 85 09        	sta	<R2
 12679 0B:6D48: 86 0B        	stx	<R2+2
 12680 0B:6D4A: A5 09        	lda	<R2
 12681 0B:6D4C: C9 52 52     	cmp	#<$41615252
 12682 0B:6D4F: D0 05        	bne	L514
 12683 0B:6D51: A5 0B        	lda	<R2+2
 12684 0B:6D53: C9 61 41     	cmp	#^$41615252
 12685                        L514:
 12686 0B:6D56: F0 03        	beq	L515
 12687 0B:6D58: 82 55 00     	brl	L10244
 12688                        L515:
 12689 0B:6D5B: 18           	clc
 12690 0B:6D5C: A9 13 02     	lda	#$213
 12691 0B:6D5F: 65 2E        	adc	<L467+fs_1
 12692 0B:6D61: 85 09        	sta	<R2
 12693 0B:6D63: A9 00 00     	lda	#$0
 12694 0B:6D66: 65 30        	adc	<L467+fs_1+2
 12695 0B:6D68: 85 0B        	sta	<R2+2
 12696 0B:6D6A: D4 0B        	pei	<R2+2
 12697 0B:6D6C: D4 09        	pei	<R2
 12698 0B:6D6E: 22 BB 3F 0B  	jsl	~~ld_dword
 12699 0B:6D72: 85 0D        	sta	<R3
 12700 0B:6D74: 86 0F        	stx	<R3+2
 12701 0B:6D76: A5 0D        	lda	<R3
 12702 0B:6D78: C9 72 72     	cmp	#<$61417272
 12703 0B:6D7B: D0 05        	bne	L516
 12704 0B:6D7D: A5 0F        	lda	<R3+2
 12705 0B:6D7F: C9 41 61     	cmp	#^$61417272
 12706                        L516:
 12707 0B:6D82: F0 03        	beq	L517
 12708 0B:6D84: 82 29 00     	brl	L10244
 12709                        L517:
 12710                        	.line	4000
 12711                        ;#if (FF_FS_NOFSINFO & 1) == 0
 12712                        ;				fs->free_clst = ld_dword
                    (fs->win + FSI_Free_Count);
 12713                        ;#endif
 12714                        ;#if (FF_FS_NOFSINFO & 2) == 0
 12715                        ;				fs->last_clst = ld_dword
                    (fs->win + FSI_Nxt_Free);
 12716                        	.line	4005
 12717 0B:6D87: 18           	clc
 12718 0B:6D88: A9 1B 02     	lda	#$21b
 12719 0B:6D8B: 65 2E        	adc	<L467+fs_1
 12720 0B:6D8D: 85 01        	sta	<R0
 12721 0B:6D8F: A9 00 00     	lda	#$0
 12722 0B:6D92: 65 30        	adc	<L467+fs_1+2
 12723 0B:6D94: 85 03        	sta	<R0+2
 12724 0B:6D96: D4 03        	pei	<R0+2
 12725 0B:6D98: D4 01        	pei	<R0
 12726 0B:6D9A: 22 BB 3F 0B  	jsl	~~ld_dword
 12727 0B:6D9E: 85 05        	sta	<R1
 12728 0B:6DA0: 86 07        	stx	<R1+2
 12729 0B:6DA2: A5 05        	lda	<R1
 12730 0B:6DA4: A0 0B 00     	ldy	#$b
 12731 0B:6DA7: 97 2E        	sta	[<L467+fs_1],Y
 12732 0B:6DA9: A5 07        	lda	<R1+2
 12733 0B:6DAB: A0 0D 00     	ldy	#$d
  Fri Jul 16 2021 14:42                                                Page 249


 12734 0B:6DAE: 97 2E        	sta	[<L467+fs_1],Y
 12735                        ;#endif
 12736                        ;			}
 12737                        	.line	4007
 12738                        ;		}
 12739                        L10244:
 12740                        	.line	4008
 12741                        ;#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
 12742                        ;#endif	/* !FF_FS_READONLY */
 12743                        ;	}
 12744                        L10243:
 12745                        	.line	4011
 12746                        ;
 12747                        ;	fs->fs_type = (BYTE) fmt;/* FAT sub-type */
 12748                        	.line	4013
 12749 0B:6DB0: E2 20        	sep	#$20
 12750                        	longa	off
 12751 0B:6DB2: A5 32        	lda	<L467+fmt_1
 12752 0B:6DB4: 87 2E        	sta	[<L467+fs_1]
 12753 0B:6DB6: C2 20        	rep	#$20
 12754                        	longa	on
 12755                        ;	fs->id = ++Fsid; /* Volume mount ID */
 12756                        	.line	4014
 12757 0B:6DB8: EE xx xx     	inc	|~~Fsid
 12758 0B:6DBB: AD xx xx     	lda	|~~Fsid
 12759 0B:6DBE: A0 05 00     	ldy	#$5
 12760 0B:6DC1: 97 2E        	sta	[<L467+fs_1],Y
 12761                        ;#if FF_USE_LFN == 1
 12762                        ;	fs->lfnbuf = LfnBuf; /* Static LFN working buffe
                    r */
 12763                        ;#if FF_FS_EXFAT
 12764                        ;	fs->dirbuf = DirBuf; /* Static directory block s
                    cratchpad buuffer */
 12765                        ;#endif
 12766                        ;#endif
 12767                        ;#if FF_FS_RPATH != 0
 12768                        ;	fs->cdir = 0; /* Initialize current directory */
 12769                        ;#endif
 12770                        ;#if FF_FS_LOCK != 0			/* Clear
                     file lock semaphores */
 12771                        ;	clear_lock(fs);
 12772                        ;#endif
 12773                        ;	return FR_OK;
 12774                        	.line	4027
 12775 0B:6DC3: A9 00 00     	lda	#$0
 12776 0B:6DC6: 82 56 F9     	brl	L470
 12777                        ;}
 12778                        	.line	4028
 12779                        	.endblock	4028
 12780             00000033   L466	equ	51
 12781             00000011   L467	equ	17
 12782 0B:6DC9:              	ends
 12783                        	efunc
 12784                        	.endfunc	4028,17,51
 12785                        	.line	4028
 12786                        ;
 12787                        ;/*-----------------------------------------------
                    ------------------------*/
  Fri Jul 16 2021 14:42                                                Page 250


 12788                        ;/* Check if the file/directory object is valid or
                     not                    */
 12789                        ;/*-----------------------------------------------
                    ------------------------*/
 12790                        ;
 12791                        ;static FRESULT validate( /* Returns FR_OK or FR_I
                    NVALID_OBJECT */
 12792                        ;FFOBJID* obj, /* Pointer to the FFOBJID, the 1st 
                    member in the FIL/DIR object, to check validity */
 12793                        ;FATFS** rfs /* Pointer to pointer to the owner fi
                    lesystem object to return */
 12794                        ;)
 12795                        ;{
 12796                        	.line	4034
 12797                        	.line	4038
 12798                        	FFDOS
 12799                        	func
 12800                        	.function	4038
 12801                        ~~validate:
 12802                        	longa	on
 12803                        	longi	on
 12804 0B:6DC9: 3B           	tsc
 12805 0B:6DCA: 38           	sec
 12806 0B:6DCB: E9 06 00     	sbc	#L518
 12807 0B:6DCE: 1B           	tcs
 12808 0B:6DCF: 0B           	phd
 12809 0B:6DD0: 5B           	tcd
 12810             00000004   obj_0	set	4
 12811             00000008   rfs_0	set	8
 12812                        	.block	4038
 12813                        ;	FRESULT res = FR_INVALID_OBJECT;
 12814                        ;
 12815                        ;	if (obj && obj->fs && obj->fs->fs_type && obj->i
                    d == obj->fs->id)
 12816             00000000   res_1	set	0
 12817                        	.sym	res,0,5,1,16
 12818                        	.sym	obj,4,138,6,32,50
 12819                        	.sym	rfs,8,1162,6,32,49
 12820 0B:6DD1: A9 09 00     	lda	#$9
 12821 0B:6DD4: 85 05        	sta	<L519+res_1
 12822                        	.line	4041
 12823                        ;	{ /* Test if the object is valid */
 12824 0B:6DD6: A5 0A        	lda	<L518+obj_0
 12825 0B:6DD8: 05 0C        	ora	<L518+obj_0+2
 12826 0B:6DDA: D0 03        	bne	L521
 12827 0B:6DDC: 82 5D 00     	brl	L10245
 12828                        L521:
 12829 0B:6DDF: A7 0A        	lda	[<L518+obj_0]
 12830 0B:6DE1: A0 02 00     	ldy	#$2
 12831 0B:6DE4: 17 0A        	ora	[<L518+obj_0],Y
 12832 0B:6DE6: D0 03        	bne	L522
 12833 0B:6DE8: 82 51 00     	brl	L10245
 12834                        L522:
 12835 0B:6DEB: A7 0A        	lda	[<L518+obj_0]
 12836 0B:6DED: 85 01        	sta	<R0
 12837 0B:6DEF: A0 02 00     	ldy	#$2
 12838 0B:6DF2: B7 0A        	lda	[<L518+obj_0],Y
 12839 0B:6DF4: 85 03        	sta	<R0+2
  Fri Jul 16 2021 14:42                                                Page 251


 12840 0B:6DF6: A7 01        	lda	[<R0]
 12841 0B:6DF8: 29 FF 00     	and	#$ff
 12842 0B:6DFB: D0 03        	bne	L523
 12843 0B:6DFD: 82 3C 00     	brl	L10245
 12844                        L523:
 12845 0B:6E00: A7 0A        	lda	[<L518+obj_0]
 12846 0B:6E02: 85 01        	sta	<R0
 12847 0B:6E04: A0 02 00     	ldy	#$2
 12848 0B:6E07: B7 0A        	lda	[<L518+obj_0],Y
 12849 0B:6E09: 85 03        	sta	<R0+2
 12850 0B:6E0B: A0 04 00     	ldy	#$4
 12851 0B:6E0E: B7 0A        	lda	[<L518+obj_0],Y
 12852 0B:6E10: A0 05 00     	ldy	#$5
 12853 0B:6E13: D7 01        	cmp	[<R0],Y
 12854 0B:6E15: F0 03        	beq	L524
 12855 0B:6E17: 82 22 00     	brl	L10245
 12856                        L524:
 12857                        	.line	4042
 12858                        ;#if FF_FS_REENTRANT
 12859                        ;		if (lock_fs(obj->fs))
 12860                        ;		{ /* Obtain the filesystem object */
 12861                        ;			if (!(disk_status(obj->fs->pdrv)
                     & STA_NOINIT))
 12862                        ;			{ /* Test if the phsical drive i
                    s kept initialized */
 12863                        ;				res = FR_OK;
 12864                        ;			}
 12865                        ;			else
 12866                        ;			{
 12867                        ;				unlock_fs(obj->fs, FR_OK
                    );
 12868                        ;			}
 12869                        ;		}
 12870                        ;		else
 12871                        ;		{
 12872                        ;			res = FR_TIMEOUT;
 12873                        ;		}
 12874                        ;#else
 12875                        ;		if (!(disk_status(obj->fs->pdrv) & STA_N
                    OINIT))
 12876                        	.line	4060
 12877                        ;		{ /* Test if the phsical drive is kept i
                    nitialized */
 12878 0B:6E1A: A7 0A        	lda	[<L518+obj_0]
 12879 0B:6E1C: 85 01        	sta	<R0
 12880 0B:6E1E: A0 02 00     	ldy	#$2
 12881 0B:6E21: B7 0A        	lda	[<L518+obj_0],Y
 12882 0B:6E23: 85 03        	sta	<R0+2
 12883 0B:6E25: A0 01 00     	ldy	#$1
 12884 0B:6E28: B7 01        	lda	[<R0],Y
 12885 0B:6E2A: 48           	pha
 12886 0B:6E2B: 22 xx xx xx  	jsl	~~disk_status
 12887 0B:6E2F: E2 20        	sep	#$20
 12888                        	longa	off
 12889 0B:6E31: 29 01        	and	#<$1
 12890 0B:6E33: C2 20        	rep	#$20
 12891                        	longa	on
 12892 0B:6E35: F0 03        	beq	L525
  Fri Jul 16 2021 14:42                                                Page 252


 12893 0B:6E37: 82 02 00     	brl	L10246
 12894                        L525:
 12895                        	.line	4061
 12896                        ;			res = FR_OK;
 12897                        	.line	4062
 12898 0B:6E3A: 64 05        	stz	<L519+res_1
 12899                        ;		}
 12900                        	.line	4063
 12901                        ;#endif
 12902                        ;	}
 12903                        L10246:
 12904                        	.line	4065
 12905                        ;	*rfs = (res == FR_OK) ? obj->fs : 0; /* Correspo
                    nding filesystem object */
 12906                        L10245:
 12907                        	.line	4066
 12908 0B:6E3C: A5 05        	lda	<L519+res_1
 12909 0B:6E3E: F0 03        	beq	L527
 12910 0B:6E40: 82 0A 00     	brl	L526
 12911                        L527:
 12912 0B:6E43: A0 02 00     	ldy	#$2
 12913 0B:6E46: B7 0A        	lda	[<L518+obj_0],Y
 12914 0B:6E48: AA           	tax
 12915 0B:6E49: A7 0A        	lda	[<L518+obj_0]
 12916 0B:6E4B: 80 07        	bra	L528
 12917                        L526:
 12918 0B:6E4D: A9 00 00     	lda	#$0
 12919 0B:6E50: AA           	tax
 12920 0B:6E51: A9 00 00     	lda	#$0
 12921                        L528:
 12922 0B:6E54: 85 01        	sta	<R0
 12923 0B:6E56: 86 03        	stx	<R0+2
 12924 0B:6E58: A5 01        	lda	<R0
 12925 0B:6E5A: 87 0E        	sta	[<L518+rfs_0]
 12926 0B:6E5C: A5 03        	lda	<R0+2
 12927 0B:6E5E: A0 02 00     	ldy	#$2
 12928 0B:6E61: 97 0E        	sta	[<L518+rfs_0],Y
 12929                        ;	return res;
 12930                        	.line	4067
 12931 0B:6E63: A5 05        	lda	<L519+res_1
 12932                        L529:
 12933 0B:6E65: A8           	tay
 12934 0B:6E66: A5 08        	lda	<L518+2
 12935 0B:6E68: 85 10        	sta	<L518+2+8
 12936 0B:6E6A: A5 07        	lda	<L518+1
 12937 0B:6E6C: 85 0F        	sta	<L518+1+8
 12938 0B:6E6E: 2B           	pld
 12939 0B:6E6F: 3B           	tsc
 12940 0B:6E70: 18           	clc
 12941 0B:6E71: 69 0E 00     	adc	#L518+8
 12942 0B:6E74: 1B           	tcs
 12943 0B:6E75: 98           	tya
 12944 0B:6E76: 6B           	rtl
 12945                        ;}
 12946                        	.line	4068
 12947                        	.endblock	4068
 12948             00000006   L518	equ	6
 12949             00000005   L519	equ	5
  Fri Jul 16 2021 14:42                                                Page 253


 12950 0B:6E77:              	ends
 12951                        	efunc
 12952                        	.endfunc	4068,5,6
 12953                        	.line	4068
 12954                        ;
 12955                        ;/*-----------------------------------------------
                    ----------------------------
 12956                        ;
 12957                        ; Public Functions (FatFs API)
 12958                        ;
 12959                        ; ------------------------------------------------
                    ----------------------------*/
 12960                        ;
 12961                        ;/*-----------------------------------------------
                    ------------------------*/
 12962                        ;/* Mount/Unmount a Logical Drive                 
                                            */
 12963                        ;/*-----------------------------------------------
                    ------------------------*/
 12964                        ;
 12965                        ;FRESULT f_mount(FATFS* fs, /* Pointer to the file
                    system object (NULL:unmount)*/
 12966                        ;const TCHAR* path, /* Logical drive number to be 
                    mounted/unmounted */
 12967                        ;BYTE opt /* Mode option 0:Do not mount (delayed m
                    ount), 1:Mount immediately */
 12968                        ;)
 12969                        ;{
 12970                        	.line	4080
 12971                        	.line	4084
 12972                        	FFDOS
 12973                        	xdef	~~f_mount
 12974                        	func
 12975                        	.function	4084
 12976                        ~~f_mount:
 12977                        	longa	on
 12978                        	longi	on
 12979 0B:6E77: 3B           	tsc
 12980 0B:6E78: 38           	sec
 12981 0B:6E79: E9 14 00     	sbc	#L530
 12982 0B:6E7C: 1B           	tcs
 12983 0B:6E7D: 0B           	phd
 12984 0B:6E7E: 5B           	tcd
 12985             00000004   fs_0	set	4
 12986             00000008   path_0	set	8
 12987             0000000C   opt_0	set	12
 12988                        	.block	4084
 12989                        ;	FATFS *cfs;
 12990                        ;	int vol;
 12991                        ;	FRESULT res;
 12992                        ;	const TCHAR *rp = path;
 12993                        ;
 12994                        ;	////k_debug_string("f_mount...\r\n");
 12995                        ;
 12996                        ;	/* Get logical drive number */
 12997                        ;	vol = get_ldnumber(&rp);
 12998             00000000   cfs_1	set	0
 12999             00000004   vol_1	set	4
  Fri Jul 16 2021 14:42                                                Page 254


 13000             00000006   res_1	set	6
 13001             00000008   rp_1	set	8
 13002                        	.sym	cfs,0,138,1,32,49
 13003                        	.sym	vol,4,5,1,16
 13004                        	.sym	res,6,5,1,16
 13005                        	.sym	rp,8,142,1,32
 13006                        	.sym	fs,4,138,6,32,49
 13007                        	.sym	path,8,142,6,32
 13008                        	.sym	opt,12,14,6,8
 13009 0B:6E7F: A5 1C        	lda	<L530+path_0
 13010 0B:6E81: 85 11        	sta	<L531+rp_1
 13011 0B:6E83: A5 1E        	lda	<L530+path_0+2
 13012 0B:6E85: 85 13        	sta	<L531+rp_1+2
 13013                        	.line	4093
 13014 0B:6E87: F4 00 00     	pea	#0
 13015 0B:6E8A: 18           	clc
 13016 0B:6E8B: 7B           	tdc
 13017 0B:6E8C: 69 11 00     	adc	#<L531+rp_1
 13018 0B:6E8F: 48           	pha
 13019 0B:6E90: 22 E8 61 0B  	jsl	~~get_ldnumber
 13020 0B:6E94: 85 0D        	sta	<L531+vol_1
 13021                        ;	if (vol < 0)
 13022                        	.line	4094
 13023                        ;		return FR_INVALID_DRIVE;
 13024 0B:6E96: A5 0D        	lda	<L531+vol_1
 13025 0B:6E98: 30 03        	bmi	L533
 13026 0B:6E9A: 82 15 00     	brl	L10247
 13027                        L533:
 13028                        	.line	4095
 13029 0B:6E9D: A9 0B 00     	lda	#$b
 13030                        L534:
 13031 0B:6EA0: A8           	tay
 13032 0B:6EA1: A5 16        	lda	<L530+2
 13033 0B:6EA3: 85 20        	sta	<L530+2+10
 13034 0B:6EA5: A5 15        	lda	<L530+1
 13035 0B:6EA7: 85 1F        	sta	<L530+1+10
 13036 0B:6EA9: 2B           	pld
 13037 0B:6EAA: 3B           	tsc
 13038 0B:6EAB: 18           	clc
 13039 0B:6EAC: 69 1E 00     	adc	#L530+10
 13040 0B:6EAF: 1B           	tcs
 13041 0B:6EB0: 98           	tya
 13042 0B:6EB1: 6B           	rtl
 13043                        ;	cfs = FatFs[vol]; /* Pointer to fs object */
 13044                        L10247:
 13045                        	.line	4096
 13046 0B:6EB2: A5 0D        	lda	<L531+vol_1
 13047 0B:6EB4: 0A           	asl	A
 13048 0B:6EB5: 0A           	asl	A
 13049 0B:6EB6: 85 01        	sta	<R0
 13050 0B:6EB8: 18           	clc
 13051 0B:6EB9: A9 xx xx     	lda	#<~~FatFs
 13052 0B:6EBC: 65 01        	adc	<R0
 13053 0B:6EBE: 85 05        	sta	<R1
 13054 0B:6EC0: B2 05        	lda	(<R1)
 13055 0B:6EC2: 85 09        	sta	<L531+cfs_1
 13056 0B:6EC4: A0 02 00     	ldy	#$2
 13057 0B:6EC7: B1 05        	lda	(<R1),Y
  Fri Jul 16 2021 14:42                                                Page 255


 13058 0B:6EC9: 85 0B        	sta	<L531+cfs_1+2
 13059                        ;
 13060                        ;	//////k_debug_pointer("f_mount:cfs:",cfs);
 13061                        ;
 13062                        ;	if (cfs)
 13063                        	.line	4100
 13064                        ;	{
 13065 0B:6ECB: A5 09        	lda	<L531+cfs_1
 13066 0B:6ECD: 05 0B        	ora	<L531+cfs_1+2
 13067 0B:6ECF: D0 03        	bne	L535
 13068 0B:6ED1: 82 08 00     	brl	L10248
 13069                        L535:
 13070                        	.line	4101
 13071                        ;#if FF_FS_LOCK != 0
 13072                        ;		clear_lock(cfs);
 13073                        ;#endif
 13074                        ;#if FF_FS_REENTRANT				
                    		/* Discard sync object of the current volume */
 13075                        ;		if (!ff_del_syncobj(cfs->sobj)) return F
                    R_INT_ERR;
 13076                        ;#endif
 13077                        ;		cfs->fs_type = 0; /* Clear old fs object
                     */
 13078                        	.line	4108
 13079 0B:6ED4: E2 20        	sep	#$20
 13080                        	longa	off
 13081 0B:6ED6: A9 00        	lda	#$0
 13082 0B:6ED8: 87 09        	sta	[<L531+cfs_1]
 13083 0B:6EDA: C2 20        	rep	#$20
 13084                        	longa	on
 13085                        ;	}
 13086                        	.line	4109
 13087                        ;
 13088                        ;	if (fs)
 13089                        L10248:
 13090                        	.line	4111
 13091                        ;	{
 13092 0B:6EDC: A5 18        	lda	<L530+fs_0
 13093 0B:6EDE: 05 1A        	ora	<L530+fs_0+2
 13094 0B:6EE0: D0 03        	bne	L536
 13095 0B:6EE2: 82 08 00     	brl	L10249
 13096                        L536:
 13097                        	.line	4112
 13098                        ;		fs->fs_type = 0; /* Clear new fs object 
                    */
 13099                        	.line	4113
 13100 0B:6EE5: E2 20        	sep	#$20
 13101                        	longa	off
 13102 0B:6EE7: A9 00        	lda	#$0
 13103 0B:6EE9: 87 18        	sta	[<L530+fs_0]
 13104 0B:6EEB: C2 20        	rep	#$20
 13105                        	longa	on
 13106                        ;#if FF_FS_REENTRANT				
                    		/* Create sync object for the new volume */
 13107                        ;		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj
                    )) return FR_INT_ERR;
 13108                        ;#endif
 13109                        ;	}
  Fri Jul 16 2021 14:42                                                Page 256


 13110                        	.line	4117
 13111                        ;	FatFs[vol] = fs; /* Register new fs object */
 13112                        L10249:
 13113                        	.line	4118
 13114 0B:6EED: A5 0D        	lda	<L531+vol_1
 13115 0B:6EEF: 0A           	asl	A
 13116 0B:6EF0: 0A           	asl	A
 13117 0B:6EF1: 85 01        	sta	<R0
 13118 0B:6EF3: 18           	clc
 13119 0B:6EF4: A9 xx xx     	lda	#<~~FatFs
 13120 0B:6EF7: 65 01        	adc	<R0
 13121 0B:6EF9: 85 05        	sta	<R1
 13122 0B:6EFB: A5 18        	lda	<L530+fs_0
 13123 0B:6EFD: 92 05        	sta	(<R1)
 13124 0B:6EFF: A5 1A        	lda	<L530+fs_0+2
 13125 0B:6F01: A0 02 00     	ldy	#$2
 13126 0B:6F04: 91 05        	sta	(<R1),Y
 13127                        ;
 13128                        ;	if (opt == 0)
 13129                        	.line	4120
 13130                        ;		return FR_OK; /* Do not mount now, it wi
                    ll be mounted later */
 13131 0B:6F06: A5 20        	lda	<L530+opt_0
 13132 0B:6F08: 29 FF 00     	and	#$ff
 13133 0B:6F0B: F0 03        	beq	L537
 13134 0B:6F0D: 82 06 00     	brl	L10250
 13135                        L537:
 13136                        	.line	4121
 13137 0B:6F10: A9 00 00     	lda	#$0
 13138 0B:6F13: 82 8A FF     	brl	L534
 13139                        ;
 13140                        ;	res = mount_volume(&path, &fs, 0); /* Force moun
                    ted the volume */
 13141                        L10250:
 13142                        	.line	4123
 13143 0B:6F16: F4 00 00     	pea	#<$0
 13144 0B:6F19: F4 00 00     	pea	#0
 13145 0B:6F1C: 18           	clc
 13146 0B:6F1D: 7B           	tdc
 13147 0B:6F1E: 69 18 00     	adc	#<L530+fs_0
 13148 0B:6F21: 48           	pha
 13149 0B:6F22: F4 00 00     	pea	#0
 13150 0B:6F25: 18           	clc
 13151 0B:6F26: 7B           	tdc
 13152 0B:6F27: 69 1C 00     	adc	#<L530+path_0
 13153 0B:6F2A: 48           	pha
 13154 0B:6F2B: 22 F6 66 0B  	jsl	~~mount_volume
 13155 0B:6F2F: 85 0F        	sta	<L531+res_1
 13156                        ;	LEAVE_FF(fs, res);
 13157                        	.line	4124
 13158 0B:6F31: A5 0F        	lda	<L531+res_1
 13159 0B:6F33: 82 6A FF     	brl	L534
 13160                        ;}
 13161                        	.line	4125
 13162                        	.endblock	4125
 13163             00000014   L530	equ	20
 13164             00000009   L531	equ	9
 13165 0B:6F36:              	ends
  Fri Jul 16 2021 14:42                                                Page 257


 13166                        	efunc
 13167                        	.endfunc	4125,9,20
 13168                        	.line	4125
 13169                        ;
 13170                        ;/*-----------------------------------------------
                    ------------------------*/
 13171                        ;/* Open or Create a File                         
                                            */
 13172                        ;/*-----------------------------------------------
                    ------------------------*/
 13173                        ;
 13174                        ;FRESULT f_open(FIL* fp, /* Pointer to the blank f
                    ile object */
 13175                        ;const TCHAR* path, /* Pointer to the file name */
 13176                        ;BYTE mode /* Access mode and file open mode flags
                     */
 13177                        ;)
 13178                        ;{
 13179                        	.line	4131
 13180                        	.line	4135
 13181                        	FFDOS
 13182                        	xdef	~~f_open
 13183                        	func
 13184                        	.function	4135
 13185                        ~~f_open:
 13186                        	longa	on
 13187                        	longi	on
 13188 0B:6F36: 3B           	tsc
 13189 0B:6F37: 38           	sec
 13190 0B:6F38: E9 52 00     	sbc	#L538
 13191 0B:6F3B: 1B           	tcs
 13192 0B:6F3C: 0B           	phd
 13193 0B:6F3D: 5B           	tcd
 13194             00000004   fp_0	set	4
 13195             00000008   path_0	set	8
 13196             0000000C   mode_0	set	12
 13197                        	.block	4135
 13198                        ;	FRESULT res;
 13199                        ;	DIR dj;
 13200                        ;	FATFS *fs;
 13201                        ;#if !FF_FS_READONLY
 13202                        ;	DWORD cl, bcs, clst;
 13203                        ;	LBA_t sc;
 13204                        ;	FSIZE_t ofs;
 13205                        ;#endif
 13206                        ;	DEF_NAMBUF
 13207                        ;
 13208                        ;	////k_debug_string("f_open...\r\n");
 13209                        ;
 13210                        ;	if (!fp)
 13211             00000000   res_1	set	0
 13212             00000002   dj_1	set	2
 13213             00000032   fs_1	set	50
 13214             00000036   cl_1	set	54
 13215             0000003A   bcs_1	set	58
 13216             0000003E   clst_1	set	62
 13217             00000042   sc_1	set	66
 13218             00000046   ofs_1	set	70
  Fri Jul 16 2021 14:42                                                Page 258


 13219                        	.sym	res,0,5,1,16
 13220                        	.sym	dj,2,10,1,384,52
 13221                        	.sym	fs,50,138,1,32,49
 13222                        	.sym	cl,54,18,1,32
 13223                        	.sym	bcs,58,18,1,32
 13224                        	.sym	clst,62,18,1,32
 13225                        	.sym	sc,66,18,1,32
 13226                        	.sym	ofs,70,18,1,32
 13227                        	.sym	fp,4,138,6,32,51
 13228                        	.sym	path,8,142,6,32
 13229                        	.sym	mode,12,14,6,8
 13230                        	.line	4148
 13231                        ;		return FR_INVALID_OBJECT;
 13232 0B:6F3E: A5 56        	lda	<L538+fp_0
 13233 0B:6F40: 05 58        	ora	<L538+fp_0+2
 13234 0B:6F42: F0 03        	beq	L541
 13235 0B:6F44: 82 15 00     	brl	L10251
 13236                        L541:
 13237                        	.line	4149
 13238 0B:6F47: A9 09 00     	lda	#$9
 13239                        L542:
 13240 0B:6F4A: A8           	tay
 13241 0B:6F4B: A5 54        	lda	<L538+2
 13242 0B:6F4D: 85 5E        	sta	<L538+2+10
 13243 0B:6F4F: A5 53        	lda	<L538+1
 13244 0B:6F51: 85 5D        	sta	<L538+1+10
 13245 0B:6F53: 2B           	pld
 13246 0B:6F54: 3B           	tsc
 13247 0B:6F55: 18           	clc
 13248 0B:6F56: 69 5C 00     	adc	#L538+10
 13249 0B:6F59: 1B           	tcs
 13250 0B:6F5A: 98           	tya
 13251 0B:6F5B: 6B           	rtl
 13252                        ;
 13253                        ;	/* Get logical drive number */
 13254                        ;	mode &= FF_FS_READONLY ?
 13255                        L10251:
 13256                        	.line	4152
 13257                        ;			FA_READ :
 13258                        ;			FA_READ | FA_WRITE | FA_CREATE_A
                    LWAYS | FA_CREATE_NEW
 13259                        ;					| FA_OPEN_ALWAYS
                     | FA_OPEN_APPEND;
 13260 0B:6F5C: E2 20        	sep	#$20
 13261                        	longa	off
 13262 0B:6F5E: A9 C0        	lda	#$c0
 13263 0B:6F60: 14 5E        	trb	<L538+mode_0
 13264 0B:6F62: C2 20        	rep	#$20
 13265                        	longa	on
 13266                        ;	res = mount_volume(&path, &fs, mode);
 13267                        	.line	4156
 13268 0B:6F64: D4 5E        	pei	<L538+mode_0
 13269 0B:6F66: F4 00 00     	pea	#0
 13270 0B:6F69: 18           	clc
 13271 0B:6F6A: 7B           	tdc
 13272 0B:6F6B: 69 3B 00     	adc	#<L539+fs_1
 13273 0B:6F6E: 48           	pha
 13274 0B:6F6F: F4 00 00     	pea	#0
  Fri Jul 16 2021 14:42                                                Page 259


 13275 0B:6F72: 18           	clc
 13276 0B:6F73: 7B           	tdc
 13277 0B:6F74: 69 5A 00     	adc	#<L538+path_0
 13278 0B:6F77: 48           	pha
 13279 0B:6F78: 22 F6 66 0B  	jsl	~~mount_volume
 13280 0B:6F7C: 85 09        	sta	<L539+res_1
 13281                        ;
 13282                        ;	//////k_debug_long("f_open:mount_volume:",res);
 13283                        ;
 13284                        ;	if (res == FR_OK)
 13285                        	.line	4160
 13286                        ;	{
 13287 0B:6F7E: A5 09        	lda	<L539+res_1
 13288 0B:6F80: F0 03        	beq	L543
 13289 0B:6F82: 82 20 04     	brl	L10252
 13290                        L543:
 13291                        	.line	4161
 13292                        ;		dj.obj.fs = fs;
 13293                        	.line	4162
 13294 0B:6F85: A5 3B        	lda	<L539+fs_1
 13295 0B:6F87: 85 0B        	sta	<L539+dj_1
 13296 0B:6F89: A5 3D        	lda	<L539+fs_1+2
 13297 0B:6F8B: 85 0D        	sta	<L539+dj_1+2
 13298                        ;		INIT_NAMBUF(fs);
 13299                        	.line	4163
 13300                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 13301                        	.line	4164
 13302 0B:6F8D: D4 5C        	pei	<L538+path_0+2
 13303 0B:6F8F: D4 5A        	pei	<L538+path_0
 13304 0B:6F91: F4 00 00     	pea	#0
 13305 0B:6F94: 18           	clc
 13306 0B:6F95: 7B           	tdc
 13307 0B:6F96: 69 0B 00     	adc	#<L539+dj_1
 13308 0B:6F99: 48           	pha
 13309 0B:6F9A: 22 73 60 0B  	jsl	~~follow_path
 13310 0B:6F9E: 85 09        	sta	<L539+res_1
 13311                        ;#if !FF_FS_READONLY	/* Read/Write configurat
                    ion */
 13312                        ;		if (res == FR_OK)
 13313                        	.line	4166
 13314                        ;		{
 13315 0B:6FA0: A5 09        	lda	<L539+res_1
 13316 0B:6FA2: F0 03        	beq	L544
 13317 0B:6FA4: 82 12 00     	brl	L10253
 13318                        L544:
 13319                        	.line	4167
 13320                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 13321                        	.line	4168
 13322                        ;			{ /* Origin directory itself? */
 13323 0B:6FA7: E2 20        	sep	#$20
 13324                        	longa	off
 13325 0B:6FA9: A5 36        	lda	<L539+dj_1+43
 13326 0B:6FAB: 29 80        	and	#<$80
 13327 0B:6FAD: C2 20        	rep	#$20
 13328                        	longa	on
 13329 0B:6FAF: D0 03        	bne	L545
 13330 0B:6FB1: 82 05 00     	brl	L10254
  Fri Jul 16 2021 14:42                                                Page 260


 13331                        L545:
 13332                        	.line	4169
 13333                        ;				//////k_debug_string("f_
                    open mode:FR_INVALID_NAME\r\n");
 13334                        ;				res = FR_INVALID_NAME;
 13335                        	.line	4171
 13336 0B:6FB4: A9 06 00     	lda	#$6
 13337 0B:6FB7: 85 09        	sta	<L539+res_1
 13338                        ;			}
 13339                        	.line	4172
 13340                        ;#if FF_FS_LOCK != 0
 13341                        ;			else
 13342                        ;			{
 13343                        ;				res = chk_lock(&dj, (mod
                    e & ~FA_READ) ? 1 : 0); /* Check if the file can be used */
 13344                        ;			}
 13345                        ;#endif
 13346                        ;		}
 13347                        L10254:
 13348                        	.line	4179
 13349                        ;
 13350                        ;		//////k_debug_integer("f_open mode:", mo
                    de);
 13351                        ;
 13352                        ;		/* Create or Open a file */
 13353                        ;		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_A
                    LWAYS | FA_CREATE_NEW))
 13354                        L10253:
 13355                        	.line	4184
 13356                        ;		{
 13357 0B:6FB9: E2 20        	sep	#$20
 13358                        	longa	off
 13359 0B:6FBB: A5 5E        	lda	<L538+mode_0
 13360 0B:6FBD: 29 1C        	and	#<$1c
 13361 0B:6FBF: C2 20        	rep	#$20
 13362                        	longa	on
 13363 0B:6FC1: D0 03        	bne	L546
 13364 0B:6FC3: 82 3D 01     	brl	L10255
 13365                        L546:
 13366                        	.line	4185
 13367                        ;			if (res != FR_OK)
 13368                        	.line	4186
 13369                        ;			{ /* No file, create new */
 13370 0B:6FC6: A5 09        	lda	<L539+res_1
 13371 0B:6FC8: D0 03        	bne	L547
 13372 0B:6FCA: 82 24 00     	brl	L10256
 13373                        L547:
 13374                        	.line	4187
 13375                        ;				if (res == FR_NO_FILE)
 13376                        	.line	4188
 13377                        ;				{ /* There is no file to
                     open, create a new entry */
 13378 0B:6FCD: A5 09        	lda	<L539+res_1
 13379 0B:6FCF: C9 04 00     	cmp	#<$4
 13380 0B:6FD2: F0 03        	beq	L548
 13381 0B:6FD4: 82 0F 00     	brl	L10257
 13382                        L548:
 13383                        	.line	4189
  Fri Jul 16 2021 14:42                                                Page 261


 13384                        ;#if FF_FS_LOCK != 0
 13385                        ;					res = enq_lock()
                     ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 13386                        ;#else
 13387                        ;					res = dir_regist
                    er(&dj);
 13388                        	.line	4193
 13389 0B:6FD7: F4 00 00     	pea	#0
 13390 0B:6FDA: 18           	clc
 13391 0B:6FDB: 7B           	tdc
 13392 0B:6FDC: 69 0B 00     	adc	#<L539+dj_1
 13393 0B:6FDF: 48           	pha
 13394 0B:6FE0: 22 10 5A 0B  	jsl	~~dir_register
 13395 0B:6FE4: 85 09        	sta	<L539+res_1
 13396                        ;#endif
 13397                        ;				}
 13398                        	.line	4195
 13399                        ;				mode |= FA_CREATE_ALWAYS
                    ; /* File is created */
 13400                        L10257:
 13401                        	.line	4196
 13402 0B:6FE6: E2 20        	sep	#$20
 13403                        	longa	off
 13404 0B:6FE8: A9 08        	lda	#$8
 13405 0B:6FEA: 04 5E        	tsb	<L538+mode_0
 13406 0B:6FEC: C2 20        	rep	#$20
 13407                        	longa	on
 13408                        ;			}
 13409                        	.line	4197
 13410                        ;			else
 13411 0B:6FEE: 82 27 00     	brl	L10258
 13412                        L10256:
 13413                        ;			{ /* Any object with the same na
                    me is already existing */
 13414                        	.line	4199
 13415                        ;				if (dj.obj.attr & (AM_RD
                    O | AM_DIR))
 13416                        	.line	4200
 13417                        ;				{ /* Cannot overwrite it
                     (R/O or DIR) */
 13418 0B:6FF1: E2 20        	sep	#$20
 13419                        	longa	off
 13420 0B:6FF3: A5 11        	lda	<L539+dj_1+6
 13421 0B:6FF5: 29 11        	and	#<$11
 13422 0B:6FF7: C2 20        	rep	#$20
 13423                        	longa	on
 13424 0B:6FF9: D0 03        	bne	L549
 13425 0B:6FFB: 82 08 00     	brl	L10259
 13426                        L549:
 13427                        	.line	4201
 13428                        ;					res = FR_DENIED;
 13429                        	.line	4202
 13430 0B:6FFE: A9 07 00     	lda	#$7
 13431 0B:7001: 85 09        	sta	<L539+res_1
 13432                        ;				}
 13433                        	.line	4203
 13434                        ;				else
 13435 0B:7003: 82 12 00     	brl	L10260
  Fri Jul 16 2021 14:42                                                Page 262


 13436                        L10259:
 13437                        ;				{
 13438                        	.line	4205
 13439                        ;					if (mode & FA_CR
                    EATE_NEW)
 13440                        	.line	4206
 13441                        ;						res = FR
                    _EXIST; /* Cannot create as new file */
 13442 0B:7006: E2 20        	sep	#$20
 13443                        	longa	off
 13444 0B:7008: A5 5E        	lda	<L538+mode_0
 13445 0B:700A: 29 04        	and	#<$4
 13446 0B:700C: C2 20        	rep	#$20
 13447                        	longa	on
 13448 0B:700E: D0 03        	bne	L550
 13449 0B:7010: 82 05 00     	brl	L10261
 13450                        L550:
 13451                        	.line	4207
 13452 0B:7013: A9 08 00     	lda	#$8
 13453 0B:7016: 85 09        	sta	<L539+res_1
 13454                        ;				}
 13455                        L10261:
 13456                        	.line	4208
 13457                        L10260:
 13458                        ;			}
 13459                        	.line	4209
 13460                        L10258:
 13461                        ;			if (res == FR_OK && (mode & FA_C
                    REATE_ALWAYS))
 13462                        	.line	4210
 13463                        ;			{ /* Truncate the file if overwr
                    ite mode */
 13464 0B:7018: A5 09        	lda	<L539+res_1
 13465 0B:701A: F0 03        	beq	L551
 13466 0B:701C: 82 E1 00     	brl	L10262
 13467                        L551:
 13468 0B:701F: E2 20        	sep	#$20
 13469                        	longa	off
 13470 0B:7021: A5 5E        	lda	<L538+mode_0
 13471 0B:7023: 29 08        	and	#<$8
 13472 0B:7025: C2 20        	rep	#$20
 13473                        	longa	on
 13474 0B:7027: D0 03        	bne	L552
 13475 0B:7029: 82 D4 00     	brl	L10262
 13476                        L552:
 13477                        	.line	4211
 13478                        ;#if FF_FS_EXFAT
 13479                        ;				if (fs->fs_type == FS_EX
                    FAT)
 13480                        ;				{
 13481                        ;					/* Get current a
                    llocation info */
 13482                        ;					fp->obj.fs = fs;
 13483                        ;					init_alloc_info(
                    fs, &fp->obj);
 13484                        ;					/* Set directory
                     entry block initial state */
 13485                        ;					mem_set(fs->dirb
  Fri Jul 16 2021 14:42                                                Page 263


                    uf + 2, 0, 30); /* Clear 85 entry except for NumSec */
 13486                        ;					mem_set(fs->dirb
                    uf + 38, 0, 26); /* Clear C0 entry except for NumName and Na
                    meHash */
 13487                        ;					fs->dirbuf[XDIR_
                    Attr] = AM_ARC;
 13488                        ;					st_dword(fs->dir
                    buf + XDIR_CrtTime, GET_FATTIME());
 13489                        ;					fs->dirbuf[XDIR_
                    GenFlags] = 1;
 13490                        ;					res = store_xdir
                    (&dj);
 13491                        ;					if (res == FR_OK
                     && fp->obj.sclust != 0)
 13492                        ;					{ /* Remove the 
                    cluster chain if exist */
 13493                        ;						res = re
                    move_chain(&fp->obj, fp->obj.sclust, 0);
 13494                        ;						fs->last
                    _clst = fp->obj.sclust - 1; /* Reuse the cluster hole */
 13495                        ;					}
 13496                        ;				}
 13497                        ;				else
 13498                        ;#endif
 13499                        ;				{
 13500                        	.line	4233
 13501                        ;					////k_debug_stri
                    ng("f_open::Set directory entry initial state...\r\n");
 13502                        ;					/* Set directory
                     entry initial state */
 13503                        ;					cl = ld_clust(fs
                    , dj.dir); /* Get current cluster chain */
 13504                        	.line	4236
 13505 0B:702C: D4 29        	pei	<L539+dj_1+30
 13506 0B:702E: D4 27        	pei	<L539+dj_1+28
 13507 0B:7030: D4 3D        	pei	<L539+fs_1+2
 13508 0B:7032: D4 3B        	pei	<L539+fs_1
 13509 0B:7034: 22 F3 56 0B  	jsl	~~ld_clust
 13510 0B:7038: 85 3F        	sta	<L539+cl_1
 13511 0B:703A: 86 41        	stx	<L539+cl_1+2
 13512                        ;					st_dword(dj.dir 
                    + DIR_CrtTime, GET_FATTIME()); /* Set created time */
 13513                        	.line	4237
 13514 0B:703C: F4 21 52     	pea	#^$52210000
 13515 0B:703F: F4 00 00     	pea	#<$52210000
 13516 0B:7042: 18           	clc
 13517 0B:7043: A9 0E 00     	lda	#$e
 13518 0B:7046: 65 27        	adc	<L539+dj_1+28
 13519 0B:7048: 85 01        	sta	<R0
 13520 0B:704A: A9 00 00     	lda	#$0
 13521 0B:704D: 65 29        	adc	<L539+dj_1+30
 13522 0B:704F: 85 03        	sta	<R0+2
 13523 0B:7051: D4 03        	pei	<R0+2
 13524 0B:7053: D4 01        	pei	<R0
 13525 0B:7055: 22 96 40 0B  	jsl	~~st_dword
 13526                        ;					dj.dir[DIR_Attr]
                     = AM_ARC; /* Reset attribute */
 13527                        	.line	4238
  Fri Jul 16 2021 14:42                                                Page 264


 13528 0B:7059: E2 20        	sep	#$20
 13529                        	longa	off
 13530 0B:705B: A9 20        	lda	#$20
 13531 0B:705D: A0 0B 00     	ldy	#$b
 13532 0B:7060: 97 27        	sta	[<L539+dj_1+28],Y
 13533 0B:7062: C2 20        	rep	#$20
 13534                        	longa	on
 13535                        ;					st_clust(fs, dj.
                    dir, 0); /* Reset file allocation info */
 13536                        	.line	4239
 13537 0B:7064: F4 00 00     	pea	#^$0
 13538 0B:7067: F4 00 00     	pea	#<$0
 13539 0B:706A: D4 29        	pei	<L539+dj_1+30
 13540 0B:706C: D4 27        	pei	<L539+dj_1+28
 13541 0B:706E: D4 3D        	pei	<L539+fs_1+2
 13542 0B:7070: D4 3B        	pei	<L539+fs_1
 13543 0B:7072: 22 83 57 0B  	jsl	~~st_clust
 13544                        ;					st_dword(dj.dir 
                    + DIR_FileSize, 0);
 13545                        	.line	4240
 13546 0B:7076: F4 00 00     	pea	#^$0
 13547 0B:7079: F4 00 00     	pea	#<$0
 13548 0B:707C: 18           	clc
 13549 0B:707D: A9 1C 00     	lda	#$1c
 13550 0B:7080: 65 27        	adc	<L539+dj_1+28
 13551 0B:7082: 85 01        	sta	<R0
 13552 0B:7084: A9 00 00     	lda	#$0
 13553 0B:7087: 65 29        	adc	<L539+dj_1+30
 13554 0B:7089: 85 03        	sta	<R0+2
 13555 0B:708B: D4 03        	pei	<R0+2
 13556 0B:708D: D4 01        	pei	<R0
 13557 0B:708F: 22 96 40 0B  	jsl	~~st_dword
 13558                        ;					fs->wflag = 1;
 13559                        	.line	4241
 13560 0B:7093: E2 20        	sep	#$20
 13561                        	longa	off
 13562 0B:7095: A9 01        	lda	#$1
 13563 0B:7097: A0 03 00     	ldy	#$3
 13564 0B:709A: 97 3B        	sta	[<L539+fs_1],Y
 13565 0B:709C: C2 20        	rep	#$20
 13566                        	longa	on
 13567                        ;					if (cl != 0)
 13568                        	.line	4242
 13569                        ;					{ /* Remove the 
                    cluster chain if exist */
 13570 0B:709E: A5 3F        	lda	<L539+cl_1
 13571 0B:70A0: 05 41        	ora	<L539+cl_1+2
 13572 0B:70A2: D0 03        	bne	L553
 13573 0B:70A4: 82 59 00     	brl	L10263
 13574                        L553:
 13575                        	.line	4243
 13576                        ;						sc = fs-
                    >winsect;
 13577                        	.line	4244
 13578 0B:70A7: A0 2B 00     	ldy	#$2b
 13579 0B:70AA: B7 3B        	lda	[<L539+fs_1],Y
 13580 0B:70AC: 85 4B        	sta	<L539+sc_1
 13581 0B:70AE: A0 2D 00     	ldy	#$2d
  Fri Jul 16 2021 14:42                                                Page 265


 13582 0B:70B1: B7 3B        	lda	[<L539+fs_1],Y
 13583 0B:70B3: 85 4D        	sta	<L539+sc_1+2
 13584                        ;						res = re
                    move_chain(&dj.obj, cl, 0);
 13585                        	.line	4245
 13586 0B:70B5: F4 00 00     	pea	#^$0
 13587 0B:70B8: F4 00 00     	pea	#<$0
 13588 0B:70BB: D4 41        	pei	<L539+cl_1+2
 13589 0B:70BD: D4 3F        	pei	<L539+cl_1
 13590 0B:70BF: F4 00 00     	pea	#0
 13591 0B:70C2: 18           	clc
 13592 0B:70C3: 7B           	tdc
 13593 0B:70C4: 69 0B 00     	adc	#<L539+dj_1
 13594 0B:70C7: 48           	pha
 13595 0B:70C8: 22 C3 4B 0B  	jsl	~~remove_chain
 13596 0B:70CC: 85 09        	sta	<L539+res_1
 13597                        ;						if (res 
                    == FR_OK)
 13598                        	.line	4246
 13599                        ;						{
 13600 0B:70CE: A5 09        	lda	<L539+res_1
 13601 0B:70D0: F0 03        	beq	L554
 13602 0B:70D2: 82 2B 00     	brl	L10264
 13603                        L554:
 13604                        	.line	4247
 13605                        ;							
                    res = move_window(fs, sc);
 13606                        	.line	4248
 13607 0B:70D5: D4 4D        	pei	<L539+sc_1+2
 13608 0B:70D7: D4 4B        	pei	<L539+sc_1
 13609 0B:70D9: D4 3D        	pei	<L539+fs_1+2
 13610 0B:70DB: D4 3B        	pei	<L539+fs_1
 13611 0B:70DD: 22 7A 43 0B  	jsl	~~move_window
 13612 0B:70E1: 85 09        	sta	<L539+res_1
 13613                        ;							
                    fs->last_clst = cl - 1; /* Reuse the cluster hole */
 13614                        	.line	4249
 13615 0B:70E3: 18           	clc
 13616 0B:70E4: A9 FF FF     	lda	#$ffff
 13617 0B:70E7: 65 3F        	adc	<L539+cl_1
 13618 0B:70E9: 85 01        	sta	<R0
 13619 0B:70EB: A9 FF FF     	lda	#$ffff
 13620 0B:70EE: 65 41        	adc	<L539+cl_1+2
 13621 0B:70F0: 85 03        	sta	<R0+2
 13622 0B:70F2: A5 01        	lda	<R0
 13623 0B:70F4: A0 0B 00     	ldy	#$b
 13624 0B:70F7: 97 3B        	sta	[<L539+fs_1],Y
 13625 0B:70F9: A5 03        	lda	<R0+2
 13626 0B:70FB: A0 0D 00     	ldy	#$d
 13627 0B:70FE: 97 3B        	sta	[<L539+fs_1],Y
 13628                        ;						}
 13629                        	.line	4250
 13630                        ;					}
 13631                        L10264:
 13632                        	.line	4251
 13633                        ;				}
 13634                        L10263:
 13635                        	.line	4252
  Fri Jul 16 2021 14:42                                                Page 266


 13636                        ;			}
 13637                        	.line	4253
 13638                        ;		}
 13639                        L10262:
 13640                        	.line	4254
 13641                        ;		else
 13642 0B:7100: 82 3B 00     	brl	L10265
 13643                        L10255:
 13644                        ;		{ /* Open an existing file */
 13645                        	.line	4256
 13646                        ;			if (res == FR_OK)
 13647                        	.line	4257
 13648                        ;			{ /* Is the object exsiting? */
 13649 0B:7103: A5 09        	lda	<L539+res_1
 13650 0B:7105: F0 03        	beq	L555
 13651 0B:7107: 82 34 00     	brl	L10266
 13652                        L555:
 13653                        	.line	4258
 13654                        ;				if (dj.obj.attr & AM_DIR
                    )
 13655                        	.line	4259
 13656                        ;				{ /* File open against a
                     directory */
 13657 0B:710A: E2 20        	sep	#$20
 13658                        	longa	off
 13659 0B:710C: A5 11        	lda	<L539+dj_1+6
 13660 0B:710E: 29 10        	and	#<$10
 13661 0B:7110: C2 20        	rep	#$20
 13662                        	longa	on
 13663 0B:7112: D0 03        	bne	L556
 13664 0B:7114: 82 08 00     	brl	L10267
 13665                        L556:
 13666                        	.line	4260
 13667                        ;					res = FR_NO_FILE
                    ;
 13668                        	.line	4261
 13669 0B:7117: A9 04 00     	lda	#$4
 13670 0B:711A: 85 09        	sta	<L539+res_1
 13671                        ;				}
 13672                        	.line	4262
 13673                        ;				else
 13674 0B:711C: 82 1F 00     	brl	L10268
 13675                        L10267:
 13676                        ;				{
 13677                        	.line	4264
 13678                        ;					if ((mode & FA_W
                    RITE) && (dj.obj.attr & AM_RDO))
 13679                        	.line	4265
 13680                        ;					{ /* Write mode 
                    open against R/O file */
 13681 0B:711F: E2 20        	sep	#$20
 13682                        	longa	off
 13683 0B:7121: A5 5E        	lda	<L538+mode_0
 13684 0B:7123: 29 02        	and	#<$2
 13685 0B:7125: C2 20        	rep	#$20
 13686                        	longa	on
 13687 0B:7127: D0 03        	bne	L557
 13688 0B:7129: 82 12 00     	brl	L10269
  Fri Jul 16 2021 14:42                                                Page 267


 13689                        L557:
 13690 0B:712C: E2 20        	sep	#$20
 13691                        	longa	off
 13692 0B:712E: A5 11        	lda	<L539+dj_1+6
 13693 0B:7130: 29 01        	and	#<$1
 13694 0B:7132: C2 20        	rep	#$20
 13695                        	longa	on
 13696 0B:7134: D0 03        	bne	L558
 13697 0B:7136: 82 05 00     	brl	L10269
 13698                        L558:
 13699                        	.line	4266
 13700                        ;						res = FR
                    _DENIED;
 13701                        	.line	4267
 13702 0B:7139: A9 07 00     	lda	#$7
 13703 0B:713C: 85 09        	sta	<L539+res_1
 13704                        ;					}
 13705                        	.line	4268
 13706                        ;				}
 13707                        L10269:
 13708                        	.line	4269
 13709                        L10268:
 13710                        ;			}
 13711                        	.line	4270
 13712                        ;		}
 13713                        L10266:
 13714                        	.line	4271
 13715                        L10265:
 13716                        ;		if (res == FR_OK)
 13717                        	.line	4272
 13718                        ;		{
 13719 0B:713E: A5 09        	lda	<L539+res_1
 13720 0B:7140: F0 03        	beq	L559
 13721 0B:7142: 82 37 00     	brl	L10270
 13722                        L559:
 13723                        	.line	4273
 13724                        ;			if (mode & FA_CREATE_ALWAYS)
 13725                        	.line	4274
 13726                        ;				mode |= FA_MODIFIED; /* 
                    Set file change flag if created or overwritten */
 13727 0B:7145: E2 20        	sep	#$20
 13728                        	longa	off
 13729 0B:7147: A5 5E        	lda	<L538+mode_0
 13730 0B:7149: 29 08        	and	#<$8
 13731 0B:714B: C2 20        	rep	#$20
 13732                        	longa	on
 13733 0B:714D: D0 03        	bne	L560
 13734 0B:714F: 82 08 00     	brl	L10271
 13735                        L560:
 13736                        	.line	4275
 13737 0B:7152: E2 20        	sep	#$20
 13738                        	longa	off
 13739 0B:7154: A9 40        	lda	#$40
 13740 0B:7156: 04 5E        	tsb	<L538+mode_0
 13741 0B:7158: C2 20        	rep	#$20
 13742                        	longa	on
 13743                        ;			fp->dir_sect = fs->winsect; /* P
                    ointer to the directory entry */
  Fri Jul 16 2021 14:42                                                Page 268


 13744                        L10271:
 13745                        	.line	4276
 13746 0B:715A: A0 2B 00     	ldy	#$2b
 13747 0B:715D: B7 3B        	lda	[<L539+fs_1],Y
 13748 0B:715F: A0 1E 00     	ldy	#$1e
 13749 0B:7162: 97 56        	sta	[<L538+fp_0],Y
 13750 0B:7164: A0 2D 00     	ldy	#$2d
 13751 0B:7167: B7 3B        	lda	[<L539+fs_1],Y
 13752 0B:7169: A0 20 00     	ldy	#$20
 13753 0B:716C: 97 56        	sta	[<L538+fp_0],Y
 13754                        ;			fp->dir_ptr = dj.dir;
 13755                        	.line	4277
 13756 0B:716E: A5 27        	lda	<L539+dj_1+28
 13757 0B:7170: A0 22 00     	ldy	#$22
 13758 0B:7173: 97 56        	sta	[<L538+fp_0],Y
 13759 0B:7175: A5 29        	lda	<L539+dj_1+30
 13760 0B:7177: A0 24 00     	ldy	#$24
 13761 0B:717A: 97 56        	sta	[<L538+fp_0],Y
 13762                        ;#if FF_FS_LOCK != 0
 13763                        ;			fp->obj.lockid = inc_lock(&dj, (
                    mode & ~FA_READ) ? 1 : 0); /* Lock the file for this session
                     */
 13764                        ;			if (fp->obj.lockid == 0) res = F
                    R_INT_ERR;
 13765                        ;#endif
 13766                        ;		}
 13767                        	.line	4282
 13768                        ;#else		/* R/O configuration */
 13769                        ;		if (res == FR_OK)
 13770                        ;		{
 13771                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 13772                        ;			{ /* Is it origin directory itse
                    lf? */
 13773                        ;				res = FR_INVALID_NAME;
 13774                        ;			}
 13775                        ;			else
 13776                        ;			{
 13777                        ;				if (dj.obj.attr & AM_DIR
                    )
 13778                        ;				{ /* Is it a directory? 
                    */
 13779                        ;					res = FR_NO_FILE
                    ;
 13780                        ;				}
 13781                        ;			}
 13782                        ;		}
 13783                        ;#endif
 13784                        ;
 13785                        ;		if (res == FR_OK)
 13786                        L10270:
 13787                        	.line	4300
 13788                        ;		{
 13789 0B:717C: A5 09        	lda	<L539+res_1
 13790 0B:717E: F0 03        	beq	L561
 13791 0B:7180: 82 22 02     	brl	L10272
 13792                        L561:
 13793                        	.line	4301
 13794                        ;#if FF_FS_EXFAT
  Fri Jul 16 2021 14:42                                                Page 269


 13795                        ;			if (fs->fs_type == FS_EXFAT)
 13796                        ;			{
 13797                        ;				fp->obj.c_scl = dj.obj.s
                    clust; /* Get containing directory info */
 13798                        ;				fp->obj.c_size = ((DWORD
                    )dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 13799                        ;				fp->obj.c_ofs = dj.blk_o
                    fs;
 13800                        ;				init_alloc_info(fs, &fp-
                    >obj);
 13801                        ;			}
 13802                        ;			else
 13803                        ;#endif
 13804                        ;			{
 13805                        	.line	4312
 13806                        ;				fp->obj.sclust = ld_clus
                    t(fs, dj.dir); /* Get object allocation info */
 13807                        	.line	4313
 13808 0B:7183: D4 29        	pei	<L539+dj_1+30
 13809 0B:7185: D4 27        	pei	<L539+dj_1+28
 13810 0B:7187: D4 3D        	pei	<L539+fs_1+2
 13811 0B:7189: D4 3B        	pei	<L539+fs_1
 13812 0B:718B: 22 F3 56 0B  	jsl	~~ld_clust
 13813 0B:718F: 85 01        	sta	<R0
 13814 0B:7191: 86 03        	stx	<R0+2
 13815 0B:7193: A5 01        	lda	<R0
 13816 0B:7195: A0 08 00     	ldy	#$8
 13817 0B:7198: 97 56        	sta	[<L538+fp_0],Y
 13818 0B:719A: A5 03        	lda	<R0+2
 13819 0B:719C: A0 0A 00     	ldy	#$a
 13820 0B:719F: 97 56        	sta	[<L538+fp_0],Y
 13821                        ;				fp->obj.objsize = ld_dwo
                    rd(dj.dir + DIR_FileSize);
 13822                        	.line	4314
 13823 0B:71A1: 18           	clc
 13824 0B:71A2: A9 1C 00     	lda	#$1c
 13825 0B:71A5: 65 27        	adc	<L539+dj_1+28
 13826 0B:71A7: 85 01        	sta	<R0
 13827 0B:71A9: A9 00 00     	lda	#$0
 13828 0B:71AC: 65 29        	adc	<L539+dj_1+30
 13829 0B:71AE: 85 03        	sta	<R0+2
 13830 0B:71B0: D4 03        	pei	<R0+2
 13831 0B:71B2: D4 01        	pei	<R0
 13832 0B:71B4: 22 BB 3F 0B  	jsl	~~ld_dword
 13833 0B:71B8: 85 05        	sta	<R1
 13834 0B:71BA: 86 07        	stx	<R1+2
 13835 0B:71BC: A5 05        	lda	<R1
 13836 0B:71BE: A0 0C 00     	ldy	#$c
 13837 0B:71C1: 97 56        	sta	[<L538+fp_0],Y
 13838 0B:71C3: A5 07        	lda	<R1+2
 13839 0B:71C5: A0 0E 00     	ldy	#$e
 13840 0B:71C8: 97 56        	sta	[<L538+fp_0],Y
 13841                        ;			}
 13842                        	.line	4315
 13843                        ;#if FF_USE_FASTSEEK
 13844                        ;			fp->cltbl = 0; /* Disable fast s
                    eek mode */
 13845                        ;#endif
  Fri Jul 16 2021 14:42                                                Page 270


 13846                        ;			fp->obj.fs = fs; /* Validate the
                     file object */
 13847                        	.line	4319
 13848 0B:71CA: A5 3B        	lda	<L539+fs_1
 13849 0B:71CC: 87 56        	sta	[<L538+fp_0]
 13850 0B:71CE: A5 3D        	lda	<L539+fs_1+2
 13851 0B:71D0: A0 02 00     	ldy	#$2
 13852 0B:71D3: 97 56        	sta	[<L538+fp_0],Y
 13853                        ;			fp->obj.id = fs->id;
 13854                        	.line	4320
 13855 0B:71D5: A0 05 00     	ldy	#$5
 13856 0B:71D8: B7 3B        	lda	[<L539+fs_1],Y
 13857 0B:71DA: A0 04 00     	ldy	#$4
 13858 0B:71DD: 97 56        	sta	[<L538+fp_0],Y
 13859                        ;			fp->flag = mode; /* Set file acc
                    ess mode */
 13860                        	.line	4321
 13861 0B:71DF: E2 20        	sep	#$20
 13862                        	longa	off
 13863 0B:71E1: A5 5E        	lda	<L538+mode_0
 13864 0B:71E3: A0 10 00     	ldy	#$10
 13865 0B:71E6: 97 56        	sta	[<L538+fp_0],Y
 13866 0B:71E8: C2 20        	rep	#$20
 13867                        	longa	on
 13868                        ;			fp->err = 0; /* Clear error flag
                     */
 13869                        	.line	4322
 13870 0B:71EA: E2 20        	sep	#$20
 13871                        	longa	off
 13872 0B:71EC: A9 00        	lda	#$0
 13873 0B:71EE: A0 11 00     	ldy	#$11
 13874 0B:71F1: 97 56        	sta	[<L538+fp_0],Y
 13875 0B:71F3: C2 20        	rep	#$20
 13876                        	longa	on
 13877                        ;			fp->sect = 0; /* Invalidate curr
                    ent data sector */
 13878                        	.line	4323
 13879 0B:71F5: A9 00 00     	lda	#$0
 13880 0B:71F8: A0 1A 00     	ldy	#$1a
 13881 0B:71FB: 97 56        	sta	[<L538+fp_0],Y
 13882 0B:71FD: A9 00 00     	lda	#$0
 13883 0B:7200: A0 1C 00     	ldy	#$1c
 13884 0B:7203: 97 56        	sta	[<L538+fp_0],Y
 13885                        ;			fp->fptr = 0; /* Set file pointe
                    r top of the file */
 13886                        	.line	4324
 13887 0B:7205: A9 00 00     	lda	#$0
 13888 0B:7208: A0 12 00     	ldy	#$12
 13889 0B:720B: 97 56        	sta	[<L538+fp_0],Y
 13890 0B:720D: A9 00 00     	lda	#$0
 13891 0B:7210: A0 14 00     	ldy	#$14
 13892 0B:7213: 97 56        	sta	[<L538+fp_0],Y
 13893                        ;#if !FF_FS_READONLY
 13894                        ;#if !FF_FS_TINY
 13895                        ;			mem_set(fp->buf, 0, sizeof fp->b
                    uf); /* Clear sector buffer */
 13896                        	.line	4327
 13897 0B:7215: F4 00 02     	pea	#<$200
  Fri Jul 16 2021 14:42                                                Page 271


 13898 0B:7218: F4 00 00     	pea	#<$0
 13899 0B:721B: 18           	clc
 13900 0B:721C: A9 26 00     	lda	#$26
 13901 0B:721F: 65 56        	adc	<L538+fp_0
 13902 0B:7221: 85 01        	sta	<R0
 13903 0B:7223: A9 00 00     	lda	#$0
 13904 0B:7226: 65 58        	adc	<L538+fp_0+2
 13905 0B:7228: 85 03        	sta	<R0+2
 13906 0B:722A: D4 03        	pei	<R0+2
 13907 0B:722C: D4 01        	pei	<R0
 13908 0B:722E: 22 5F 41 0B  	jsl	~~mem_set
 13909                        ;#endif
 13910                        ;			if ((mode & FA_SEEKEND) && fp->o
                    bj.objsize > 0)
 13911                        	.line	4329
 13912                        ;			{ /* Seek to end of file if FA_O
                    PEN_APPEND is specified */
 13913 0B:7232: E2 20        	sep	#$20
 13914                        	longa	off
 13915 0B:7234: A5 5E        	lda	<L538+mode_0
 13916 0B:7236: 29 20        	and	#<$20
 13917 0B:7238: C2 20        	rep	#$20
 13918                        	longa	on
 13919 0B:723A: D0 03        	bne	L562
 13920 0B:723C: 82 66 01     	brl	L10273
 13921                        L562:
 13922 0B:723F: A9 00 00     	lda	#$0
 13923 0B:7242: A0 0C 00     	ldy	#$c
 13924 0B:7245: D7 56        	cmp	[<L538+fp_0],Y
 13925 0B:7247: A9 00 00     	lda	#$0
 13926 0B:724A: A0 0E 00     	ldy	#$e
 13927 0B:724D: F7 56        	sbc	[<L538+fp_0],Y
 13928 0B:724F: 90 03        	bcc	L563
 13929 0B:7251: 82 51 01     	brl	L10273
 13930                        L563:
 13931                        	.line	4330
 13932                        ;				fp->fptr = fp->obj.objsi
                    ze; /* Offset to seek */
 13933                        	.line	4331
 13934 0B:7254: A0 0C 00     	ldy	#$c
 13935 0B:7257: B7 56        	lda	[<L538+fp_0],Y
 13936 0B:7259: A0 12 00     	ldy	#$12
 13937 0B:725C: 97 56        	sta	[<L538+fp_0],Y
 13938 0B:725E: A0 0E 00     	ldy	#$e
 13939 0B:7261: B7 56        	lda	[<L538+fp_0],Y
 13940 0B:7263: A0 14 00     	ldy	#$14
 13941 0B:7266: 97 56        	sta	[<L538+fp_0],Y
 13942                        ;				bcs = (DWORD) fs->csize 
                    * SS(fs); /* Cluster size in byte */
 13943                        	.line	4332
 13944 0B:7268: A0 00 00     	ldy	#$0
 13945 0B:726B: 5A           	phy
 13946 0B:726C: A0 09 00     	ldy	#$9
 13947 0B:726F: B7 3B        	lda	[<L539+fs_1],Y
 13948 0B:7271: 7A           	ply
 13949 0B:7272: 2A           	rol	A
 13950 0B:7273: 6A           	ror	A
 13951 0B:7274: 10 01        	bpl	L564
  Fri Jul 16 2021 14:42                                                Page 272


 13952 0B:7276: 88           	dey
 13953                        L564:
 13954 0B:7277: 85 01        	sta	<R0
 13955 0B:7279: 84 03        	sty	<R0+2
 13956 0B:727B: D4 03        	pei	<R0+2
 13957 0B:727D: D4 01        	pei	<R0
 13958 0B:727F: A9 09 00     	lda	#$9
 13959                        	xref	~~~lasl
 13960 0B:7282: 22 xx xx xx  	jsl	~~~lasl
 13961 0B:7286: 85 43        	sta	<L539+bcs_1
 13962 0B:7288: 86 45        	stx	<L539+bcs_1+2
 13963                        ;				clst = fp->obj.sclust; /
                    * Follow the cluster chain */
 13964                        	.line	4333
 13965 0B:728A: A0 08 00     	ldy	#$8
 13966 0B:728D: B7 56        	lda	[<L538+fp_0],Y
 13967 0B:728F: 85 47        	sta	<L539+clst_1
 13968 0B:7291: A0 0A 00     	ldy	#$a
 13969 0B:7294: B7 56        	lda	[<L538+fp_0],Y
 13970 0B:7296: 85 49        	sta	<L539+clst_1+2
 13971                        ;				for (ofs = fp->obj.objsi
                    ze; res == FR_OK && ofs > bcs; ofs -=
 13972                        	.line	4334
 13973 0B:7298: A0 0C 00     	ldy	#$c
 13974 0B:729B: B7 56        	lda	[<L538+fp_0],Y
 13975 0B:729D: 85 4F        	sta	<L539+ofs_1
 13976 0B:729F: A0 0E 00     	ldy	#$e
 13977 0B:72A2: B7 56        	lda	[<L538+fp_0],Y
 13978 0B:72A4: 85 51        	sta	<L539+ofs_1+2
 13979 0B:72A6: 82 47 00     	brl	L10277
 13980                        ;						bcs)
 13981                        L10276:
 13982                        ;				{
 13983                        	.line	4336
 13984                        ;					clst = get_fat(&
                    fp->obj, clst);
 13985                        	.line	4337
 13986 0B:72A9: D4 49        	pei	<L539+clst_1+2
 13987 0B:72AB: D4 47        	pei	<L539+clst_1
 13988 0B:72AD: D4 58        	pei	<L538+fp_0+2
 13989 0B:72AF: D4 56        	pei	<L538+fp_0
 13990 0B:72B1: 22 0D 46 0B  	jsl	~~get_fat
 13991 0B:72B5: 85 47        	sta	<L539+clst_1
 13992 0B:72B7: 86 49        	stx	<L539+clst_1+2
 13993                        ;					if (clst <= 1)
 13994                        	.line	4338
 13995                        ;						res = FR
                    _INT_ERR;
 13996 0B:72B9: A9 01 00     	lda	#$1
 13997 0B:72BC: C5 47        	cmp	<L539+clst_1
 13998 0B:72BE: A9 00 00     	lda	#$0
 13999 0B:72C1: E5 49        	sbc	<L539+clst_1+2
 14000 0B:72C3: B0 03        	bcs	L565
 14001 0B:72C5: 82 05 00     	brl	L10278
 14002                        L565:
 14003                        	.line	4339
 14004 0B:72C8: A9 02 00     	lda	#$2
 14005 0B:72CB: 85 09        	sta	<L539+res_1
  Fri Jul 16 2021 14:42                                                Page 273


 14006                        ;					if (clst == 0xFF
                    FFFFFF)
 14007                        L10278:
 14008                        	.line	4340
 14009                        ;						res = FR
                    _DISK_ERR;
 14010 0B:72CD: A5 47        	lda	<L539+clst_1
 14011 0B:72CF: C9 FF FF     	cmp	#<$ffffffff
 14012 0B:72D2: D0 05        	bne	L566
 14013 0B:72D4: A5 49        	lda	<L539+clst_1+2
 14014 0B:72D6: C9 FF FF     	cmp	#^$ffffffff
 14015                        L566:
 14016 0B:72D9: F0 03        	beq	L567
 14017 0B:72DB: 82 05 00     	brl	L10279
 14018                        L567:
 14019                        	.line	4341
 14020 0B:72DE: A9 01 00     	lda	#$1
 14021 0B:72E1: 85 09        	sta	<L539+res_1
 14022                        ;				}
 14023                        L10279:
 14024                        	.line	4342
 14025                        L10274:
 14026 0B:72E3: 38           	sec
 14027 0B:72E4: A5 4F        	lda	<L539+ofs_1
 14028 0B:72E6: E5 43        	sbc	<L539+bcs_1
 14029 0B:72E8: 85 4F        	sta	<L539+ofs_1
 14030 0B:72EA: A5 51        	lda	<L539+ofs_1+2
 14031 0B:72EC: E5 45        	sbc	<L539+bcs_1+2
 14032 0B:72EE: 85 51        	sta	<L539+ofs_1+2
 14033                        L10277:
 14034 0B:72F0: A5 09        	lda	<L539+res_1
 14035 0B:72F2: F0 03        	beq	L569
 14036 0B:72F4: 82 0D 00     	brl	L568
 14037                        L569:
 14038 0B:72F7: A5 43        	lda	<L539+bcs_1
 14039 0B:72F9: C5 4F        	cmp	<L539+ofs_1
 14040 0B:72FB: A5 45        	lda	<L539+bcs_1+2
 14041 0B:72FD: E5 51        	sbc	<L539+ofs_1+2
 14042 0B:72FF: B0 03        	bcs	L570
 14043 0B:7301: 82 A5 FF     	brl	L10276
 14044                        L570:
 14045                        L568:
 14046                        L10275:
 14047                        ;				fp->clust = clst;
 14048                        	.line	4343
 14049 0B:7304: A5 47        	lda	<L539+clst_1
 14050 0B:7306: A0 16 00     	ldy	#$16
 14051 0B:7309: 97 56        	sta	[<L538+fp_0],Y
 14052 0B:730B: A5 49        	lda	<L539+clst_1+2
 14053 0B:730D: A0 18 00     	ldy	#$18
 14054 0B:7310: 97 56        	sta	[<L538+fp_0],Y
 14055                        ;				if (res == FR_OK && ofs 
                    % SS(fs))
 14056                        	.line	4344
 14057                        ;				{ /* Fill sector buffer 
                    if not on the sector boundary */
 14058 0B:7312: A5 09        	lda	<L539+res_1
 14059 0B:7314: F0 03        	beq	L571
  Fri Jul 16 2021 14:42                                                Page 274


 14060 0B:7316: 82 8C 00     	brl	L10280
 14061                        L571:
 14062 0B:7319: A5 4F        	lda	<L539+ofs_1
 14063 0B:731B: 29 FF 01     	and	#<$1ff
 14064 0B:731E: D0 03        	bne	L572
 14065 0B:7320: 82 82 00     	brl	L10280
 14066                        L572:
 14067                        	.line	4345
 14068                        ;					sc = clst2sect(f
                    s, clst);
 14069                        	.line	4346
 14070 0B:7323: D4 49        	pei	<L539+clst_1+2
 14071 0B:7325: D4 47        	pei	<L539+clst_1
 14072 0B:7327: D4 3D        	pei	<L539+fs_1+2
 14073 0B:7329: D4 3B        	pei	<L539+fs_1
 14074 0B:732B: 22 7E 45 0B  	jsl	~~clst2sect
 14075 0B:732F: 85 4B        	sta	<L539+sc_1
 14076 0B:7331: 86 4D        	stx	<L539+sc_1+2
 14077                        ;					if (sc == 0)
 14078                        	.line	4347
 14079                        ;					{
 14080 0B:7333: A5 4B        	lda	<L539+sc_1
 14081 0B:7335: 05 4D        	ora	<L539+sc_1+2
 14082 0B:7337: F0 03        	beq	L573
 14083 0B:7339: 82 08 00     	brl	L10281
 14084                        L573:
 14085                        	.line	4348
 14086                        ;						res = FR
                    _INT_ERR;
 14087                        	.line	4349
 14088 0B:733C: A9 02 00     	lda	#$2
 14089 0B:733F: 85 09        	sta	<L539+res_1
 14090                        ;					}
 14091                        	.line	4350
 14092                        ;					else
 14093 0B:7341: 82 61 00     	brl	L10282
 14094                        L10281:
 14095                        ;					{
 14096                        	.line	4352
 14097                        ;						fp->sect
                     = sc + (DWORD) (ofs / SS(fs));
 14098                        	.line	4353
 14099 0B:7344: D4 51        	pei	<L539+ofs_1+2
 14100 0B:7346: D4 4F        	pei	<L539+ofs_1
 14101 0B:7348: A9 09 00     	lda	#$9
 14102                        	xref	~~~llsr
 14103 0B:734B: 22 xx xx xx  	jsl	~~~llsr
 14104 0B:734F: 85 01        	sta	<R0
 14105 0B:7351: 86 03        	stx	<R0+2
 14106 0B:7353: 18           	clc
 14107 0B:7354: A5 01        	lda	<R0
 14108 0B:7356: 65 4B        	adc	<L539+sc_1
 14109 0B:7358: 85 05        	sta	<R1
 14110 0B:735A: A5 03        	lda	<R0+2
 14111 0B:735C: 65 4D        	adc	<L539+sc_1+2
 14112 0B:735E: 85 07        	sta	<R1+2
 14113 0B:7360: A5 05        	lda	<R1
 14114 0B:7362: A0 1A 00     	ldy	#$1a
  Fri Jul 16 2021 14:42                                                Page 275


 14115 0B:7365: 97 56        	sta	[<L538+fp_0],Y
 14116 0B:7367: A5 07        	lda	<R1+2
 14117 0B:7369: A0 1C 00     	ldy	#$1c
 14118 0B:736C: 97 56        	sta	[<L538+fp_0],Y
 14119                        ;#if !FF_FS_TINY
 14120                        ;						if (disk
                    _read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK)
 14121                        	.line	4355
 14122                        ;							
                    res = FR_DISK_ERR;
 14123 0B:736E: F4 01 00     	pea	#<$1
 14124 0B:7371: A0 1C 00     	ldy	#$1c
 14125 0B:7374: B7 56        	lda	[<L538+fp_0],Y
 14126 0B:7376: 48           	pha
 14127 0B:7377: A0 1A 00     	ldy	#$1a
 14128 0B:737A: B7 56        	lda	[<L538+fp_0],Y
 14129 0B:737C: 48           	pha
 14130 0B:737D: 18           	clc
 14131 0B:737E: A9 26 00     	lda	#$26
 14132 0B:7381: 65 56        	adc	<L538+fp_0
 14133 0B:7383: 85 01        	sta	<R0
 14134 0B:7385: A9 00 00     	lda	#$0
 14135 0B:7388: 65 58        	adc	<L538+fp_0+2
 14136 0B:738A: 85 03        	sta	<R0+2
 14137 0B:738C: D4 03        	pei	<R0+2
 14138 0B:738E: D4 01        	pei	<R0
 14139 0B:7390: A0 01 00     	ldy	#$1
 14140 0B:7393: B7 3B        	lda	[<L539+fs_1],Y
 14141 0B:7395: 48           	pha
 14142 0B:7396: 22 xx xx xx  	jsl	~~disk_read
 14143 0B:739A: AA           	tax
 14144 0B:739B: D0 03        	bne	L574
 14145 0B:739D: 82 05 00     	brl	L10283
 14146                        L574:
 14147                        	.line	4356
 14148 0B:73A0: A9 01 00     	lda	#$1
 14149 0B:73A3: 85 09        	sta	<L539+res_1
 14150                        ;#endif
 14151                        ;					}
 14152                        L10283:
 14153                        	.line	4358
 14154                        L10282:
 14155                        ;				}
 14156                        	.line	4359
 14157                        ;			}
 14158                        L10280:
 14159                        	.line	4360
 14160                        ;#endif
 14161                        ;		}
 14162                        L10273:
 14163                        	.line	4362
 14164                        ;
 14165                        ;		FREE_NAMBUF();
 14166                        L10272:
 14167                        	.line	4364
 14168                        ;	}
 14169                        	.line	4365
 14170                        ;
  Fri Jul 16 2021 14:42                                                Page 276


 14171                        ;	if (res != FR_OK)
 14172                        L10252:
 14173                        	.line	4367
 14174                        ;		fp->obj.fs = 0; /* Invalidate file objec
                    t on error */
 14175 0B:73A5: A5 09        	lda	<L539+res_1
 14176 0B:73A7: D0 03        	bne	L575
 14177 0B:73A9: 82 0D 00     	brl	L10284
 14178                        L575:
 14179                        	.line	4368
 14180 0B:73AC: A9 00 00     	lda	#$0
 14181 0B:73AF: 87 56        	sta	[<L538+fp_0]
 14182 0B:73B1: A9 00 00     	lda	#$0
 14183 0B:73B4: A0 02 00     	ldy	#$2
 14184 0B:73B7: 97 56        	sta	[<L538+fp_0],Y
 14185                        ;
 14186                        ;	LEAVE_FF(fs, res);
 14187                        L10284:
 14188                        	.line	4370
 14189 0B:73B9: A5 09        	lda	<L539+res_1
 14190 0B:73BB: 82 8C FB     	brl	L542
 14191                        ;}
 14192                        	.line	4371
 14193                        	.endblock	4371
 14194             00000052   L538	equ	82
 14195             00000009   L539	equ	9
 14196 0B:73BE:              	ends
 14197                        	efunc
 14198                        	.endfunc	4371,9,82
 14199                        	.line	4371
 14200                        ;
 14201                        ;/*-----------------------------------------------
                    ------------------------*/
 14202                        ;/* Read File                                     
                                            */
 14203                        ;/*-----------------------------------------------
                    ------------------------*/
 14204                        ;
 14205                        ;FRESULT f_read(FIL* fp, /* Pointer to the file ob
                    ject */
 14206                        ;void* buff, /* Pointer to data buffer */
 14207                        ;UINT btr, /* Number of bytes to read */
 14208                        ;UINT* br /* Pointer to number of bytes read */
 14209                        ;)
 14210                        ;{
 14211                        	.line	4377
 14212                        	.line	4382
 14213                        	FFDOS
 14214                        	xdef	~~f_read
 14215                        	func
 14216                        	.function	4382
 14217                        ~~f_read:
 14218                        	longa	on
 14219                        	longi	on
 14220 0B:73BE: 3B           	tsc
 14221 0B:73BF: 38           	sec
 14222 0B:73C0: E9 2C 00     	sbc	#L576
 14223 0B:73C3: 1B           	tcs
  Fri Jul 16 2021 14:42                                                Page 277


 14224 0B:73C4: 0B           	phd
 14225 0B:73C5: 5B           	tcd
 14226             00000004   fp_0	set	4
 14227             00000008   buff_0	set	8
 14228             0000000C   btr_0	set	12
 14229             0000000E   br_0	set	14
 14230                        	.block	4382
 14231                        ;	FRESULT res;
 14232                        ;	FATFS *fs;
 14233                        ;	DWORD clst;
 14234                        ;	LBA_t sect;
 14235                        ;	FSIZE_t remain;
 14236                        ;	UINT rcnt, cc, csect;
 14237                        ;	BYTE *rbuff = (BYTE*) buff;
 14238                        ;
 14239                        ;	//////k_debug_string("f_read...\r\n");
 14240                        ;
 14241                        ;	*br = 0; /* Clear read byte counter */
 14242             00000000   res_1	set	0
 14243             00000002   fs_1	set	2
 14244             00000006   clst_1	set	6
 14245             0000000A   sect_1	set	10
 14246             0000000E   remain_1	set	14
 14247             00000012   rcnt_1	set	18
 14248             00000014   cc_1	set	20
 14249             00000016   csect_1	set	22
 14250             00000018   rbuff_1	set	24
 14251                        	.sym	res,0,5,1,16
 14252                        	.sym	fs,2,138,1,32,49
 14253                        	.sym	clst,6,18,1,32
 14254                        	.sym	sect,10,18,1,32
 14255                        	.sym	remain,14,18,1,32
 14256                        	.sym	rcnt,18,16,1,16
 14257                        	.sym	cc,20,16,1,16
 14258                        	.sym	csect,22,16,1,16
 14259                        	.sym	rbuff,24,142,1,32
 14260                        	.sym	fp,4,138,6,32,51
 14261                        	.sym	buff,8,129,6,32
 14262                        	.sym	btr,12,16,6,16
 14263                        	.sym	br,14,144,6,32
 14264 0B:73C6: A5 34        	lda	<L576+buff_0
 14265 0B:73C8: 85 29        	sta	<L577+rbuff_1
 14266 0B:73CA: A5 36        	lda	<L576+buff_0+2
 14267 0B:73CC: 85 2B        	sta	<L577+rbuff_1+2
 14268                        	.line	4393
 14269 0B:73CE: A9 00 00     	lda	#$0
 14270 0B:73D1: 87 3A        	sta	[<L576+br_0]
 14271                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 14272                        	.line	4394
 14273 0B:73D3: F4 00 00     	pea	#0
 14274 0B:73D6: 18           	clc
 14275 0B:73D7: 7B           	tdc
 14276 0B:73D8: 69 13 00     	adc	#<L577+fs_1
 14277 0B:73DB: 48           	pha
 14278 0B:73DC: D4 32        	pei	<L576+fp_0+2
 14279 0B:73DE: D4 30        	pei	<L576+fp_0
 14280 0B:73E0: 22 C9 6D 0B  	jsl	~~validate
  Fri Jul 16 2021 14:42                                                Page 278


 14281 0B:73E4: 85 11        	sta	<L577+res_1
 14282                        ;
 14283                        ;	//////k_debug_long("f_read:res:", res);
 14284                        ;
 14285                        ;	if (res != FR_OK || (res = (FRESULT) fp->err) !=
                     FR_OK)
 14286                        	.line	4398
 14287                        ;		LEAVE_FF(fs, res); /* Check validity */
 14288 0B:73E6: A5 11        	lda	<L577+res_1
 14289 0B:73E8: F0 03        	beq	L580
 14290 0B:73EA: 82 11 00     	brl	L579
 14291                        L580:
 14292 0B:73ED: A0 11 00     	ldy	#$11
 14293 0B:73F0: B7 30        	lda	[<L576+fp_0],Y
 14294 0B:73F2: 29 FF 00     	and	#$ff
 14295 0B:73F5: 85 11        	sta	<L577+res_1
 14296 0B:73F7: A5 11        	lda	<L577+res_1
 14297 0B:73F9: D0 03        	bne	L581
 14298 0B:73FB: 82 14 00     	brl	L10285
 14299                        L581:
 14300                        L579:
 14301                        	.line	4399
 14302 0B:73FE: A5 11        	lda	<L577+res_1
 14303                        L582:
 14304 0B:7400: A8           	tay
 14305 0B:7401: A5 2E        	lda	<L576+2
 14306 0B:7403: 85 3C        	sta	<L576+2+14
 14307 0B:7405: A5 2D        	lda	<L576+1
 14308 0B:7407: 85 3B        	sta	<L576+1+14
 14309 0B:7409: 2B           	pld
 14310 0B:740A: 3B           	tsc
 14311 0B:740B: 18           	clc
 14312 0B:740C: 69 3A 00     	adc	#L576+14
 14313 0B:740F: 1B           	tcs
 14314 0B:7410: 98           	tya
 14315 0B:7411: 6B           	rtl
 14316                        ;	if (!(fp->flag & FA_READ))
 14317                        L10285:
 14318                        	.line	4400
 14319                        ;		LEAVE_FF(fs, FR_DENIED); /* Check access
                     mode */
 14320 0B:7412: E2 20        	sep	#$20
 14321                        	longa	off
 14322 0B:7414: A0 10 00     	ldy	#$10
 14323 0B:7417: B7 30        	lda	[<L576+fp_0],Y
 14324 0B:7419: 29 01        	and	#<$1
 14325 0B:741B: C2 20        	rep	#$20
 14326                        	longa	on
 14327 0B:741D: F0 03        	beq	L583
 14328 0B:741F: 82 06 00     	brl	L10286
 14329                        L583:
 14330                        	.line	4401
 14331 0B:7422: A9 07 00     	lda	#$7
 14332 0B:7425: 82 D8 FF     	brl	L582
 14333                        ;	remain = fp->obj.objsize - fp->fptr;
 14334                        L10286:
 14335                        	.line	4402
 14336 0B:7428: 38           	sec
  Fri Jul 16 2021 14:42                                                Page 279


 14337 0B:7429: A0 0C 00     	ldy	#$c
 14338 0B:742C: B7 30        	lda	[<L576+fp_0],Y
 14339 0B:742E: A0 12 00     	ldy	#$12
 14340 0B:7431: F7 30        	sbc	[<L576+fp_0],Y
 14341 0B:7433: 85 1F        	sta	<L577+remain_1
 14342 0B:7435: A0 0E 00     	ldy	#$e
 14343 0B:7438: B7 30        	lda	[<L576+fp_0],Y
 14344 0B:743A: A0 14 00     	ldy	#$14
 14345 0B:743D: F7 30        	sbc	[<L576+fp_0],Y
 14346 0B:743F: 85 21        	sta	<L577+remain_1+2
 14347                        ;	if (btr > remain)
 14348                        	.line	4403
 14349                        ;		btr = (UINT) remain; /* Truncate btr by 
                    remaining bytes */
 14350 0B:7441: A5 38        	lda	<L576+btr_0
 14351 0B:7443: 85 01        	sta	<R0
 14352 0B:7445: 64 03        	stz	<R0+2
 14353 0B:7447: A5 1F        	lda	<L577+remain_1
 14354 0B:7449: C5 01        	cmp	<R0
 14355 0B:744B: A5 21        	lda	<L577+remain_1+2
 14356 0B:744D: E5 03        	sbc	<R0+2
 14357 0B:744F: 90 03        	bcc	L584
 14358 0B:7451: 82 04 00     	brl	L10287
 14359                        L584:
 14360                        	.line	4404
 14361 0B:7454: A5 1F        	lda	<L577+remain_1
 14362 0B:7456: 85 38        	sta	<L576+btr_0
 14363                        ;
 14364                        ;	for (; btr; /* Repeat until btr bytes read */
 14365                        L10287:
 14366                        	.line	4406
 14367 0B:7458: 82 75 03     	brl	L10291
 14368                        ;	btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fpt
                    r += rcnt)
 14369                        L10290:
 14370                        ;	{
 14371                        	.line	4408
 14372                        ;		if (fp->fptr % SS(fs) == 0)
 14373                        	.line	4409
 14374                        ;		{ /* On the sector boundary? */
 14375 0B:745B: A0 12 00     	ldy	#$12
 14376 0B:745E: B7 30        	lda	[<L576+fp_0],Y
 14377 0B:7460: 29 FF 01     	and	#<$1ff
 14378 0B:7463: F0 03        	beq	L585
 14379 0B:7465: 82 CA 02     	brl	L10292
 14380                        L585:
 14381                        	.line	4410
 14382                        ;			csect = (UINT) (fp->fptr / SS(fs
                    ) & (fs->csize - 1)); /* Sector offset in the cluster */
 14383                        	.line	4411
 14384 0B:7468: A0 14 00     	ldy	#$14
 14385 0B:746B: B7 30        	lda	[<L576+fp_0],Y
 14386 0B:746D: 48           	pha
 14387 0B:746E: A0 12 00     	ldy	#$12
 14388 0B:7471: B7 30        	lda	[<L576+fp_0],Y
 14389 0B:7473: 48           	pha
 14390 0B:7474: A9 09 00     	lda	#$9
 14391                        	xref	~~~llsr
  Fri Jul 16 2021 14:42                                                Page 280


 14392 0B:7477: 22 xx xx xx  	jsl	~~~llsr
 14393 0B:747B: 85 01        	sta	<R0
 14394 0B:747D: 86 03        	stx	<R0+2
 14395 0B:747F: 18           	clc
 14396 0B:7480: A9 FF FF     	lda	#$ffff
 14397 0B:7483: A0 09 00     	ldy	#$9
 14398 0B:7486: 77 13        	adc	[<L577+fs_1],Y
 14399 0B:7488: 85 05        	sta	<R1
 14400 0B:748A: A0 00 00     	ldy	#$0
 14401 0B:748D: A5 05        	lda	<R1
 14402 0B:748F: 10 01        	bpl	L586
 14403 0B:7491: 88           	dey
 14404                        L586:
 14405 0B:7492: 85 05        	sta	<R1
 14406 0B:7494: 84 07        	sty	<R1+2
 14407 0B:7496: A5 05        	lda	<R1
 14408 0B:7498: 25 01        	and	<R0
 14409 0B:749A: 85 09        	sta	<R2
 14410 0B:749C: A5 07        	lda	<R1+2
 14411 0B:749E: 25 03        	and	<R0+2
 14412 0B:74A0: 85 0B        	sta	<R2+2
 14413 0B:74A2: A5 09        	lda	<R2
 14414 0B:74A4: 85 27        	sta	<L577+csect_1
 14415                        ;			if (csect == 0)
 14416                        	.line	4412
 14417                        ;			{ /* On the cluster boundary? */
 14418 0B:74A6: A5 27        	lda	<L577+csect_1
 14419 0B:74A8: F0 03        	beq	L587
 14420 0B:74AA: 82 88 00     	brl	L10293
 14421                        L587:
 14422                        	.line	4413
 14423                        ;				if (fp->fptr == 0)
 14424                        	.line	4414
 14425                        ;				{ /* On the top of the f
                    ile? */
 14426 0B:74AD: A0 12 00     	ldy	#$12
 14427 0B:74B0: B7 30        	lda	[<L576+fp_0],Y
 14428 0B:74B2: A0 14 00     	ldy	#$14
 14429 0B:74B5: 17 30        	ora	[<L576+fp_0],Y
 14430 0B:74B7: F0 03        	beq	L588
 14431 0B:74B9: 82 11 00     	brl	L10294
 14432                        L588:
 14433                        	.line	4415
 14434                        ;					clst = fp->obj.s
                    clust; /* Follow cluster chain from the origin */
 14435                        	.line	4416
 14436 0B:74BC: A0 08 00     	ldy	#$8
 14437 0B:74BF: B7 30        	lda	[<L576+fp_0],Y
 14438 0B:74C1: 85 17        	sta	<L577+clst_1
 14439 0B:74C3: A0 0A 00     	ldy	#$a
 14440 0B:74C6: B7 30        	lda	[<L576+fp_0],Y
 14441 0B:74C8: 85 19        	sta	<L577+clst_1+2
 14442                        ;				}
 14443                        	.line	4417
 14444                        ;				else
 14445 0B:74CA: 82 18 00     	brl	L10295
 14446                        L10294:
 14447                        ;				{ /* Middle or end of th
  Fri Jul 16 2021 14:42                                                Page 281


                    e file */
 14448                        	.line	4419
 14449                        ;#if FF_USE_FASTSEEK
 14450                        ;					if (fp->cltbl)
 14451                        ;					{
 14452                        ;						clst = c
                    lmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
 14453                        ;					}
 14454                        ;					else
 14455                        ;#endif
 14456                        ;					{
 14457                        	.line	4427
 14458                        ;						clst = g
                    et_fat(&fp->obj, fp->clust); /* Follow cluster chain on the 
                    FAT */
 14459                        	.line	4428
 14460 0B:74CD: A0 18 00     	ldy	#$18
 14461 0B:74D0: B7 30        	lda	[<L576+fp_0],Y
 14462 0B:74D2: 48           	pha
 14463 0B:74D3: A0 16 00     	ldy	#$16
 14464 0B:74D6: B7 30        	lda	[<L576+fp_0],Y
 14465 0B:74D8: 48           	pha
 14466 0B:74D9: D4 32        	pei	<L576+fp_0+2
 14467 0B:74DB: D4 30        	pei	<L576+fp_0
 14468 0B:74DD: 22 0D 46 0B  	jsl	~~get_fat
 14469 0B:74E1: 85 17        	sta	<L577+clst_1
 14470 0B:74E3: 86 19        	stx	<L577+clst_1+2
 14471                        ;					}
 14472                        	.line	4429
 14473                        ;				}
 14474                        	.line	4430
 14475                        L10295:
 14476                        ;				if (clst < 2)
 14477                        	.line	4431
 14478                        ;					ABORT(fs, FR_INT
                    _ERR);
 14479 0B:74E5: A5 17        	lda	<L577+clst_1
 14480 0B:74E7: C9 02 00     	cmp	#<$2
 14481 0B:74EA: A5 19        	lda	<L577+clst_1+2
 14482 0B:74EC: E9 00 00     	sbc	#^$2
 14483 0B:74EF: 90 03        	bcc	L589
 14484 0B:74F1: 82 11 00     	brl	L10296
 14485                        L589:
 14486                        	.line	4432
 14487                        	.line	4432
 14488 0B:74F4: E2 20        	sep	#$20
 14489                        	longa	off
 14490 0B:74F6: A9 02        	lda	#$2
 14491 0B:74F8: A0 11 00     	ldy	#$11
 14492 0B:74FB: 97 30        	sta	[<L576+fp_0],Y
 14493 0B:74FD: C2 20        	rep	#$20
 14494                        	longa	on
 14495                        	.line	4432
 14496 0B:74FF: A9 02 00     	lda	#$2
 14497 0B:7502: 82 FB FE     	brl	L582
 14498                        	.line	4432
 14499                        L10296:
 14500                        	.line	4432
  Fri Jul 16 2021 14:42                                                Page 282


 14501                        ;				if (clst == 0xFFFFFFFF)
 14502                        	.line	4433
 14503                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 14504 0B:7505: A5 17        	lda	<L577+clst_1
 14505 0B:7507: C9 FF FF     	cmp	#<$ffffffff
 14506 0B:750A: D0 05        	bne	L590
 14507 0B:750C: A5 19        	lda	<L577+clst_1+2
 14508 0B:750E: C9 FF FF     	cmp	#^$ffffffff
 14509                        L590:
 14510 0B:7511: F0 03        	beq	L591
 14511 0B:7513: 82 11 00     	brl	L10297
 14512                        L591:
 14513                        	.line	4434
 14514                        	.line	4434
 14515 0B:7516: E2 20        	sep	#$20
 14516                        	longa	off
 14517 0B:7518: A9 01        	lda	#$1
 14518 0B:751A: A0 11 00     	ldy	#$11
 14519 0B:751D: 97 30        	sta	[<L576+fp_0],Y
 14520 0B:751F: C2 20        	rep	#$20
 14521                        	longa	on
 14522                        	.line	4434
 14523 0B:7521: A9 01 00     	lda	#$1
 14524 0B:7524: 82 D9 FE     	brl	L582
 14525                        	.line	4434
 14526                        L10297:
 14527                        	.line	4434
 14528                        ;				fp->clust = clst; /* Upd
                    ate current cluster */
 14529                        	.line	4435
 14530 0B:7527: A5 17        	lda	<L577+clst_1
 14531 0B:7529: A0 16 00     	ldy	#$16
 14532 0B:752C: 97 30        	sta	[<L576+fp_0],Y
 14533 0B:752E: A5 19        	lda	<L577+clst_1+2
 14534 0B:7530: A0 18 00     	ldy	#$18
 14535 0B:7533: 97 30        	sta	[<L576+fp_0],Y
 14536                        ;			}
 14537                        	.line	4436
 14538                        ;			sect = clst2sect(fs, fp->clust);
                     /* Get current sector */
 14539                        L10293:
 14540                        	.line	4437
 14541 0B:7535: A0 18 00     	ldy	#$18
 14542 0B:7538: B7 30        	lda	[<L576+fp_0],Y
 14543 0B:753A: 48           	pha
 14544 0B:753B: A0 16 00     	ldy	#$16
 14545 0B:753E: B7 30        	lda	[<L576+fp_0],Y
 14546 0B:7540: 48           	pha
 14547 0B:7541: D4 15        	pei	<L577+fs_1+2
 14548 0B:7543: D4 13        	pei	<L577+fs_1
 14549 0B:7545: 22 7E 45 0B  	jsl	~~clst2sect
 14550 0B:7549: 85 1B        	sta	<L577+sect_1
 14551 0B:754B: 86 1D        	stx	<L577+sect_1+2
 14552                        ;			if (sect == 0)
 14553                        	.line	4438
 14554                        ;				ABORT(fs, FR_INT_ERR);
 14555 0B:754D: A5 1B        	lda	<L577+sect_1
  Fri Jul 16 2021 14:42                                                Page 283


 14556 0B:754F: 05 1D        	ora	<L577+sect_1+2
 14557 0B:7551: F0 03        	beq	L592
 14558 0B:7553: 82 11 00     	brl	L10298
 14559                        L592:
 14560                        	.line	4439
 14561                        	.line	4439
 14562 0B:7556: E2 20        	sep	#$20
 14563                        	longa	off
 14564 0B:7558: A9 02        	lda	#$2
 14565 0B:755A: A0 11 00     	ldy	#$11
 14566 0B:755D: 97 30        	sta	[<L576+fp_0],Y
 14567 0B:755F: C2 20        	rep	#$20
 14568                        	longa	on
 14569                        	.line	4439
 14570 0B:7561: A9 02 00     	lda	#$2
 14571 0B:7564: 82 99 FE     	brl	L582
 14572                        	.line	4439
 14573                        L10298:
 14574                        	.line	4439
 14575                        ;			sect += csect;
 14576                        	.line	4440
 14577 0B:7567: A5 27        	lda	<L577+csect_1
 14578 0B:7569: 85 01        	sta	<R0
 14579 0B:756B: 64 03        	stz	<R0+2
 14580 0B:756D: 18           	clc
 14581 0B:756E: A5 01        	lda	<R0
 14582 0B:7570: 65 1B        	adc	<L577+sect_1
 14583 0B:7572: 85 1B        	sta	<L577+sect_1
 14584 0B:7574: A5 03        	lda	<R0+2
 14585 0B:7576: 65 1D        	adc	<L577+sect_1+2
 14586 0B:7578: 85 1D        	sta	<L577+sect_1+2
 14587                        ;			cc = btr / SS(fs); /* When remai
                    ning bytes >= sector size, */
 14588                        	.line	4441
 14589 0B:757A: A5 38        	lda	<L576+btr_0
 14590 0B:757C: A2 09 00     	ldx	#<$9
 14591                        	xref	~~~lsr
 14592 0B:757F: 22 xx xx xx  	jsl	~~~lsr
 14593 0B:7583: 85 25        	sta	<L577+cc_1
 14594                        ;			if (cc > 0)
 14595                        	.line	4442
 14596                        ;			{ /* Read maximum contiguous sec
                    tors directly */
 14597 0B:7585: A9 00 00     	lda	#$0
 14598 0B:7588: C5 25        	cmp	<L577+cc_1
 14599 0B:758A: 90 03        	bcc	L593
 14600 0B:758C: 82 D9 00     	brl	L10299
 14601                        L593:
 14602                        	.line	4443
 14603                        ;				if (csect + cc > fs->csi
                    ze)
 14604                        	.line	4444
 14605                        ;				{ /* Clip at cluster bou
                    ndary */
 14606 0B:758F: 18           	clc
 14607 0B:7590: A5 27        	lda	<L577+csect_1
 14608 0B:7592: 65 25        	adc	<L577+cc_1
 14609 0B:7594: 85 01        	sta	<R0
  Fri Jul 16 2021 14:42                                                Page 284


 14610 0B:7596: A0 09 00     	ldy	#$9
 14611 0B:7599: B7 13        	lda	[<L577+fs_1],Y
 14612 0B:759B: C5 01        	cmp	<R0
 14613 0B:759D: 90 03        	bcc	L594
 14614 0B:759F: 82 0A 00     	brl	L10300
 14615                        L594:
 14616                        	.line	4445
 14617                        ;					cc = fs->csize -
                     csect;
 14618                        	.line	4446
 14619 0B:75A2: 38           	sec
 14620 0B:75A3: A0 09 00     	ldy	#$9
 14621 0B:75A6: B7 13        	lda	[<L577+fs_1],Y
 14622 0B:75A8: E5 27        	sbc	<L577+csect_1
 14623 0B:75AA: 85 25        	sta	<L577+cc_1
 14624                        ;				}
 14625                        	.line	4447
 14626                        ;				if (disk_read(fs->pdrv, 
                    rbuff, sect, cc) != RES_OK)
 14627                        L10300:
 14628                        	.line	4448
 14629                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 14630 0B:75AC: D4 25        	pei	<L577+cc_1
 14631 0B:75AE: D4 1D        	pei	<L577+sect_1+2
 14632 0B:75B0: D4 1B        	pei	<L577+sect_1
 14633 0B:75B2: D4 2B        	pei	<L577+rbuff_1+2
 14634 0B:75B4: D4 29        	pei	<L577+rbuff_1
 14635 0B:75B6: A0 01 00     	ldy	#$1
 14636 0B:75B9: B7 13        	lda	[<L577+fs_1],Y
 14637 0B:75BB: 48           	pha
 14638 0B:75BC: 22 xx xx xx  	jsl	~~disk_read
 14639 0B:75C0: AA           	tax
 14640 0B:75C1: D0 03        	bne	L595
 14641 0B:75C3: 82 11 00     	brl	L10301
 14642                        L595:
 14643                        	.line	4449
 14644                        	.line	4449
 14645 0B:75C6: E2 20        	sep	#$20
 14646                        	longa	off
 14647 0B:75C8: A9 01        	lda	#$1
 14648 0B:75CA: A0 11 00     	ldy	#$11
 14649 0B:75CD: 97 30        	sta	[<L576+fp_0],Y
 14650 0B:75CF: C2 20        	rep	#$20
 14651                        	longa	on
 14652                        	.line	4449
 14653 0B:75D1: A9 01 00     	lda	#$1
 14654 0B:75D4: 82 29 FE     	brl	L582
 14655                        	.line	4449
 14656                        L10301:
 14657                        	.line	4449
 14658                        ;#if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2	
                    	/* Replace one of the read sectors with cached data if i
                    t contains a dirty sector */
 14659                        ;#if FF_FS_TINY
 14660                        ;				if (fs->wflag && fs->win
                    sect - sect < cc)
 14661                        ;				{
  Fri Jul 16 2021 14:42                                                Page 285


 14662                        ;					mem_cpy(rbuff + 
                    ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
 14663                        ;				}
 14664                        ;#else
 14665                        ;				if ((fp->flag & FA_DIRTY
                    ) && fp->sect - sect < cc)
 14666                        	.line	4457
 14667                        ;				{
 14668 0B:75D7: E2 20        	sep	#$20
 14669                        	longa	off
 14670 0B:75D9: A0 10 00     	ldy	#$10
 14671 0B:75DC: B7 30        	lda	[<L576+fp_0],Y
 14672 0B:75DE: 29 80        	and	#<$80
 14673 0B:75E0: C2 20        	rep	#$20
 14674                        	longa	on
 14675 0B:75E2: D0 03        	bne	L596
 14676 0B:75E4: 82 73 00     	brl	L10302
 14677                        L596:
 14678 0B:75E7: A5 25        	lda	<L577+cc_1
 14679 0B:75E9: 85 01        	sta	<R0
 14680 0B:75EB: 64 03        	stz	<R0+2
 14681 0B:75ED: 38           	sec
 14682 0B:75EE: A0 1A 00     	ldy	#$1a
 14683 0B:75F1: B7 30        	lda	[<L576+fp_0],Y
 14684 0B:75F3: E5 1B        	sbc	<L577+sect_1
 14685 0B:75F5: 85 05        	sta	<R1
 14686 0B:75F7: A0 1C 00     	ldy	#$1c
 14687 0B:75FA: B7 30        	lda	[<L576+fp_0],Y
 14688 0B:75FC: E5 1D        	sbc	<L577+sect_1+2
 14689 0B:75FE: 85 07        	sta	<R1+2
 14690 0B:7600: A5 05        	lda	<R1
 14691 0B:7602: C5 01        	cmp	<R0
 14692 0B:7604: A5 07        	lda	<R1+2
 14693 0B:7606: E5 03        	sbc	<R0+2
 14694 0B:7608: 90 03        	bcc	L597
 14695 0B:760A: 82 4D 00     	brl	L10302
 14696                        L597:
 14697                        	.line	4458
 14698                        ;					mem_cpy(rbuff + 
                    ((fp->sect - sect) * SS(fs)), fp->buf,
 14699                        	.line	4459
 14700                        ;							
                    SS(fs));
 14701 0B:760D: F4 00 02     	pea	#<$200
 14702 0B:7610: 18           	clc
 14703 0B:7611: A9 26 00     	lda	#$26
 14704 0B:7614: 65 30        	adc	<L576+fp_0
 14705 0B:7616: 85 01        	sta	<R0
 14706 0B:7618: A9 00 00     	lda	#$0
 14707 0B:761B: 65 32        	adc	<L576+fp_0+2
 14708 0B:761D: 85 03        	sta	<R0+2
 14709 0B:761F: D4 03        	pei	<R0+2
 14710 0B:7621: D4 01        	pei	<R0
 14711 0B:7623: 38           	sec
 14712 0B:7624: A0 1A 00     	ldy	#$1a
 14713 0B:7627: B7 30        	lda	[<L576+fp_0],Y
 14714 0B:7629: E5 1B        	sbc	<L577+sect_1
 14715 0B:762B: 85 09        	sta	<R2
  Fri Jul 16 2021 14:42                                                Page 286


 14716 0B:762D: A0 1C 00     	ldy	#$1c
 14717 0B:7630: B7 30        	lda	[<L576+fp_0],Y
 14718 0B:7632: E5 1D        	sbc	<L577+sect_1+2
 14719 0B:7634: 85 0B        	sta	<R2+2
 14720 0B:7636: D4 0B        	pei	<R2+2
 14721 0B:7638: D4 09        	pei	<R2
 14722 0B:763A: A9 09 00     	lda	#$9
 14723                        	xref	~~~lasl
 14724 0B:763D: 22 xx xx xx  	jsl	~~~lasl
 14725 0B:7641: 85 05        	sta	<R1
 14726 0B:7643: 86 07        	stx	<R1+2
 14727 0B:7645: 18           	clc
 14728 0B:7646: A5 29        	lda	<L577+rbuff_1
 14729 0B:7648: 65 05        	adc	<R1
 14730 0B:764A: 85 0D        	sta	<R3
 14731 0B:764C: A5 2B        	lda	<L577+rbuff_1+2
 14732 0B:764E: 65 07        	adc	<R1+2
 14733 0B:7650: 85 0F        	sta	<R3+2
 14734 0B:7652: D4 0F        	pei	<R3+2
 14735 0B:7654: D4 0D        	pei	<R3
 14736 0B:7656: 22 13 41 0B  	jsl	~~mem_cpy
 14737                        ;				}
 14738                        	.line	4461
 14739                        ;#endif
 14740                        ;#endif
 14741                        ;				rcnt = SS(fs) * cc; /* N
                    umber of bytes transferred */
 14742                        L10302:
 14743                        	.line	4464
 14744 0B:765A: A5 25        	lda	<L577+cc_1
 14745 0B:765C: A2 09 00     	ldx	#<$9
 14746                        	xref	~~~asl
 14747 0B:765F: 22 xx xx xx  	jsl	~~~asl
 14748 0B:7663: 85 23        	sta	<L577+rcnt_1
 14749                        ;				continue;
 14750                        	.line	4465
 14751 0B:7665: 82 1F 01     	brl	L10288
 14752                        ;			}
 14753                        	.line	4466
 14754                        ;#if !FF_FS_TINY
 14755                        ;			if (fp->sect != sect)
 14756                        L10299:
 14757                        	.line	4468
 14758                        ;			{ /* Load data sector if not in 
                    cache */
 14759 0B:7668: A0 1A 00     	ldy	#$1a
 14760 0B:766B: B7 30        	lda	[<L576+fp_0],Y
 14761 0B:766D: C5 1B        	cmp	<L577+sect_1
 14762 0B:766F: D0 07        	bne	L598
 14763 0B:7671: A0 1C 00     	ldy	#$1c
 14764 0B:7674: B7 30        	lda	[<L576+fp_0],Y
 14765 0B:7676: C5 1D        	cmp	<L577+sect_1+2
 14766                        L598:
 14767 0B:7678: D0 03        	bne	L599
 14768 0B:767A: 82 A7 00     	brl	L10303
 14769                        L599:
 14770                        	.line	4469
 14771                        ;#if !FF_FS_READONLY
  Fri Jul 16 2021 14:42                                                Page 287


 14772                        ;				if (fp->flag & FA_DIRTY)
 14773                        	.line	4471
 14774                        ;				{ /* Write-back dirty se
                    ctor cache */
 14775 0B:767D: E2 20        	sep	#$20
 14776                        	longa	off
 14777 0B:767F: A0 10 00     	ldy	#$10
 14778 0B:7682: B7 30        	lda	[<L576+fp_0],Y
 14779 0B:7684: 29 80        	and	#<$80
 14780 0B:7686: C2 20        	rep	#$20
 14781                        	longa	on
 14782 0B:7688: D0 03        	bne	L600
 14783 0B:768A: 82 5C 00     	brl	L10304
 14784                        L600:
 14785                        	.line	4472
 14786                        ;					if (disk_write(f
                    s->pdrv, fp->buf, fp->sect, 1) != RES_OK)
 14787                        	.line	4473
 14788                        ;						ABORT(fs
                    , FR_DISK_ERR);
 14789 0B:768D: F4 01 00     	pea	#<$1
 14790 0B:7690: A0 1C 00     	ldy	#$1c
 14791 0B:7693: B7 30        	lda	[<L576+fp_0],Y
 14792 0B:7695: 48           	pha
 14793 0B:7696: A0 1A 00     	ldy	#$1a
 14794 0B:7699: B7 30        	lda	[<L576+fp_0],Y
 14795 0B:769B: 48           	pha
 14796 0B:769C: 18           	clc
 14797 0B:769D: A9 26 00     	lda	#$26
 14798 0B:76A0: 65 30        	adc	<L576+fp_0
 14799 0B:76A2: 85 01        	sta	<R0
 14800 0B:76A4: A9 00 00     	lda	#$0
 14801 0B:76A7: 65 32        	adc	<L576+fp_0+2
 14802 0B:76A9: 85 03        	sta	<R0+2
 14803 0B:76AB: D4 03        	pei	<R0+2
 14804 0B:76AD: D4 01        	pei	<R0
 14805 0B:76AF: A0 01 00     	ldy	#$1
 14806 0B:76B2: B7 13        	lda	[<L577+fs_1],Y
 14807 0B:76B4: 48           	pha
 14808 0B:76B5: 22 xx xx xx  	jsl	~~disk_write
 14809 0B:76B9: AA           	tax
 14810 0B:76BA: D0 03        	bne	L601
 14811 0B:76BC: 82 11 00     	brl	L10305
 14812                        L601:
 14813                        	.line	4474
 14814                        	.line	4474
 14815 0B:76BF: E2 20        	sep	#$20
 14816                        	longa	off
 14817 0B:76C1: A9 01        	lda	#$1
 14818 0B:76C3: A0 11 00     	ldy	#$11
 14819 0B:76C6: 97 30        	sta	[<L576+fp_0],Y
 14820 0B:76C8: C2 20        	rep	#$20
 14821                        	longa	on
 14822                        	.line	4474
 14823 0B:76CA: A9 01 00     	lda	#$1
 14824 0B:76CD: 82 30 FD     	brl	L582
 14825                        	.line	4474
 14826                        L10305:
  Fri Jul 16 2021 14:42                                                Page 288


 14827                        	.line	4474
 14828                        ;					fp->flag &= (BYT
                    E) ~FA_DIRTY;
 14829                        	.line	4475
 14830 0B:76D0: 18           	clc
 14831 0B:76D1: A9 10 00     	lda	#$10
 14832 0B:76D4: 65 30        	adc	<L576+fp_0
 14833 0B:76D6: 85 01        	sta	<R0
 14834 0B:76D8: A9 00 00     	lda	#$0
 14835 0B:76DB: 65 32        	adc	<L576+fp_0+2
 14836 0B:76DD: 85 03        	sta	<R0+2
 14837 0B:76DF: E2 20        	sep	#$20
 14838                        	longa	off
 14839 0B:76E1: A7 01        	lda	[<R0]
 14840 0B:76E3: 29 7F        	and	#<$7f
 14841 0B:76E5: 87 01        	sta	[<R0]
 14842 0B:76E7: C2 20        	rep	#$20
 14843                        	longa	on
 14844                        ;				}
 14845                        	.line	4476
 14846                        ;#endif
 14847                        ;				if (disk_read(fs->pdrv, 
                    fp->buf, sect, 1) != RES_OK)
 14848                        L10304:
 14849                        	.line	4478
 14850                        ;					ABORT(fs, FR_DIS
                    K_ERR); /* Fill sector cache */
 14851 0B:76E9: F4 01 00     	pea	#<$1
 14852 0B:76EC: D4 1D        	pei	<L577+sect_1+2
 14853 0B:76EE: D4 1B        	pei	<L577+sect_1
 14854 0B:76F0: 18           	clc
 14855 0B:76F1: A9 26 00     	lda	#$26
 14856 0B:76F4: 65 30        	adc	<L576+fp_0
 14857 0B:76F6: 85 01        	sta	<R0
 14858 0B:76F8: A9 00 00     	lda	#$0
 14859 0B:76FB: 65 32        	adc	<L576+fp_0+2
 14860 0B:76FD: 85 03        	sta	<R0+2
 14861 0B:76FF: D4 03        	pei	<R0+2
 14862 0B:7701: D4 01        	pei	<R0
 14863 0B:7703: A0 01 00     	ldy	#$1
 14864 0B:7706: B7 13        	lda	[<L577+fs_1],Y
 14865 0B:7708: 48           	pha
 14866 0B:7709: 22 xx xx xx  	jsl	~~disk_read
 14867 0B:770D: AA           	tax
 14868 0B:770E: D0 03        	bne	L602
 14869 0B:7710: 82 11 00     	brl	L10306
 14870                        L602:
 14871                        	.line	4479
 14872                        	.line	4479
 14873 0B:7713: E2 20        	sep	#$20
 14874                        	longa	off
 14875 0B:7715: A9 01        	lda	#$1
 14876 0B:7717: A0 11 00     	ldy	#$11
 14877 0B:771A: 97 30        	sta	[<L576+fp_0],Y
 14878 0B:771C: C2 20        	rep	#$20
 14879                        	longa	on
 14880                        	.line	4479
 14881 0B:771E: A9 01 00     	lda	#$1
  Fri Jul 16 2021 14:42                                                Page 289


 14882 0B:7721: 82 DC FC     	brl	L582
 14883                        	.line	4479
 14884                        L10306:
 14885                        	.line	4479
 14886                        ;			}
 14887                        	.line	4480
 14888                        ;#endif
 14889                        ;			fp->sect = sect;
 14890                        L10303:
 14891                        	.line	4482
 14892 0B:7724: A5 1B        	lda	<L577+sect_1
 14893 0B:7726: A0 1A 00     	ldy	#$1a
 14894 0B:7729: 97 30        	sta	[<L576+fp_0],Y
 14895 0B:772B: A5 1D        	lda	<L577+sect_1+2
 14896 0B:772D: A0 1C 00     	ldy	#$1c
 14897 0B:7730: 97 30        	sta	[<L576+fp_0],Y
 14898                        ;		}
 14899                        	.line	4483
 14900                        ;		rcnt = SS(fs) - (UINT) fp->fptr % SS(fs)
                    ; /* Number of bytes remains in the sector */
 14901                        L10292:
 14902                        	.line	4484
 14903 0B:7732: A0 12 00     	ldy	#$12
 14904 0B:7735: B7 30        	lda	[<L576+fp_0],Y
 14905 0B:7737: 29 FF 01     	and	#<$1ff
 14906 0B:773A: 85 01        	sta	<R0
 14907 0B:773C: 38           	sec
 14908 0B:773D: A9 00 02     	lda	#$200
 14909 0B:7740: E5 01        	sbc	<R0
 14910 0B:7742: 85 23        	sta	<L577+rcnt_1
 14911                        ;		if (rcnt > btr)
 14912                        	.line	4485
 14913                        ;			rcnt = btr; /* Clip it by btr if
                     needed */
 14914 0B:7744: A5 38        	lda	<L576+btr_0
 14915 0B:7746: C5 23        	cmp	<L577+rcnt_1
 14916 0B:7748: 90 03        	bcc	L603
 14917 0B:774A: 82 04 00     	brl	L10307
 14918                        L603:
 14919                        	.line	4486
 14920 0B:774D: A5 38        	lda	<L576+btr_0
 14921 0B:774F: 85 23        	sta	<L577+rcnt_1
 14922                        ;#if FF_FS_TINY
 14923                        ;		if (move_window(fs, fp->sect) != FR_OK) 
                    ABORT(fs, FR_DISK_ERR); /* Move sector window */
 14924                        ;		mem_cpy(rbuff, fs->win + fp->fptr % SS(f
                    s), rcnt); /* Extract partial sector */
 14925                        ;#else
 14926                        ;		mem_cpy(rbuff, fp->buf + fp->fptr % SS(f
                    s), rcnt); /* Extract partial sector */
 14927                        L10307:
 14928                        	.line	4491
 14929 0B:7751: D4 23        	pei	<L577+rcnt_1
 14930 0B:7753: A0 12 00     	ldy	#$12
 14931 0B:7756: B7 30        	lda	[<L576+fp_0],Y
 14932 0B:7758: 29 FF 01     	and	#<$1ff
 14933 0B:775B: 85 01        	sta	<R0
 14934 0B:775D: 64 03        	stz	<R0+2
  Fri Jul 16 2021 14:42                                                Page 290


 14935 0B:775F: 18           	clc
 14936 0B:7760: A9 26 00     	lda	#$26
 14937 0B:7763: 65 01        	adc	<R0
 14938 0B:7765: 85 05        	sta	<R1
 14939 0B:7767: A9 00 00     	lda	#$0
 14940 0B:776A: 65 03        	adc	<R0+2
 14941 0B:776C: 85 07        	sta	<R1+2
 14942 0B:776E: 18           	clc
 14943 0B:776F: A5 30        	lda	<L576+fp_0
 14944 0B:7771: 65 05        	adc	<R1
 14945 0B:7773: 85 01        	sta	<R0
 14946 0B:7775: A5 32        	lda	<L576+fp_0+2
 14947 0B:7777: 65 07        	adc	<R1+2
 14948 0B:7779: 85 03        	sta	<R0+2
 14949 0B:777B: D4 03        	pei	<R0+2
 14950 0B:777D: D4 01        	pei	<R0
 14951 0B:777F: D4 2B        	pei	<L577+rbuff_1+2
 14952 0B:7781: D4 29        	pei	<L577+rbuff_1
 14953 0B:7783: 22 13 41 0B  	jsl	~~mem_cpy
 14954                        ;#endif
 14955                        ;	}
 14956                        	.line	4493
 14957                        L10288:
 14958 0B:7787: 38           	sec
 14959 0B:7788: A5 38        	lda	<L576+btr_0
 14960 0B:778A: E5 23        	sbc	<L577+rcnt_1
 14961 0B:778C: 85 38        	sta	<L576+btr_0
 14962 0B:778E: 18           	clc
 14963 0B:778F: A7 3A        	lda	[<L576+br_0]
 14964 0B:7791: 65 23        	adc	<L577+rcnt_1
 14965 0B:7793: 87 3A        	sta	[<L576+br_0]
 14966 0B:7795: A5 23        	lda	<L577+rcnt_1
 14967 0B:7797: 85 01        	sta	<R0
 14968 0B:7799: 64 03        	stz	<R0+2
 14969 0B:779B: 18           	clc
 14970 0B:779C: A5 29        	lda	<L577+rbuff_1
 14971 0B:779E: 65 01        	adc	<R0
 14972 0B:77A0: 85 29        	sta	<L577+rbuff_1
 14973 0B:77A2: A5 2B        	lda	<L577+rbuff_1+2
 14974 0B:77A4: 65 03        	adc	<R0+2
 14975 0B:77A6: 85 2B        	sta	<L577+rbuff_1+2
 14976 0B:77A8: 18           	clc
 14977 0B:77A9: A9 12 00     	lda	#$12
 14978 0B:77AC: 65 30        	adc	<L576+fp_0
 14979 0B:77AE: 85 01        	sta	<R0
 14980 0B:77B0: A9 00 00     	lda	#$0
 14981 0B:77B3: 65 32        	adc	<L576+fp_0+2
 14982 0B:77B5: 85 03        	sta	<R0+2
 14983 0B:77B7: A5 23        	lda	<L577+rcnt_1
 14984 0B:77B9: 85 05        	sta	<R1
 14985 0B:77BB: 64 07        	stz	<R1+2
 14986 0B:77BD: 18           	clc
 14987 0B:77BE: A5 05        	lda	<R1
 14988 0B:77C0: 67 01        	adc	[<R0]
 14989 0B:77C2: 87 01        	sta	[<R0]
 14990 0B:77C4: A5 07        	lda	<R1+2
 14991 0B:77C6: A0 02 00     	ldy	#$2
 14992 0B:77C9: 77 01        	adc	[<R0],Y
  Fri Jul 16 2021 14:42                                                Page 291


 14993 0B:77CB: A0 02 00     	ldy	#$2
 14994 0B:77CE: 97 01        	sta	[<R0],Y
 14995                        L10291:
 14996 0B:77D0: A5 38        	lda	<L576+btr_0
 14997 0B:77D2: F0 03        	beq	L604
 14998 0B:77D4: 82 84 FC     	brl	L10290
 14999                        L604:
 15000                        L10289:
 15001                        ;
 15002                        ;	LEAVE_FF(fs, FR_OK);
 15003                        	.line	4495
 15004 0B:77D7: A9 00 00     	lda	#$0
 15005 0B:77DA: 82 23 FC     	brl	L582
 15006                        ;}
 15007                        	.line	4496
 15008                        	.endblock	4496
 15009             0000002C   L576	equ	44
 15010             00000011   L577	equ	17
 15011 0B:77DD:              	ends
 15012                        	efunc
 15013                        	.endfunc	4496,17,44
 15014                        	.line	4496
 15015                        ;
 15016                        ;#if !FF_FS_READONLY
 15017                        ;/*-----------------------------------------------
                    ------------------------*/
 15018                        ;/* Write File                                    
                                            */
 15019                        ;/*-----------------------------------------------
                    ------------------------*/
 15020                        ;
 15021                        ;FRESULT f_write(FIL* fp, /* Pointer to the file o
                    bject */
 15022                        ;const void* buff, /* Pointer to the data to be wr
                    itten */
 15023                        ;UINT btw, /* Number of bytes to write */
 15024                        ;UINT* bw /* Pointer to number of bytes written */
 15025                        ;)
 15026                        ;{
 15027                        	.line	4503
 15028                        	.line	4508
 15029                        	FFDOS
 15030                        	xdef	~~f_write
 15031                        	func
 15032                        	.function	4508
 15033                        ~~f_write:
 15034                        	longa	on
 15035                        	longi	on
 15036 0B:77DD: 3B           	tsc
 15037 0B:77DE: 38           	sec
 15038 0B:77DF: E9 24 00     	sbc	#L605
 15039 0B:77E2: 1B           	tcs
 15040 0B:77E3: 0B           	phd
 15041 0B:77E4: 5B           	tcd
 15042             00000004   fp_0	set	4
 15043             00000008   buff_0	set	8
 15044             0000000C   btw_0	set	12
 15045             0000000E   bw_0	set	14
  Fri Jul 16 2021 14:42                                                Page 292


 15046                        	.block	4508
 15047                        ;	FRESULT res;
 15048                        ;	FATFS *fs;
 15049                        ;	DWORD clst;
 15050                        ;	LBA_t sect;
 15051                        ;	UINT wcnt, cc, csect;
 15052                        ;	const BYTE *wbuff = (const BYTE*) buff;
 15053                        ;
 15054                        ;	*bw = 0; /* Clear write byte counter */
 15055             00000000   res_1	set	0
 15056             00000002   fs_1	set	2
 15057             00000006   clst_1	set	6
 15058             0000000A   sect_1	set	10
 15059             0000000E   wcnt_1	set	14
 15060             00000010   cc_1	set	16
 15061             00000012   csect_1	set	18
 15062             00000014   wbuff_1	set	20
 15063                        	.sym	res,0,5,1,16
 15064                        	.sym	fs,2,138,1,32,49
 15065                        	.sym	clst,6,18,1,32
 15066                        	.sym	sect,10,18,1,32
 15067                        	.sym	wcnt,14,16,1,16
 15068                        	.sym	cc,16,16,1,16
 15069                        	.sym	csect,18,16,1,16
 15070                        	.sym	wbuff,20,142,1,32
 15071                        	.sym	fp,4,138,6,32,51
 15072                        	.sym	buff,8,129,6,32
 15073                        	.sym	btw,12,16,6,16
 15074                        	.sym	bw,14,144,6,32
 15075 0B:77E5: A5 2C        	lda	<L605+buff_0
 15076 0B:77E7: 85 21        	sta	<L606+wbuff_1
 15077 0B:77E9: A5 2E        	lda	<L605+buff_0+2
 15078 0B:77EB: 85 23        	sta	<L606+wbuff_1+2
 15079                        	.line	4516
 15080 0B:77ED: A9 00 00     	lda	#$0
 15081 0B:77F0: 87 32        	sta	[<L605+bw_0]
 15082                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 15083                        	.line	4517
 15084 0B:77F2: F4 00 00     	pea	#0
 15085 0B:77F5: 18           	clc
 15086 0B:77F6: 7B           	tdc
 15087 0B:77F7: 69 0F 00     	adc	#<L606+fs_1
 15088 0B:77FA: 48           	pha
 15089 0B:77FB: D4 2A        	pei	<L605+fp_0+2
 15090 0B:77FD: D4 28        	pei	<L605+fp_0
 15091 0B:77FF: 22 C9 6D 0B  	jsl	~~validate
 15092 0B:7803: 85 0D        	sta	<L606+res_1
 15093                        ;	if (res != FR_OK || (res = (FRESULT) fp->err) !=
                     FR_OK)
 15094                        	.line	4518
 15095                        ;		LEAVE_FF(fs, res); /* Check validity */
 15096 0B:7805: A5 0D        	lda	<L606+res_1
 15097 0B:7807: F0 03        	beq	L609
 15098 0B:7809: 82 11 00     	brl	L608
 15099                        L609:
 15100 0B:780C: A0 11 00     	ldy	#$11
 15101 0B:780F: B7 28        	lda	[<L605+fp_0],Y
  Fri Jul 16 2021 14:42                                                Page 293


 15102 0B:7811: 29 FF 00     	and	#$ff
 15103 0B:7814: 85 0D        	sta	<L606+res_1
 15104 0B:7816: A5 0D        	lda	<L606+res_1
 15105 0B:7818: D0 03        	bne	L610
 15106 0B:781A: 82 14 00     	brl	L10308
 15107                        L610:
 15108                        L608:
 15109                        	.line	4519
 15110 0B:781D: A5 0D        	lda	<L606+res_1
 15111                        L611:
 15112 0B:781F: A8           	tay
 15113 0B:7820: A5 26        	lda	<L605+2
 15114 0B:7822: 85 34        	sta	<L605+2+14
 15115 0B:7824: A5 25        	lda	<L605+1
 15116 0B:7826: 85 33        	sta	<L605+1+14
 15117 0B:7828: 2B           	pld
 15118 0B:7829: 3B           	tsc
 15119 0B:782A: 18           	clc
 15120 0B:782B: 69 32 00     	adc	#L605+14
 15121 0B:782E: 1B           	tcs
 15122 0B:782F: 98           	tya
 15123 0B:7830: 6B           	rtl
 15124                        ;	if (!(fp->flag & FA_WRITE))
 15125                        L10308:
 15126                        	.line	4520
 15127                        ;		LEAVE_FF(fs, FR_DENIED); /* Check access
                     mode */
 15128 0B:7831: E2 20        	sep	#$20
 15129                        	longa	off
 15130 0B:7833: A0 10 00     	ldy	#$10
 15131 0B:7836: B7 28        	lda	[<L605+fp_0],Y
 15132 0B:7838: 29 02        	and	#<$2
 15133 0B:783A: C2 20        	rep	#$20
 15134                        	longa	on
 15135 0B:783C: F0 03        	beq	L612
 15136 0B:783E: 82 06 00     	brl	L10309
 15137                        L612:
 15138                        	.line	4521
 15139 0B:7841: A9 07 00     	lda	#$7
 15140 0B:7844: 82 D8 FF     	brl	L611
 15141                        ;
 15142                        ;	/* Check fptr wrap-around (file size cannot reac
                    h 4 GiB at FAT volume) */
 15143                        ;	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT)
 15144                        L10309:
 15145                        	.line	4524
 15146                        ;			&& (DWORD) (fp->fptr + btw) < (D
                    WORD) fp->fptr)
 15147                        ;	{
 15148 0B:7847: 82 0D 00     	brl	L613
 15149 0B:784A: E2 20        	sep	#$20
 15150                        	longa	off
 15151 0B:784C: A7 0F        	lda	[<L606+fs_1]
 15152 0B:784E: C9 04        	cmp	#<$4
 15153 0B:7850: C2 20        	rep	#$20
 15154                        	longa	on
 15155 0B:7852: D0 03        	bne	L614
 15156 0B:7854: 82 45 00     	brl	L10310
  Fri Jul 16 2021 14:42                                                Page 294


 15157                        L614:
 15158                        L613:
 15159 0B:7857: A5 30        	lda	<L605+btw_0
 15160 0B:7859: 85 01        	sta	<R0
 15161 0B:785B: 64 03        	stz	<R0+2
 15162 0B:785D: 18           	clc
 15163 0B:785E: A5 01        	lda	<R0
 15164 0B:7860: A0 12 00     	ldy	#$12
 15165 0B:7863: 77 28        	adc	[<L605+fp_0],Y
 15166 0B:7865: 85 05        	sta	<R1
 15167 0B:7867: A5 03        	lda	<R0+2
 15168 0B:7869: A0 14 00     	ldy	#$14
 15169 0B:786C: 77 28        	adc	[<L605+fp_0],Y
 15170 0B:786E: 85 07        	sta	<R1+2
 15171 0B:7870: A5 05        	lda	<R1
 15172 0B:7872: A0 12 00     	ldy	#$12
 15173 0B:7875: D7 28        	cmp	[<L605+fp_0],Y
 15174 0B:7877: A5 07        	lda	<R1+2
 15175 0B:7879: A0 14 00     	ldy	#$14
 15176 0B:787C: F7 28        	sbc	[<L605+fp_0],Y
 15177 0B:787E: 90 03        	bcc	L615
 15178 0B:7880: 82 19 00     	brl	L10310
 15179                        L615:
 15180                        	.line	4526
 15181                        ;		btw = (UINT) (0xFFFFFFFF - (DWORD) fp->f
                    ptr);
 15182                        	.line	4527
 15183 0B:7883: 38           	sec
 15184 0B:7884: A9 FF FF     	lda	#$ffff
 15185 0B:7887: A0 12 00     	ldy	#$12
 15186 0B:788A: F7 28        	sbc	[<L605+fp_0],Y
 15187 0B:788C: 85 01        	sta	<R0
 15188 0B:788E: A9 FF FF     	lda	#$ffff
 15189 0B:7891: A0 14 00     	ldy	#$14
 15190 0B:7894: F7 28        	sbc	[<L605+fp_0],Y
 15191 0B:7896: 85 03        	sta	<R0+2
 15192 0B:7898: A5 01        	lda	<R0
 15193 0B:789A: 85 30        	sta	<L605+btw_0
 15194                        ;	}
 15195                        	.line	4528
 15196                        ;
 15197                        ;	for (; btw;
 15198                        L10310:
 15199                        	.line	4530
 15200 0B:789C: 82 20 04     	brl	L10314
 15201                        ;			/* Repeat until all data written
                     */
 15202                        ;			btw -= wcnt, *bw += wcnt, wbuff 
                    += wcnt, fp->fptr += wcnt, fp->obj.objsize =
 15203                        ;					(fp->fptr > fp->
                    obj.objsize) ? fp->fptr : fp->obj.objsize)
 15204                        L10313:
 15205                        ;	{
 15206                        	.line	4534
 15207                        ;		if (fp->fptr % SS(fs) == 0)
 15208                        	.line	4535
 15209                        ;		{ /* On the sector boundary? */
 15210 0B:789F: A0 12 00     	ldy	#$12
  Fri Jul 16 2021 14:42                                                Page 295


 15211 0B:78A2: B7 28        	lda	[<L605+fp_0],Y
 15212 0B:78A4: 29 FF 01     	and	#<$1ff
 15213 0B:78A7: F0 03        	beq	L616
 15214 0B:78A9: 82 19 03     	brl	L10315
 15215                        L616:
 15216                        	.line	4536
 15217                        ;			csect = (UINT) (fp->fptr / SS(fs
                    )) & (fs->csize - 1); /* Sector offset in the cluster */
 15218                        	.line	4537
 15219 0B:78AC: A0 14 00     	ldy	#$14
 15220 0B:78AF: B7 28        	lda	[<L605+fp_0],Y
 15221 0B:78B1: 48           	pha
 15222 0B:78B2: A0 12 00     	ldy	#$12
 15223 0B:78B5: B7 28        	lda	[<L605+fp_0],Y
 15224 0B:78B7: 48           	pha
 15225 0B:78B8: A9 09 00     	lda	#$9
 15226                        	xref	~~~llsr
 15227 0B:78BB: 22 xx xx xx  	jsl	~~~llsr
 15228 0B:78BF: 85 01        	sta	<R0
 15229 0B:78C1: 86 03        	stx	<R0+2
 15230 0B:78C3: 18           	clc
 15231 0B:78C4: A9 FF FF     	lda	#$ffff
 15232 0B:78C7: A0 09 00     	ldy	#$9
 15233 0B:78CA: 77 0F        	adc	[<L606+fs_1],Y
 15234 0B:78CC: 85 05        	sta	<R1
 15235 0B:78CE: A5 05        	lda	<R1
 15236 0B:78D0: 25 01        	and	<R0
 15237 0B:78D2: 85 1F        	sta	<L606+csect_1
 15238                        ;			if (csect == 0)
 15239                        	.line	4538
 15240                        ;			{ /* On the cluster boundary? */
 15241 0B:78D4: A5 1F        	lda	<L606+csect_1
 15242 0B:78D6: F0 03        	beq	L617
 15243 0B:78D8: 82 CB 00     	brl	L10316
 15244                        L617:
 15245                        	.line	4539
 15246                        ;				if (fp->fptr == 0)
 15247                        	.line	4540
 15248                        ;				{ /* On the top of the f
                    ile? */
 15249 0B:78DB: A0 12 00     	ldy	#$12
 15250 0B:78DE: B7 28        	lda	[<L605+fp_0],Y
 15251 0B:78E0: A0 14 00     	ldy	#$14
 15252 0B:78E3: 17 28        	ora	[<L605+fp_0],Y
 15253 0B:78E5: F0 03        	beq	L618
 15254 0B:78E7: 82 2C 00     	brl	L10317
 15255                        L618:
 15256                        	.line	4541
 15257                        ;					clst = fp->obj.s
                    clust; /* Follow from the origin */
 15258                        	.line	4542
 15259 0B:78EA: A0 08 00     	ldy	#$8
 15260 0B:78ED: B7 28        	lda	[<L605+fp_0],Y
 15261 0B:78EF: 85 13        	sta	<L606+clst_1
 15262 0B:78F1: A0 0A 00     	ldy	#$a
 15263 0B:78F4: B7 28        	lda	[<L605+fp_0],Y
 15264 0B:78F6: 85 15        	sta	<L606+clst_1+2
 15265                        ;					if (clst == 0)
  Fri Jul 16 2021 14:42                                                Page 296


 15266                        	.line	4543
 15267                        ;					{ /* If no clust
                    er is allocated, */
 15268 0B:78F8: A5 13        	lda	<L606+clst_1
 15269 0B:78FA: 05 15        	ora	<L606+clst_1+2
 15270 0B:78FC: F0 03        	beq	L619
 15271 0B:78FE: 82 12 00     	brl	L10318
 15272                        L619:
 15273                        	.line	4544
 15274                        ;						clst = c
                    reate_chain(&fp->obj, 0); /* create a new cluster chain */
 15275                        	.line	4545
 15276 0B:7901: F4 00 00     	pea	#^$0
 15277 0B:7904: F4 00 00     	pea	#<$0
 15278 0B:7907: D4 2A        	pei	<L605+fp_0+2
 15279 0B:7909: D4 28        	pei	<L605+fp_0
 15280 0B:790B: 22 4C 4D 0B  	jsl	~~create_chain
 15281 0B:790F: 85 13        	sta	<L606+clst_1
 15282 0B:7911: 86 15        	stx	<L606+clst_1+2
 15283                        ;					}
 15284                        	.line	4546
 15285                        ;				}
 15286                        L10318:
 15287                        	.line	4547
 15288                        ;				else
 15289 0B:7913: 82 18 00     	brl	L10319
 15290                        L10317:
 15291                        ;				{ /* On the middle or en
                    d of the file */
 15292                        	.line	4549
 15293                        ;#if FF_USE_FASTSEEK
 15294                        ;					if (fp->cltbl)
 15295                        ;					{
 15296                        ;						clst = c
                    lmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
 15297                        ;					}
 15298                        ;					else
 15299                        ;#endif
 15300                        ;					{
 15301                        	.line	4557
 15302                        ;						clst = c
                    reate_chain(&fp->obj, fp->clust); /* Follow or stretch clust
                    er chain on the FAT */
 15303                        	.line	4558
 15304 0B:7916: A0 18 00     	ldy	#$18
 15305 0B:7919: B7 28        	lda	[<L605+fp_0],Y
 15306 0B:791B: 48           	pha
 15307 0B:791C: A0 16 00     	ldy	#$16
 15308 0B:791F: B7 28        	lda	[<L605+fp_0],Y
 15309 0B:7921: 48           	pha
 15310 0B:7922: D4 2A        	pei	<L605+fp_0+2
 15311 0B:7924: D4 28        	pei	<L605+fp_0
 15312 0B:7926: 22 4C 4D 0B  	jsl	~~create_chain
 15313 0B:792A: 85 13        	sta	<L606+clst_1
 15314 0B:792C: 86 15        	stx	<L606+clst_1+2
 15315                        ;					}
 15316                        	.line	4559
 15317                        ;				}
  Fri Jul 16 2021 14:42                                                Page 297


 15318                        	.line	4560
 15319                        L10319:
 15320                        ;				if (clst == 0)
 15321                        	.line	4561
 15322                        ;					break; /* Could 
                    not allocate a new cluster (disk full) */
 15323 0B:792E: A5 13        	lda	<L606+clst_1
 15324 0B:7930: 05 15        	ora	<L606+clst_1+2
 15325 0B:7932: D0 03        	bne	L620
 15326 0B:7934: 82 8F 03     	brl	L10312
 15327                        L620:
 15328                        ;				if (clst == 1)
 15329                        	.line	4563
 15330                        ;					ABORT(fs, FR_INT
                    _ERR);
 15331 0B:7937: A5 13        	lda	<L606+clst_1
 15332 0B:7939: C9 01 00     	cmp	#<$1
 15333 0B:793C: D0 05        	bne	L621
 15334 0B:793E: A5 15        	lda	<L606+clst_1+2
 15335 0B:7940: C9 00 00     	cmp	#^$1
 15336                        L621:
 15337 0B:7943: F0 03        	beq	L622
 15338 0B:7945: 82 11 00     	brl	L10320
 15339                        L622:
 15340                        	.line	4564
 15341                        	.line	4564
 15342 0B:7948: E2 20        	sep	#$20
 15343                        	longa	off
 15344 0B:794A: A9 02        	lda	#$2
 15345 0B:794C: A0 11 00     	ldy	#$11
 15346 0B:794F: 97 28        	sta	[<L605+fp_0],Y
 15347 0B:7951: C2 20        	rep	#$20
 15348                        	longa	on
 15349                        	.line	4564
 15350 0B:7953: A9 02 00     	lda	#$2
 15351 0B:7956: 82 C6 FE     	brl	L611
 15352                        	.line	4564
 15353                        L10320:
 15354                        	.line	4564
 15355                        ;				if (clst == 0xFFFFFFFF)
 15356                        	.line	4565
 15357                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 15358 0B:7959: A5 13        	lda	<L606+clst_1
 15359 0B:795B: C9 FF FF     	cmp	#<$ffffffff
 15360 0B:795E: D0 05        	bne	L623
 15361 0B:7960: A5 15        	lda	<L606+clst_1+2
 15362 0B:7962: C9 FF FF     	cmp	#^$ffffffff
 15363                        L623:
 15364 0B:7965: F0 03        	beq	L624
 15365 0B:7967: 82 11 00     	brl	L10321
 15366                        L624:
 15367                        	.line	4566
 15368                        	.line	4566
 15369 0B:796A: E2 20        	sep	#$20
 15370                        	longa	off
 15371 0B:796C: A9 01        	lda	#$1
 15372 0B:796E: A0 11 00     	ldy	#$11
  Fri Jul 16 2021 14:42                                                Page 298


 15373 0B:7971: 97 28        	sta	[<L605+fp_0],Y
 15374 0B:7973: C2 20        	rep	#$20
 15375                        	longa	on
 15376                        	.line	4566
 15377 0B:7975: A9 01 00     	lda	#$1
 15378 0B:7978: 82 A4 FE     	brl	L611
 15379                        	.line	4566
 15380                        L10321:
 15381                        	.line	4566
 15382                        ;				fp->clust = clst; /* Upd
                    ate current cluster */
 15383                        	.line	4567
 15384 0B:797B: A5 13        	lda	<L606+clst_1
 15385 0B:797D: A0 16 00     	ldy	#$16
 15386 0B:7980: 97 28        	sta	[<L605+fp_0],Y
 15387 0B:7982: A5 15        	lda	<L606+clst_1+2
 15388 0B:7984: A0 18 00     	ldy	#$18
 15389 0B:7987: 97 28        	sta	[<L605+fp_0],Y
 15390                        ;				if (fp->obj.sclust == 0)
 15391                        	.line	4568
 15392                        ;					fp->obj.sclust =
                     clst; /* Set start cluster if the first write */
 15393 0B:7989: A0 08 00     	ldy	#$8
 15394 0B:798C: B7 28        	lda	[<L605+fp_0],Y
 15395 0B:798E: A0 0A 00     	ldy	#$a
 15396 0B:7991: 17 28        	ora	[<L605+fp_0],Y
 15397 0B:7993: F0 03        	beq	L625
 15398 0B:7995: 82 0E 00     	brl	L10322
 15399                        L625:
 15400                        	.line	4569
 15401 0B:7998: A5 13        	lda	<L606+clst_1
 15402 0B:799A: A0 08 00     	ldy	#$8
 15403 0B:799D: 97 28        	sta	[<L605+fp_0],Y
 15404 0B:799F: A5 15        	lda	<L606+clst_1+2
 15405 0B:79A1: A0 0A 00     	ldy	#$a
 15406 0B:79A4: 97 28        	sta	[<L605+fp_0],Y
 15407                        ;			}
 15408                        L10322:
 15409                        	.line	4570
 15410                        ;#if FF_FS_TINY
 15411                        ;			if (fs->winsect == fp->sect && s
                    ync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR); /* Write-ba
                    ck sector cache */
 15412                        ;#else
 15413                        ;			if (fp->flag & FA_DIRTY)
 15414                        L10316:
 15415                        	.line	4574
 15416                        ;			{ /* Write-back sector cache */
 15417 0B:79A6: E2 20        	sep	#$20
 15418                        	longa	off
 15419 0B:79A8: A0 10 00     	ldy	#$10
 15420 0B:79AB: B7 28        	lda	[<L605+fp_0],Y
 15421 0B:79AD: 29 80        	and	#<$80
 15422 0B:79AF: C2 20        	rep	#$20
 15423                        	longa	on
 15424 0B:79B1: D0 03        	bne	L626
 15425 0B:79B3: 82 5C 00     	brl	L10323
 15426                        L626:
  Fri Jul 16 2021 14:42                                                Page 299


 15427                        	.line	4575
 15428                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK)
 15429                        	.line	4576
 15430                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 15431 0B:79B6: F4 01 00     	pea	#<$1
 15432 0B:79B9: A0 1C 00     	ldy	#$1c
 15433 0B:79BC: B7 28        	lda	[<L605+fp_0],Y
 15434 0B:79BE: 48           	pha
 15435 0B:79BF: A0 1A 00     	ldy	#$1a
 15436 0B:79C2: B7 28        	lda	[<L605+fp_0],Y
 15437 0B:79C4: 48           	pha
 15438 0B:79C5: 18           	clc
 15439 0B:79C6: A9 26 00     	lda	#$26
 15440 0B:79C9: 65 28        	adc	<L605+fp_0
 15441 0B:79CB: 85 01        	sta	<R0
 15442 0B:79CD: A9 00 00     	lda	#$0
 15443 0B:79D0: 65 2A        	adc	<L605+fp_0+2
 15444 0B:79D2: 85 03        	sta	<R0+2
 15445 0B:79D4: D4 03        	pei	<R0+2
 15446 0B:79D6: D4 01        	pei	<R0
 15447 0B:79D8: A0 01 00     	ldy	#$1
 15448 0B:79DB: B7 0F        	lda	[<L606+fs_1],Y
 15449 0B:79DD: 48           	pha
 15450 0B:79DE: 22 xx xx xx  	jsl	~~disk_write
 15451 0B:79E2: AA           	tax
 15452 0B:79E3: D0 03        	bne	L627
 15453 0B:79E5: 82 11 00     	brl	L10324
 15454                        L627:
 15455                        	.line	4577
 15456                        	.line	4577
 15457 0B:79E8: E2 20        	sep	#$20
 15458                        	longa	off
 15459 0B:79EA: A9 01        	lda	#$1
 15460 0B:79EC: A0 11 00     	ldy	#$11
 15461 0B:79EF: 97 28        	sta	[<L605+fp_0],Y
 15462 0B:79F1: C2 20        	rep	#$20
 15463                        	longa	on
 15464                        	.line	4577
 15465 0B:79F3: A9 01 00     	lda	#$1
 15466 0B:79F6: 82 26 FE     	brl	L611
 15467                        	.line	4577
 15468                        L10324:
 15469                        	.line	4577
 15470                        ;				fp->flag &= (BYTE) ~FA_D
                    IRTY;
 15471                        	.line	4578
 15472 0B:79F9: 18           	clc
 15473 0B:79FA: A9 10 00     	lda	#$10
 15474 0B:79FD: 65 28        	adc	<L605+fp_0
 15475 0B:79FF: 85 01        	sta	<R0
 15476 0B:7A01: A9 00 00     	lda	#$0
 15477 0B:7A04: 65 2A        	adc	<L605+fp_0+2
 15478 0B:7A06: 85 03        	sta	<R0+2
 15479 0B:7A08: E2 20        	sep	#$20
 15480                        	longa	off
 15481 0B:7A0A: A7 01        	lda	[<R0]
  Fri Jul 16 2021 14:42                                                Page 300


 15482 0B:7A0C: 29 7F        	and	#<$7f
 15483 0B:7A0E: 87 01        	sta	[<R0]
 15484 0B:7A10: C2 20        	rep	#$20
 15485                        	longa	on
 15486                        ;			}
 15487                        	.line	4579
 15488                        ;#endif
 15489                        ;			sect = clst2sect(fs, fp->clust);
                     /* Get current sector */
 15490                        L10323:
 15491                        	.line	4581
 15492 0B:7A12: A0 18 00     	ldy	#$18
 15493 0B:7A15: B7 28        	lda	[<L605+fp_0],Y
 15494 0B:7A17: 48           	pha
 15495 0B:7A18: A0 16 00     	ldy	#$16
 15496 0B:7A1B: B7 28        	lda	[<L605+fp_0],Y
 15497 0B:7A1D: 48           	pha
 15498 0B:7A1E: D4 11        	pei	<L606+fs_1+2
 15499 0B:7A20: D4 0F        	pei	<L606+fs_1
 15500 0B:7A22: 22 7E 45 0B  	jsl	~~clst2sect
 15501 0B:7A26: 85 17        	sta	<L606+sect_1
 15502 0B:7A28: 86 19        	stx	<L606+sect_1+2
 15503                        ;			if (sect == 0)
 15504                        	.line	4582
 15505                        ;				ABORT(fs, FR_INT_ERR);
 15506 0B:7A2A: A5 17        	lda	<L606+sect_1
 15507 0B:7A2C: 05 19        	ora	<L606+sect_1+2
 15508 0B:7A2E: F0 03        	beq	L628
 15509 0B:7A30: 82 11 00     	brl	L10325
 15510                        L628:
 15511                        	.line	4583
 15512                        	.line	4583
 15513 0B:7A33: E2 20        	sep	#$20
 15514                        	longa	off
 15515 0B:7A35: A9 02        	lda	#$2
 15516 0B:7A37: A0 11 00     	ldy	#$11
 15517 0B:7A3A: 97 28        	sta	[<L605+fp_0],Y
 15518 0B:7A3C: C2 20        	rep	#$20
 15519                        	longa	on
 15520                        	.line	4583
 15521 0B:7A3E: A9 02 00     	lda	#$2
 15522 0B:7A41: 82 DB FD     	brl	L611
 15523                        	.line	4583
 15524                        L10325:
 15525                        	.line	4583
 15526                        ;			sect += csect;
 15527                        	.line	4584
 15528 0B:7A44: A5 1F        	lda	<L606+csect_1
 15529 0B:7A46: 85 01        	sta	<R0
 15530 0B:7A48: 64 03        	stz	<R0+2
 15531 0B:7A4A: 18           	clc
 15532 0B:7A4B: A5 01        	lda	<R0
 15533 0B:7A4D: 65 17        	adc	<L606+sect_1
 15534 0B:7A4F: 85 17        	sta	<L606+sect_1
 15535 0B:7A51: A5 03        	lda	<R0+2
 15536 0B:7A53: 65 19        	adc	<L606+sect_1+2
 15537 0B:7A55: 85 19        	sta	<L606+sect_1+2
 15538                        ;			cc = btw / SS(fs); /* When remai
  Fri Jul 16 2021 14:42                                                Page 301


                    ning bytes >= sector size, */
 15539                        	.line	4585
 15540 0B:7A57: A5 30        	lda	<L605+btw_0
 15541 0B:7A59: A2 09 00     	ldx	#<$9
 15542                        	xref	~~~lsr
 15543 0B:7A5C: 22 xx xx xx  	jsl	~~~lsr
 15544 0B:7A60: 85 1D        	sta	<L606+cc_1
 15545                        ;			if (cc > 0)
 15546                        	.line	4586
 15547                        ;			{ /* Write maximum contiguous se
                    ctors directly */
 15548 0B:7A62: A9 00 00     	lda	#$0
 15549 0B:7A65: C5 1D        	cmp	<L606+cc_1
 15550 0B:7A67: 90 03        	bcc	L629
 15551 0B:7A69: 82 E2 00     	brl	L10326
 15552                        L629:
 15553                        	.line	4587
 15554                        ;				if (csect + cc > fs->csi
                    ze)
 15555                        	.line	4588
 15556                        ;				{ /* Clip at cluster bou
                    ndary */
 15557 0B:7A6C: 18           	clc
 15558 0B:7A6D: A5 1F        	lda	<L606+csect_1
 15559 0B:7A6F: 65 1D        	adc	<L606+cc_1
 15560 0B:7A71: 85 01        	sta	<R0
 15561 0B:7A73: A0 09 00     	ldy	#$9
 15562 0B:7A76: B7 0F        	lda	[<L606+fs_1],Y
 15563 0B:7A78: C5 01        	cmp	<R0
 15564 0B:7A7A: 90 03        	bcc	L630
 15565 0B:7A7C: 82 0A 00     	brl	L10327
 15566                        L630:
 15567                        	.line	4589
 15568                        ;					cc = fs->csize -
                     csect;
 15569                        	.line	4590
 15570 0B:7A7F: 38           	sec
 15571 0B:7A80: A0 09 00     	ldy	#$9
 15572 0B:7A83: B7 0F        	lda	[<L606+fs_1],Y
 15573 0B:7A85: E5 1F        	sbc	<L606+csect_1
 15574 0B:7A87: 85 1D        	sta	<L606+cc_1
 15575                        ;				}
 15576                        	.line	4591
 15577                        ;				if (disk_write(fs->pdrv,
                     wbuff, sect, cc) != RES_OK)
 15578                        L10327:
 15579                        	.line	4592
 15580                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 15581 0B:7A89: D4 1D        	pei	<L606+cc_1
 15582 0B:7A8B: D4 19        	pei	<L606+sect_1+2
 15583 0B:7A8D: D4 17        	pei	<L606+sect_1
 15584 0B:7A8F: D4 23        	pei	<L606+wbuff_1+2
 15585 0B:7A91: D4 21        	pei	<L606+wbuff_1
 15586 0B:7A93: A0 01 00     	ldy	#$1
 15587 0B:7A96: B7 0F        	lda	[<L606+fs_1],Y
 15588 0B:7A98: 48           	pha
 15589 0B:7A99: 22 xx xx xx  	jsl	~~disk_write
  Fri Jul 16 2021 14:42                                                Page 302


 15590 0B:7A9D: AA           	tax
 15591 0B:7A9E: D0 03        	bne	L631
 15592 0B:7AA0: 82 11 00     	brl	L10328
 15593                        L631:
 15594                        	.line	4593
 15595                        	.line	4593
 15596 0B:7AA3: E2 20        	sep	#$20
 15597                        	longa	off
 15598 0B:7AA5: A9 01        	lda	#$1
 15599 0B:7AA7: A0 11 00     	ldy	#$11
 15600 0B:7AAA: 97 28        	sta	[<L605+fp_0],Y
 15601 0B:7AAC: C2 20        	rep	#$20
 15602                        	longa	on
 15603                        	.line	4593
 15604 0B:7AAE: A9 01 00     	lda	#$1
 15605 0B:7AB1: 82 6B FD     	brl	L611
 15606                        	.line	4593
 15607                        L10328:
 15608                        	.line	4593
 15609                        ;#if FF_FS_MINIMIZE <= 2
 15610                        ;#if FF_FS_TINY
 15611                        ;				if (fs->winsect - sect <
                     cc)
 15612                        ;				{ /* Refill sector cache
                     if it gets invalidated by the direct write */
 15613                        ;					mem_cpy(fs->win,
                     wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 15614                        ;					fs->wflag = 0;
 15615                        ;				}
 15616                        ;#else
 15617                        ;				if (fp->sect - sect < cc
                    )
 15618                        	.line	4602
 15619                        ;				{ /* Refill sector cache
                     if it gets invalidated by the direct write */
 15620 0B:7AB4: A5 1D        	lda	<L606+cc_1
 15621 0B:7AB6: 85 01        	sta	<R0
 15622 0B:7AB8: 64 03        	stz	<R0+2
 15623 0B:7ABA: 38           	sec
 15624 0B:7ABB: A0 1A 00     	ldy	#$1a
 15625 0B:7ABE: B7 28        	lda	[<L605+fp_0],Y
 15626 0B:7AC0: E5 17        	sbc	<L606+sect_1
 15627 0B:7AC2: 85 05        	sta	<R1
 15628 0B:7AC4: A0 1C 00     	ldy	#$1c
 15629 0B:7AC7: B7 28        	lda	[<L605+fp_0],Y
 15630 0B:7AC9: E5 19        	sbc	<L606+sect_1+2
 15631 0B:7ACB: 85 07        	sta	<R1+2
 15632 0B:7ACD: A5 05        	lda	<R1
 15633 0B:7ACF: C5 01        	cmp	<R0
 15634 0B:7AD1: A5 07        	lda	<R1+2
 15635 0B:7AD3: E5 03        	sbc	<R0+2
 15636 0B:7AD5: 90 03        	bcc	L632
 15637 0B:7AD7: 82 66 00     	brl	L10329
 15638                        L632:
 15639                        	.line	4603
 15640                        ;					mem_cpy(fp->buf,
                     wbuff + ((fp->sect - sect) * SS(fs)),
 15641                        	.line	4604
  Fri Jul 16 2021 14:42                                                Page 303


 15642                        ;							
                    SS(fs));
 15643 0B:7ADA: F4 00 02     	pea	#<$200
 15644 0B:7ADD: 38           	sec
 15645 0B:7ADE: A0 1A 00     	ldy	#$1a
 15646 0B:7AE1: B7 28        	lda	[<L605+fp_0],Y
 15647 0B:7AE3: E5 17        	sbc	<L606+sect_1
 15648 0B:7AE5: 85 05        	sta	<R1
 15649 0B:7AE7: A0 1C 00     	ldy	#$1c
 15650 0B:7AEA: B7 28        	lda	[<L605+fp_0],Y
 15651 0B:7AEC: E5 19        	sbc	<L606+sect_1+2
 15652 0B:7AEE: 85 07        	sta	<R1+2
 15653 0B:7AF0: D4 07        	pei	<R1+2
 15654 0B:7AF2: D4 05        	pei	<R1
 15655 0B:7AF4: A9 09 00     	lda	#$9
 15656                        	xref	~~~lasl
 15657 0B:7AF7: 22 xx xx xx  	jsl	~~~lasl
 15658 0B:7AFB: 85 01        	sta	<R0
 15659 0B:7AFD: 86 03        	stx	<R0+2
 15660 0B:7AFF: 18           	clc
 15661 0B:7B00: A5 21        	lda	<L606+wbuff_1
 15662 0B:7B02: 65 01        	adc	<R0
 15663 0B:7B04: 85 09        	sta	<R2
 15664 0B:7B06: A5 23        	lda	<L606+wbuff_1+2
 15665 0B:7B08: 65 03        	adc	<R0+2
 15666 0B:7B0A: 85 0B        	sta	<R2+2
 15667 0B:7B0C: D4 0B        	pei	<R2+2
 15668 0B:7B0E: D4 09        	pei	<R2
 15669 0B:7B10: 18           	clc
 15670 0B:7B11: A9 26 00     	lda	#$26
 15671 0B:7B14: 65 28        	adc	<L605+fp_0
 15672 0B:7B16: 85 01        	sta	<R0
 15673 0B:7B18: A9 00 00     	lda	#$0
 15674 0B:7B1B: 65 2A        	adc	<L605+fp_0+2
 15675 0B:7B1D: 85 03        	sta	<R0+2
 15676 0B:7B1F: D4 03        	pei	<R0+2
 15677 0B:7B21: D4 01        	pei	<R0
 15678 0B:7B23: 22 13 41 0B  	jsl	~~mem_cpy
 15679                        ;					fp->flag &= (BYT
                    E) ~FA_DIRTY;
 15680                        	.line	4606
 15681 0B:7B27: 18           	clc
 15682 0B:7B28: A9 10 00     	lda	#$10
 15683 0B:7B2B: 65 28        	adc	<L605+fp_0
 15684 0B:7B2D: 85 01        	sta	<R0
 15685 0B:7B2F: A9 00 00     	lda	#$0
 15686 0B:7B32: 65 2A        	adc	<L605+fp_0+2
 15687 0B:7B34: 85 03        	sta	<R0+2
 15688 0B:7B36: E2 20        	sep	#$20
 15689                        	longa	off
 15690 0B:7B38: A7 01        	lda	[<R0]
 15691 0B:7B3A: 29 7F        	and	#<$7f
 15692 0B:7B3C: 87 01        	sta	[<R0]
 15693 0B:7B3E: C2 20        	rep	#$20
 15694                        	longa	on
 15695                        ;				}
 15696                        	.line	4607
 15697                        ;#endif
  Fri Jul 16 2021 14:42                                                Page 304


 15698                        ;#endif
 15699                        ;				wcnt = SS(fs) * cc; /* N
                    umber of bytes transferred */
 15700                        L10329:
 15701                        	.line	4610
 15702 0B:7B40: A5 1D        	lda	<L606+cc_1
 15703 0B:7B42: A2 09 00     	ldx	#<$9
 15704                        	xref	~~~asl
 15705 0B:7B45: 22 xx xx xx  	jsl	~~~asl
 15706 0B:7B49: 85 1B        	sta	<L606+wcnt_1
 15707                        ;				continue;
 15708                        	.line	4611
 15709 0B:7B4B: 82 E5 00     	brl	L10311
 15710                        ;			}
 15711                        	.line	4612
 15712                        ;#if FF_FS_TINY
 15713                        ;			if (fp->fptr >= fp->obj.objsize)
 15714                        ;			{ /* Avoid silly cache filling o
                    n the growing edge */
 15715                        ;				if (sync_window(fs) != F
                    R_OK) ABORT(fs, FR_DISK_ERR);
 15716                        ;				fs->winsect = sect;
 15717                        ;			}
 15718                        ;#else
 15719                        ;			if (fp->sect != sect && /* Fill 
                    sector cache with file data */
 15720                        L10326:
 15721                        	.line	4620
 15722                        ;			fp->fptr < fp->obj.objsize
 15723                        ;					&& disk_read(fs-
                    >pdrv, fp->buf, sect, 1) != RES_OK)
 15724                        ;			{
 15725 0B:7B4E: A0 1A 00     	ldy	#$1a
 15726 0B:7B51: B7 28        	lda	[<L605+fp_0],Y
 15727 0B:7B53: C5 17        	cmp	<L606+sect_1
 15728 0B:7B55: D0 07        	bne	L633
 15729 0B:7B57: A0 1C 00     	ldy	#$1c
 15730 0B:7B5A: B7 28        	lda	[<L605+fp_0],Y
 15731 0B:7B5C: C5 19        	cmp	<L606+sect_1+2
 15732                        L633:
 15733 0B:7B5E: D0 03        	bne	L634
 15734 0B:7B60: 82 54 00     	brl	L10330
 15735                        L634:
 15736 0B:7B63: A0 12 00     	ldy	#$12
 15737 0B:7B66: B7 28        	lda	[<L605+fp_0],Y
 15738 0B:7B68: A0 0C 00     	ldy	#$c
 15739 0B:7B6B: D7 28        	cmp	[<L605+fp_0],Y
 15740 0B:7B6D: A0 14 00     	ldy	#$14
 15741 0B:7B70: B7 28        	lda	[<L605+fp_0],Y
 15742 0B:7B72: A0 0E 00     	ldy	#$e
 15743 0B:7B75: F7 28        	sbc	[<L605+fp_0],Y
 15744 0B:7B77: 90 03        	bcc	L635
 15745 0B:7B79: 82 3B 00     	brl	L10330
 15746                        L635:
 15747 0B:7B7C: F4 01 00     	pea	#<$1
 15748 0B:7B7F: D4 19        	pei	<L606+sect_1+2
 15749 0B:7B81: D4 17        	pei	<L606+sect_1
 15750 0B:7B83: 18           	clc
  Fri Jul 16 2021 14:42                                                Page 305


 15751 0B:7B84: A9 26 00     	lda	#$26
 15752 0B:7B87: 65 28        	adc	<L605+fp_0
 15753 0B:7B89: 85 01        	sta	<R0
 15754 0B:7B8B: A9 00 00     	lda	#$0
 15755 0B:7B8E: 65 2A        	adc	<L605+fp_0+2
 15756 0B:7B90: 85 03        	sta	<R0+2
 15757 0B:7B92: D4 03        	pei	<R0+2
 15758 0B:7B94: D4 01        	pei	<R0
 15759 0B:7B96: A0 01 00     	ldy	#$1
 15760 0B:7B99: B7 0F        	lda	[<L606+fs_1],Y
 15761 0B:7B9B: 48           	pha
 15762 0B:7B9C: 22 xx xx xx  	jsl	~~disk_read
 15763 0B:7BA0: AA           	tax
 15764 0B:7BA1: D0 03        	bne	L636
 15765 0B:7BA3: 82 11 00     	brl	L10330
 15766                        L636:
 15767                        	.line	4623
 15768                        ;				ABORT(fs, FR_DISK_ERR);
 15769                        	.line	4624
 15770                        	.line	4624
 15771 0B:7BA6: E2 20        	sep	#$20
 15772                        	longa	off
 15773 0B:7BA8: A9 01        	lda	#$1
 15774 0B:7BAA: A0 11 00     	ldy	#$11
 15775 0B:7BAD: 97 28        	sta	[<L605+fp_0],Y
 15776 0B:7BAF: C2 20        	rep	#$20
 15777                        	longa	on
 15778                        	.line	4624
 15779 0B:7BB1: A9 01 00     	lda	#$1
 15780 0B:7BB4: 82 68 FC     	brl	L611
 15781                        	.line	4624
 15782                        	.line	4624
 15783                        ;			}
 15784                        	.line	4625
 15785                        ;#endif
 15786                        ;			fp->sect = sect;
 15787                        L10330:
 15788                        	.line	4627
 15789 0B:7BB7: A5 17        	lda	<L606+sect_1
 15790 0B:7BB9: A0 1A 00     	ldy	#$1a
 15791 0B:7BBC: 97 28        	sta	[<L605+fp_0],Y
 15792 0B:7BBE: A5 19        	lda	<L606+sect_1+2
 15793 0B:7BC0: A0 1C 00     	ldy	#$1c
 15794 0B:7BC3: 97 28        	sta	[<L605+fp_0],Y
 15795                        ;		}
 15796                        	.line	4628
 15797                        ;		wcnt = SS(fs) - (UINT) fp->fptr % SS(fs)
                    ; /* Number of bytes remains in the sector */
 15798                        L10315:
 15799                        	.line	4629
 15800 0B:7BC5: A0 12 00     	ldy	#$12
 15801 0B:7BC8: B7 28        	lda	[<L605+fp_0],Y
 15802 0B:7BCA: 29 FF 01     	and	#<$1ff
 15803 0B:7BCD: 85 01        	sta	<R0
 15804 0B:7BCF: 38           	sec
 15805 0B:7BD0: A9 00 02     	lda	#$200
 15806 0B:7BD3: E5 01        	sbc	<R0
 15807 0B:7BD5: 85 1B        	sta	<L606+wcnt_1
  Fri Jul 16 2021 14:42                                                Page 306


 15808                        ;		if (wcnt > btw)
 15809                        	.line	4630
 15810                        ;			wcnt = btw; /* Clip it by btw if
                     needed */
 15811 0B:7BD7: A5 30        	lda	<L605+btw_0
 15812 0B:7BD9: C5 1B        	cmp	<L606+wcnt_1
 15813 0B:7BDB: 90 03        	bcc	L637
 15814 0B:7BDD: 82 04 00     	brl	L10331
 15815                        L637:
 15816                        	.line	4631
 15817 0B:7BE0: A5 30        	lda	<L605+btw_0
 15818 0B:7BE2: 85 1B        	sta	<L606+wcnt_1
 15819                        ;#if FF_FS_TINY
 15820                        ;		if (move_window(fs, fp->sect) != FR_OK) 
                    ABORT(fs, FR_DISK_ERR); /* Move sector window */
 15821                        ;		mem_cpy(fs->win + fp->fptr % SS(fs), wbu
                    ff, wcnt); /* Fit data to the sector */
 15822                        ;		fs->wflag = 1;
 15823                        ;#else
 15824                        ;		mem_cpy(fp->buf + fp->fptr % SS(fs), wbu
                    ff, wcnt); /* Fit data to the sector */
 15825                        L10331:
 15826                        	.line	4637
 15827 0B:7BE4: D4 1B        	pei	<L606+wcnt_1
 15828 0B:7BE6: D4 23        	pei	<L606+wbuff_1+2
 15829 0B:7BE8: D4 21        	pei	<L606+wbuff_1
 15830 0B:7BEA: A0 12 00     	ldy	#$12
 15831 0B:7BED: B7 28        	lda	[<L605+fp_0],Y
 15832 0B:7BEF: 29 FF 01     	and	#<$1ff
 15833 0B:7BF2: 85 01        	sta	<R0
 15834 0B:7BF4: 64 03        	stz	<R0+2
 15835 0B:7BF6: 18           	clc
 15836 0B:7BF7: A9 26 00     	lda	#$26
 15837 0B:7BFA: 65 01        	adc	<R0
 15838 0B:7BFC: 85 05        	sta	<R1
 15839 0B:7BFE: A9 00 00     	lda	#$0
 15840 0B:7C01: 65 03        	adc	<R0+2
 15841 0B:7C03: 85 07        	sta	<R1+2
 15842 0B:7C05: 18           	clc
 15843 0B:7C06: A5 28        	lda	<L605+fp_0
 15844 0B:7C08: 65 05        	adc	<R1
 15845 0B:7C0A: 85 01        	sta	<R0
 15846 0B:7C0C: A5 2A        	lda	<L605+fp_0+2
 15847 0B:7C0E: 65 07        	adc	<R1+2
 15848 0B:7C10: 85 03        	sta	<R0+2
 15849 0B:7C12: D4 03        	pei	<R0+2
 15850 0B:7C14: D4 01        	pei	<R0
 15851 0B:7C16: 22 13 41 0B  	jsl	~~mem_cpy
 15852                        ;		fp->flag |= FA_DIRTY;
 15853                        	.line	4638
 15854 0B:7C1A: 18           	clc
 15855 0B:7C1B: A9 10 00     	lda	#$10
 15856 0B:7C1E: 65 28        	adc	<L605+fp_0
 15857 0B:7C20: 85 01        	sta	<R0
 15858 0B:7C22: A9 00 00     	lda	#$0
 15859 0B:7C25: 65 2A        	adc	<L605+fp_0+2
 15860 0B:7C27: 85 03        	sta	<R0+2
 15861 0B:7C29: E2 20        	sep	#$20
  Fri Jul 16 2021 14:42                                                Page 307


 15862                        	longa	off
 15863 0B:7C2B: A7 01        	lda	[<R0]
 15864 0B:7C2D: 09 80        	ora	#<$80
 15865 0B:7C2F: 87 01        	sta	[<R0]
 15866 0B:7C31: C2 20        	rep	#$20
 15867                        	longa	on
 15868                        ;#endif
 15869                        ;	}
 15870                        	.line	4640
 15871                        L10311:
 15872 0B:7C33: 38           	sec
 15873 0B:7C34: A5 30        	lda	<L605+btw_0
 15874 0B:7C36: E5 1B        	sbc	<L606+wcnt_1
 15875 0B:7C38: 85 30        	sta	<L605+btw_0
 15876 0B:7C3A: 18           	clc
 15877 0B:7C3B: A7 32        	lda	[<L605+bw_0]
 15878 0B:7C3D: 65 1B        	adc	<L606+wcnt_1
 15879 0B:7C3F: 87 32        	sta	[<L605+bw_0]
 15880 0B:7C41: A5 1B        	lda	<L606+wcnt_1
 15881 0B:7C43: 85 01        	sta	<R0
 15882 0B:7C45: 64 03        	stz	<R0+2
 15883 0B:7C47: 18           	clc
 15884 0B:7C48: A5 21        	lda	<L606+wbuff_1
 15885 0B:7C4A: 65 01        	adc	<R0
 15886 0B:7C4C: 85 21        	sta	<L606+wbuff_1
 15887 0B:7C4E: A5 23        	lda	<L606+wbuff_1+2
 15888 0B:7C50: 65 03        	adc	<R0+2
 15889 0B:7C52: 85 23        	sta	<L606+wbuff_1+2
 15890 0B:7C54: 18           	clc
 15891 0B:7C55: A9 12 00     	lda	#$12
 15892 0B:7C58: 65 28        	adc	<L605+fp_0
 15893 0B:7C5A: 85 01        	sta	<R0
 15894 0B:7C5C: A9 00 00     	lda	#$0
 15895 0B:7C5F: 65 2A        	adc	<L605+fp_0+2
 15896 0B:7C61: 85 03        	sta	<R0+2
 15897 0B:7C63: A5 1B        	lda	<L606+wcnt_1
 15898 0B:7C65: 85 05        	sta	<R1
 15899 0B:7C67: 64 07        	stz	<R1+2
 15900 0B:7C69: 18           	clc
 15901 0B:7C6A: A5 05        	lda	<R1
 15902 0B:7C6C: 67 01        	adc	[<R0]
 15903 0B:7C6E: 87 01        	sta	[<R0]
 15904 0B:7C70: A5 07        	lda	<R1+2
 15905 0B:7C72: A0 02 00     	ldy	#$2
 15906 0B:7C75: 77 01        	adc	[<R0],Y
 15907 0B:7C77: A0 02 00     	ldy	#$2
 15908 0B:7C7A: 97 01        	sta	[<R0],Y
 15909 0B:7C7C: A0 0C 00     	ldy	#$c
 15910 0B:7C7F: B7 28        	lda	[<L605+fp_0],Y
 15911 0B:7C81: A0 12 00     	ldy	#$12
 15912 0B:7C84: D7 28        	cmp	[<L605+fp_0],Y
 15913 0B:7C86: A0 0E 00     	ldy	#$e
 15914 0B:7C89: B7 28        	lda	[<L605+fp_0],Y
 15915 0B:7C8B: A0 14 00     	ldy	#$14
 15916 0B:7C8E: F7 28        	sbc	[<L605+fp_0],Y
 15917 0B:7C90: 90 03        	bcc	L639
 15918 0B:7C92: 82 0D 00     	brl	L638
 15919                        L639:
  Fri Jul 16 2021 14:42                                                Page 308


 15920 0B:7C95: A0 14 00     	ldy	#$14
 15921 0B:7C98: B7 28        	lda	[<L605+fp_0],Y
 15922 0B:7C9A: AA           	tax
 15923 0B:7C9B: A0 12 00     	ldy	#$12
 15924 0B:7C9E: B7 28        	lda	[<L605+fp_0],Y
 15925 0B:7CA0: 80 0B        	bra	L640
 15926                        L638:
 15927 0B:7CA2: A0 0E 00     	ldy	#$e
 15928 0B:7CA5: B7 28        	lda	[<L605+fp_0],Y
 15929 0B:7CA7: AA           	tax
 15930 0B:7CA8: A0 0C 00     	ldy	#$c
 15931 0B:7CAB: B7 28        	lda	[<L605+fp_0],Y
 15932                        L640:
 15933 0B:7CAD: 85 01        	sta	<R0
 15934 0B:7CAF: 86 03        	stx	<R0+2
 15935 0B:7CB1: A5 01        	lda	<R0
 15936 0B:7CB3: A0 0C 00     	ldy	#$c
 15937 0B:7CB6: 97 28        	sta	[<L605+fp_0],Y
 15938 0B:7CB8: A5 03        	lda	<R0+2
 15939 0B:7CBA: A0 0E 00     	ldy	#$e
 15940 0B:7CBD: 97 28        	sta	[<L605+fp_0],Y
 15941                        L10314:
 15942 0B:7CBF: A5 30        	lda	<L605+btw_0
 15943 0B:7CC1: F0 03        	beq	L641
 15944 0B:7CC3: 82 D9 FB     	brl	L10313
 15945                        L641:
 15946                        L10312:
 15947                        ;
 15948                        ;	fp->flag |= FA_MODIFIED; /* Set file change flag
                     */
 15949                        	.line	4642
 15950 0B:7CC6: 18           	clc
 15951 0B:7CC7: A9 10 00     	lda	#$10
 15952 0B:7CCA: 65 28        	adc	<L605+fp_0
 15953 0B:7CCC: 85 01        	sta	<R0
 15954 0B:7CCE: A9 00 00     	lda	#$0
 15955 0B:7CD1: 65 2A        	adc	<L605+fp_0+2
 15956 0B:7CD3: 85 03        	sta	<R0+2
 15957 0B:7CD5: E2 20        	sep	#$20
 15958                        	longa	off
 15959 0B:7CD7: A7 01        	lda	[<R0]
 15960 0B:7CD9: 09 40        	ora	#<$40
 15961 0B:7CDB: 87 01        	sta	[<R0]
 15962 0B:7CDD: C2 20        	rep	#$20
 15963                        	longa	on
 15964                        ;
 15965                        ;	LEAVE_FF(fs, FR_OK);
 15966                        	.line	4644
 15967 0B:7CDF: A9 00 00     	lda	#$0
 15968 0B:7CE2: 82 3A FB     	brl	L611
 15969                        ;}
 15970                        	.line	4645
 15971                        	.endblock	4645
 15972             00000024   L605	equ	36
 15973             0000000D   L606	equ	13
 15974 0B:7CE5:              	ends
 15975                        	efunc
 15976                        	.endfunc	4645,13,36
  Fri Jul 16 2021 14:42                                                Page 309


 15977                        	.line	4645
 15978                        ;
 15979                        ;/*-----------------------------------------------
                    ------------------------*/
 15980                        ;/* Synchronize the File                          
                                            */
 15981                        ;/*-----------------------------------------------
                    ------------------------*/
 15982                        ;
 15983                        ;FRESULT f_sync(FIL* fp /* Pointer to the file obj
                    ect */
 15984                        ;)
 15985                        ;{
 15986                        	.line	4651
 15987                        	.line	4653
 15988                        	FFDOS
 15989                        	xdef	~~f_sync
 15990                        	func
 15991                        	.function	4653
 15992                        ~~f_sync:
 15993                        	longa	on
 15994                        	longi	on
 15995 0B:7CE5: 3B           	tsc
 15996 0B:7CE6: 38           	sec
 15997 0B:7CE7: E9 12 00     	sbc	#L642
 15998 0B:7CEA: 1B           	tcs
 15999 0B:7CEB: 0B           	phd
 16000 0B:7CEC: 5B           	tcd
 16001             00000004   fp_0	set	4
 16002                        	.block	4653
 16003                        ;	FRESULT res;
 16004                        ;	FATFS *fs;
 16005                        ;	DWORD tm;
 16006                        ;	BYTE *dir;
 16007                        ;
 16008                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 16009             00000000   res_1	set	0
 16010             00000002   fs_1	set	2
 16011             00000006   tm_1	set	6
 16012             0000000A   dir_1	set	10
 16013                        	.sym	res,0,5,1,16
 16014                        	.sym	fs,2,138,1,32,49
 16015                        	.sym	tm,6,18,1,32
 16016                        	.sym	dir,10,142,1,32
 16017                        	.sym	fp,4,138,6,32,51
 16018                        	.line	4659
 16019 0B:7CED: F4 00 00     	pea	#0
 16020 0B:7CF0: 18           	clc
 16021 0B:7CF1: 7B           	tdc
 16022 0B:7CF2: 69 07 00     	adc	#<L643+fs_1
 16023 0B:7CF5: 48           	pha
 16024 0B:7CF6: D4 18        	pei	<L642+fp_0+2
 16025 0B:7CF8: D4 16        	pei	<L642+fp_0
 16026 0B:7CFA: 22 C9 6D 0B  	jsl	~~validate
 16027 0B:7CFE: 85 05        	sta	<L643+res_1
 16028                        ;	if (res == FR_OK)
 16029                        	.line	4660
  Fri Jul 16 2021 14:42                                                Page 310


 16030                        ;	{
 16031 0B:7D00: A5 05        	lda	<L643+res_1
 16032 0B:7D02: F0 03        	beq	L645
 16033 0B:7D04: 82 71 01     	brl	L10332
 16034                        L645:
 16035                        	.line	4661
 16036                        ;		if (fp->flag & FA_MODIFIED)
 16037                        	.line	4662
 16038                        ;		{ /* Is there any change to the file? */
 16039 0B:7D07: E2 20        	sep	#$20
 16040                        	longa	off
 16041 0B:7D09: A0 10 00     	ldy	#$10
 16042 0B:7D0C: B7 16        	lda	[<L642+fp_0],Y
 16043 0B:7D0E: 29 40        	and	#<$40
 16044 0B:7D10: C2 20        	rep	#$20
 16045                        	longa	on
 16046 0B:7D12: D0 03        	bne	L646
 16047 0B:7D14: 82 61 01     	brl	L10333
 16048                        L646:
 16049                        	.line	4663
 16050                        ;#if !FF_FS_TINY
 16051                        ;			if (fp->flag & FA_DIRTY)
 16052                        	.line	4665
 16053                        ;			{ /* Write-back cached data if n
                    eeded */
 16054 0B:7D17: E2 20        	sep	#$20
 16055                        	longa	off
 16056 0B:7D19: A0 10 00     	ldy	#$10
 16057 0B:7D1C: B7 16        	lda	[<L642+fp_0],Y
 16058 0B:7D1E: 29 80        	and	#<$80
 16059 0B:7D20: C2 20        	rep	#$20
 16060                        	longa	on
 16061 0B:7D22: D0 03        	bne	L647
 16062 0B:7D24: 82 60 00     	brl	L10334
 16063                        L647:
 16064                        	.line	4666
 16065                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK)
 16066                        	.line	4667
 16067                        ;					LEAVE_FF(fs, FR_
                    DISK_ERR);
 16068 0B:7D27: F4 01 00     	pea	#<$1
 16069 0B:7D2A: A0 1C 00     	ldy	#$1c
 16070 0B:7D2D: B7 16        	lda	[<L642+fp_0],Y
 16071 0B:7D2F: 48           	pha
 16072 0B:7D30: A0 1A 00     	ldy	#$1a
 16073 0B:7D33: B7 16        	lda	[<L642+fp_0],Y
 16074 0B:7D35: 48           	pha
 16075 0B:7D36: 18           	clc
 16076 0B:7D37: A9 26 00     	lda	#$26
 16077 0B:7D3A: 65 16        	adc	<L642+fp_0
 16078 0B:7D3C: 85 01        	sta	<R0
 16079 0B:7D3E: A9 00 00     	lda	#$0
 16080 0B:7D41: 65 18        	adc	<L642+fp_0+2
 16081 0B:7D43: 85 03        	sta	<R0+2
 16082 0B:7D45: D4 03        	pei	<R0+2
 16083 0B:7D47: D4 01        	pei	<R0
 16084 0B:7D49: A0 01 00     	ldy	#$1
  Fri Jul 16 2021 14:42                                                Page 311


 16085 0B:7D4C: B7 07        	lda	[<L643+fs_1],Y
 16086 0B:7D4E: 48           	pha
 16087 0B:7D4F: 22 xx xx xx  	jsl	~~disk_write
 16088 0B:7D53: AA           	tax
 16089 0B:7D54: D0 03        	bne	L648
 16090 0B:7D56: 82 15 00     	brl	L10335
 16091                        L648:
 16092                        	.line	4668
 16093 0B:7D59: A9 01 00     	lda	#$1
 16094                        L649:
 16095 0B:7D5C: A8           	tay
 16096 0B:7D5D: A5 14        	lda	<L642+2
 16097 0B:7D5F: 85 18        	sta	<L642+2+4
 16098 0B:7D61: A5 13        	lda	<L642+1
 16099 0B:7D63: 85 17        	sta	<L642+1+4
 16100 0B:7D65: 2B           	pld
 16101 0B:7D66: 3B           	tsc
 16102 0B:7D67: 18           	clc
 16103 0B:7D68: 69 16 00     	adc	#L642+4
 16104 0B:7D6B: 1B           	tcs
 16105 0B:7D6C: 98           	tya
 16106 0B:7D6D: 6B           	rtl
 16107                        ;				fp->flag &= (BYTE) ~FA_D
                    IRTY;
 16108                        L10335:
 16109                        	.line	4669
 16110 0B:7D6E: 18           	clc
 16111 0B:7D6F: A9 10 00     	lda	#$10
 16112 0B:7D72: 65 16        	adc	<L642+fp_0
 16113 0B:7D74: 85 01        	sta	<R0
 16114 0B:7D76: A9 00 00     	lda	#$0
 16115 0B:7D79: 65 18        	adc	<L642+fp_0+2
 16116 0B:7D7B: 85 03        	sta	<R0+2
 16117 0B:7D7D: E2 20        	sep	#$20
 16118                        	longa	off
 16119 0B:7D7F: A7 01        	lda	[<R0]
 16120 0B:7D81: 29 7F        	and	#<$7f
 16121 0B:7D83: 87 01        	sta	[<R0]
 16122 0B:7D85: C2 20        	rep	#$20
 16123                        	longa	on
 16124                        ;			}
 16125                        	.line	4670
 16126                        ;#endif
 16127                        ;			/* Update the directory entry */
 16128                        ;			tm = GET_FATTIME(); /* Modified 
                    time */
 16129                        L10334:
 16130                        	.line	4673
 16131 0B:7D87: A9 00 00     	lda	#$0
 16132 0B:7D8A: 85 0B        	sta	<L643+tm_1
 16133 0B:7D8C: A9 21 52     	lda	#$5221
 16134 0B:7D8F: 85 0D        	sta	<L643+tm_1+2
 16135                        ;#if FF_FS_EXFAT
 16136                        ;			if (fs->fs_type == FS_EXFAT)
 16137                        ;			{
 16138                        ;				res = fill_first_frag(&f
                    p->obj); /* Fill first fragment on the FAT if needed */
 16139                        ;				if (res == FR_OK)
  Fri Jul 16 2021 14:42                                                Page 312


 16140                        ;				{
 16141                        ;					res = fill_last_
                    frag(&fp->obj, fp->clust, 0xFFFFFFFF); /* Fill last fragment
                     on the FAT if needed */
 16142                        ;				}
 16143                        ;				if (res == FR_OK)
 16144                        ;				{
 16145                        ;					DIR dj;
 16146                        ;					DEF_NAMBUF
 16147                        ;
 16148                        ;					INIT_NAMBUF(fs);
 16149                        ;					res = load_obj_x
                    dir(&dj, &fp->obj); /* Load directory entry block */
 16150                        ;					if (res == FR_OK
                    )
 16151                        ;					{
 16152                        ;						fs->dirb
                    uf[XDIR_Attr] |= AM_ARC; /* Set archive attribute to indicat
                    e that the file has been changed */
 16153                        ;						fs->dirb
                    uf[XDIR_GenFlags] = fp->obj.stat | 1; /* Update file allocat
                    ion information */
 16154                        ;						st_dword
                    (fs->dirbuf + XDIR_FstClus, fp->obj.sclust); /* Update start
                     cluster */
 16155                        ;						st_qword
                    (fs->dirbuf + XDIR_FileSize, fp->obj.objsize); /* Update fil
                    e size */
 16156                        ;						st_qword
                    (fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize); /* (FatF
                    s does not support Valid File Size feature) */
 16157                        ;						st_dword
                    (fs->dirbuf + XDIR_ModTime, tm); /* Update modified time */
 16158                        ;						fs->dirb
                    uf[XDIR_ModTime10] = 0;
 16159                        ;						st_dword
                    (fs->dirbuf + XDIR_AccTime, 0);
 16160                        ;						res = st
                    ore_xdir(&dj); /* Restore it to the directory */
 16161                        ;						if (res 
                    == FR_OK)
 16162                        ;						{
 16163                        ;							
                    res = sync_fs(fs);
 16164                        ;							
                    fp->flag &= (BYTE)~FA_MODIFIED;
 16165                        ;						}
 16166                        ;					}
 16167                        ;					FREE_NAMBUF();
 16168                        ;				}
 16169                        ;			}
 16170                        ;			else
 16171                        ;#endif
 16172                        ;			{
 16173                        	.line	4711
 16174                        ;				res = move_window(fs, fp
                    ->dir_sect);
 16175                        	.line	4712
  Fri Jul 16 2021 14:42                                                Page 313


 16176 0B:7D91: A0 20 00     	ldy	#$20
 16177 0B:7D94: B7 16        	lda	[<L642+fp_0],Y
 16178 0B:7D96: 48           	pha
 16179 0B:7D97: A0 1E 00     	ldy	#$1e
 16180 0B:7D9A: B7 16        	lda	[<L642+fp_0],Y
 16181 0B:7D9C: 48           	pha
 16182 0B:7D9D: D4 09        	pei	<L643+fs_1+2
 16183 0B:7D9F: D4 07        	pei	<L643+fs_1
 16184 0B:7DA1: 22 7A 43 0B  	jsl	~~move_window
 16185 0B:7DA5: 85 05        	sta	<L643+res_1
 16186                        ;				if (res == FR_OK)
 16187                        	.line	4713
 16188                        ;				{
 16189 0B:7DA7: A5 05        	lda	<L643+res_1
 16190 0B:7DA9: F0 03        	beq	L650
 16191 0B:7DAB: 82 CA 00     	brl	L10336
 16192                        L650:
 16193                        	.line	4714
 16194                        ;					dir = fp->dir_pt
                    r;
 16195                        	.line	4715
 16196 0B:7DAE: A0 22 00     	ldy	#$22
 16197 0B:7DB1: B7 16        	lda	[<L642+fp_0],Y
 16198 0B:7DB3: 85 0F        	sta	<L643+dir_1
 16199 0B:7DB5: A0 24 00     	ldy	#$24
 16200 0B:7DB8: B7 16        	lda	[<L642+fp_0],Y
 16201 0B:7DBA: 85 11        	sta	<L643+dir_1+2
 16202                        ;					dir[DIR_Attr] |=
                     AM_ARC; /* Set archive attribute to indicate that the file 
                    has been changed */
 16203                        	.line	4716
 16204 0B:7DBC: 18           	clc
 16205 0B:7DBD: A9 0B 00     	lda	#$b
 16206 0B:7DC0: 65 0F        	adc	<L643+dir_1
 16207 0B:7DC2: 85 01        	sta	<R0
 16208 0B:7DC4: A9 00 00     	lda	#$0
 16209 0B:7DC7: 65 11        	adc	<L643+dir_1+2
 16210 0B:7DC9: 85 03        	sta	<R0+2
 16211 0B:7DCB: E2 20        	sep	#$20
 16212                        	longa	off
 16213 0B:7DCD: A7 01        	lda	[<R0]
 16214 0B:7DCF: 09 20        	ora	#<$20
 16215 0B:7DD1: 87 01        	sta	[<R0]
 16216 0B:7DD3: C2 20        	rep	#$20
 16217                        	longa	on
 16218                        ;					st_clust(fp->obj
                    .fs, dir, fp->obj.sclust); /* Update file allocation informa
                    tion  */
 16219                        	.line	4717
 16220 0B:7DD5: A0 0A 00     	ldy	#$a
 16221 0B:7DD8: B7 16        	lda	[<L642+fp_0],Y
 16222 0B:7DDA: 48           	pha
 16223 0B:7DDB: A0 08 00     	ldy	#$8
 16224 0B:7DDE: B7 16        	lda	[<L642+fp_0],Y
 16225 0B:7DE0: 48           	pha
 16226 0B:7DE1: D4 11        	pei	<L643+dir_1+2
 16227 0B:7DE3: D4 0F        	pei	<L643+dir_1
 16228 0B:7DE5: A0 02 00     	ldy	#$2
  Fri Jul 16 2021 14:42                                                Page 314


 16229 0B:7DE8: B7 16        	lda	[<L642+fp_0],Y
 16230 0B:7DEA: 48           	pha
 16231 0B:7DEB: A7 16        	lda	[<L642+fp_0]
 16232 0B:7DED: 48           	pha
 16233 0B:7DEE: 22 83 57 0B  	jsl	~~st_clust
 16234                        ;					st_dword(dir + D
                    IR_FileSize, (DWORD) fp->obj.objsize); /* Update file size *
                    /
 16235                        	.line	4718
 16236 0B:7DF2: A0 0E 00     	ldy	#$e
 16237 0B:7DF5: B7 16        	lda	[<L642+fp_0],Y
 16238 0B:7DF7: 48           	pha
 16239 0B:7DF8: A0 0C 00     	ldy	#$c
 16240 0B:7DFB: B7 16        	lda	[<L642+fp_0],Y
 16241 0B:7DFD: 48           	pha
 16242 0B:7DFE: 18           	clc
 16243 0B:7DFF: A9 1C 00     	lda	#$1c
 16244 0B:7E02: 65 0F        	adc	<L643+dir_1
 16245 0B:7E04: 85 01        	sta	<R0
 16246 0B:7E06: A9 00 00     	lda	#$0
 16247 0B:7E09: 65 11        	adc	<L643+dir_1+2
 16248 0B:7E0B: 85 03        	sta	<R0+2
 16249 0B:7E0D: D4 03        	pei	<R0+2
 16250 0B:7E0F: D4 01        	pei	<R0
 16251 0B:7E11: 22 96 40 0B  	jsl	~~st_dword
 16252                        ;					st_dword(dir + D
                    IR_ModTime, tm); /* Update modified time */
 16253                        	.line	4719
 16254 0B:7E15: D4 0D        	pei	<L643+tm_1+2
 16255 0B:7E17: D4 0B        	pei	<L643+tm_1
 16256 0B:7E19: 18           	clc
 16257 0B:7E1A: A9 16 00     	lda	#$16
 16258 0B:7E1D: 65 0F        	adc	<L643+dir_1
 16259 0B:7E1F: 85 01        	sta	<R0
 16260 0B:7E21: A9 00 00     	lda	#$0
 16261 0B:7E24: 65 11        	adc	<L643+dir_1+2
 16262 0B:7E26: 85 03        	sta	<R0+2
 16263 0B:7E28: D4 03        	pei	<R0+2
 16264 0B:7E2A: D4 01        	pei	<R0
 16265 0B:7E2C: 22 96 40 0B  	jsl	~~st_dword
 16266                        ;					st_word(dir + DI
                    R_LstAccDate, 0);
 16267                        	.line	4720
 16268 0B:7E30: F4 00 00     	pea	#<$0
 16269 0B:7E33: 18           	clc
 16270 0B:7E34: A9 12 00     	lda	#$12
 16271 0B:7E37: 65 0F        	adc	<L643+dir_1
 16272 0B:7E39: 85 01        	sta	<R0
 16273 0B:7E3B: A9 00 00     	lda	#$0
 16274 0B:7E3E: 65 11        	adc	<L643+dir_1+2
 16275 0B:7E40: 85 03        	sta	<R0+2
 16276 0B:7E42: D4 03        	pei	<R0+2
 16277 0B:7E44: D4 01        	pei	<R0
 16278 0B:7E46: 22 57 40 0B  	jsl	~~st_word
 16279                        ;					fs->wflag = 1;
 16280                        	.line	4721
 16281 0B:7E4A: E2 20        	sep	#$20
 16282                        	longa	off
  Fri Jul 16 2021 14:42                                                Page 315


 16283 0B:7E4C: A9 01        	lda	#$1
 16284 0B:7E4E: A0 03 00     	ldy	#$3
 16285 0B:7E51: 97 07        	sta	[<L643+fs_1],Y
 16286 0B:7E53: C2 20        	rep	#$20
 16287                        	longa	on
 16288                        ;					res = sync_fs(fs
                    ); /* Restore it to the directory */
 16289                        	.line	4722
 16290 0B:7E55: D4 09        	pei	<L643+fs_1+2
 16291 0B:7E57: D4 07        	pei	<L643+fs_1
 16292 0B:7E59: 22 05 44 0B  	jsl	~~sync_fs
 16293 0B:7E5D: 85 05        	sta	<L643+res_1
 16294                        ;					fp->flag &= (BYT
                    E) ~FA_MODIFIED;
 16295                        	.line	4723
 16296 0B:7E5F: 18           	clc
 16297 0B:7E60: A9 10 00     	lda	#$10
 16298 0B:7E63: 65 16        	adc	<L642+fp_0
 16299 0B:7E65: 85 01        	sta	<R0
 16300 0B:7E67: A9 00 00     	lda	#$0
 16301 0B:7E6A: 65 18        	adc	<L642+fp_0+2
 16302 0B:7E6C: 85 03        	sta	<R0+2
 16303 0B:7E6E: E2 20        	sep	#$20
 16304                        	longa	off
 16305 0B:7E70: A7 01        	lda	[<R0]
 16306 0B:7E72: 29 BF        	and	#<$bf
 16307 0B:7E74: 87 01        	sta	[<R0]
 16308 0B:7E76: C2 20        	rep	#$20
 16309                        	longa	on
 16310                        ;				}
 16311                        	.line	4724
 16312                        ;			}
 16313                        L10336:
 16314                        	.line	4725
 16315                        ;		}
 16316                        	.line	4726
 16317                        ;	}
 16318                        L10333:
 16319                        	.line	4727
 16320                        ;
 16321                        ;	LEAVE_FF(fs, res);
 16322                        L10332:
 16323                        	.line	4729
 16324 0B:7E78: A5 05        	lda	<L643+res_1
 16325 0B:7E7A: 82 DF FE     	brl	L649
 16326                        ;}
 16327                        	.line	4730
 16328                        	.endblock	4730
 16329             00000012   L642	equ	18
 16330             00000005   L643	equ	5
 16331 0B:7E7D:              	ends
 16332                        	efunc
 16333                        	.endfunc	4730,5,18
 16334                        	.line	4730
 16335                        ;
 16336                        ;#endif /* !FF_FS_READONLY */
 16337                        ;
 16338                        ;/*-----------------------------------------------
  Fri Jul 16 2021 14:42                                                Page 316


                    ------------------------*/
 16339                        ;/* Close File                                    
                                            */
 16340                        ;/*-----------------------------------------------
                    ------------------------*/
 16341                        ;
 16342                        ;FRESULT f_close(FIL* fp /* Pointer to the file ob
                    ject to be closed */
 16343                        ;)
 16344                        ;{
 16345                        	.line	4738
 16346                        	.line	4740
 16347                        	FFDOS
 16348                        	xdef	~~f_close
 16349                        	func
 16350                        	.function	4740
 16351                        ~~f_close:
 16352                        	longa	on
 16353                        	longi	on
 16354 0B:7E7D: 3B           	tsc
 16355 0B:7E7E: 38           	sec
 16356 0B:7E7F: E9 06 00     	sbc	#L651
 16357 0B:7E82: 1B           	tcs
 16358 0B:7E83: 0B           	phd
 16359 0B:7E84: 5B           	tcd
 16360             00000004   fp_0	set	4
 16361                        	.block	4740
 16362                        ;	FRESULT res;
 16363                        ;	FATFS *fs;
 16364                        ;
 16365                        ;#if !FF_FS_READONLY
 16366                        ;	res = f_sync(fp); /* Flush cached data */
 16367             00000000   res_1	set	0
 16368             00000002   fs_1	set	2
 16369                        	.sym	res,0,5,1,16
 16370                        	.sym	fs,2,138,1,32,49
 16371                        	.sym	fp,4,138,6,32,51
 16372                        	.line	4745
 16373 0B:7E85: D4 0C        	pei	<L651+fp_0+2
 16374 0B:7E87: D4 0A        	pei	<L651+fp_0
 16375 0B:7E89: 22 E5 7C 0B  	jsl	~~f_sync
 16376 0B:7E8D: 85 01        	sta	<L652+res_1
 16377                        ;	if (res == FR_OK)
 16378                        	.line	4746
 16379                        ;#endif
 16380                        ;	{
 16381 0B:7E8F: A5 01        	lda	<L652+res_1
 16382 0B:7E91: F0 03        	beq	L654
 16383 0B:7E93: 82 27 00     	brl	L10337
 16384                        L654:
 16385                        	.line	4748
 16386                        ;		res = validate(&fp->obj, &fs); /* Lock v
                    olume */
 16387                        	.line	4749
 16388 0B:7E96: F4 00 00     	pea	#0
 16389 0B:7E99: 18           	clc
 16390 0B:7E9A: 7B           	tdc
 16391 0B:7E9B: 69 03 00     	adc	#<L652+fs_1
  Fri Jul 16 2021 14:42                                                Page 317


 16392 0B:7E9E: 48           	pha
 16393 0B:7E9F: D4 0C        	pei	<L651+fp_0+2
 16394 0B:7EA1: D4 0A        	pei	<L651+fp_0
 16395 0B:7EA3: 22 C9 6D 0B  	jsl	~~validate
 16396 0B:7EA7: 85 01        	sta	<L652+res_1
 16397                        ;		if (res == FR_OK)
 16398                        	.line	4750
 16399                        ;		{
 16400 0B:7EA9: A5 01        	lda	<L652+res_1
 16401 0B:7EAB: F0 03        	beq	L655
 16402 0B:7EAD: 82 0D 00     	brl	L10338
 16403                        L655:
 16404                        	.line	4751
 16405                        ;#if FF_FS_LOCK != 0
 16406                        ;			res = dec_lock(fp->obj.lockid); 
                    /* Decrement file open counter */
 16407                        ;			if (res == FR_OK) fp->obj.fs = 0
                    ; /* Invalidate file object */
 16408                        ;#else
 16409                        ;			fp->obj.fs = 0; /* Invalidate fi
                    le object */
 16410                        	.line	4756
 16411 0B:7EB0: A9 00 00     	lda	#$0
 16412 0B:7EB3: 87 0A        	sta	[<L651+fp_0]
 16413 0B:7EB5: A9 00 00     	lda	#$0
 16414 0B:7EB8: A0 02 00     	ldy	#$2
 16415 0B:7EBB: 97 0A        	sta	[<L651+fp_0],Y
 16416                        ;#endif
 16417                        ;#if FF_FS_REENTRANT
 16418                        ;			unlock_fs(fs, FR_OK); /* Unlock 
                    volume */
 16419                        ;#endif
 16420                        ;		}
 16421                        	.line	4761
 16422                        ;	}
 16423                        L10338:
 16424                        	.line	4762
 16425                        ;	return res;
 16426                        L10337:
 16427                        	.line	4763
 16428 0B:7EBD: A5 01        	lda	<L652+res_1
 16429                        L656:
 16430 0B:7EBF: A8           	tay
 16431 0B:7EC0: A5 08        	lda	<L651+2
 16432 0B:7EC2: 85 0C        	sta	<L651+2+4
 16433 0B:7EC4: A5 07        	lda	<L651+1
 16434 0B:7EC6: 85 0B        	sta	<L651+1+4
 16435 0B:7EC8: 2B           	pld
 16436 0B:7EC9: 3B           	tsc
 16437 0B:7ECA: 18           	clc
 16438 0B:7ECB: 69 0A 00     	adc	#L651+4
 16439 0B:7ECE: 1B           	tcs
 16440 0B:7ECF: 98           	tya
 16441 0B:7ED0: 6B           	rtl
 16442                        ;}
 16443                        	.line	4764
 16444                        	.endblock	4764
 16445             00000006   L651	equ	6
  Fri Jul 16 2021 14:42                                                Page 318


 16446             00000001   L652	equ	1
 16447 0B:7ED1:              	ends
 16448                        	efunc
 16449                        	.endfunc	4764,1,6
 16450                        	.line	4764
 16451                        ;
 16452                        ;#if FF_FS_RPATH >= 1
 16453                        ;/*-----------------------------------------------
                    ------------------------*/
 16454                        ;/* Change Current Directory or Current Drive, Get
                     Current Directory      */
 16455                        ;/*-----------------------------------------------
                    ------------------------*/
 16456                        ;
 16457                        ;FRESULT f_chdrive (
 16458                        ;		const TCHAR* path /* Drive number to set
                     */
 16459                        ;)
 16460                        ;{
 16461                        ;	int vol;
 16462                        ;
 16463                        ;	/* Get logical drive number */
 16464                        ;	vol = get_ldnumber(&path);
 16465                        ;	if (vol < 0) return FR_INVALID_DRIVE;
 16466                        ;	CurrVol = (BYTE)vol; /* Set it as current volume
                     */
 16467                        ;
 16468                        ;	return FR_OK;
 16469                        ;}
 16470                        ;
 16471                        ;FRESULT f_chdir (
 16472                        ;		const TCHAR* path /* Pointer to the dire
                    ctory path */
 16473                        ;)
 16474                        ;{
 16475                        ;#if FF_STR_VOLUME_ID == 2
 16476                        ;	UINT i;
 16477                        ;#endif
 16478                        ;	FRESULT res;
 16479                        ;	DIR dj;
 16480                        ;	FATFS *fs;
 16481                        ;	DEF_NAMBUF
 16482                        ;
 16483                        ;	//////k_debug_string( "f_chdir...\r\n");
 16484                        ;
 16485                        ;	/* Get logical drive */
 16486                        ;	res = mount_volume(&path, &fs, 0);
 16487                        ;	if (res == FR_OK)
 16488                        ;	{
 16489                        ;		dj.obj.fs = fs;
 16490                        ;		INIT_NAMBUF(fs);
 16491                        ;		res = follow_path(&dj, path); /* Follow 
                    the path */
 16492                        ;		if (res == FR_OK)
 16493                        ;		{ /* Follow completed */
 16494                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 16495                        ;			{ /* Is it the start directory i
                    tself? */
  Fri Jul 16 2021 14:42                                                Page 319


 16496                        ;				fs->cdir = dj.obj.sclust
                    ;
 16497                        ;#if FF_FS_EXFAT
 16498                        ;				if (fs->fs_type == FS_EX
                    FAT)
 16499                        ;				{
 16500                        ;					fs->cdc_scl = dj
                    .obj.c_scl;
 16501                        ;					fs->cdc_size = d
                    j.obj.c_size;
 16502                        ;					fs->cdc_ofs = dj
                    .obj.c_ofs;
 16503                        ;				}
 16504                        ;#endif
 16505                        ;			}
 16506                        ;			else
 16507                        ;			{
 16508                        ;				if (dj.obj.attr & AM_DIR
                    )
 16509                        ;				{ /* It is a sub-directo
                    ry */
 16510                        ;#if FF_FS_EXFAT
 16511                        ;					if (fs->fs_type 
                    == FS_EXFAT)
 16512                        ;					{
 16513                        ;						fs->cdir
                     = ld_dword(fs->dirbuf + XDIR_FstClus); /* Sub-directory clu
                    ster */
 16514                        ;						fs->cdc_
                    scl = dj.obj.sclust; /* Save containing directory informatio
                    n */
 16515                        ;						fs->cdc_
                    size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 16516                        ;						fs->cdc_
                    ofs = dj.blk_ofs;
 16517                        ;					}
 16518                        ;					else
 16519                        ;#endif
 16520                        ;					{
 16521                        ;						fs->cdir
                     = ld_clust(fs, dj.dir); /* Sub-directory cluster */
 16522                        ;					}
 16523                        ;				}
 16524                        ;				else
 16525                        ;				{
 16526                        ;					res = FR_NO_PATH
                    ; /* Reached but a file */
 16527                        ;				}
 16528                        ;			}
 16529                        ;		}
 16530                        ;		FREE_NAMBUF();
 16531                        ;		if (res == FR_NO_FILE) res = FR_NO_PATH;
 16532                        ;#if FF_STR_VOLUME_ID == 2	/* Also current 
                    drive is changed at Unix style volume ID */
 16533                        ;		if (res == FR_OK)
 16534                        ;		{
 16535                        ;			for (i = FF_VOLUMES - 1; i && fs
                     != FatFs[i]; i--); /* Set current drive */
  Fri Jul 16 2021 14:42                                                Page 320


 16536                        ;			CurrVol = (BYTE)i;
 16537                        ;		}
 16538                        ;#endif
 16539                        ;	}
 16540                        ;
 16541                        ;	LEAVE_FF(fs, res);
 16542                        ;}
 16543                        ;
 16544                        ;#if FF_FS_RPATH >= 2
 16545                        ;FRESULT f_getcwd (
 16546                        ;		TCHAR* buff, /* Pointer to the directory
                     path */
 16547                        ;		UINT len /* Size of buff in unit of TCHA
                    R */
 16548                        ;)
 16549                        ;{
 16550                        ;	FRESULT res;
 16551                        ;	DIR dj;
 16552                        ;	FATFS *fs;
 16553                        ;	UINT i, n;
 16554                        ;	DWORD ccl;
 16555                        ;	TCHAR *tp = buff;
 16556                        ;#if FF_VOLUMES >= 2
 16557                        ;	UINT vl;
 16558                        ;#if FF_STR_VOLUME_ID
 16559                        ;	const char *vp;
 16560                        ;#endif
 16561                        ;#endif
 16562                        ;	FILINFO fno;
 16563                        ;	DEF_NAMBUF
 16564                        ;
 16565                        ;	/* Get logical drive */
 16566                        ;	buff[0] = 0; /* Set null string to get current v
                    olume */
 16567                        ;	res = mount_volume((const TCHAR**)&buff, &fs, 0)
                    ; /* Get current volume */
 16568                        ;	if (res == FR_OK)
 16569                        ;	{
 16570                        ;		dj.obj.fs = fs;
 16571                        ;		INIT_NAMBUF(fs);
 16572                        ;
 16573                        ;		/* Follow parent directories and create 
                    the path */
 16574                        ;		i = len; /* Bottom of buffer (directory 
                    stack base) */
 16575                        ;		if (!FF_FS_EXFAT || fs->fs_type != FS_EX
                    FAT)
 16576                        ;		{ /* (Cannot do getcwd on exFAT and retu
                    rns root path) */
 16577                        ;			dj.obj.sclust = fs->cdir; /* Sta
                    rt to follow upper directory from current directory */
 16578                        ;			while ((ccl = dj.obj.sclust) != 
                    0)
 16579                        ;			{ /* Repeat while current direct
                    ory is a sub-directory */
 16580                        ;				res = dir_sdi(&dj, 1 * S
                    ZDIRE); /* Get parent directory */
 16581                        ;				if (res != FR_OK) break;
  Fri Jul 16 2021 14:42                                                Page 321


 16582                        ;				res = move_window(fs, dj
                    .sect);
 16583                        ;				if (res != FR_OK) break;
 16584                        ;				dj.obj.sclust = ld_clust
                    (fs, dj.dir); /* Goto parent directory */
 16585                        ;				res = dir_sdi(&dj, 0);
 16586                        ;				if (res != FR_OK) break;
 16587                        ;				do
 16588                        ;				{ /* Find the entry link
                    s to the child directory */
 16589                        ;					res = DIR_READ_F
                    ILE(&dj);
 16590                        ;					if (res != FR_OK
                    ) break;
 16591                        ;					if (ccl == ld_cl
                    ust(fs, dj.dir)) break; /* Found the entry */
 16592                        ;					res = dir_next(&
                    dj, 0);
 16593                        ;				}while (res == FR_OK);
 16594                        ;				if (res == FR_NO_FILE) r
                    es = FR_INT_ERR;/* It cannot be 'not found'. */
 16595                        ;				if (res != FR_OK) break;
 16596                        ;				get_fileinfo(&dj, &fno);
                     /* Get the directory name and push it to the buffer */
 16597                        ;				for (n = 0; fno.fname[n]
                    ; n++); /* Name length */
 16598                        ;				if (i < n + 1)
 16599                        ;				{ /* Insufficient space 
                    to store the path name? */
 16600                        ;					res = FR_NOT_ENO
                    UGH_CORE; break;
 16601                        ;				}
 16602                        ;				while (n) buff[--i] = fn
                    o.fname[--n]; /* Stack the name */
 16603                        ;				buff[--i] = '/';
 16604                        ;			}
 16605                        ;		}
 16606                        ;		if (res == FR_OK)
 16607                        ;		{
 16608                        ;			if (i == len) buff[--i] = '/'; /
                    * Is it the root-directory? */
 16609                        ;#if FF_VOLUMES >= 2			/* Put d
                    rive prefix */
 16610                        ;			vl = 0;
 16611                        ;#if FF_STR_VOLUME_ID >= 1	/* String volume
                     ID */
 16612                        ;			for (n = 0, vp = (const char*)Vo
                    lumeStr[CurrVol]; vp[n]; n++);
 16613                        ;			if (i >= n + 2)
 16614                        ;			{
 16615                        ;				if (FF_STR_VOLUME_ID == 
                    2) *tp++ = (TCHAR)'/';
 16616                        ;				for (vl = 0; vl < n; *tp
                    ++ = (TCHAR)vp[vl], vl++);
 16617                        ;				if (FF_STR_VOLUME_ID == 
                    1) *tp++ = (TCHAR)':';
 16618                        ;				vl++;
 16619                        ;			}
  Fri Jul 16 2021 14:42                                                Page 322


 16620                        ;#else						
                    /* Numeric volume ID */
 16621                        ;			if (i >= 3)
 16622                        ;			{
 16623                        ;				*tp++ = (TCHAR)'0' + Cur
                    rVol;
 16624                        ;				*tp++ = (TCHAR)':';
 16625                        ;				vl = 2;
 16626                        ;			}
 16627                        ;#endif
 16628                        ;			if (vl == 0) res = FR_NOT_ENOUGH
                    _CORE;
 16629                        ;#endif
 16630                        ;			/* Add current directory path */
 16631                        ;			if (res == FR_OK)
 16632                        ;			{
 16633                        ;				do *tp++ = buff[i++]; wh
                    ile (i < len); /* Copy stacked path string */
 16634                        ;			}
 16635                        ;		}
 16636                        ;		FREE_NAMBUF();
 16637                        ;	}
 16638                        ;
 16639                        ;	*tp = 0;
 16640                        ;	LEAVE_FF(fs, res);
 16641                        ;}
 16642                        ;
 16643                        ;#endif /* FF_FS_RPATH >= 2 */
 16644                        ;#endif /* FF_FS_RPATH >= 1 */
 16645                        ;
 16646                        ;#if FF_FS_MINIMIZE <= 2
 16647                        ;/*-----------------------------------------------
                    ------------------------*/
 16648                        ;/* Seek File Read/Write Pointer                  
                                            */
 16649                        ;/*-----------------------------------------------
                    ------------------------*/
 16650                        ;
 16651                        ;FRESULT f_lseek(FIL* fp, /* Pointer to the file o
                    bject */
 16652                        ;FSIZE_t ofs /* File pointer from top of file */
 16653                        ;)
 16654                        ;{
 16655                        	.line	4965
 16656                        	.line	4968
 16657                        	FFDOS
 16658                        	xdef	~~f_lseek
 16659                        	func
 16660                        	.function	4968
 16661                        ~~f_lseek:
 16662                        	longa	on
 16663                        	longi	on
 16664 0B:7ED1: 3B           	tsc
 16665 0B:7ED2: 38           	sec
 16666 0B:7ED3: E9 22 00     	sbc	#L657
 16667 0B:7ED6: 1B           	tcs
 16668 0B:7ED7: 0B           	phd
 16669 0B:7ED8: 5B           	tcd
  Fri Jul 16 2021 14:42                                                Page 323


 16670             00000004   fp_0	set	4
 16671             00000008   ofs_0	set	8
 16672                        	.block	4968
 16673                        ;	FRESULT res;
 16674                        ;	FATFS *fs;
 16675                        ;	DWORD clst, bcs;
 16676                        ;	LBA_t nsect;
 16677                        ;	FSIZE_t ifptr;
 16678                        ;#if FF_USE_FASTSEEK
 16679                        ;	DWORD cl, pcl, ncl, tcl, tlen, ulen, *tbl;
 16680                        ;	LBA_t dsc;
 16681                        ;#endif
 16682                        ;
 16683                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 16684             00000000   res_1	set	0
 16685             00000002   fs_1	set	2
 16686             00000006   clst_1	set	6
 16687             0000000A   bcs_1	set	10
 16688             0000000E   nsect_1	set	14
 16689             00000012   ifptr_1	set	18
 16690                        	.sym	res,0,5,1,16
 16691                        	.sym	fs,2,138,1,32,49
 16692                        	.sym	clst,6,18,1,32
 16693                        	.sym	bcs,10,18,1,32
 16694                        	.sym	nsect,14,18,1,32
 16695                        	.sym	ifptr,18,18,1,32
 16696                        	.sym	fp,4,138,6,32,51
 16697                        	.sym	ofs,8,18,6,32
 16698                        	.line	4979
 16699 0B:7ED9: F4 00 00     	pea	#0
 16700 0B:7EDC: 18           	clc
 16701 0B:7EDD: 7B           	tdc
 16702 0B:7EDE: 69 0F 00     	adc	#<L658+fs_1
 16703 0B:7EE1: 48           	pha
 16704 0B:7EE2: D4 28        	pei	<L657+fp_0+2
 16705 0B:7EE4: D4 26        	pei	<L657+fp_0
 16706 0B:7EE6: 22 C9 6D 0B  	jsl	~~validate
 16707 0B:7EEA: 85 0D        	sta	<L658+res_1
 16708                        ;	if (res == FR_OK)
 16709                        	.line	4980
 16710                        ;		res = (FRESULT) fp->err;
 16711 0B:7EEC: A5 0D        	lda	<L658+res_1
 16712 0B:7EEE: F0 03        	beq	L660
 16713 0B:7EF0: 82 0A 00     	brl	L10339
 16714                        L660:
 16715                        	.line	4981
 16716 0B:7EF3: A0 11 00     	ldy	#$11
 16717 0B:7EF6: B7 26        	lda	[<L657+fp_0],Y
 16718 0B:7EF8: 29 FF 00     	and	#$ff
 16719 0B:7EFB: 85 0D        	sta	<L658+res_1
 16720                        ;#if FF_FS_EXFAT && !FF_FS_READONLY
 16721                        ;	if (res == FR_OK && fs->fs_type == FS_EXFAT)
 16722                        ;	{
 16723                        ;		res = fill_last_frag(&fp->obj, fp->clust
                    , 0xFFFFFFFF); /* Fill last fragment on the FAT if needed */
 16724                        ;	}
 16725                        ;#endif
  Fri Jul 16 2021 14:42                                                Page 324


 16726                        ;	if (res != FR_OK)
 16727                        L10339:
 16728                        	.line	4988
 16729                        ;		LEAVE_FF(fs, res);
 16730 0B:7EFD: A5 0D        	lda	<L658+res_1
 16731 0B:7EFF: D0 03        	bne	L661
 16732 0B:7F01: 82 14 00     	brl	L10340
 16733                        L661:
 16734                        	.line	4989
 16735 0B:7F04: A5 0D        	lda	<L658+res_1
 16736                        L662:
 16737 0B:7F06: A8           	tay
 16738 0B:7F07: A5 24        	lda	<L657+2
 16739 0B:7F09: 85 2C        	sta	<L657+2+8
 16740 0B:7F0B: A5 23        	lda	<L657+1
 16741 0B:7F0D: 85 2B        	sta	<L657+1+8
 16742 0B:7F0F: 2B           	pld
 16743 0B:7F10: 3B           	tsc
 16744 0B:7F11: 18           	clc
 16745 0B:7F12: 69 2A 00     	adc	#L657+8
 16746 0B:7F15: 1B           	tcs
 16747 0B:7F16: 98           	tya
 16748 0B:7F17: 6B           	rtl
 16749                        ;
 16750                        ;#if FF_USE_FASTSEEK
 16751                        ;	if (fp->cltbl)
 16752                        ;	{ /* Fast seek */
 16753                        ;		if (ofs == CREATE_LINKMAP)
 16754                        ;		{ /* Create CLMT */
 16755                        ;			tbl = fp->cltbl;
 16756                        ;			tlen = *tbl++; ulen = 2; /* Give
                    n table size and required table size */
 16757                        ;			cl = fp->obj.sclust; /* Origin o
                    f the chain */
 16758                        ;			if (cl != 0)
 16759                        ;			{
 16760                        ;				do
 16761                        ;				{
 16762                        ;					/* Get a fragmen
                    t */
 16763                        ;					tcl = cl; ncl = 
                    0; ulen += 2; /* Top, length and used items */
 16764                        ;					do
 16765                        ;					{
 16766                        ;						pcl = cl
                    ; ncl++;
 16767                        ;						cl = get
                    _fat(&fp->obj, cl);
 16768                        ;						if (cl <
                    = 1) ABORT(fs, FR_INT_ERR);
 16769                        ;						if (cl =
                    = 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 16770                        ;					}while (cl == pc
                    l + 1);
 16771                        ;					if (ulen <= tlen
                    )
 16772                        ;					{ /* Store the l
                    ength and top of the fragment */
  Fri Jul 16 2021 14:42                                                Page 325


 16773                        ;						*tbl++ =
                     ncl; *tbl++ = tcl;
 16774                        ;					}
 16775                        ;				}while (cl < fs->n_faten
                    t); /* Repeat until end of chain */
 16776                        ;			}
 16777                        ;			*fp->cltbl = ulen; /* Number of 
                    items used */
 16778                        ;			if (ulen <= tlen)
 16779                        ;			{
 16780                        ;				*tbl = 0; /* Terminate t
                    able */
 16781                        ;			}
 16782                        ;			else
 16783                        ;			{
 16784                        ;				res = FR_NOT_ENOUGH_CORE
                    ; /* Given table size is smaller than required */
 16785                        ;			}
 16786                        ;		}
 16787                        ;		else
 16788                        ;		{ /* Fast seek */
 16789                        ;			if (ofs > fp->obj.objsize) ofs =
                     fp->obj.objsize; /* Clip offset at the file size */
 16790                        ;			fp->fptr = ofs; /* Set file poin
                    ter */
 16791                        ;			if (ofs > 0)
 16792                        ;			{
 16793                        ;				fp->clust = clmt_clust(f
                    p, ofs - 1);
 16794                        ;				dsc = clst2sect(fs, fp->
                    clust);
 16795                        ;				if (dsc == 0) ABORT(fs, 
                    FR_INT_ERR);
 16796                        ;				dsc += (DWORD)((ofs - 1)
                     / SS(fs)) & (fs->csize - 1);
 16797                        ;				if (fp->fptr % SS(fs) &&
                     dsc != fp->sect)
 16798                        ;				{ /* Refill sector cache
                     if needed */
 16799                        ;#if !FF_FS_TINY
 16800                        ;#if !FF_FS_READONLY
 16801                        ;					if (fp->flag & F
                    A_DIRTY)
 16802                        ;					{ /* Write-back 
                    dirty sector cache */
 16803                        ;						if (disk
                    _write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, 
                    FR_DISK_ERR);
 16804                        ;						fp->flag
                     &= (BYTE)~FA_DIRTY;
 16805                        ;					}
 16806                        ;#endif
 16807                        ;					if (disk_read(fs
                    ->pdrv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR); 
                    /* Load current sector */
 16808                        ;#endif
 16809                        ;					fp->sect = dsc;
 16810                        ;				}
  Fri Jul 16 2021 14:42                                                Page 326


 16811                        ;			}
 16812                        ;		}
 16813                        ;	}
 16814                        ;	else
 16815                        ;#endif
 16816                        ;
 16817                        ;	/* Normal Seek */
 16818                        ;	{
 16819                        L10340:
 16820                        	.line	5059
 16821                        ;#if FF_FS_EXFAT
 16822                        ;		if (fs->fs_type != FS_EXFAT && ofs >= 0x
                    100000000) ofs = 0xFFFFFFFF; /* Clip at 4 GiB - 1 if at FATx
                    x */
 16823                        ;#endif
 16824                        ;		if (ofs > fp->obj.objsize && (FF_FS_READ
                    ONLY || !(fp->flag & FA_WRITE)))
 16825                        	.line	5063
 16826                        ;		{ /* In read-only mode, clip offset with
                     the file size */
 16827 0B:7F18: A0 0C 00     	ldy	#$c
 16828 0B:7F1B: B7 26        	lda	[<L657+fp_0],Y
 16829 0B:7F1D: C5 2A        	cmp	<L657+ofs_0
 16830 0B:7F1F: A0 0E 00     	ldy	#$e
 16831 0B:7F22: B7 26        	lda	[<L657+fp_0],Y
 16832 0B:7F24: E5 2C        	sbc	<L657+ofs_0+2
 16833 0B:7F26: 90 03        	bcc	L663
 16834 0B:7F28: 82 1E 00     	brl	L10341
 16835                        L663:
 16836 0B:7F2B: E2 20        	sep	#$20
 16837                        	longa	off
 16838 0B:7F2D: A0 10 00     	ldy	#$10
 16839 0B:7F30: B7 26        	lda	[<L657+fp_0],Y
 16840 0B:7F32: 29 02        	and	#<$2
 16841 0B:7F34: C2 20        	rep	#$20
 16842                        	longa	on
 16843 0B:7F36: F0 03        	beq	L665
 16844 0B:7F38: 82 0E 00     	brl	L10341
 16845                        L665:
 16846                        L664:
 16847                        	.line	5064
 16848                        ;			ofs = fp->obj.objsize;
 16849                        	.line	5065
 16850 0B:7F3B: A0 0C 00     	ldy	#$c
 16851 0B:7F3E: B7 26        	lda	[<L657+fp_0],Y
 16852 0B:7F40: 85 2A        	sta	<L657+ofs_0
 16853 0B:7F42: A0 0E 00     	ldy	#$e
 16854 0B:7F45: B7 26        	lda	[<L657+fp_0],Y
 16855 0B:7F47: 85 2C        	sta	<L657+ofs_0+2
 16856                        ;		}
 16857                        	.line	5066
 16858                        ;		ifptr = fp->fptr;
 16859                        L10341:
 16860                        	.line	5067
 16861 0B:7F49: A0 12 00     	ldy	#$12
 16862 0B:7F4C: B7 26        	lda	[<L657+fp_0],Y
 16863 0B:7F4E: 85 1F        	sta	<L658+ifptr_1
 16864 0B:7F50: A0 14 00     	ldy	#$14
  Fri Jul 16 2021 14:42                                                Page 327


 16865 0B:7F53: B7 26        	lda	[<L657+fp_0],Y
 16866 0B:7F55: 85 21        	sta	<L658+ifptr_1+2
 16867                        ;		fp->fptr = nsect = 0;
 16868                        	.line	5068
 16869 0B:7F57: 64 1B        	stz	<L658+nsect_1
 16870 0B:7F59: 64 1D        	stz	<L658+nsect_1+2
 16871 0B:7F5B: A9 00 00     	lda	#$0
 16872 0B:7F5E: A0 12 00     	ldy	#$12
 16873 0B:7F61: 97 26        	sta	[<L657+fp_0],Y
 16874 0B:7F63: A9 00 00     	lda	#$0
 16875 0B:7F66: A0 14 00     	ldy	#$14
 16876 0B:7F69: 97 26        	sta	[<L657+fp_0],Y
 16877                        ;		if (ofs > 0)
 16878                        	.line	5069
 16879                        ;		{
 16880 0B:7F6B: A9 00 00     	lda	#$0
 16881 0B:7F6E: C5 2A        	cmp	<L657+ofs_0
 16882 0B:7F70: A9 00 00     	lda	#$0
 16883 0B:7F73: E5 2C        	sbc	<L657+ofs_0+2
 16884 0B:7F75: 90 03        	bcc	L666
 16885 0B:7F77: 82 18 03     	brl	L10342
 16886                        L666:
 16887                        	.line	5070
 16888                        ;			bcs = (DWORD) fs->csize * SS(fs)
                    ; /* Cluster size (byte) */
 16889                        	.line	5071
 16890 0B:7F7A: A0 00 00     	ldy	#$0
 16891 0B:7F7D: 5A           	phy
 16892 0B:7F7E: A0 09 00     	ldy	#$9
 16893 0B:7F81: B7 0F        	lda	[<L658+fs_1],Y
 16894 0B:7F83: 7A           	ply
 16895 0B:7F84: 2A           	rol	A
 16896 0B:7F85: 6A           	ror	A
 16897 0B:7F86: 10 01        	bpl	L667
 16898 0B:7F88: 88           	dey
 16899                        L667:
 16900 0B:7F89: 85 01        	sta	<R0
 16901 0B:7F8B: 84 03        	sty	<R0+2
 16902 0B:7F8D: D4 03        	pei	<R0+2
 16903 0B:7F8F: D4 01        	pei	<R0
 16904 0B:7F91: A9 09 00     	lda	#$9
 16905                        	xref	~~~lasl
 16906 0B:7F94: 22 xx xx xx  	jsl	~~~lasl
 16907 0B:7F98: 85 17        	sta	<L658+bcs_1
 16908 0B:7F9A: 86 19        	stx	<L658+bcs_1+2
 16909                        ;			if (ifptr > 0 && (ofs - 1) / bcs
                     >= (ifptr - 1) / bcs)
 16910                        	.line	5072
 16911                        ;			{ /* When seek to same or follow
                    ing cluster, */
 16912 0B:7F9C: A9 00 00     	lda	#$0
 16913 0B:7F9F: C5 1F        	cmp	<L658+ifptr_1
 16914 0B:7FA1: A9 00 00     	lda	#$0
 16915 0B:7FA4: E5 21        	sbc	<L658+ifptr_1+2
 16916 0B:7FA6: 90 03        	bcc	L668
 16917 0B:7FA8: 82 B5 00     	brl	L10343
 16918                        L668:
 16919 0B:7FAB: 18           	clc
  Fri Jul 16 2021 14:42                                                Page 328


 16920 0B:7FAC: A9 FF FF     	lda	#$ffff
 16921 0B:7FAF: 65 1F        	adc	<L658+ifptr_1
 16922 0B:7FB1: 85 01        	sta	<R0
 16923 0B:7FB3: A9 FF FF     	lda	#$ffff
 16924 0B:7FB6: 65 21        	adc	<L658+ifptr_1+2
 16925 0B:7FB8: 85 03        	sta	<R0+2
 16926 0B:7FBA: D4 19        	pei	<L658+bcs_1+2
 16927 0B:7FBC: D4 17        	pei	<L658+bcs_1
 16928 0B:7FBE: D4 03        	pei	<R0+2
 16929 0B:7FC0: D4 01        	pei	<R0
 16930                        	xref	~~~ludv
 16931 0B:7FC2: 22 xx xx xx  	jsl	~~~ludv
 16932 0B:7FC6: 85 01        	sta	<R0
 16933 0B:7FC8: 86 03        	stx	<R0+2
 16934 0B:7FCA: 18           	clc
 16935 0B:7FCB: A9 FF FF     	lda	#$ffff
 16936 0B:7FCE: 65 2A        	adc	<L657+ofs_0
 16937 0B:7FD0: 85 05        	sta	<R1
 16938 0B:7FD2: A9 FF FF     	lda	#$ffff
 16939 0B:7FD5: 65 2C        	adc	<L657+ofs_0+2
 16940 0B:7FD7: 85 07        	sta	<R1+2
 16941 0B:7FD9: D4 19        	pei	<L658+bcs_1+2
 16942 0B:7FDB: D4 17        	pei	<L658+bcs_1
 16943 0B:7FDD: D4 07        	pei	<R1+2
 16944 0B:7FDF: D4 05        	pei	<R1
 16945                        	xref	~~~ludv
 16946 0B:7FE1: 22 xx xx xx  	jsl	~~~ludv
 16947 0B:7FE5: 85 05        	sta	<R1
 16948 0B:7FE7: 86 07        	stx	<R1+2
 16949 0B:7FE9: A5 05        	lda	<R1
 16950 0B:7FEB: C5 01        	cmp	<R0
 16951 0B:7FED: A5 07        	lda	<R1+2
 16952 0B:7FEF: E5 03        	sbc	<R0+2
 16953 0B:7FF1: B0 03        	bcs	L669
 16954 0B:7FF3: 82 6A 00     	brl	L10343
 16955                        L669:
 16956                        	.line	5073
 16957                        ;				fp->fptr = (ifptr - 1) &
                     ~(FSIZE_t) (bcs - 1); /* start from the current cluster */
 16958                        	.line	5074
 16959 0B:7FF6: 18           	clc
 16960 0B:7FF7: A9 FF FF     	lda	#$ffff
 16961 0B:7FFA: 65 1F        	adc	<L658+ifptr_1
 16962 0B:7FFC: 85 01        	sta	<R0
 16963 0B:7FFE: A9 FF FF     	lda	#$ffff
 16964 0B:8001: 65 21        	adc	<L658+ifptr_1+2
 16965 0B:8003: 85 03        	sta	<R0+2
 16966 0B:8005: 18           	clc
 16967 0B:8006: A9 FF FF     	lda	#$ffff
 16968 0B:8009: 65 17        	adc	<L658+bcs_1
 16969 0B:800B: 85 05        	sta	<R1
 16970 0B:800D: A9 FF FF     	lda	#$ffff
 16971 0B:8010: 65 19        	adc	<L658+bcs_1+2
 16972 0B:8012: 85 07        	sta	<R1+2
 16973 0B:8014: A5 05        	lda	<R1
 16974 0B:8016: 49 FF FF     	eor	#<$ffffffff
 16975 0B:8019: 85 09        	sta	<R2
 16976 0B:801B: A5 07        	lda	<R1+2
  Fri Jul 16 2021 14:42                                                Page 329


 16977 0B:801D: 49 FF FF     	eor	#^$ffffffff
 16978 0B:8020: 85 0B        	sta	<R2+2
 16979 0B:8022: A5 09        	lda	<R2
 16980 0B:8024: 25 01        	and	<R0
 16981 0B:8026: 85 05        	sta	<R1
 16982 0B:8028: A5 0B        	lda	<R2+2
 16983 0B:802A: 25 03        	and	<R0+2
 16984 0B:802C: 85 07        	sta	<R1+2
 16985 0B:802E: A5 05        	lda	<R1
 16986 0B:8030: A0 12 00     	ldy	#$12
 16987 0B:8033: 97 26        	sta	[<L657+fp_0],Y
 16988 0B:8035: A5 07        	lda	<R1+2
 16989 0B:8037: A0 14 00     	ldy	#$14
 16990 0B:803A: 97 26        	sta	[<L657+fp_0],Y
 16991                        ;				ofs -= fp->fptr;
 16992                        	.line	5075
 16993 0B:803C: 38           	sec
 16994 0B:803D: A5 2A        	lda	<L657+ofs_0
 16995 0B:803F: A0 12 00     	ldy	#$12
 16996 0B:8042: F7 26        	sbc	[<L657+fp_0],Y
 16997 0B:8044: 85 2A        	sta	<L657+ofs_0
 16998 0B:8046: A5 2C        	lda	<L657+ofs_0+2
 16999 0B:8048: A0 14 00     	ldy	#$14
 17000 0B:804B: F7 26        	sbc	[<L657+fp_0],Y
 17001 0B:804D: 85 2C        	sta	<L657+ofs_0+2
 17002                        ;				clst = fp->clust;
 17003                        	.line	5076
 17004 0B:804F: A0 16 00     	ldy	#$16
 17005 0B:8052: B7 26        	lda	[<L657+fp_0],Y
 17006 0B:8054: 85 13        	sta	<L658+clst_1
 17007 0B:8056: A0 18 00     	ldy	#$18
 17008 0B:8059: B7 26        	lda	[<L657+fp_0],Y
 17009 0B:805B: 85 15        	sta	<L658+clst_1+2
 17010                        ;			}
 17011                        	.line	5077
 17012                        ;			else
 17013 0B:805D: 82 89 00     	brl	L10344
 17014                        L10343:
 17015                        ;			{ /* When seek to back cluster, 
                    */
 17016                        	.line	5079
 17017                        ;				clst = fp->obj.sclust; /
                    * start from the first cluster */
 17018                        	.line	5080
 17019 0B:8060: A0 08 00     	ldy	#$8
 17020 0B:8063: B7 26        	lda	[<L657+fp_0],Y
 17021 0B:8065: 85 13        	sta	<L658+clst_1
 17022 0B:8067: A0 0A 00     	ldy	#$a
 17023 0B:806A: B7 26        	lda	[<L657+fp_0],Y
 17024 0B:806C: 85 15        	sta	<L658+clst_1+2
 17025                        ;#if !FF_FS_READONLY
 17026                        ;				if (clst == 0)
 17027                        	.line	5082
 17028                        ;				{ /* If no cluster chain
                    , create a new chain */
 17029 0B:806E: A5 13        	lda	<L658+clst_1
 17030 0B:8070: 05 15        	ora	<L658+clst_1+2
 17031 0B:8072: F0 03        	beq	L670
  Fri Jul 16 2021 14:42                                                Page 330


 17032 0B:8074: 82 64 00     	brl	L10345
 17033                        L670:
 17034                        	.line	5083
 17035                        ;					clst = create_ch
                    ain(&fp->obj, 0);
 17036                        	.line	5084
 17037 0B:8077: F4 00 00     	pea	#^$0
 17038 0B:807A: F4 00 00     	pea	#<$0
 17039 0B:807D: D4 28        	pei	<L657+fp_0+2
 17040 0B:807F: D4 26        	pei	<L657+fp_0
 17041 0B:8081: 22 4C 4D 0B  	jsl	~~create_chain
 17042 0B:8085: 85 13        	sta	<L658+clst_1
 17043 0B:8087: 86 15        	stx	<L658+clst_1+2
 17044                        ;					if (clst == 1)
 17045                        	.line	5085
 17046                        ;						ABORT(fs
                    , FR_INT_ERR);
 17047 0B:8089: A5 13        	lda	<L658+clst_1
 17048 0B:808B: C9 01 00     	cmp	#<$1
 17049 0B:808E: D0 05        	bne	L671
 17050 0B:8090: A5 15        	lda	<L658+clst_1+2
 17051 0B:8092: C9 00 00     	cmp	#^$1
 17052                        L671:
 17053 0B:8095: F0 03        	beq	L672
 17054 0B:8097: 82 11 00     	brl	L10346
 17055                        L672:
 17056                        	.line	5086
 17057                        	.line	5086
 17058 0B:809A: E2 20        	sep	#$20
 17059                        	longa	off
 17060 0B:809C: A9 02        	lda	#$2
 17061 0B:809E: A0 11 00     	ldy	#$11
 17062 0B:80A1: 97 26        	sta	[<L657+fp_0],Y
 17063 0B:80A3: C2 20        	rep	#$20
 17064                        	longa	on
 17065                        	.line	5086
 17066 0B:80A5: A9 02 00     	lda	#$2
 17067 0B:80A8: 82 5B FE     	brl	L662
 17068                        	.line	5086
 17069                        L10346:
 17070                        	.line	5086
 17071                        ;					if (clst == 0xFF
                    FFFFFF)
 17072                        	.line	5087
 17073                        ;						ABORT(fs
                    , FR_DISK_ERR);
 17074 0B:80AB: A5 13        	lda	<L658+clst_1
 17075 0B:80AD: C9 FF FF     	cmp	#<$ffffffff
 17076 0B:80B0: D0 05        	bne	L673
 17077 0B:80B2: A5 15        	lda	<L658+clst_1+2
 17078 0B:80B4: C9 FF FF     	cmp	#^$ffffffff
 17079                        L673:
 17080 0B:80B7: F0 03        	beq	L674
 17081 0B:80B9: 82 11 00     	brl	L10347
 17082                        L674:
 17083                        	.line	5088
 17084                        	.line	5088
 17085 0B:80BC: E2 20        	sep	#$20
  Fri Jul 16 2021 14:42                                                Page 331


 17086                        	longa	off
 17087 0B:80BE: A9 01        	lda	#$1
 17088 0B:80C0: A0 11 00     	ldy	#$11
 17089 0B:80C3: 97 26        	sta	[<L657+fp_0],Y
 17090 0B:80C5: C2 20        	rep	#$20
 17091                        	longa	on
 17092                        	.line	5088
 17093 0B:80C7: A9 01 00     	lda	#$1
 17094 0B:80CA: 82 39 FE     	brl	L662
 17095                        	.line	5088
 17096                        L10347:
 17097                        	.line	5088
 17098                        ;					fp->obj.sclust =
                     clst;
 17099                        	.line	5089
 17100 0B:80CD: A5 13        	lda	<L658+clst_1
 17101 0B:80CF: A0 08 00     	ldy	#$8
 17102 0B:80D2: 97 26        	sta	[<L657+fp_0],Y
 17103 0B:80D4: A5 15        	lda	<L658+clst_1+2
 17104 0B:80D6: A0 0A 00     	ldy	#$a
 17105 0B:80D9: 97 26        	sta	[<L657+fp_0],Y
 17106                        ;				}
 17107                        	.line	5090
 17108                        ;#endif
 17109                        ;				fp->clust = clst;
 17110                        L10345:
 17111                        	.line	5092
 17112 0B:80DB: A5 13        	lda	<L658+clst_1
 17113 0B:80DD: A0 16 00     	ldy	#$16
 17114 0B:80E0: 97 26        	sta	[<L657+fp_0],Y
 17115 0B:80E2: A5 15        	lda	<L658+clst_1+2
 17116 0B:80E4: A0 18 00     	ldy	#$18
 17117 0B:80E7: 97 26        	sta	[<L657+fp_0],Y
 17118                        ;			}
 17119                        	.line	5093
 17120                        L10344:
 17121                        ;			if (clst != 0)
 17122                        	.line	5094
 17123                        ;			{
 17124 0B:80E9: A5 13        	lda	<L658+clst_1
 17125 0B:80EB: 05 15        	ora	<L658+clst_1+2
 17126 0B:80ED: D0 03        	bne	L675
 17127 0B:80EF: 82 A0 01     	brl	L10348
 17128                        L675:
 17129                        	.line	5095
 17130                        ;				while (ofs > bcs)
 17131                        	.line	5096
 17132                        L10349:
 17133 0B:80F2: A5 17        	lda	<L658+bcs_1
 17134 0B:80F4: C5 2A        	cmp	<L657+ofs_0
 17135 0B:80F6: A5 19        	lda	<L658+bcs_1+2
 17136 0B:80F8: E5 2C        	sbc	<L657+ofs_0+2
 17137 0B:80FA: 90 03        	bcc	L676
 17138 0B:80FC: 82 21 01     	brl	L10350
 17139                        L676:
 17140                        ;				{ /* Cluster following l
                    oop */
 17141                        	.line	5097
  Fri Jul 16 2021 14:42                                                Page 332


 17142                        ;					ofs -= bcs;
 17143                        	.line	5098
 17144 0B:80FF: 38           	sec
 17145 0B:8100: A5 2A        	lda	<L657+ofs_0
 17146 0B:8102: E5 17        	sbc	<L658+bcs_1
 17147 0B:8104: 85 2A        	sta	<L657+ofs_0
 17148 0B:8106: A5 2C        	lda	<L657+ofs_0+2
 17149 0B:8108: E5 19        	sbc	<L658+bcs_1+2
 17150 0B:810A: 85 2C        	sta	<L657+ofs_0+2
 17151                        ;					fp->fptr += bcs;
 17152                        	.line	5099
 17153 0B:810C: 18           	clc
 17154 0B:810D: A9 12 00     	lda	#$12
 17155 0B:8110: 65 26        	adc	<L657+fp_0
 17156 0B:8112: 85 01        	sta	<R0
 17157 0B:8114: A9 00 00     	lda	#$0
 17158 0B:8117: 65 28        	adc	<L657+fp_0+2
 17159 0B:8119: 85 03        	sta	<R0+2
 17160 0B:811B: 18           	clc
 17161 0B:811C: A7 01        	lda	[<R0]
 17162 0B:811E: 65 17        	adc	<L658+bcs_1
 17163 0B:8120: 87 01        	sta	[<R0]
 17164 0B:8122: A0 02 00     	ldy	#$2
 17165 0B:8125: B7 01        	lda	[<R0],Y
 17166 0B:8127: 65 19        	adc	<L658+bcs_1+2
 17167 0B:8129: A0 02 00     	ldy	#$2
 17168 0B:812C: 97 01        	sta	[<R0],Y
 17169                        ;#if !FF_FS_READONLY
 17170                        ;					if (fp->flag & F
                    A_WRITE)
 17171                        	.line	5101
 17172                        ;					{ /* Check if in
                     write mode or not */
 17173 0B:812E: E2 20        	sep	#$20
 17174                        	longa	off
 17175 0B:8130: A0 10 00     	ldy	#$10
 17176 0B:8133: B7 26        	lda	[<L657+fp_0],Y
 17177 0B:8135: 29 02        	and	#<$2
 17178 0B:8137: C2 20        	rep	#$20
 17179                        	longa	on
 17180 0B:8139: D0 03        	bne	L677
 17181 0B:813B: 82 6C 00     	brl	L10351
 17182                        L677:
 17183                        	.line	5102
 17184                        ;						if (FF_F
                    S_EXFAT && fp->fptr > fp->obj.objsize)
 17185                        	.line	5103
 17186                        ;						{ /* No 
                    FAT chain object needs correct objsize to generate FAT value
                     */
 17187 0B:813E: 82 46 00     	brl	L10352
 17188 0B:8141: A0 0C 00     	ldy	#$c
 17189 0B:8144: B7 26        	lda	[<L657+fp_0],Y
 17190 0B:8146: A0 12 00     	ldy	#$12
 17191 0B:8149: D7 26        	cmp	[<L657+fp_0],Y
 17192 0B:814B: A0 0E 00     	ldy	#$e
 17193 0B:814E: B7 26        	lda	[<L657+fp_0],Y
 17194 0B:8150: A0 14 00     	ldy	#$14
  Fri Jul 16 2021 14:42                                                Page 333


 17195 0B:8153: F7 26        	sbc	[<L657+fp_0],Y
 17196 0B:8155: 90 03        	bcc	L678
 17197 0B:8157: 82 2D 00     	brl	L10352
 17198                        L678:
 17199                        	.line	5104
 17200                        ;							
                    fp->obj.objsize = fp->fptr;
 17201                        	.line	5105
 17202 0B:815A: A0 12 00     	ldy	#$12
 17203 0B:815D: B7 26        	lda	[<L657+fp_0],Y
 17204 0B:815F: A0 0C 00     	ldy	#$c
 17205 0B:8162: 97 26        	sta	[<L657+fp_0],Y
 17206 0B:8164: A0 14 00     	ldy	#$14
 17207 0B:8167: B7 26        	lda	[<L657+fp_0],Y
 17208 0B:8169: A0 0E 00     	ldy	#$e
 17209 0B:816C: 97 26        	sta	[<L657+fp_0],Y
 17210                        ;							
                    fp->flag |= FA_MODIFIED;
 17211                        	.line	5106
 17212 0B:816E: 18           	clc
 17213 0B:816F: A9 10 00     	lda	#$10
 17214 0B:8172: 65 26        	adc	<L657+fp_0
 17215 0B:8174: 85 01        	sta	<R0
 17216 0B:8176: A9 00 00     	lda	#$0
 17217 0B:8179: 65 28        	adc	<L657+fp_0+2
 17218 0B:817B: 85 03        	sta	<R0+2
 17219 0B:817D: E2 20        	sep	#$20
 17220                        	longa	off
 17221 0B:817F: A7 01        	lda	[<R0]
 17222 0B:8181: 09 40        	ora	#<$40
 17223 0B:8183: 87 01        	sta	[<R0]
 17224 0B:8185: C2 20        	rep	#$20
 17225                        	longa	on
 17226                        ;						}
 17227                        	.line	5107
 17228                        ;						clst = c
                    reate_chain(&fp->obj, clst); /* Follow chain with forceed st
                    retch */
 17229                        L10352:
 17230                        	.line	5108
 17231 0B:8187: D4 15        	pei	<L658+clst_1+2
 17232 0B:8189: D4 13        	pei	<L658+clst_1
 17233 0B:818B: D4 28        	pei	<L657+fp_0+2
 17234 0B:818D: D4 26        	pei	<L657+fp_0
 17235 0B:818F: 22 4C 4D 0B  	jsl	~~create_chain
 17236 0B:8193: 85 13        	sta	<L658+clst_1
 17237 0B:8195: 86 15        	stx	<L658+clst_1+2
 17238                        ;						if (clst
                     == 0)
 17239                        	.line	5109
 17240                        ;						{ /* Cli
                    p file size in case of disk full */
 17241 0B:8197: A5 13        	lda	<L658+clst_1
 17242 0B:8199: 05 15        	ora	<L658+clst_1+2
 17243 0B:819B: F0 03        	beq	L679
 17244 0B:819D: 82 07 00     	brl	L10353
 17245                        L679:
 17246                        	.line	5110
  Fri Jul 16 2021 14:42                                                Page 334


 17247                        ;							
                    ofs = 0;
 17248                        	.line	5111
 17249 0B:81A0: 64 2A        	stz	<L657+ofs_0
 17250 0B:81A2: 64 2C        	stz	<L657+ofs_0+2
 17251                        ;							
                    break;
 17252                        	.line	5112
 17253 0B:81A4: 82 79 00     	brl	L10350
 17254                        ;						}
 17255                        	.line	5113
 17256                        ;					}
 17257                        L10353:
 17258                        	.line	5114
 17259                        ;					else
 17260 0B:81A7: 82 10 00     	brl	L10354
 17261                        L10351:
 17262                        ;#endif
 17263                        ;					{
 17264                        	.line	5117
 17265                        ;						clst = g
                    et_fat(&fp->obj, clst); /* Follow cluster chain if not in wr
                    ite mode */
 17266                        	.line	5118
 17267 0B:81AA: D4 15        	pei	<L658+clst_1+2
 17268 0B:81AC: D4 13        	pei	<L658+clst_1
 17269 0B:81AE: D4 28        	pei	<L657+fp_0+2
 17270 0B:81B0: D4 26        	pei	<L657+fp_0
 17271 0B:81B2: 22 0D 46 0B  	jsl	~~get_fat
 17272 0B:81B6: 85 13        	sta	<L658+clst_1
 17273 0B:81B8: 86 15        	stx	<L658+clst_1+2
 17274                        ;					}
 17275                        	.line	5119
 17276                        L10354:
 17277                        ;					if (clst == 0xFF
                    FFFFFF)
 17278                        	.line	5120
 17279                        ;						ABORT(fs
                    , FR_DISK_ERR);
 17280 0B:81BA: A5 13        	lda	<L658+clst_1
 17281 0B:81BC: C9 FF FF     	cmp	#<$ffffffff
 17282 0B:81BF: D0 05        	bne	L680
 17283 0B:81C1: A5 15        	lda	<L658+clst_1+2
 17284 0B:81C3: C9 FF FF     	cmp	#^$ffffffff
 17285                        L680:
 17286 0B:81C6: F0 03        	beq	L681
 17287 0B:81C8: 82 11 00     	brl	L10355
 17288                        L681:
 17289                        	.line	5121
 17290                        	.line	5121
 17291 0B:81CB: E2 20        	sep	#$20
 17292                        	longa	off
 17293 0B:81CD: A9 01        	lda	#$1
 17294 0B:81CF: A0 11 00     	ldy	#$11
 17295 0B:81D2: 97 26        	sta	[<L657+fp_0],Y
 17296 0B:81D4: C2 20        	rep	#$20
 17297                        	longa	on
 17298                        	.line	5121
  Fri Jul 16 2021 14:42                                                Page 335


 17299 0B:81D6: A9 01 00     	lda	#$1
 17300 0B:81D9: 82 2A FD     	brl	L662
 17301                        	.line	5121
 17302                        L10355:
 17303                        	.line	5121
 17304                        ;					if (clst <= 1 ||
                     clst >= fs->n_fatent)
 17305                        	.line	5122
 17306                        ;						ABORT(fs
                    , FR_INT_ERR);
 17307 0B:81DC: A9 01 00     	lda	#$1
 17308 0B:81DF: C5 13        	cmp	<L658+clst_1
 17309 0B:81E1: A9 00 00     	lda	#$0
 17310 0B:81E4: E5 15        	sbc	<L658+clst_1+2
 17311 0B:81E6: 90 03        	bcc	L683
 17312 0B:81E8: 82 13 00     	brl	L682
 17313                        L683:
 17314 0B:81EB: A5 13        	lda	<L658+clst_1
 17315 0B:81ED: A0 13 00     	ldy	#$13
 17316 0B:81F0: D7 0F        	cmp	[<L658+fs_1],Y
 17317 0B:81F2: A5 15        	lda	<L658+clst_1+2
 17318 0B:81F4: A0 15 00     	ldy	#$15
 17319 0B:81F7: F7 0F        	sbc	[<L658+fs_1],Y
 17320 0B:81F9: B0 03        	bcs	L684
 17321 0B:81FB: 82 11 00     	brl	L10356
 17322                        L684:
 17323                        L682:
 17324                        	.line	5123
 17325                        	.line	5123
 17326 0B:81FE: E2 20        	sep	#$20
 17327                        	longa	off
 17328 0B:8200: A9 02        	lda	#$2
 17329 0B:8202: A0 11 00     	ldy	#$11
 17330 0B:8205: 97 26        	sta	[<L657+fp_0],Y
 17331 0B:8207: C2 20        	rep	#$20
 17332                        	longa	on
 17333                        	.line	5123
 17334 0B:8209: A9 02 00     	lda	#$2
 17335 0B:820C: 82 F7 FC     	brl	L662
 17336                        	.line	5123
 17337                        L10356:
 17338                        	.line	5123
 17339                        ;					fp->clust = clst
                    ;
 17340                        	.line	5124
 17341 0B:820F: A5 13        	lda	<L658+clst_1
 17342 0B:8211: A0 16 00     	ldy	#$16
 17343 0B:8214: 97 26        	sta	[<L657+fp_0],Y
 17344 0B:8216: A5 15        	lda	<L658+clst_1+2
 17345 0B:8218: A0 18 00     	ldy	#$18
 17346 0B:821B: 97 26        	sta	[<L657+fp_0],Y
 17347                        ;				}
 17348                        	.line	5125
 17349 0B:821D: 82 D2 FE     	brl	L10349
 17350                        L10350:
 17351                        ;				fp->fptr += ofs;
 17352                        	.line	5126
 17353 0B:8220: 18           	clc
  Fri Jul 16 2021 14:42                                                Page 336


 17354 0B:8221: A9 12 00     	lda	#$12
 17355 0B:8224: 65 26        	adc	<L657+fp_0
 17356 0B:8226: 85 01        	sta	<R0
 17357 0B:8228: A9 00 00     	lda	#$0
 17358 0B:822B: 65 28        	adc	<L657+fp_0+2
 17359 0B:822D: 85 03        	sta	<R0+2
 17360 0B:822F: 18           	clc
 17361 0B:8230: A7 01        	lda	[<R0]
 17362 0B:8232: 65 2A        	adc	<L657+ofs_0
 17363 0B:8234: 87 01        	sta	[<R0]
 17364 0B:8236: A0 02 00     	ldy	#$2
 17365 0B:8239: B7 01        	lda	[<R0],Y
 17366 0B:823B: 65 2C        	adc	<L657+ofs_0+2
 17367 0B:823D: A0 02 00     	ldy	#$2
 17368 0B:8240: 97 01        	sta	[<R0],Y
 17369                        ;				if (ofs % SS(fs))
 17370                        	.line	5127
 17371                        ;				{
 17372 0B:8242: A5 2A        	lda	<L657+ofs_0
 17373 0B:8244: 29 FF 01     	and	#<$1ff
 17374 0B:8247: D0 03        	bne	L685
 17375 0B:8249: 82 46 00     	brl	L10357
 17376                        L685:
 17377                        	.line	5128
 17378                        ;					nsect = clst2sec
                    t(fs, clst); /* Current sector */
 17379                        	.line	5129
 17380 0B:824C: D4 15        	pei	<L658+clst_1+2
 17381 0B:824E: D4 13        	pei	<L658+clst_1
 17382 0B:8250: D4 11        	pei	<L658+fs_1+2
 17383 0B:8252: D4 0F        	pei	<L658+fs_1
 17384 0B:8254: 22 7E 45 0B  	jsl	~~clst2sect
 17385 0B:8258: 85 1B        	sta	<L658+nsect_1
 17386 0B:825A: 86 1D        	stx	<L658+nsect_1+2
 17387                        ;					if (nsect == 0)
 17388                        	.line	5130
 17389                        ;						ABORT(fs
                    , FR_INT_ERR);
 17390 0B:825C: A5 1B        	lda	<L658+nsect_1
 17391 0B:825E: 05 1D        	ora	<L658+nsect_1+2
 17392 0B:8260: F0 03        	beq	L686
 17393 0B:8262: 82 11 00     	brl	L10358
 17394                        L686:
 17395                        	.line	5131
 17396                        	.line	5131
 17397 0B:8265: E2 20        	sep	#$20
 17398                        	longa	off
 17399 0B:8267: A9 02        	lda	#$2
 17400 0B:8269: A0 11 00     	ldy	#$11
 17401 0B:826C: 97 26        	sta	[<L657+fp_0],Y
 17402 0B:826E: C2 20        	rep	#$20
 17403                        	longa	on
 17404                        	.line	5131
 17405 0B:8270: A9 02 00     	lda	#$2
 17406 0B:8273: 82 90 FC     	brl	L662
 17407                        	.line	5131
 17408                        L10358:
 17409                        	.line	5131
  Fri Jul 16 2021 14:42                                                Page 337


 17410                        ;					nsect += (DWORD)
                     (ofs / SS(fs));
 17411                        	.line	5132
 17412 0B:8276: D4 2C        	pei	<L657+ofs_0+2
 17413 0B:8278: D4 2A        	pei	<L657+ofs_0
 17414 0B:827A: A9 09 00     	lda	#$9
 17415                        	xref	~~~llsr
 17416 0B:827D: 22 xx xx xx  	jsl	~~~llsr
 17417 0B:8281: 85 01        	sta	<R0
 17418 0B:8283: 86 03        	stx	<R0+2
 17419 0B:8285: 18           	clc
 17420 0B:8286: A5 01        	lda	<R0
 17421 0B:8288: 65 1B        	adc	<L658+nsect_1
 17422 0B:828A: 85 1B        	sta	<L658+nsect_1
 17423 0B:828C: A5 03        	lda	<R0+2
 17424 0B:828E: 65 1D        	adc	<L658+nsect_1+2
 17425 0B:8290: 85 1D        	sta	<L658+nsect_1+2
 17426                        ;				}
 17427                        	.line	5133
 17428                        ;			}
 17429                        L10357:
 17430                        	.line	5134
 17431                        ;		}
 17432                        L10348:
 17433                        	.line	5135
 17434                        ;		if (!FF_FS_READONLY && fp->fptr > fp->ob
                    j.objsize)
 17435                        L10342:
 17436                        	.line	5136
 17437                        ;		{ /* Set file change flag if the file si
                    ze is extended */
 17438 0B:8292: A0 0C 00     	ldy	#$c
 17439 0B:8295: B7 26        	lda	[<L657+fp_0],Y
 17440 0B:8297: A0 12 00     	ldy	#$12
 17441 0B:829A: D7 26        	cmp	[<L657+fp_0],Y
 17442 0B:829C: A0 0E 00     	ldy	#$e
 17443 0B:829F: B7 26        	lda	[<L657+fp_0],Y
 17444 0B:82A1: A0 14 00     	ldy	#$14
 17445 0B:82A4: F7 26        	sbc	[<L657+fp_0],Y
 17446 0B:82A6: 90 03        	bcc	L687
 17447 0B:82A8: 82 2D 00     	brl	L10359
 17448                        L687:
 17449                        	.line	5137
 17450                        ;			fp->obj.objsize = fp->fptr;
 17451                        	.line	5138
 17452 0B:82AB: A0 12 00     	ldy	#$12
 17453 0B:82AE: B7 26        	lda	[<L657+fp_0],Y
 17454 0B:82B0: A0 0C 00     	ldy	#$c
 17455 0B:82B3: 97 26        	sta	[<L657+fp_0],Y
 17456 0B:82B5: A0 14 00     	ldy	#$14
 17457 0B:82B8: B7 26        	lda	[<L657+fp_0],Y
 17458 0B:82BA: A0 0E 00     	ldy	#$e
 17459 0B:82BD: 97 26        	sta	[<L657+fp_0],Y
 17460                        ;			fp->flag |= FA_MODIFIED;
 17461                        	.line	5139
 17462 0B:82BF: 18           	clc
 17463 0B:82C0: A9 10 00     	lda	#$10
 17464 0B:82C3: 65 26        	adc	<L657+fp_0
  Fri Jul 16 2021 14:42                                                Page 338


 17465 0B:82C5: 85 01        	sta	<R0
 17466 0B:82C7: A9 00 00     	lda	#$0
 17467 0B:82CA: 65 28        	adc	<L657+fp_0+2
 17468 0B:82CC: 85 03        	sta	<R0+2
 17469 0B:82CE: E2 20        	sep	#$20
 17470                        	longa	off
 17471 0B:82D0: A7 01        	lda	[<R0]
 17472 0B:82D2: 09 40        	ora	#<$40
 17473 0B:82D4: 87 01        	sta	[<R0]
 17474 0B:82D6: C2 20        	rep	#$20
 17475                        	longa	on
 17476                        ;		}
 17477                        	.line	5140
 17478                        ;		if (fp->fptr % SS(fs) && nsect != fp->se
                    ct)
 17479                        L10359:
 17480                        	.line	5141
 17481                        ;		{ /* Fill sector cache if needed */
 17482 0B:82D8: A0 12 00     	ldy	#$12
 17483 0B:82DB: B7 26        	lda	[<L657+fp_0],Y
 17484 0B:82DD: 29 FF 01     	and	#<$1ff
 17485 0B:82E0: D0 03        	bne	L688
 17486 0B:82E2: 82 CA 00     	brl	L10360
 17487                        L688:
 17488 0B:82E5: A5 1B        	lda	<L658+nsect_1
 17489 0B:82E7: A0 1A 00     	ldy	#$1a
 17490 0B:82EA: D7 26        	cmp	[<L657+fp_0],Y
 17491 0B:82EC: D0 07        	bne	L689
 17492 0B:82EE: A5 1D        	lda	<L658+nsect_1+2
 17493 0B:82F0: A0 1C 00     	ldy	#$1c
 17494 0B:82F3: D7 26        	cmp	[<L657+fp_0],Y
 17495                        L689:
 17496 0B:82F5: D0 03        	bne	L690
 17497 0B:82F7: 82 B5 00     	brl	L10360
 17498                        L690:
 17499                        	.line	5142
 17500                        ;#if !FF_FS_TINY
 17501                        ;#if !FF_FS_READONLY
 17502                        ;			if (fp->flag & FA_DIRTY)
 17503                        	.line	5145
 17504                        ;			{ /* Write-back dirty sector cac
                    he */
 17505 0B:82FA: E2 20        	sep	#$20
 17506                        	longa	off
 17507 0B:82FC: A0 10 00     	ldy	#$10
 17508 0B:82FF: B7 26        	lda	[<L657+fp_0],Y
 17509 0B:8301: 29 80        	and	#<$80
 17510 0B:8303: C2 20        	rep	#$20
 17511                        	longa	on
 17512 0B:8305: D0 03        	bne	L691
 17513 0B:8307: 82 5C 00     	brl	L10361
 17514                        L691:
 17515                        	.line	5146
 17516                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK)
 17517                        	.line	5147
 17518                        ;					ABORT(fs, FR_DIS
                    K_ERR);
  Fri Jul 16 2021 14:42                                                Page 339


 17519 0B:830A: F4 01 00     	pea	#<$1
 17520 0B:830D: A0 1C 00     	ldy	#$1c
 17521 0B:8310: B7 26        	lda	[<L657+fp_0],Y
 17522 0B:8312: 48           	pha
 17523 0B:8313: A0 1A 00     	ldy	#$1a
 17524 0B:8316: B7 26        	lda	[<L657+fp_0],Y
 17525 0B:8318: 48           	pha
 17526 0B:8319: 18           	clc
 17527 0B:831A: A9 26 00     	lda	#$26
 17528 0B:831D: 65 26        	adc	<L657+fp_0
 17529 0B:831F: 85 01        	sta	<R0
 17530 0B:8321: A9 00 00     	lda	#$0
 17531 0B:8324: 65 28        	adc	<L657+fp_0+2
 17532 0B:8326: 85 03        	sta	<R0+2
 17533 0B:8328: D4 03        	pei	<R0+2
 17534 0B:832A: D4 01        	pei	<R0
 17535 0B:832C: A0 01 00     	ldy	#$1
 17536 0B:832F: B7 0F        	lda	[<L658+fs_1],Y
 17537 0B:8331: 48           	pha
 17538 0B:8332: 22 xx xx xx  	jsl	~~disk_write
 17539 0B:8336: AA           	tax
 17540 0B:8337: D0 03        	bne	L692
 17541 0B:8339: 82 11 00     	brl	L10362
 17542                        L692:
 17543                        	.line	5148
 17544                        	.line	5148
 17545 0B:833C: E2 20        	sep	#$20
 17546                        	longa	off
 17547 0B:833E: A9 01        	lda	#$1
 17548 0B:8340: A0 11 00     	ldy	#$11
 17549 0B:8343: 97 26        	sta	[<L657+fp_0],Y
 17550 0B:8345: C2 20        	rep	#$20
 17551                        	longa	on
 17552                        	.line	5148
 17553 0B:8347: A9 01 00     	lda	#$1
 17554 0B:834A: 82 B9 FB     	brl	L662
 17555                        	.line	5148
 17556                        L10362:
 17557                        	.line	5148
 17558                        ;				fp->flag &= (BYTE) ~FA_D
                    IRTY;
 17559                        	.line	5149
 17560 0B:834D: 18           	clc
 17561 0B:834E: A9 10 00     	lda	#$10
 17562 0B:8351: 65 26        	adc	<L657+fp_0
 17563 0B:8353: 85 01        	sta	<R0
 17564 0B:8355: A9 00 00     	lda	#$0
 17565 0B:8358: 65 28        	adc	<L657+fp_0+2
 17566 0B:835A: 85 03        	sta	<R0+2
 17567 0B:835C: E2 20        	sep	#$20
 17568                        	longa	off
 17569 0B:835E: A7 01        	lda	[<R0]
 17570 0B:8360: 29 7F        	and	#<$7f
 17571 0B:8362: 87 01        	sta	[<R0]
 17572 0B:8364: C2 20        	rep	#$20
 17573                        	longa	on
 17574                        ;			}
 17575                        	.line	5150
  Fri Jul 16 2021 14:42                                                Page 340


 17576                        ;#endif
 17577                        ;			if (disk_read(fs->pdrv, fp->buf,
                     nsect, 1) != RES_OK)
 17578                        L10361:
 17579                        	.line	5152
 17580                        ;				ABORT(fs, FR_DISK_ERR); 
                    /* Fill sector cache */
 17581 0B:8366: F4 01 00     	pea	#<$1
 17582 0B:8369: D4 1D        	pei	<L658+nsect_1+2
 17583 0B:836B: D4 1B        	pei	<L658+nsect_1
 17584 0B:836D: 18           	clc
 17585 0B:836E: A9 26 00     	lda	#$26
 17586 0B:8371: 65 26        	adc	<L657+fp_0
 17587 0B:8373: 85 01        	sta	<R0
 17588 0B:8375: A9 00 00     	lda	#$0
 17589 0B:8378: 65 28        	adc	<L657+fp_0+2
 17590 0B:837A: 85 03        	sta	<R0+2
 17591 0B:837C: D4 03        	pei	<R0+2
 17592 0B:837E: D4 01        	pei	<R0
 17593 0B:8380: A0 01 00     	ldy	#$1
 17594 0B:8383: B7 0F        	lda	[<L658+fs_1],Y
 17595 0B:8385: 48           	pha
 17596 0B:8386: 22 xx xx xx  	jsl	~~disk_read
 17597 0B:838A: AA           	tax
 17598 0B:838B: D0 03        	bne	L693
 17599 0B:838D: 82 11 00     	brl	L10363
 17600                        L693:
 17601                        	.line	5153
 17602                        	.line	5153
 17603 0B:8390: E2 20        	sep	#$20
 17604                        	longa	off
 17605 0B:8392: A9 01        	lda	#$1
 17606 0B:8394: A0 11 00     	ldy	#$11
 17607 0B:8397: 97 26        	sta	[<L657+fp_0],Y
 17608 0B:8399: C2 20        	rep	#$20
 17609                        	longa	on
 17610                        	.line	5153
 17611 0B:839B: A9 01 00     	lda	#$1
 17612 0B:839E: 82 65 FB     	brl	L662
 17613                        	.line	5153
 17614                        L10363:
 17615                        	.line	5153
 17616                        ;#endif
 17617                        ;			fp->sect = nsect;
 17618                        	.line	5155
 17619 0B:83A1: A5 1B        	lda	<L658+nsect_1
 17620 0B:83A3: A0 1A 00     	ldy	#$1a
 17621 0B:83A6: 97 26        	sta	[<L657+fp_0],Y
 17622 0B:83A8: A5 1D        	lda	<L658+nsect_1+2
 17623 0B:83AA: A0 1C 00     	ldy	#$1c
 17624 0B:83AD: 97 26        	sta	[<L657+fp_0],Y
 17625                        ;		}
 17626                        	.line	5156
 17627                        ;	}
 17628                        L10360:
 17629                        	.line	5157
 17630                        ;
 17631                        ;	LEAVE_FF(fs, res);
  Fri Jul 16 2021 14:42                                                Page 341


 17632                        	.line	5159
 17633 0B:83AF: A5 0D        	lda	<L658+res_1
 17634 0B:83B1: 82 52 FB     	brl	L662
 17635                        ;}
 17636                        	.line	5160
 17637                        	.endblock	5160
 17638             00000022   L657	equ	34
 17639             0000000D   L658	equ	13
 17640 0B:83B4:              	ends
 17641                        	efunc
 17642                        	.endfunc	5160,13,34
 17643                        	.line	5160
 17644                        ;
 17645                        ;#if FF_FS_MINIMIZE <= 1
 17646                        ;/*-----------------------------------------------
                    ------------------------*/
 17647                        ;/* Create a Directory Object                     
                                            */
 17648                        ;/*-----------------------------------------------
                    ------------------------*/
 17649                        ;
 17650                        ;FRESULT f_opendir(DIR* dp, /* Pointer to director
                    y object to create */
 17651                        ;const TCHAR* path /* Pointer to the directory pat
                    h */
 17652                        ;)
 17653                        ;{
 17654                        	.line	5167
 17655                        	.line	5170
 17656                        	FFDOS
 17657                        	xdef	~~f_opendir
 17658                        	func
 17659                        	.function	5170
 17660                        ~~f_opendir:
 17661                        	longa	on
 17662                        	longi	on
 17663 0B:83B4: 3B           	tsc
 17664 0B:83B5: 38           	sec
 17665 0B:83B6: E9 0A 00     	sbc	#L694
 17666 0B:83B9: 1B           	tcs
 17667 0B:83BA: 0B           	phd
 17668 0B:83BB: 5B           	tcd
 17669             00000004   dp_0	set	4
 17670             00000008   path_0	set	8
 17671                        	.block	5170
 17672                        ;	FRESULT res;
 17673                        ;	FATFS *fs;
 17674                        ;	DEF_NAMBUF
 17675                        ;
 17676                        ;	if (!dp)
 17677             00000000   res_1	set	0
 17678             00000002   fs_1	set	2
 17679                        	.sym	res,0,5,1,16
 17680                        	.sym	fs,2,138,1,32,49
 17681                        	.sym	dp,4,138,6,32,52
 17682                        	.sym	path,8,142,6,32
 17683                        	.line	5175
 17684                        ;		return FR_INVALID_OBJECT;
  Fri Jul 16 2021 14:42                                                Page 342


 17685 0B:83BC: A5 0E        	lda	<L694+dp_0
 17686 0B:83BE: 05 10        	ora	<L694+dp_0+2
 17687 0B:83C0: F0 03        	beq	L697
 17688 0B:83C2: 82 15 00     	brl	L10364
 17689                        L697:
 17690                        	.line	5176
 17691 0B:83C5: A9 09 00     	lda	#$9
 17692                        L698:
 17693 0B:83C8: A8           	tay
 17694 0B:83C9: A5 0C        	lda	<L694+2
 17695 0B:83CB: 85 14        	sta	<L694+2+8
 17696 0B:83CD: A5 0B        	lda	<L694+1
 17697 0B:83CF: 85 13        	sta	<L694+1+8
 17698 0B:83D1: 2B           	pld
 17699 0B:83D2: 3B           	tsc
 17700 0B:83D3: 18           	clc
 17701 0B:83D4: 69 12 00     	adc	#L694+8
 17702 0B:83D7: 1B           	tcs
 17703 0B:83D8: 98           	tya
 17704 0B:83D9: 6B           	rtl
 17705                        ;
 17706                        ;	////k_debug_string("f_opendir::f_opendir\r\n");
 17707                        ;
 17708                        ;	/* Get logical drive */
 17709                        ;	res = mount_volume(&path, &fs, 0);
 17710                        L10364:
 17711                        	.line	5181
 17712 0B:83DA: F4 00 00     	pea	#<$0
 17713 0B:83DD: F4 00 00     	pea	#0
 17714 0B:83E0: 18           	clc
 17715 0B:83E1: 7B           	tdc
 17716 0B:83E2: 69 07 00     	adc	#<L695+fs_1
 17717 0B:83E5: 48           	pha
 17718 0B:83E6: F4 00 00     	pea	#0
 17719 0B:83E9: 18           	clc
 17720 0B:83EA: 7B           	tdc
 17721 0B:83EB: 69 12 00     	adc	#<L694+path_0
 17722 0B:83EE: 48           	pha
 17723 0B:83EF: 22 F6 66 0B  	jsl	~~mount_volume
 17724 0B:83F3: 85 05        	sta	<L695+res_1
 17725                        ;	if (res == FR_OK)
 17726                        	.line	5182
 17727                        ;	{
 17728 0B:83F5: A5 05        	lda	<L695+res_1
 17729 0B:83F7: F0 03        	beq	L699
 17730 0B:83F9: 82 9E 00     	brl	L10365
 17731                        L699:
 17732                        	.line	5183
 17733                        ;		dp->obj.fs = fs;
 17734                        	.line	5184
 17735 0B:83FC: A5 07        	lda	<L695+fs_1
 17736 0B:83FE: 87 0E        	sta	[<L694+dp_0]
 17737 0B:8400: A5 09        	lda	<L695+fs_1+2
 17738 0B:8402: A0 02 00     	ldy	#$2
 17739 0B:8405: 97 0E        	sta	[<L694+dp_0],Y
 17740                        ;		INIT_NAMBUF(fs);
 17741                        	.line	5185
 17742                        ;		res = follow_path(dp, path); /* Follow t
  Fri Jul 16 2021 14:42                                                Page 343


                    he path to the directory */
 17743                        	.line	5186
 17744 0B:8407: D4 14        	pei	<L694+path_0+2
 17745 0B:8409: D4 12        	pei	<L694+path_0
 17746 0B:840B: D4 10        	pei	<L694+dp_0+2
 17747 0B:840D: D4 0E        	pei	<L694+dp_0
 17748 0B:840F: 22 73 60 0B  	jsl	~~follow_path
 17749 0B:8413: 85 05        	sta	<L695+res_1
 17750                        ;		if (res == FR_OK)
 17751                        	.line	5187
 17752                        ;		{ /* Follow completed */
 17753 0B:8415: A5 05        	lda	<L695+res_1
 17754 0B:8417: F0 03        	beq	L700
 17755 0B:8419: 82 6F 00     	brl	L10366
 17756                        L700:
 17757                        	.line	5188
 17758                        ;			if (!(dp->fn[NSFLAG] & NS_NONAME
                    ))
 17759                        	.line	5189
 17760                        ;			{ /* It is not the origin direct
                    ory itself */
 17761 0B:841C: E2 20        	sep	#$20
 17762                        	longa	off
 17763 0B:841E: A0 2B 00     	ldy	#$2b
 17764 0B:8421: B7 0E        	lda	[<L694+dp_0],Y
 17765 0B:8423: 29 80        	and	#<$80
 17766 0B:8425: C2 20        	rep	#$20
 17767                        	longa	on
 17768 0B:8427: F0 03        	beq	L701
 17769 0B:8429: 82 3E 00     	brl	L10367
 17770                        L701:
 17771                        	.line	5190
 17772                        ;				if (dp->obj.attr & AM_DI
                    R)
 17773                        	.line	5191
 17774                        ;				{ /* This object is a su
                    b-directory */
 17775 0B:842C: E2 20        	sep	#$20
 17776                        	longa	off
 17777 0B:842E: A0 06 00     	ldy	#$6
 17778 0B:8431: B7 0E        	lda	[<L694+dp_0],Y
 17779 0B:8433: 29 10        	and	#<$10
 17780 0B:8435: C2 20        	rep	#$20
 17781                        	longa	on
 17782 0B:8437: D0 03        	bne	L702
 17783 0B:8439: 82 29 00     	brl	L10368
 17784                        L702:
 17785                        	.line	5192
 17786                        ;#if FF_FS_EXFAT
 17787                        ;					if (fs->fs_type 
                    == FS_EXFAT)
 17788                        ;					{
 17789                        ;						dp->obj.
                    c_scl = dp->obj.sclust; /* Get containing directory inforama
                    tion */
 17790                        ;						dp->obj.
                    c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.sta
                    t;
  Fri Jul 16 2021 14:42                                                Page 344


 17791                        ;						dp->obj.
                    c_ofs = dp->blk_ofs;
 17792                        ;						init_all
                    oc_info(fs, &dp->obj); /* Get object allocation info */
 17793                        ;					}
 17794                        ;					else
 17795                        ;#endif
 17796                        ;					{
 17797                        	.line	5203
 17798                        ;						dp->obj.
                    sclust = ld_clust(fs, dp->dir); /* Get object allocation inf
                    o */
 17799                        	.line	5204
 17800 0B:843C: A0 1E 00     	ldy	#$1e
 17801 0B:843F: B7 0E        	lda	[<L694+dp_0],Y
 17802 0B:8441: 48           	pha
 17803 0B:8442: A0 1C 00     	ldy	#$1c
 17804 0B:8445: B7 0E        	lda	[<L694+dp_0],Y
 17805 0B:8447: 48           	pha
 17806 0B:8448: D4 09        	pei	<L695+fs_1+2
 17807 0B:844A: D4 07        	pei	<L695+fs_1
 17808 0B:844C: 22 F3 56 0B  	jsl	~~ld_clust
 17809 0B:8450: 85 01        	sta	<R0
 17810 0B:8452: 86 03        	stx	<R0+2
 17811 0B:8454: A5 01        	lda	<R0
 17812 0B:8456: A0 08 00     	ldy	#$8
 17813 0B:8459: 97 0E        	sta	[<L694+dp_0],Y
 17814 0B:845B: A5 03        	lda	<R0+2
 17815 0B:845D: A0 0A 00     	ldy	#$a
 17816 0B:8460: 97 0E        	sta	[<L694+dp_0],Y
 17817                        ;					}
 17818                        	.line	5205
 17819                        ;				}
 17820                        	.line	5206
 17821                        ;				else
 17822 0B:8462: 82 05 00     	brl	L10369
 17823                        L10368:
 17824                        ;				{ /* This object is a fi
                    le */
 17825                        	.line	5208
 17826                        ;					res = FR_NO_PATH
                    ;
 17827                        	.line	5209
 17828 0B:8465: A9 05 00     	lda	#$5
 17829 0B:8468: 85 05        	sta	<L695+res_1
 17830                        ;				}
 17831                        	.line	5210
 17832                        L10369:
 17833                        ;			}
 17834                        	.line	5211
 17835                        ;			if (res == FR_OK)
 17836                        L10367:
 17837                        	.line	5212
 17838                        ;			{
 17839 0B:846A: A5 05        	lda	<L695+res_1
 17840 0B:846C: F0 03        	beq	L703
 17841 0B:846E: 82 1A 00     	brl	L10370
 17842                        L703:
  Fri Jul 16 2021 14:42                                                Page 345


 17843                        	.line	5213
 17844                        ;				dp->obj.id = fs->id;
 17845                        	.line	5214
 17846 0B:8471: A0 05 00     	ldy	#$5
 17847 0B:8474: B7 07        	lda	[<L695+fs_1],Y
 17848 0B:8476: A0 04 00     	ldy	#$4
 17849 0B:8479: 97 0E        	sta	[<L694+dp_0],Y
 17850                        ;				res = dir_sdi(dp, 0); /*
                     Rewind directory */
 17851                        	.line	5215
 17852 0B:847B: F4 00 00     	pea	#^$0
 17853 0B:847E: F4 00 00     	pea	#<$0
 17854 0B:8481: D4 10        	pei	<L694+dp_0+2
 17855 0B:8483: D4 0E        	pei	<L694+dp_0
 17856 0B:8485: 22 3D 51 0B  	jsl	~~dir_sdi
 17857 0B:8489: 85 05        	sta	<L695+res_1
 17858                        ;#if FF_FS_LOCK != 0
 17859                        ;				if (res == FR_OK)
 17860                        ;				{
 17861                        ;					if (dp->obj.sclu
                    st != 0)
 17862                        ;					{
 17863                        ;						dp->obj.
                    lockid = inc_lock(dp, 0); /* Lock the sub directory */
 17864                        ;						if (!dp-
                    >obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 17865                        ;					}
 17866                        ;					else
 17867                        ;					{
 17868                        ;						dp->obj.
                    lockid = 0; /* Root directory need not to be locked */
 17869                        ;					}
 17870                        ;				}
 17871                        ;#endif
 17872                        ;			}
 17873                        	.line	5230
 17874                        ;		} FREE_NAMBUF();
 17875                        L10370:
 17876                        	.line	5231
 17877                        L10366:
 17878                        	.line	5231
 17879                        ;		if (res == FR_NO_FILE)
 17880                        	.line	5232
 17881                        ;			res = FR_NO_PATH;
 17882 0B:848B: A5 05        	lda	<L695+res_1
 17883 0B:848D: C9 04 00     	cmp	#<$4
 17884 0B:8490: F0 03        	beq	L704
 17885 0B:8492: 82 05 00     	brl	L10371
 17886                        L704:
 17887                        	.line	5233
 17888 0B:8495: A9 05 00     	lda	#$5
 17889 0B:8498: 85 05        	sta	<L695+res_1
 17890                        ;	}
 17891                        L10371:
 17892                        	.line	5234
 17893                        ;	if (res != FR_OK)
 17894                        L10365:
 17895                        	.line	5235
  Fri Jul 16 2021 14:42                                                Page 346


 17896                        ;		dp->obj.fs = 0; /* Invalidate the direct
                    ory object if function faild */
 17897 0B:849A: A5 05        	lda	<L695+res_1
 17898 0B:849C: D0 03        	bne	L705
 17899 0B:849E: 82 0D 00     	brl	L10372
 17900                        L705:
 17901                        	.line	5236
 17902 0B:84A1: A9 00 00     	lda	#$0
 17903 0B:84A4: 87 0E        	sta	[<L694+dp_0]
 17904 0B:84A6: A9 00 00     	lda	#$0
 17905 0B:84A9: A0 02 00     	ldy	#$2
 17906 0B:84AC: 97 0E        	sta	[<L694+dp_0],Y
 17907                        ;
 17908                        ;	LEAVE_FF(fs, res);
 17909                        L10372:
 17910                        	.line	5238
 17911 0B:84AE: A5 05        	lda	<L695+res_1
 17912 0B:84B0: 82 15 FF     	brl	L698
 17913                        ;}
 17914                        	.line	5239
 17915                        	.endblock	5239
 17916             0000000A   L694	equ	10
 17917             00000005   L695	equ	5
 17918 0B:84B3:              	ends
 17919                        	efunc
 17920                        	.endfunc	5239,5,10
 17921                        	.line	5239
 17922                        ;
 17923                        ;/*-----------------------------------------------
                    ------------------------*/
 17924                        ;/* Close Directory                               
                                            */
 17925                        ;/*-----------------------------------------------
                    ------------------------*/
 17926                        ;
 17927                        ;FRESULT f_closedir(DIR *dp /* Pointer to the dire
                    ctory object to be closed */
 17928                        ;)
 17929                        ;{
 17930                        	.line	5245
 17931                        	.line	5247
 17932                        	FFDOS
 17933                        	xdef	~~f_closedir
 17934                        	func
 17935                        	.function	5247
 17936                        ~~f_closedir:
 17937                        	longa	on
 17938                        	longi	on
 17939 0B:84B3: 3B           	tsc
 17940 0B:84B4: 38           	sec
 17941 0B:84B5: E9 06 00     	sbc	#L706
 17942 0B:84B8: 1B           	tcs
 17943 0B:84B9: 0B           	phd
 17944 0B:84BA: 5B           	tcd
 17945             00000004   dp_0	set	4
 17946                        	.block	5247
 17947                        ;	FRESULT res;
 17948                        ;	FATFS *fs;
  Fri Jul 16 2021 14:42                                                Page 347


 17949                        ;
 17950                        ;	res = validate(&dp->obj, &fs); /* Check validity
                     of the file object */
 17951             00000000   res_1	set	0
 17952             00000002   fs_1	set	2
 17953                        	.sym	res,0,5,1,16
 17954                        	.sym	fs,2,138,1,32,49
 17955                        	.sym	dp,4,138,6,32,52
 17956                        	.line	5251
 17957 0B:84BB: F4 00 00     	pea	#0
 17958 0B:84BE: 18           	clc
 17959 0B:84BF: 7B           	tdc
 17960 0B:84C0: 69 03 00     	adc	#<L707+fs_1
 17961 0B:84C3: 48           	pha
 17962 0B:84C4: D4 0C        	pei	<L706+dp_0+2
 17963 0B:84C6: D4 0A        	pei	<L706+dp_0
 17964 0B:84C8: 22 C9 6D 0B  	jsl	~~validate
 17965 0B:84CC: 85 01        	sta	<L707+res_1
 17966                        ;	if (res == FR_OK)
 17967                        	.line	5252
 17968                        ;	{
 17969 0B:84CE: A5 01        	lda	<L707+res_1
 17970 0B:84D0: F0 03        	beq	L709
 17971 0B:84D2: 82 0D 00     	brl	L10373
 17972                        L709:
 17973                        	.line	5253
 17974                        ;#if FF_FS_LOCK != 0
 17975                        ;		if (dp->obj.lockid) res = dec_lock(dp->o
                    bj.lockid); /* Decrement sub-directory open counter */
 17976                        ;		if (res == FR_OK) dp->obj.fs = 0; /* Inv
                    alidate directory object */
 17977                        ;#else
 17978                        ;		dp->obj.fs = 0; /* Invalidate directory 
                    object */
 17979                        	.line	5258
 17980 0B:84D5: A9 00 00     	lda	#$0
 17981 0B:84D8: 87 0A        	sta	[<L706+dp_0]
 17982 0B:84DA: A9 00 00     	lda	#$0
 17983 0B:84DD: A0 02 00     	ldy	#$2
 17984 0B:84E0: 97 0A        	sta	[<L706+dp_0],Y
 17985                        ;#endif
 17986                        ;#if FF_FS_REENTRANT
 17987                        ;		unlock_fs(fs, FR_OK); /* Unlock volume *
                    /
 17988                        ;#endif
 17989                        ;	}
 17990                        	.line	5263
 17991                        ;	return res;
 17992                        L10373:
 17993                        	.line	5264
 17994 0B:84E2: A5 01        	lda	<L707+res_1
 17995                        L710:
 17996 0B:84E4: A8           	tay
 17997 0B:84E5: A5 08        	lda	<L706+2
 17998 0B:84E7: 85 0C        	sta	<L706+2+4
 17999 0B:84E9: A5 07        	lda	<L706+1
 18000 0B:84EB: 85 0B        	sta	<L706+1+4
 18001 0B:84ED: 2B           	pld
  Fri Jul 16 2021 14:42                                                Page 348


 18002 0B:84EE: 3B           	tsc
 18003 0B:84EF: 18           	clc
 18004 0B:84F0: 69 0A 00     	adc	#L706+4
 18005 0B:84F3: 1B           	tcs
 18006 0B:84F4: 98           	tya
 18007 0B:84F5: 6B           	rtl
 18008                        ;}
 18009                        	.line	5265
 18010                        	.endblock	5265
 18011             00000006   L706	equ	6
 18012             00000001   L707	equ	1
 18013 0B:84F6:              	ends
 18014                        	efunc
 18015                        	.endfunc	5265,1,6
 18016                        	.line	5265
 18017                        ;
 18018                        ;/*-----------------------------------------------
                    ------------------------*/
 18019                        ;/* Read Directory Entries in Sequence            
                                            */
 18020                        ;/*-----------------------------------------------
                    ------------------------*/
 18021                        ;
 18022                        ;FRESULT f_readdir(DIR* dp, /* Pointer to the open
                     directory object */
 18023                        ;FILINFO* fno /* Pointer to file information to re
                    turn */
 18024                        ;)
 18025                        ;{
 18026                        	.line	5271
 18027                        	.line	5274
 18028                        	FFDOS
 18029                        	xdef	~~f_readdir
 18030                        	func
 18031                        	.function	5274
 18032                        ~~f_readdir:
 18033                        	longa	on
 18034                        	longi	on
 18035 0B:84F6: 3B           	tsc
 18036 0B:84F7: 38           	sec
 18037 0B:84F8: E9 06 00     	sbc	#L711
 18038 0B:84FB: 1B           	tcs
 18039 0B:84FC: 0B           	phd
 18040 0B:84FD: 5B           	tcd
 18041             00000004   dp_0	set	4
 18042             00000008   fno_0	set	8
 18043                        	.block	5274
 18044                        ;	FRESULT res;
 18045                        ;	FATFS *fs;
 18046                        ;	DEF_NAMBUF
 18047                        ;
 18048                        ;	res = validate(&dp->obj, &fs); /* Check validity
                     of the directory object */
 18049             00000000   res_1	set	0
 18050             00000002   fs_1	set	2
 18051                        	.sym	res,0,5,1,16
 18052                        	.sym	fs,2,138,1,32,49
 18053                        	.sym	dp,4,138,6,32,52
  Fri Jul 16 2021 14:42                                                Page 349


 18054                        	.sym	fno,8,138,6,32,53
 18055                        	.line	5279
 18056 0B:84FE: F4 00 00     	pea	#0
 18057 0B:8501: 18           	clc
 18058 0B:8502: 7B           	tdc
 18059 0B:8503: 69 03 00     	adc	#<L712+fs_1
 18060 0B:8506: 48           	pha
 18061 0B:8507: D4 0C        	pei	<L711+dp_0+2
 18062 0B:8509: D4 0A        	pei	<L711+dp_0
 18063 0B:850B: 22 C9 6D 0B  	jsl	~~validate
 18064 0B:850F: 85 01        	sta	<L712+res_1
 18065                        ;	if (res == FR_OK)
 18066                        	.line	5280
 18067                        ;	{
 18068 0B:8511: A5 01        	lda	<L712+res_1
 18069 0B:8513: F0 03        	beq	L714
 18070 0B:8515: 82 61 00     	brl	L10374
 18071                        L714:
 18072                        	.line	5281
 18073                        ;		if (!fno)
 18074                        	.line	5282
 18075                        ;		{
 18076 0B:8518: A5 0E        	lda	<L711+fno_0
 18077 0B:851A: 05 10        	ora	<L711+fno_0+2
 18078 0B:851C: F0 03        	beq	L715
 18079 0B:851E: 82 13 00     	brl	L10375
 18080                        L715:
 18081                        	.line	5283
 18082                        ;			res = dir_sdi(dp, 0); /* Rewind 
                    the directory object */
 18083                        	.line	5284
 18084 0B:8521: F4 00 00     	pea	#^$0
 18085 0B:8524: F4 00 00     	pea	#<$0
 18086 0B:8527: D4 0C        	pei	<L711+dp_0+2
 18087 0B:8529: D4 0A        	pei	<L711+dp_0
 18088 0B:852B: 22 3D 51 0B  	jsl	~~dir_sdi
 18089 0B:852F: 85 01        	sta	<L712+res_1
 18090                        ;		}
 18091                        	.line	5285
 18092                        ;		else
 18093 0B:8531: 82 45 00     	brl	L10376
 18094                        L10375:
 18095                        ;		{
 18096                        	.line	5287
 18097                        ;			INIT_NAMBUF(fs);
 18098                        	.line	5288
 18099                        ;			res = DIR_READ_FILE(dp); /* Read
                     an item */
 18100                        	.line	5289
 18101 0B:8534: F4 00 00     	pea	#<$0
 18102 0B:8537: D4 0C        	pei	<L711+dp_0+2
 18103 0B:8539: D4 0A        	pei	<L711+dp_0
 18104 0B:853B: 22 E9 57 0B  	jsl	~~dir_read
 18105 0B:853F: 85 01        	sta	<L712+res_1
 18106                        ;			if (res == FR_NO_FILE)
 18107                        	.line	5290
 18108                        ;				res = FR_OK; /* Ignore e
                    nd of directory */
  Fri Jul 16 2021 14:42                                                Page 350


 18109 0B:8541: A5 01        	lda	<L712+res_1
 18110 0B:8543: C9 04 00     	cmp	#<$4
 18111 0B:8546: F0 03        	beq	L716
 18112 0B:8548: 82 02 00     	brl	L10377
 18113                        L716:
 18114                        	.line	5291
 18115 0B:854B: 64 01        	stz	<L712+res_1
 18116                        ;			if (res == FR_OK)
 18117                        L10377:
 18118                        	.line	5292
 18119                        ;			{ /* A valid entry is found */
 18120 0B:854D: A5 01        	lda	<L712+res_1
 18121 0B:854F: F0 03        	beq	L717
 18122 0B:8551: 82 25 00     	brl	L10378
 18123                        L717:
 18124                        	.line	5293
 18125                        ;				get_fileinfo(dp, fno); /
                    * Get the object information */
 18126                        	.line	5294
 18127 0B:8554: D4 10        	pei	<L711+fno_0+2
 18128 0B:8556: D4 0E        	pei	<L711+fno_0
 18129 0B:8558: D4 0C        	pei	<L711+dp_0+2
 18130 0B:855A: D4 0A        	pei	<L711+dp_0
 18131 0B:855C: 22 14 5B 0B  	jsl	~~get_fileinfo
 18132                        ;				res = dir_next(dp, 0); /
                    * Increment index for next */
 18133                        	.line	5295
 18134 0B:8560: F4 00 00     	pea	#<$0
 18135 0B:8563: D4 0C        	pei	<L711+dp_0+2
 18136 0B:8565: D4 0A        	pei	<L711+dp_0
 18137 0B:8567: 22 7C 53 0B  	jsl	~~dir_next
 18138 0B:856B: 85 01        	sta	<L712+res_1
 18139                        ;				if (res == FR_NO_FILE)
 18140                        	.line	5296
 18141                        ;					res = FR_OK; /* 
                    Ignore end of directory now */
 18142 0B:856D: A5 01        	lda	<L712+res_1
 18143 0B:856F: C9 04 00     	cmp	#<$4
 18144 0B:8572: F0 03        	beq	L718
 18145 0B:8574: 82 02 00     	brl	L10379
 18146                        L718:
 18147                        	.line	5297
 18148 0B:8577: 64 01        	stz	<L712+res_1
 18149                        ;			} FREE_NAMBUF();
 18150                        L10379:
 18151                        	.line	5298
 18152                        L10378:
 18153                        	.line	5298
 18154                        ;		}
 18155                        	.line	5299
 18156                        L10376:
 18157                        ;	}
 18158                        	.line	5300
 18159                        ;	LEAVE_FF(fs, res);
 18160                        L10374:
 18161                        	.line	5301
 18162 0B:8579: A5 01        	lda	<L712+res_1
 18163                        L719:
  Fri Jul 16 2021 14:42                                                Page 351


 18164 0B:857B: A8           	tay
 18165 0B:857C: A5 08        	lda	<L711+2
 18166 0B:857E: 85 10        	sta	<L711+2+8
 18167 0B:8580: A5 07        	lda	<L711+1
 18168 0B:8582: 85 0F        	sta	<L711+1+8
 18169 0B:8584: 2B           	pld
 18170 0B:8585: 3B           	tsc
 18171 0B:8586: 18           	clc
 18172 0B:8587: 69 0E 00     	adc	#L711+8
 18173 0B:858A: 1B           	tcs
 18174 0B:858B: 98           	tya
 18175 0B:858C: 6B           	rtl
 18176                        ;}
 18177                        	.line	5302
 18178                        	.endblock	5302
 18179             00000006   L711	equ	6
 18180             00000001   L712	equ	1
 18181 0B:858D:              	ends
 18182                        	efunc
 18183                        	.endfunc	5302,1,6
 18184                        	.line	5302
 18185                        ;
 18186                        ;#if FF_USE_FIND
 18187                        ;/*-----------------------------------------------
                    ------------------------*/
 18188                        ;/* Find Next File                                
                                            */
 18189                        ;/*-----------------------------------------------
                    ------------------------*/
 18190                        ;
 18191                        ;FRESULT f_findnext (
 18192                        ;		DIR* dp, /* Pointer to the open director
                    y object */
 18193                        ;		FILINFO* fno /* Pointer to the file info
                    rmation structure */
 18194                        ;)
 18195                        ;{
 18196                        	.line	5309
 18197                        	.line	5313
 18198                        	FFDOS
 18199                        	xdef	~~f_findnext
 18200                        	func
 18201                        	.function	5313
 18202                        ~~f_findnext:
 18203                        	longa	on
 18204                        	longi	on
 18205 0B:858D: 3B           	tsc
 18206 0B:858E: 38           	sec
 18207 0B:858F: E9 06 00     	sbc	#L720
 18208 0B:8592: 1B           	tcs
 18209 0B:8593: 0B           	phd
 18210 0B:8594: 5B           	tcd
 18211             00000004   dp_0	set	4
 18212             00000008   fno_0	set	8
 18213                        	.block	5313
 18214                        ;	FRESULT res;
 18215                        ;
 18216                        ;	for (;;)
  Fri Jul 16 2021 14:42                                                Page 352


 18217             00000000   res_1	set	0
 18218                        	.sym	res,0,5,1,16
 18219                        	.sym	dp,4,138,6,32,52
 18220                        	.sym	fno,8,138,6,32,53
 18221                        	.line	5316
 18222                        L10382:
 18223                        ;	{
 18224                        	.line	5317
 18225                        ;		res = f_readdir(dp, fno); /* Get a direc
                    tory item */
 18226                        	.line	5318
 18227 0B:8595: D4 10        	pei	<L720+fno_0+2
 18228 0B:8597: D4 0E        	pei	<L720+fno_0
 18229 0B:8599: D4 0C        	pei	<L720+dp_0+2
 18230 0B:859B: D4 0A        	pei	<L720+dp_0
 18231 0B:859D: 22 F6 84 0B  	jsl	~~f_readdir
 18232 0B:85A1: 85 05        	sta	<L721+res_1
 18233                        ;		if (res != FR_OK || !fno || !fno->fname[
                    0]) break; /* Terminate if any error or end of directory */
 18234                        	.line	5319
 18235 0B:85A3: A5 05        	lda	<L721+res_1
 18236 0B:85A5: F0 03        	beq	L723
 18237 0B:85A7: 82 48 00     	brl	L10381
 18238                        L723:
 18239 0B:85AA: A5 0E        	lda	<L720+fno_0
 18240 0B:85AC: 05 10        	ora	<L720+fno_0+2
 18241 0B:85AE: D0 03        	bne	L724
 18242 0B:85B0: 82 3F 00     	brl	L10381
 18243                        L724:
 18244 0B:85B3: A0 09 00     	ldy	#$9
 18245 0B:85B6: B7 0E        	lda	[<L720+fno_0],Y
 18246 0B:85B8: 29 FF 00     	and	#$ff
 18247 0B:85BB: D0 03        	bne	L725
 18248 0B:85BD: 82 32 00     	brl	L10381
 18249                        L725:
 18250                        ;		if (pattern_matching(dp->pat, fno->fname
                    , 0, 0)) break; /* Test for the file name */
 18251                        	.line	5320
 18252 0B:85C0: F4 00 00     	pea	#<$0
 18253 0B:85C3: F4 00 00     	pea	#<$0
 18254 0B:85C6: 18           	clc
 18255 0B:85C7: A9 09 00     	lda	#$9
 18256 0B:85CA: 65 0E        	adc	<L720+fno_0
 18257 0B:85CC: 85 01        	sta	<R0
 18258 0B:85CE: A9 00 00     	lda	#$0
 18259 0B:85D1: 65 10        	adc	<L720+fno_0+2
 18260 0B:85D3: 85 03        	sta	<R0+2
 18261 0B:85D5: D4 03        	pei	<R0+2
 18262 0B:85D7: D4 01        	pei	<R0
 18263 0B:85D9: A0 2E 00     	ldy	#$2e
 18264 0B:85DC: B7 0A        	lda	[<L720+dp_0],Y
 18265 0B:85DE: 48           	pha
 18266 0B:85DF: A0 2C 00     	ldy	#$2c
 18267 0B:85E2: B7 0A        	lda	[<L720+dp_0],Y
 18268 0B:85E4: 48           	pha
 18269 0B:85E5: 22 04 5D 0B  	jsl	~~pattern_matching
 18270 0B:85E9: AA           	tax
 18271 0B:85EA: F0 03        	beq	L726
  Fri Jul 16 2021 14:42                                                Page 353


 18272 0B:85EC: 82 03 00     	brl	L10381
 18273                        L726:
 18274                        ;#if FF_USE_LFN && FF_USE_FIND == 2
 18275                        ;		if (pattern_matching(dp->pat, fno->altna
                    me, 0, 0)) break; /* Test for alternative name if exist */
 18276                        ;#endif
 18277                        ;	}
 18278                        	.line	5324
 18279                        L10380:
 18280 0B:85EF: 82 A3 FF     	brl	L10382
 18281                        L10381:
 18282                        ;	return res;
 18283                        	.line	5325
 18284 0B:85F2: A5 05        	lda	<L721+res_1
 18285                        L727:
 18286 0B:85F4: A8           	tay
 18287 0B:85F5: A5 08        	lda	<L720+2
 18288 0B:85F7: 85 10        	sta	<L720+2+8
 18289 0B:85F9: A5 07        	lda	<L720+1
 18290 0B:85FB: 85 0F        	sta	<L720+1+8
 18291 0B:85FD: 2B           	pld
 18292 0B:85FE: 3B           	tsc
 18293 0B:85FF: 18           	clc
 18294 0B:8600: 69 0E 00     	adc	#L720+8
 18295 0B:8603: 1B           	tcs
 18296 0B:8604: 98           	tya
 18297 0B:8605: 6B           	rtl
 18298                        ;}
 18299                        	.line	5326
 18300                        	.endblock	5326
 18301             00000006   L720	equ	6
 18302             00000005   L721	equ	5
 18303 0B:8606:              	ends
 18304                        	efunc
 18305                        	.endfunc	5326,5,6
 18306                        	.line	5326
 18307                        ;
 18308                        ;/*-----------------------------------------------
                    ------------------------*/
 18309                        ;/* Find First File                               
                                            */
 18310                        ;/*-----------------------------------------------
                    ------------------------*/
 18311                        ;
 18312                        ;FRESULT f_findfirst (
 18313                        ;		DIR* dp, /* Pointer to the blank directo
                    ry object */
 18314                        ;		FILINFO* fno, /* Pointer to the file inf
                    ormation structure */
 18315                        ;		const TCHAR* path, /* Pointer to the dir
                    ectory to open */
 18316                        ;		const TCHAR* pattern /* Pointer to the m
                    atching pattern */
 18317                        ;)
 18318                        ;{
 18319                        	.line	5332
 18320                        	.line	5338
 18321                        	FFDOS
  Fri Jul 16 2021 14:42                                                Page 354


 18322                        	xdef	~~f_findfirst
 18323                        	func
 18324                        	.function	5338
 18325                        ~~f_findfirst:
 18326                        	longa	on
 18327                        	longi	on
 18328 0B:8606: 3B           	tsc
 18329 0B:8607: 38           	sec
 18330 0B:8608: E9 02 00     	sbc	#L728
 18331 0B:860B: 1B           	tcs
 18332 0B:860C: 0B           	phd
 18333 0B:860D: 5B           	tcd
 18334             00000004   dp_0	set	4
 18335             00000008   fno_0	set	8
 18336             0000000C   path_0	set	12
 18337             00000010   pattern_0	set	16
 18338                        	.block	5338
 18339                        ;	FRESULT res;
 18340                        ;
 18341                        ;	dp->pat = pattern; /* Save pointer to pattern st
                    ring */
 18342             00000000   res_1	set	0
 18343                        	.sym	res,0,5,1,16
 18344                        	.sym	dp,4,138,6,32,52
 18345                        	.sym	fno,8,138,6,32,53
 18346                        	.sym	path,12,142,6,32
 18347                        	.sym	pattern,16,142,6,32
 18348                        	.line	5341
 18349 0B:860E: A5 12        	lda	<L728+pattern_0
 18350 0B:8610: A0 2C 00     	ldy	#$2c
 18351 0B:8613: 97 06        	sta	[<L728+dp_0],Y
 18352 0B:8615: A5 14        	lda	<L728+pattern_0+2
 18353 0B:8617: A0 2E 00     	ldy	#$2e
 18354 0B:861A: 97 06        	sta	[<L728+dp_0],Y
 18355                        ;	res = f_opendir(dp, path); /* Open the target di
                    rectory */
 18356                        	.line	5342
 18357 0B:861C: D4 10        	pei	<L728+path_0+2
 18358 0B:861E: D4 0E        	pei	<L728+path_0
 18359 0B:8620: D4 08        	pei	<L728+dp_0+2
 18360 0B:8622: D4 06        	pei	<L728+dp_0
 18361 0B:8624: 22 B4 83 0B  	jsl	~~f_opendir
 18362 0B:8628: 85 01        	sta	<L729+res_1
 18363                        ;	if (res == FR_OK)
 18364                        	.line	5343
 18365                        ;	{
 18366 0B:862A: A5 01        	lda	<L729+res_1
 18367 0B:862C: F0 03        	beq	L731
 18368 0B:862E: 82 0E 00     	brl	L10383
 18369                        L731:
 18370                        	.line	5344
 18371                        ;		res = f_findnext(dp, fno); /* Find the f
                    irst item */
 18372                        	.line	5345
 18373 0B:8631: D4 0C        	pei	<L728+fno_0+2
 18374 0B:8633: D4 0A        	pei	<L728+fno_0
 18375 0B:8635: D4 08        	pei	<L728+dp_0+2
 18376 0B:8637: D4 06        	pei	<L728+dp_0
  Fri Jul 16 2021 14:42                                                Page 355


 18377 0B:8639: 22 8D 85 0B  	jsl	~~f_findnext
 18378 0B:863D: 85 01        	sta	<L729+res_1
 18379                        ;	}
 18380                        	.line	5346
 18381                        ;	return res;
 18382                        L10383:
 18383                        	.line	5347
 18384 0B:863F: A5 01        	lda	<L729+res_1
 18385                        L732:
 18386 0B:8641: A8           	tay
 18387 0B:8642: A5 04        	lda	<L728+2
 18388 0B:8644: 85 14        	sta	<L728+2+16
 18389 0B:8646: A5 03        	lda	<L728+1
 18390 0B:8648: 85 13        	sta	<L728+1+16
 18391 0B:864A: 2B           	pld
 18392 0B:864B: 3B           	tsc
 18393 0B:864C: 18           	clc
 18394 0B:864D: 69 12 00     	adc	#L728+16
 18395 0B:8650: 1B           	tcs
 18396 0B:8651: 98           	tya
 18397 0B:8652: 6B           	rtl
 18398                        ;}
 18399                        	.line	5348
 18400                        	.endblock	5348
 18401             00000002   L728	equ	2
 18402             00000001   L729	equ	1
 18403 0B:8653:              	ends
 18404                        	efunc
 18405                        	.endfunc	5348,1,2
 18406                        	.line	5348
 18407                        ;
 18408                        ;#endif	/* FF_USE_FIND */
 18409                        ;
 18410                        ;#if FF_FS_MINIMIZE == 0
 18411                        ;/*-----------------------------------------------
                    ------------------------*/
 18412                        ;/* Get File Status                               
                                            */
 18413                        ;/*-----------------------------------------------
                    ------------------------*/
 18414                        ;
 18415                        ;FRESULT f_stat(const TCHAR* path, /* Pointer to t
                    he file path */
 18416                        ;FILINFO* fno /* Pointer to file information to re
                    turn */
 18417                        ;)
 18418                        ;{
 18419                        	.line	5357
 18420                        	.line	5360
 18421                        	FFDOS
 18422                        	xdef	~~f_stat
 18423                        	func
 18424                        	.function	5360
 18425                        ~~f_stat:
 18426                        	longa	on
 18427                        	longi	on
 18428 0B:8653: 3B           	tsc
 18429 0B:8654: 38           	sec
  Fri Jul 16 2021 14:42                                                Page 356


 18430 0B:8655: E9 32 00     	sbc	#L733
 18431 0B:8658: 1B           	tcs
 18432 0B:8659: 0B           	phd
 18433 0B:865A: 5B           	tcd
 18434             00000004   path_0	set	4
 18435             00000008   fno_0	set	8
 18436                        	.block	5360
 18437                        ;	FRESULT res;
 18438                        ;	DIR dj;
 18439                        ;	DEF_NAMBUF
 18440                        ;
 18441                        ;	/* Get logical drive */
 18442                        ;	res = mount_volume(&path, &dj.obj.fs, 0);
 18443             00000000   res_1	set	0
 18444             00000002   dj_1	set	2
 18445                        	.sym	res,0,5,1,16
 18446                        	.sym	dj,2,10,1,384,52
 18447                        	.sym	path,4,142,6,32
 18448                        	.sym	fno,8,138,6,32,53
 18449                        	.line	5366
 18450 0B:865B: F4 00 00     	pea	#<$0
 18451 0B:865E: F4 00 00     	pea	#0
 18452 0B:8661: 18           	clc
 18453 0B:8662: 7B           	tdc
 18454 0B:8663: 69 03 00     	adc	#<L734+dj_1
 18455 0B:8666: 48           	pha
 18456 0B:8667: F4 00 00     	pea	#0
 18457 0B:866A: 18           	clc
 18458 0B:866B: 7B           	tdc
 18459 0B:866C: 69 36 00     	adc	#<L733+path_0
 18460 0B:866F: 48           	pha
 18461 0B:8670: 22 F6 66 0B  	jsl	~~mount_volume
 18462 0B:8674: 85 01        	sta	<L734+res_1
 18463                        ;	if (res == FR_OK)
 18464                        	.line	5367
 18465                        ;	{
 18466 0B:8676: A5 01        	lda	<L734+res_1
 18467 0B:8678: F0 03        	beq	L736
 18468 0B:867A: 82 49 00     	brl	L10384
 18469                        L736:
 18470                        	.line	5368
 18471                        ;		INIT_NAMBUF(dj.obj.fs);
 18472                        	.line	5369
 18473                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 18474                        	.line	5370
 18475 0B:867D: D4 38        	pei	<L733+path_0+2
 18476 0B:867F: D4 36        	pei	<L733+path_0
 18477 0B:8681: F4 00 00     	pea	#0
 18478 0B:8684: 18           	clc
 18479 0B:8685: 7B           	tdc
 18480 0B:8686: 69 03 00     	adc	#<L734+dj_1
 18481 0B:8689: 48           	pha
 18482 0B:868A: 22 73 60 0B  	jsl	~~follow_path
 18483 0B:868E: 85 01        	sta	<L734+res_1
 18484                        ;		if (res == FR_OK)
 18485                        	.line	5371
 18486                        ;		{ /* Follow completed */
  Fri Jul 16 2021 14:42                                                Page 357


 18487 0B:8690: A5 01        	lda	<L734+res_1
 18488 0B:8692: F0 03        	beq	L737
 18489 0B:8694: 82 2F 00     	brl	L10385
 18490                        L737:
 18491                        	.line	5372
 18492                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 18493                        	.line	5373
 18494                        ;			{ /* It is origin directory */
 18495 0B:8697: E2 20        	sep	#$20
 18496                        	longa	off
 18497 0B:8699: A5 2E        	lda	<L734+dj_1+43
 18498 0B:869B: 29 80        	and	#<$80
 18499 0B:869D: C2 20        	rep	#$20
 18500                        	longa	on
 18501 0B:869F: D0 03        	bne	L738
 18502 0B:86A1: 82 08 00     	brl	L10386
 18503                        L738:
 18504                        	.line	5374
 18505                        ;				res = FR_INVALID_NAME;
 18506                        	.line	5375
 18507 0B:86A4: A9 06 00     	lda	#$6
 18508 0B:86A7: 85 01        	sta	<L734+res_1
 18509                        ;			}
 18510                        	.line	5376
 18511                        ;			else
 18512 0B:86A9: 82 1A 00     	brl	L10387
 18513                        L10386:
 18514                        ;			{ /* Found an object */
 18515                        	.line	5378
 18516                        ;				if (fno)
 18517                        	.line	5379
 18518                        ;					get_fileinfo(&dj
                    , fno);
 18519 0B:86AC: A5 3A        	lda	<L733+fno_0
 18520 0B:86AE: 05 3C        	ora	<L733+fno_0+2
 18521 0B:86B0: D0 03        	bne	L739
 18522 0B:86B2: 82 11 00     	brl	L10388
 18523                        L739:
 18524                        	.line	5380
 18525 0B:86B5: D4 3C        	pei	<L733+fno_0+2
 18526 0B:86B7: D4 3A        	pei	<L733+fno_0
 18527 0B:86B9: F4 00 00     	pea	#0
 18528 0B:86BC: 18           	clc
 18529 0B:86BD: 7B           	tdc
 18530 0B:86BE: 69 03 00     	adc	#<L734+dj_1
 18531 0B:86C1: 48           	pha
 18532 0B:86C2: 22 14 5B 0B  	jsl	~~get_fileinfo
 18533                        ;			}
 18534                        L10388:
 18535                        	.line	5381
 18536                        L10387:
 18537                        ;		} FREE_NAMBUF();
 18538                        	.line	5382
 18539                        L10385:
 18540                        	.line	5382
 18541                        ;	}
 18542                        	.line	5383
 18543                        ;
  Fri Jul 16 2021 14:42                                                Page 358


 18544                        ;	LEAVE_FF(dj.obj.fs, res);
 18545                        L10384:
 18546                        	.line	5385
 18547 0B:86C6: A5 01        	lda	<L734+res_1
 18548                        L740:
 18549 0B:86C8: A8           	tay
 18550 0B:86C9: A5 34        	lda	<L733+2
 18551 0B:86CB: 85 3C        	sta	<L733+2+8
 18552 0B:86CD: A5 33        	lda	<L733+1
 18553 0B:86CF: 85 3B        	sta	<L733+1+8
 18554 0B:86D1: 2B           	pld
 18555 0B:86D2: 3B           	tsc
 18556 0B:86D3: 18           	clc
 18557 0B:86D4: 69 3A 00     	adc	#L733+8
 18558 0B:86D7: 1B           	tcs
 18559 0B:86D8: 98           	tya
 18560 0B:86D9: 6B           	rtl
 18561                        ;}
 18562                        	.line	5386
 18563                        	.endblock	5386
 18564             00000032   L733	equ	50
 18565             00000001   L734	equ	1
 18566 0B:86DA:              	ends
 18567                        	efunc
 18568                        	.endfunc	5386,1,50
 18569                        	.line	5386
 18570                        ;
 18571                        ;#if !FF_FS_READONLY
 18572                        ;/*-----------------------------------------------
                    ------------------------*/
 18573                        ;/* Get Number of Free Clusters                   
                                            */
 18574                        ;/*-----------------------------------------------
                    ------------------------*/
 18575                        ;
 18576                        ;FRESULT f_getfree(const TCHAR* path, /* Logical d
                    rive number */
 18577                        ;DWORD* nclst, /* Pointer to a variable to return 
                    number of free clusters */
 18578                        ;FATFS** fatfs /* Pointer to return pointer to cor
                    responding filesystem object */
 18579                        ;)
 18580                        ;{
 18581                        	.line	5393
 18582                        	.line	5397
 18583                        	FFDOS
 18584                        	xdef	~~f_getfree
 18585                        	func
 18586                        	.function	5397
 18587                        ~~f_getfree:
 18588                        	longa	on
 18589                        	longi	on
 18590 0B:86DA: 3B           	tsc
 18591 0B:86DB: 38           	sec
 18592 0B:86DC: E9 38 00     	sbc	#L741
 18593 0B:86DF: 1B           	tcs
 18594 0B:86E0: 0B           	phd
 18595 0B:86E1: 5B           	tcd
  Fri Jul 16 2021 14:42                                                Page 359


 18596             00000004   path_0	set	4
 18597             00000008   nclst_0	set	8
 18598             0000000C   fatfs_0	set	12
 18599                        	.block	5397
 18600                        ;	FRESULT res;
 18601                        ;	FATFS *fs;
 18602                        ;	DWORD nfree, clst, stat;
 18603                        ;	LBA_t sect;
 18604                        ;	UINT i;
 18605                        ;	FFOBJID obj;
 18606                        ;
 18607                        ;	/* Get logical drive */
 18608                        ;	res = mount_volume(&path, &fs, 0);
 18609             00000000   res_1	set	0
 18610             00000002   fs_1	set	2
 18611             00000006   nfree_1	set	6
 18612             0000000A   clst_1	set	10
 18613             0000000E   stat_1	set	14
 18614             00000012   sect_1	set	18
 18615             00000016   i_1	set	22
 18616             00000018   obj_1	set	24
 18617                        	.sym	res,0,5,1,16
 18618                        	.sym	fs,2,138,1,32,49
 18619                        	.sym	nfree,6,18,1,32
 18620                        	.sym	clst,10,18,1,32
 18621                        	.sym	stat,14,18,1,32
 18622                        	.sym	sect,18,18,1,32
 18623                        	.sym	i,22,16,1,16
 18624                        	.sym	obj,24,10,1,128,50
 18625                        	.sym	path,4,142,6,32
 18626                        	.sym	nclst,8,146,6,32
 18627                        	.sym	fatfs,12,1162,6,32,49
 18628                        	.line	5406
 18629 0B:86E2: F4 00 00     	pea	#<$0
 18630 0B:86E5: F4 00 00     	pea	#0
 18631 0B:86E8: 18           	clc
 18632 0B:86E9: 7B           	tdc
 18633 0B:86EA: 69 13 00     	adc	#<L742+fs_1
 18634 0B:86ED: 48           	pha
 18635 0B:86EE: F4 00 00     	pea	#0
 18636 0B:86F1: 18           	clc
 18637 0B:86F2: 7B           	tdc
 18638 0B:86F3: 69 3C 00     	adc	#<L741+path_0
 18639 0B:86F6: 48           	pha
 18640 0B:86F7: 22 F6 66 0B  	jsl	~~mount_volume
 18641 0B:86FB: 85 11        	sta	<L742+res_1
 18642                        ;	if (res == FR_OK)
 18643                        	.line	5407
 18644                        ;	{
 18645 0B:86FD: A5 11        	lda	<L742+res_1
 18646 0B:86FF: F0 03        	beq	L744
 18647 0B:8701: 82 06 02     	brl	L10389
 18648                        L744:
 18649                        	.line	5408
 18650                        ;		*fatfs = fs; /* Return ptr to the fs obj
                    ect */
 18651                        	.line	5409
 18652 0B:8704: A5 13        	lda	<L742+fs_1
  Fri Jul 16 2021 14:42                                                Page 360


 18653 0B:8706: 87 44        	sta	[<L741+fatfs_0]
 18654 0B:8708: A5 15        	lda	<L742+fs_1+2
 18655 0B:870A: A0 02 00     	ldy	#$2
 18656 0B:870D: 97 44        	sta	[<L741+fatfs_0],Y
 18657                        ;		/* If free_clst is valid, return it with
                    out full FAT scan */
 18658                        ;		if (fs->free_clst <= fs->n_fatent - 2)
 18659                        	.line	5411
 18660                        ;		{
 18661 0B:870F: 18           	clc
 18662 0B:8710: A9 FE FF     	lda	#$fffe
 18663 0B:8713: A0 13 00     	ldy	#$13
 18664 0B:8716: 77 13        	adc	[<L742+fs_1],Y
 18665 0B:8718: 85 01        	sta	<R0
 18666 0B:871A: A9 FF FF     	lda	#$ffff
 18667 0B:871D: A0 15 00     	ldy	#$15
 18668 0B:8720: 77 13        	adc	[<L742+fs_1],Y
 18669 0B:8722: 85 03        	sta	<R0+2
 18670 0B:8724: A5 01        	lda	<R0
 18671 0B:8726: A0 0F 00     	ldy	#$f
 18672 0B:8729: D7 13        	cmp	[<L742+fs_1],Y
 18673 0B:872B: A5 03        	lda	<R0+2
 18674 0B:872D: A0 11 00     	ldy	#$11
 18675 0B:8730: F7 13        	sbc	[<L742+fs_1],Y
 18676 0B:8732: B0 03        	bcs	L745
 18677 0B:8734: 82 14 00     	brl	L10390
 18678                        L745:
 18679                        	.line	5412
 18680                        ;			*nclst = fs->free_clst;
 18681                        	.line	5413
 18682 0B:8737: A0 0F 00     	ldy	#$f
 18683 0B:873A: B7 13        	lda	[<L742+fs_1],Y
 18684 0B:873C: 87 40        	sta	[<L741+nclst_0]
 18685 0B:873E: A0 11 00     	ldy	#$11
 18686 0B:8741: B7 13        	lda	[<L742+fs_1],Y
 18687 0B:8743: A0 02 00     	ldy	#$2
 18688 0B:8746: 97 40        	sta	[<L741+nclst_0],Y
 18689                        ;		}
 18690                        	.line	5414
 18691                        ;		else
 18692 0B:8748: 82 BF 01     	brl	L10391
 18693                        L10390:
 18694                        ;		{
 18695                        	.line	5416
 18696                        ;			/* Scan FAT to obtain number of 
                    free clusters */
 18697                        ;			nfree = 0;
 18698                        	.line	5418
 18699 0B:874B: 64 17        	stz	<L742+nfree_1
 18700 0B:874D: 64 19        	stz	<L742+nfree_1+2
 18701                        ;			if (fs->fs_type == FS_FAT12)
 18702                        	.line	5419
 18703                        ;			{ /* FAT12: Scan bit field FAT e
                    ntries */
 18704 0B:874F: E2 20        	sep	#$20
 18705                        	longa	off
 18706 0B:8751: A7 13        	lda	[<L742+fs_1]
 18707 0B:8753: C9 01        	cmp	#<$1
  Fri Jul 16 2021 14:42                                                Page 361


 18708 0B:8755: C2 20        	rep	#$20
 18709                        	longa	on
 18710 0B:8757: F0 03        	beq	L746
 18711 0B:8759: 82 84 00     	brl	L10392
 18712                        L746:
 18713                        	.line	5420
 18714                        ;				clst = 2;
 18715                        	.line	5421
 18716 0B:875C: A9 02 00     	lda	#$2
 18717 0B:875F: 85 1B        	sta	<L742+clst_1
 18718 0B:8761: A9 00 00     	lda	#$0
 18719 0B:8764: 85 1D        	sta	<L742+clst_1+2
 18720                        ;				obj.fs = fs;
 18721                        	.line	5422
 18722 0B:8766: A5 13        	lda	<L742+fs_1
 18723 0B:8768: 85 29        	sta	<L742+obj_1
 18724 0B:876A: A5 15        	lda	<L742+fs_1+2
 18725 0B:876C: 85 2B        	sta	<L742+obj_1+2
 18726                        ;				do
 18727                        	.line	5423
 18728                        L10395:
 18729                        ;				{
 18730                        	.line	5424
 18731                        ;					stat = get_fat(&
                    obj, clst);
 18732                        	.line	5425
 18733 0B:876E: D4 1D        	pei	<L742+clst_1+2
 18734 0B:8770: D4 1B        	pei	<L742+clst_1
 18735 0B:8772: F4 00 00     	pea	#0
 18736 0B:8775: 18           	clc
 18737 0B:8776: 7B           	tdc
 18738 0B:8777: 69 29 00     	adc	#<L742+obj_1
 18739 0B:877A: 48           	pha
 18740 0B:877B: 22 0D 46 0B  	jsl	~~get_fat
 18741 0B:877F: 85 1F        	sta	<L742+stat_1
 18742 0B:8781: 86 21        	stx	<L742+stat_1+2
 18743                        ;					if (stat == 0xFF
                    FFFFFF)
 18744                        	.line	5426
 18745                        ;					{
 18746 0B:8783: A5 1F        	lda	<L742+stat_1
 18747 0B:8785: C9 FF FF     	cmp	#<$ffffffff
 18748 0B:8788: D0 05        	bne	L747
 18749 0B:878A: A5 21        	lda	<L742+stat_1+2
 18750 0B:878C: C9 FF FF     	cmp	#^$ffffffff
 18751                        L747:
 18752 0B:878F: F0 03        	beq	L748
 18753 0B:8791: 82 08 00     	brl	L10396
 18754                        L748:
 18755                        	.line	5427
 18756                        ;						res = FR
                    _DISK_ERR;
 18757                        	.line	5428
 18758 0B:8794: A9 01 00     	lda	#$1
 18759 0B:8797: 85 11        	sta	<L742+res_1
 18760                        ;						break;
 18761                        	.line	5429
 18762 0B:8799: 82 41 00     	brl	L10394
  Fri Jul 16 2021 14:42                                                Page 362


 18763                        ;					}
 18764                        	.line	5430
 18765                        ;					if (stat == 1)
 18766                        L10396:
 18767                        	.line	5431
 18768                        ;					{
 18769 0B:879C: A5 1F        	lda	<L742+stat_1
 18770 0B:879E: C9 01 00     	cmp	#<$1
 18771 0B:87A1: D0 05        	bne	L749
 18772 0B:87A3: A5 21        	lda	<L742+stat_1+2
 18773 0B:87A5: C9 00 00     	cmp	#^$1
 18774                        L749:
 18775 0B:87A8: F0 03        	beq	L750
 18776 0B:87AA: 82 08 00     	brl	L10397
 18777                        L750:
 18778                        	.line	5432
 18779                        ;						res = FR
                    _INT_ERR;
 18780                        	.line	5433
 18781 0B:87AD: A9 02 00     	lda	#$2
 18782 0B:87B0: 85 11        	sta	<L742+res_1
 18783                        ;						break;
 18784                        	.line	5434
 18785 0B:87B2: 82 28 00     	brl	L10394
 18786                        ;					}
 18787                        	.line	5435
 18788                        ;					if (stat == 0)
 18789                        L10397:
 18790                        	.line	5436
 18791                        ;						nfree++;
 18792 0B:87B5: A5 1F        	lda	<L742+stat_1
 18793 0B:87B7: 05 21        	ora	<L742+stat_1+2
 18794 0B:87B9: F0 03        	beq	L751
 18795 0B:87BB: 82 06 00     	brl	L10398
 18796                        L751:
 18797                        	.line	5437
 18798 0B:87BE: E6 17        	inc	<L742+nfree_1
 18799 0B:87C0: D0 02        	bne	L752
 18800 0B:87C2: E6 19        	inc	<L742+nfree_1+2
 18801                        L752:
 18802                        ;				} while (++clst < fs->n_
                    fatent);
 18803                        L10398:
 18804                        	.line	5438
 18805                        L10393:
 18806 0B:87C4: E6 1B        	inc	<L742+clst_1
 18807 0B:87C6: D0 02        	bne	L753
 18808 0B:87C8: E6 1D        	inc	<L742+clst_1+2
 18809                        L753:
 18810 0B:87CA: A5 1B        	lda	<L742+clst_1
 18811 0B:87CC: A0 13 00     	ldy	#$13
 18812 0B:87CF: D7 13        	cmp	[<L742+fs_1],Y
 18813 0B:87D1: A5 1D        	lda	<L742+clst_1+2
 18814 0B:87D3: A0 15 00     	ldy	#$15
 18815 0B:87D6: F7 13        	sbc	[<L742+fs_1],Y
 18816 0B:87D8: B0 03        	bcs	L754
 18817 0B:87DA: 82 91 FF     	brl	L10395
 18818                        L754:
  Fri Jul 16 2021 14:42                                                Page 363


 18819                        L10394:
 18820                        ;			}
 18821                        	.line	5439
 18822                        ;			else
 18823 0B:87DD: 82 F8 00     	brl	L10399
 18824                        L10392:
 18825                        ;			{
 18826                        	.line	5441
 18827                        ;#if FF_FS_EXFAT
 18828                        ;				if (fs->fs_type == FS_EX
                    FAT)
 18829                        ;				{ /* exFAT: Scan allocat
                    ion bitmap */
 18830                        ;					BYTE bm;
 18831                        ;					UINT b;
 18832                        ;
 18833                        ;					clst = fs->n_fat
                    ent - 2; /* Number of clusters */
 18834                        ;					sect = fs->bitba
                    se; /* Bitmap sector */
 18835                        ;					i = 0; /* Offset
                     in the sector */
 18836                        ;					do
 18837                        ;					{ /* Counts numb
                    uer of bits with zero in the bitmap */
 18838                        ;						if (i ==
                     0)
 18839                        ;						{
 18840                        ;							
                    res = move_window(fs, sect++);
 18841                        ;							
                    if (res != FR_OK) break;
 18842                        ;						}
 18843                        ;						for (b =
                     8, bm = fs->win[i]; b && clst; b--, clst--)
 18844                        ;						{
 18845                        ;							
                    if (!(bm & 1)) nfree++;
 18846                        ;							
                    bm >>= 1;
 18847                        ;						}
 18848                        ;						i = (i +
                     1) % SS(fs);
 18849                        ;					}while (clst);
 18850                        ;				}
 18851                        ;				else
 18852                        ;#endif
 18853                        ;				{ /* FAT16/32: Scan WORD
                    /DWORD FAT entries */
 18854                        	.line	5468
 18855                        ;					clst = fs->n_fat
                    ent; /* Number of entries */
 18856                        	.line	5469
 18857 0B:87E0: A0 13 00     	ldy	#$13
 18858 0B:87E3: B7 13        	lda	[<L742+fs_1],Y
 18859 0B:87E5: 85 1B        	sta	<L742+clst_1
 18860 0B:87E7: A0 15 00     	ldy	#$15
 18861 0B:87EA: B7 13        	lda	[<L742+fs_1],Y
  Fri Jul 16 2021 14:42                                                Page 364


 18862 0B:87EC: 85 1D        	sta	<L742+clst_1+2
 18863                        ;					sect = fs->fatba
                    se; /* Top of the FAT */
 18864                        	.line	5470
 18865 0B:87EE: A0 1F 00     	ldy	#$1f
 18866 0B:87F1: B7 13        	lda	[<L742+fs_1],Y
 18867 0B:87F3: 85 23        	sta	<L742+sect_1
 18868 0B:87F5: A0 21 00     	ldy	#$21
 18869 0B:87F8: B7 13        	lda	[<L742+fs_1],Y
 18870 0B:87FA: 85 25        	sta	<L742+sect_1+2
 18871                        ;					i = 0; /* Offset
                     in the sector */
 18872                        	.line	5471
 18873 0B:87FC: 64 27        	stz	<L742+i_1
 18874                        ;					do
 18875                        	.line	5472
 18876                        L10402:
 18877                        ;					{ /* Counts numb
                    uer of entries with zero in the FAT */
 18878                        	.line	5473
 18879                        ;						if (i ==
                     0)
 18880                        	.line	5474
 18881                        ;						{
 18882 0B:87FE: A5 27        	lda	<L742+i_1
 18883 0B:8800: F0 03        	beq	L755
 18884 0B:8802: 82 23 00     	brl	L10403
 18885                        L755:
 18886                        	.line	5475
 18887                        ;							
                    res = move_window(fs, sect++);
 18888                        	.line	5476
 18889 0B:8805: A5 23        	lda	<L742+sect_1
 18890 0B:8807: 85 01        	sta	<R0
 18891 0B:8809: A5 25        	lda	<L742+sect_1+2
 18892 0B:880B: 85 03        	sta	<R0+2
 18893 0B:880D: E6 23        	inc	<L742+sect_1
 18894 0B:880F: D0 02        	bne	L756
 18895 0B:8811: E6 25        	inc	<L742+sect_1+2
 18896                        L756:
 18897 0B:8813: D4 03        	pei	<R0+2
 18898 0B:8815: D4 01        	pei	<R0
 18899 0B:8817: D4 15        	pei	<L742+fs_1+2
 18900 0B:8819: D4 13        	pei	<L742+fs_1
 18901 0B:881B: 22 7A 43 0B  	jsl	~~move_window
 18902 0B:881F: 85 11        	sta	<L742+res_1
 18903                        ;							
                    if (res != FR_OK)
 18904                        	.line	5477
 18905                        ;							
                    	break;
 18906 0B:8821: A5 11        	lda	<L742+res_1
 18907 0B:8823: F0 03        	beq	L757
 18908 0B:8825: 82 B0 00     	brl	L10401
 18909                        L757:
 18910                        ;						}
 18911                        	.line	5479
 18912                        ;						if (fs->
  Fri Jul 16 2021 14:42                                                Page 365


                    fs_type == FS_FAT16)
 18913                        L10403:
 18914                        	.line	5480
 18915                        ;						{
 18916 0B:8828: E2 20        	sep	#$20
 18917                        	longa	off
 18918 0B:882A: A7 13        	lda	[<L742+fs_1]
 18919 0B:882C: C9 02        	cmp	#<$2
 18920 0B:882E: C2 20        	rep	#$20
 18921                        	longa	on
 18922 0B:8830: F0 03        	beq	L758
 18923 0B:8832: 82 3D 00     	brl	L10404
 18924                        L758:
 18925                        	.line	5481
 18926                        ;							
                    if (ld_word(fs->win + i) == 0)
 18927                        	.line	5482
 18928                        ;							
                    	nfree++;
 18929 0B:8835: A5 27        	lda	<L742+i_1
 18930 0B:8837: 85 01        	sta	<R0
 18931 0B:8839: 64 03        	stz	<R0+2
 18932 0B:883B: 18           	clc
 18933 0B:883C: A9 2F 00     	lda	#$2f
 18934 0B:883F: 65 01        	adc	<R0
 18935 0B:8841: 85 05        	sta	<R1
 18936 0B:8843: A9 00 00     	lda	#$0
 18937 0B:8846: 65 03        	adc	<R0+2
 18938 0B:8848: 85 07        	sta	<R1+2
 18939 0B:884A: 18           	clc
 18940 0B:884B: A5 13        	lda	<L742+fs_1
 18941 0B:884D: 65 05        	adc	<R1
 18942 0B:884F: 85 01        	sta	<R0
 18943 0B:8851: A5 15        	lda	<L742+fs_1+2
 18944 0B:8853: 65 07        	adc	<R1+2
 18945 0B:8855: 85 03        	sta	<R0+2
 18946 0B:8857: D4 03        	pei	<R0+2
 18947 0B:8859: D4 01        	pei	<R0
 18948 0B:885B: 22 80 3F 0B  	jsl	~~ld_word
 18949 0B:885F: AA           	tax
 18950 0B:8860: F0 03        	beq	L759
 18951 0B:8862: 82 06 00     	brl	L10405
 18952                        L759:
 18953                        	.line	5483
 18954 0B:8865: E6 17        	inc	<L742+nfree_1
 18955 0B:8867: D0 02        	bne	L760
 18956 0B:8869: E6 19        	inc	<L742+nfree_1+2
 18957                        L760:
 18958                        ;							
                    i += 2;
 18959                        L10405:
 18960                        	.line	5484
 18961 0B:886B: E6 27        	inc	<L742+i_1
 18962 0B:886D: E6 27        	inc	<L742+i_1
 18963                        ;						}
 18964                        	.line	5485
 18965                        ;						else
 18966 0B:886F: 82 50 00     	brl	L10406
  Fri Jul 16 2021 14:42                                                Page 366


 18967                        L10404:
 18968                        ;						{
 18969                        	.line	5487
 18970                        ;							
                    if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0)
 18971                        	.line	5488
 18972                        ;							
                    	nfree++;
 18973 0B:8872: A5 27        	lda	<L742+i_1
 18974 0B:8874: 85 01        	sta	<R0
 18975 0B:8876: 64 03        	stz	<R0+2
 18976 0B:8878: 18           	clc
 18977 0B:8879: A9 2F 00     	lda	#$2f
 18978 0B:887C: 65 01        	adc	<R0
 18979 0B:887E: 85 05        	sta	<R1
 18980 0B:8880: A9 00 00     	lda	#$0
 18981 0B:8883: 65 03        	adc	<R0+2
 18982 0B:8885: 85 07        	sta	<R1+2
 18983 0B:8887: 18           	clc
 18984 0B:8888: A5 13        	lda	<L742+fs_1
 18985 0B:888A: 65 05        	adc	<R1
 18986 0B:888C: 85 01        	sta	<R0
 18987 0B:888E: A5 15        	lda	<L742+fs_1+2
 18988 0B:8890: 65 07        	adc	<R1+2
 18989 0B:8892: 85 03        	sta	<R0+2
 18990 0B:8894: D4 03        	pei	<R0+2
 18991 0B:8896: D4 01        	pei	<R0
 18992 0B:8898: 22 BB 3F 0B  	jsl	~~ld_dword
 18993 0B:889C: 85 09        	sta	<R2
 18994 0B:889E: 86 0B        	stx	<R2+2
 18995 0B:88A0: A5 09        	lda	<R2
 18996 0B:88A2: 85 0D        	sta	<R3
 18997 0B:88A4: A5 0B        	lda	<R2+2
 18998 0B:88A6: 29 FF 0F     	and	#^$fffffff
 18999 0B:88A9: 85 0F        	sta	<R3+2
 19000 0B:88AB: A5 0D        	lda	<R3
 19001 0B:88AD: 05 0F        	ora	<R3+2
 19002 0B:88AF: F0 03        	beq	L761
 19003 0B:88B1: 82 06 00     	brl	L10407
 19004                        L761:
 19005                        	.line	5489
 19006 0B:88B4: E6 17        	inc	<L742+nfree_1
 19007 0B:88B6: D0 02        	bne	L762
 19008 0B:88B8: E6 19        	inc	<L742+nfree_1+2
 19009                        L762:
 19010                        ;							
                    i += 4;
 19011                        L10407:
 19012                        	.line	5490
 19013 0B:88BA: 18           	clc
 19014 0B:88BB: A9 04 00     	lda	#$4
 19015 0B:88BE: 65 27        	adc	<L742+i_1
 19016 0B:88C0: 85 27        	sta	<L742+i_1
 19017                        ;						}
 19018                        	.line	5491
 19019                        L10406:
 19020                        ;						i %= SS(
                    fs);
  Fri Jul 16 2021 14:42                                                Page 367


 19021                        	.line	5492
 19022 0B:88C2: A9 00 FE     	lda	#$fe00
 19023 0B:88C5: 14 27        	trb	<L742+i_1
 19024                        ;					} while (--clst)
                    ;
 19025                        	.line	5493
 19026                        L10400:
 19027 0B:88C7: A5 1B        	lda	<L742+clst_1
 19028 0B:88C9: D0 02        	bne	L763
 19029 0B:88CB: C6 1D        	dec	<L742+clst_1+2
 19030                        L763:
 19031 0B:88CD: C6 1B        	dec	<L742+clst_1
 19032 0B:88CF: A5 1B        	lda	<L742+clst_1
 19033 0B:88D1: 05 1D        	ora	<L742+clst_1+2
 19034 0B:88D3: F0 03        	beq	L764
 19035 0B:88D5: 82 26 FF     	brl	L10402
 19036                        L764:
 19037                        L10401:
 19038                        ;				}
 19039                        	.line	5494
 19040                        ;			}
 19041                        	.line	5495
 19042                        L10399:
 19043                        ;			*nclst = nfree; /* Return the fr
                    ee clusters */
 19044                        	.line	5496
 19045 0B:88D8: A5 17        	lda	<L742+nfree_1
 19046 0B:88DA: 87 40        	sta	[<L741+nclst_0]
 19047 0B:88DC: A5 19        	lda	<L742+nfree_1+2
 19048 0B:88DE: A0 02 00     	ldy	#$2
 19049 0B:88E1: 97 40        	sta	[<L741+nclst_0],Y
 19050                        ;			fs->free_clst = nfree; /* Now fr
                    ee_clst is valid */
 19051                        	.line	5497
 19052 0B:88E3: A5 17        	lda	<L742+nfree_1
 19053 0B:88E5: A0 0F 00     	ldy	#$f
 19054 0B:88E8: 97 13        	sta	[<L742+fs_1],Y
 19055 0B:88EA: A5 19        	lda	<L742+nfree_1+2
 19056 0B:88EC: A0 11 00     	ldy	#$11
 19057 0B:88EF: 97 13        	sta	[<L742+fs_1],Y
 19058                        ;			fs->fsi_flag |= 1; /* FAT32: FSI
                    nfo is to be updated */
 19059                        	.line	5498
 19060 0B:88F1: 18           	clc
 19061 0B:88F2: A9 04 00     	lda	#$4
 19062 0B:88F5: 65 13        	adc	<L742+fs_1
 19063 0B:88F7: 85 01        	sta	<R0
 19064 0B:88F9: A9 00 00     	lda	#$0
 19065 0B:88FC: 65 15        	adc	<L742+fs_1+2
 19066 0B:88FE: 85 03        	sta	<R0+2
 19067 0B:8900: E2 20        	sep	#$20
 19068                        	longa	off
 19069 0B:8902: A7 01        	lda	[<R0]
 19070 0B:8904: 09 01        	ora	#<$1
 19071 0B:8906: 87 01        	sta	[<R0]
 19072 0B:8908: C2 20        	rep	#$20
 19073                        	longa	on
 19074                        ;		}
  Fri Jul 16 2021 14:42                                                Page 368


 19075                        	.line	5499
 19076                        L10391:
 19077                        ;	}
 19078                        	.line	5500
 19079                        ;
 19080                        ;	LEAVE_FF(fs, res);
 19081                        L10389:
 19082                        	.line	5502
 19083 0B:890A: A5 11        	lda	<L742+res_1
 19084                        L765:
 19085 0B:890C: A8           	tay
 19086 0B:890D: A5 3A        	lda	<L741+2
 19087 0B:890F: 85 46        	sta	<L741+2+12
 19088 0B:8911: A5 39        	lda	<L741+1
 19089 0B:8913: 85 45        	sta	<L741+1+12
 19090 0B:8915: 2B           	pld
 19091 0B:8916: 3B           	tsc
 19092 0B:8917: 18           	clc
 19093 0B:8918: 69 44 00     	adc	#L741+12
 19094 0B:891B: 1B           	tcs
 19095 0B:891C: 98           	tya
 19096 0B:891D: 6B           	rtl
 19097                        ;}
 19098                        	.line	5503
 19099                        	.endblock	5503
 19100             00000038   L741	equ	56
 19101             00000011   L742	equ	17
 19102 0B:891E:              	ends
 19103                        	efunc
 19104                        	.endfunc	5503,17,56
 19105                        	.line	5503
 19106                        ;
 19107                        ;/*-----------------------------------------------
                    ------------------------*/
 19108                        ;/* Truncate File                                 
                                            */
 19109                        ;/*-----------------------------------------------
                    ------------------------*/
 19110                        ;
 19111                        ;FRESULT f_truncate(FIL* fp /* Pointer to the file
                     object */
 19112                        ;)
 19113                        ;{
 19114                        	.line	5509
 19115                        	.line	5511
 19116                        	FFDOS
 19117                        	xdef	~~f_truncate
 19118                        	func
 19119                        	.function	5511
 19120                        ~~f_truncate:
 19121                        	longa	on
 19122                        	longi	on
 19123 0B:891E: 3B           	tsc
 19124 0B:891F: 38           	sec
 19125 0B:8920: E9 0E 00     	sbc	#L766
 19126 0B:8923: 1B           	tcs
 19127 0B:8924: 0B           	phd
 19128 0B:8925: 5B           	tcd
  Fri Jul 16 2021 14:42                                                Page 369


 19129             00000004   fp_0	set	4
 19130                        	.block	5511
 19131                        ;	FRESULT res;
 19132                        ;	FATFS *fs;
 19133                        ;	DWORD ncl;
 19134                        ;
 19135                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 19136             00000000   res_1	set	0
 19137             00000002   fs_1	set	2
 19138             00000006   ncl_1	set	6
 19139                        	.sym	res,0,5,1,16
 19140                        	.sym	fs,2,138,1,32,49
 19141                        	.sym	ncl,6,18,1,32
 19142                        	.sym	fp,4,138,6,32,51
 19143                        	.line	5516
 19144 0B:8926: F4 00 00     	pea	#0
 19145 0B:8929: 18           	clc
 19146 0B:892A: 7B           	tdc
 19147 0B:892B: 69 07 00     	adc	#<L767+fs_1
 19148 0B:892E: 48           	pha
 19149 0B:892F: D4 14        	pei	<L766+fp_0+2
 19150 0B:8931: D4 12        	pei	<L766+fp_0
 19151 0B:8933: 22 C9 6D 0B  	jsl	~~validate
 19152 0B:8937: 85 05        	sta	<L767+res_1
 19153                        ;	if (res != FR_OK || (res = (FRESULT) fp->err) !=
                     FR_OK)
 19154                        	.line	5517
 19155                        ;		LEAVE_FF(fs, res);
 19156 0B:8939: A5 05        	lda	<L767+res_1
 19157 0B:893B: F0 03        	beq	L770
 19158 0B:893D: 82 11 00     	brl	L769
 19159                        L770:
 19160 0B:8940: A0 11 00     	ldy	#$11
 19161 0B:8943: B7 12        	lda	[<L766+fp_0],Y
 19162 0B:8945: 29 FF 00     	and	#$ff
 19163 0B:8948: 85 05        	sta	<L767+res_1
 19164 0B:894A: A5 05        	lda	<L767+res_1
 19165 0B:894C: D0 03        	bne	L771
 19166 0B:894E: 82 14 00     	brl	L10408
 19167                        L771:
 19168                        L769:
 19169                        	.line	5518
 19170 0B:8951: A5 05        	lda	<L767+res_1
 19171                        L772:
 19172 0B:8953: A8           	tay
 19173 0B:8954: A5 10        	lda	<L766+2
 19174 0B:8956: 85 14        	sta	<L766+2+4
 19175 0B:8958: A5 0F        	lda	<L766+1
 19176 0B:895A: 85 13        	sta	<L766+1+4
 19177 0B:895C: 2B           	pld
 19178 0B:895D: 3B           	tsc
 19179 0B:895E: 18           	clc
 19180 0B:895F: 69 12 00     	adc	#L766+4
 19181 0B:8962: 1B           	tcs
 19182 0B:8963: 98           	tya
 19183 0B:8964: 6B           	rtl
 19184                        ;	if (!(fp->flag & FA_WRITE))
  Fri Jul 16 2021 14:42                                                Page 370


 19185                        L10408:
 19186                        	.line	5519
 19187                        ;		LEAVE_FF(fs, FR_DENIED); /* Check access
                     mode */
 19188 0B:8965: E2 20        	sep	#$20
 19189                        	longa	off
 19190 0B:8967: A0 10 00     	ldy	#$10
 19191 0B:896A: B7 12        	lda	[<L766+fp_0],Y
 19192 0B:896C: 29 02        	and	#<$2
 19193 0B:896E: C2 20        	rep	#$20
 19194                        	longa	on
 19195 0B:8970: F0 03        	beq	L773
 19196 0B:8972: 82 06 00     	brl	L10409
 19197                        L773:
 19198                        	.line	5520
 19199 0B:8975: A9 07 00     	lda	#$7
 19200 0B:8978: 82 D8 FF     	brl	L772
 19201                        ;
 19202                        ;	if (fp->fptr < fp->obj.objsize)
 19203                        L10409:
 19204                        	.line	5522
 19205                        ;	{ /* Process when fptr is not on the eof */
 19206 0B:897B: A0 12 00     	ldy	#$12
 19207 0B:897E: B7 12        	lda	[<L766+fp_0],Y
 19208 0B:8980: A0 0C 00     	ldy	#$c
 19209 0B:8983: D7 12        	cmp	[<L766+fp_0],Y
 19210 0B:8985: A0 14 00     	ldy	#$14
 19211 0B:8988: B7 12        	lda	[<L766+fp_0],Y
 19212 0B:898A: A0 0E 00     	ldy	#$e
 19213 0B:898D: F7 12        	sbc	[<L766+fp_0],Y
 19214 0B:898F: 90 03        	bcc	L774
 19215 0B:8991: 82 66 01     	brl	L10410
 19216                        L774:
 19217                        	.line	5523
 19218                        ;		if (fp->fptr == 0)
 19219                        	.line	5524
 19220                        ;		{ /* When set file size to zero, remove 
                    entire cluster chain */
 19221 0B:8994: A0 12 00     	ldy	#$12
 19222 0B:8997: B7 12        	lda	[<L766+fp_0],Y
 19223 0B:8999: A0 14 00     	ldy	#$14
 19224 0B:899C: 17 12        	ora	[<L766+fp_0],Y
 19225 0B:899E: F0 03        	beq	L775
 19226 0B:89A0: 82 2F 00     	brl	L10411
 19227                        L775:
 19228                        	.line	5525
 19229                        ;			res = remove_chain(&fp->obj, fp-
                    >obj.sclust, 0);
 19230                        	.line	5526
 19231 0B:89A3: F4 00 00     	pea	#^$0
 19232 0B:89A6: F4 00 00     	pea	#<$0
 19233 0B:89A9: A0 0A 00     	ldy	#$a
 19234 0B:89AC: B7 12        	lda	[<L766+fp_0],Y
 19235 0B:89AE: 48           	pha
 19236 0B:89AF: A0 08 00     	ldy	#$8
 19237 0B:89B2: B7 12        	lda	[<L766+fp_0],Y
 19238 0B:89B4: 48           	pha
 19239 0B:89B5: D4 14        	pei	<L766+fp_0+2
  Fri Jul 16 2021 14:42                                                Page 371


 19240 0B:89B7: D4 12        	pei	<L766+fp_0
 19241 0B:89B9: 22 C3 4B 0B  	jsl	~~remove_chain
 19242 0B:89BD: 85 05        	sta	<L767+res_1
 19243                        ;			fp->obj.sclust = 0;
 19244                        	.line	5527
 19245 0B:89BF: A9 00 00     	lda	#$0
 19246 0B:89C2: A0 08 00     	ldy	#$8
 19247 0B:89C5: 97 12        	sta	[<L766+fp_0],Y
 19248 0B:89C7: A9 00 00     	lda	#$0
 19249 0B:89CA: A0 0A 00     	ldy	#$a
 19250 0B:89CD: 97 12        	sta	[<L766+fp_0],Y
 19251                        ;		}
 19252                        	.line	5528
 19253                        ;		else
 19254 0B:89CF: 82 7A 00     	brl	L10412
 19255                        L10411:
 19256                        ;		{ /* When truncate a part of the file, r
                    emove remaining clusters */
 19257                        	.line	5530
 19258                        ;			ncl = get_fat(&fp->obj, fp->clus
                    t);
 19259                        	.line	5531
 19260 0B:89D2: A0 18 00     	ldy	#$18
 19261 0B:89D5: B7 12        	lda	[<L766+fp_0],Y
 19262 0B:89D7: 48           	pha
 19263 0B:89D8: A0 16 00     	ldy	#$16
 19264 0B:89DB: B7 12        	lda	[<L766+fp_0],Y
 19265 0B:89DD: 48           	pha
 19266 0B:89DE: D4 14        	pei	<L766+fp_0+2
 19267 0B:89E0: D4 12        	pei	<L766+fp_0
 19268 0B:89E2: 22 0D 46 0B  	jsl	~~get_fat
 19269 0B:89E6: 85 0B        	sta	<L767+ncl_1
 19270 0B:89E8: 86 0D        	stx	<L767+ncl_1+2
 19271                        ;			res = FR_OK;
 19272                        	.line	5532
 19273 0B:89EA: 64 05        	stz	<L767+res_1
 19274                        ;			if (ncl == 0xFFFFFFFF)
 19275                        	.line	5533
 19276                        ;				res = FR_DISK_ERR;
 19277 0B:89EC: A5 0B        	lda	<L767+ncl_1
 19278 0B:89EE: C9 FF FF     	cmp	#<$ffffffff
 19279 0B:89F1: D0 05        	bne	L776
 19280 0B:89F3: A5 0D        	lda	<L767+ncl_1+2
 19281 0B:89F5: C9 FF FF     	cmp	#^$ffffffff
 19282                        L776:
 19283 0B:89F8: F0 03        	beq	L777
 19284 0B:89FA: 82 05 00     	brl	L10413
 19285                        L777:
 19286                        	.line	5534
 19287 0B:89FD: A9 01 00     	lda	#$1
 19288 0B:8A00: 85 05        	sta	<L767+res_1
 19289                        ;			if (ncl == 1)
 19290                        L10413:
 19291                        	.line	5535
 19292                        ;				res = FR_INT_ERR;
 19293 0B:8A02: A5 0B        	lda	<L767+ncl_1
 19294 0B:8A04: C9 01 00     	cmp	#<$1
 19295 0B:8A07: D0 05        	bne	L778
  Fri Jul 16 2021 14:42                                                Page 372


 19296 0B:8A09: A5 0D        	lda	<L767+ncl_1+2
 19297 0B:8A0B: C9 00 00     	cmp	#^$1
 19298                        L778:
 19299 0B:8A0E: F0 03        	beq	L779
 19300 0B:8A10: 82 05 00     	brl	L10414
 19301                        L779:
 19302                        	.line	5536
 19303 0B:8A13: A9 02 00     	lda	#$2
 19304 0B:8A16: 85 05        	sta	<L767+res_1
 19305                        ;			if (res == FR_OK && ncl < fs->n_
                    fatent)
 19306                        L10414:
 19307                        	.line	5537
 19308                        ;			{
 19309 0B:8A18: A5 05        	lda	<L767+res_1
 19310 0B:8A1A: F0 03        	beq	L780
 19311 0B:8A1C: 82 2D 00     	brl	L10415
 19312                        L780:
 19313 0B:8A1F: A5 0B        	lda	<L767+ncl_1
 19314 0B:8A21: A0 13 00     	ldy	#$13
 19315 0B:8A24: D7 07        	cmp	[<L767+fs_1],Y
 19316 0B:8A26: A5 0D        	lda	<L767+ncl_1+2
 19317 0B:8A28: A0 15 00     	ldy	#$15
 19318 0B:8A2B: F7 07        	sbc	[<L767+fs_1],Y
 19319 0B:8A2D: 90 03        	bcc	L781
 19320 0B:8A2F: 82 1A 00     	brl	L10415
 19321                        L781:
 19322                        	.line	5538
 19323                        ;				res = remove_chain(&fp->
                    obj, ncl, fp->clust);
 19324                        	.line	5539
 19325 0B:8A32: A0 18 00     	ldy	#$18
 19326 0B:8A35: B7 12        	lda	[<L766+fp_0],Y
 19327 0B:8A37: 48           	pha
 19328 0B:8A38: A0 16 00     	ldy	#$16
 19329 0B:8A3B: B7 12        	lda	[<L766+fp_0],Y
 19330 0B:8A3D: 48           	pha
 19331 0B:8A3E: D4 0D        	pei	<L767+ncl_1+2
 19332 0B:8A40: D4 0B        	pei	<L767+ncl_1
 19333 0B:8A42: D4 14        	pei	<L766+fp_0+2
 19334 0B:8A44: D4 12        	pei	<L766+fp_0
 19335 0B:8A46: 22 C3 4B 0B  	jsl	~~remove_chain
 19336 0B:8A4A: 85 05        	sta	<L767+res_1
 19337                        ;			}
 19338                        	.line	5540
 19339                        ;		}
 19340                        L10415:
 19341                        	.line	5541
 19342                        L10412:
 19343                        ;		fp->obj.objsize = fp->fptr; /* Set file 
                    size to current read/write point */
 19344                        	.line	5542
 19345 0B:8A4C: A0 12 00     	ldy	#$12
 19346 0B:8A4F: B7 12        	lda	[<L766+fp_0],Y
 19347 0B:8A51: A0 0C 00     	ldy	#$c
 19348 0B:8A54: 97 12        	sta	[<L766+fp_0],Y
 19349 0B:8A56: A0 14 00     	ldy	#$14
 19350 0B:8A59: B7 12        	lda	[<L766+fp_0],Y
  Fri Jul 16 2021 14:42                                                Page 373


 19351 0B:8A5B: A0 0E 00     	ldy	#$e
 19352 0B:8A5E: 97 12        	sta	[<L766+fp_0],Y
 19353                        ;		fp->flag |= FA_MODIFIED;
 19354                        	.line	5543
 19355 0B:8A60: 18           	clc
 19356 0B:8A61: A9 10 00     	lda	#$10
 19357 0B:8A64: 65 12        	adc	<L766+fp_0
 19358 0B:8A66: 85 01        	sta	<R0
 19359 0B:8A68: A9 00 00     	lda	#$0
 19360 0B:8A6B: 65 14        	adc	<L766+fp_0+2
 19361 0B:8A6D: 85 03        	sta	<R0+2
 19362 0B:8A6F: E2 20        	sep	#$20
 19363                        	longa	off
 19364 0B:8A71: A7 01        	lda	[<R0]
 19365 0B:8A73: 09 40        	ora	#<$40
 19366 0B:8A75: 87 01        	sta	[<R0]
 19367 0B:8A77: C2 20        	rep	#$20
 19368                        	longa	on
 19369                        ;#if !FF_FS_TINY
 19370                        ;		if (res == FR_OK && (fp->flag & FA_DIRTY
                    ))
 19371                        	.line	5545
 19372                        ;		{
 19373 0B:8A79: A5 05        	lda	<L767+res_1
 19374 0B:8A7B: F0 03        	beq	L782
 19375 0B:8A7D: 82 63 00     	brl	L10416
 19376                        L782:
 19377 0B:8A80: E2 20        	sep	#$20
 19378                        	longa	off
 19379 0B:8A82: A0 10 00     	ldy	#$10
 19380 0B:8A85: B7 12        	lda	[<L766+fp_0],Y
 19381 0B:8A87: 29 80        	and	#<$80
 19382 0B:8A89: C2 20        	rep	#$20
 19383                        	longa	on
 19384 0B:8A8B: D0 03        	bne	L783
 19385 0B:8A8D: 82 53 00     	brl	L10416
 19386                        L783:
 19387                        	.line	5546
 19388                        ;			if (disk_write(fs->pdrv, fp->buf
                    , fp->sect, 1) != RES_OK)
 19389                        	.line	5547
 19390                        ;			{
 19391 0B:8A90: F4 01 00     	pea	#<$1
 19392 0B:8A93: A0 1C 00     	ldy	#$1c
 19393 0B:8A96: B7 12        	lda	[<L766+fp_0],Y
 19394 0B:8A98: 48           	pha
 19395 0B:8A99: A0 1A 00     	ldy	#$1a
 19396 0B:8A9C: B7 12        	lda	[<L766+fp_0],Y
 19397 0B:8A9E: 48           	pha
 19398 0B:8A9F: 18           	clc
 19399 0B:8AA0: A9 26 00     	lda	#$26
 19400 0B:8AA3: 65 12        	adc	<L766+fp_0
 19401 0B:8AA5: 85 01        	sta	<R0
 19402 0B:8AA7: A9 00 00     	lda	#$0
 19403 0B:8AAA: 65 14        	adc	<L766+fp_0+2
 19404 0B:8AAC: 85 03        	sta	<R0+2
 19405 0B:8AAE: D4 03        	pei	<R0+2
 19406 0B:8AB0: D4 01        	pei	<R0
  Fri Jul 16 2021 14:42                                                Page 374


 19407 0B:8AB2: A0 01 00     	ldy	#$1
 19408 0B:8AB5: B7 07        	lda	[<L767+fs_1],Y
 19409 0B:8AB7: 48           	pha
 19410 0B:8AB8: 22 xx xx xx  	jsl	~~disk_write
 19411 0B:8ABC: AA           	tax
 19412 0B:8ABD: D0 03        	bne	L784
 19413 0B:8ABF: 82 08 00     	brl	L10417
 19414                        L784:
 19415                        	.line	5548
 19416                        ;				res = FR_DISK_ERR;
 19417                        	.line	5549
 19418 0B:8AC2: A9 01 00     	lda	#$1
 19419 0B:8AC5: 85 05        	sta	<L767+res_1
 19420                        ;			}
 19421                        	.line	5550
 19422                        ;			else
 19423 0B:8AC7: 82 19 00     	brl	L10418
 19424                        L10417:
 19425                        ;			{
 19426                        	.line	5552
 19427                        ;				fp->flag &= (BYTE) ~FA_D
                    IRTY;
 19428                        	.line	5553
 19429 0B:8ACA: 18           	clc
 19430 0B:8ACB: A9 10 00     	lda	#$10
 19431 0B:8ACE: 65 12        	adc	<L766+fp_0
 19432 0B:8AD0: 85 01        	sta	<R0
 19433 0B:8AD2: A9 00 00     	lda	#$0
 19434 0B:8AD5: 65 14        	adc	<L766+fp_0+2
 19435 0B:8AD7: 85 03        	sta	<R0+2
 19436 0B:8AD9: E2 20        	sep	#$20
 19437                        	longa	off
 19438 0B:8ADB: A7 01        	lda	[<R0]
 19439 0B:8ADD: 29 7F        	and	#<$7f
 19440 0B:8ADF: 87 01        	sta	[<R0]
 19441 0B:8AE1: C2 20        	rep	#$20
 19442                        	longa	on
 19443                        ;			}
 19444                        	.line	5554
 19445                        L10418:
 19446                        ;		}
 19447                        	.line	5555
 19448                        ;#endif
 19449                        ;		if (res != FR_OK)
 19450                        L10416:
 19451                        	.line	5557
 19452                        ;			ABORT(fs, res);
 19453 0B:8AE3: A5 05        	lda	<L767+res_1
 19454 0B:8AE5: D0 03        	bne	L785
 19455 0B:8AE7: 82 10 00     	brl	L10419
 19456                        L785:
 19457                        	.line	5558
 19458                        	.line	5558
 19459 0B:8AEA: E2 20        	sep	#$20
 19460                        	longa	off
 19461 0B:8AEC: A5 05        	lda	<L767+res_1
 19462 0B:8AEE: A0 11 00     	ldy	#$11
 19463 0B:8AF1: 97 12        	sta	[<L766+fp_0],Y
  Fri Jul 16 2021 14:42                                                Page 375


 19464 0B:8AF3: C2 20        	rep	#$20
 19465                        	longa	on
 19466                        	.line	5558
 19467 0B:8AF5: A5 05        	lda	<L767+res_1
 19468 0B:8AF7: 82 59 FE     	brl	L772
 19469                        	.line	5558
 19470                        L10419:
 19471                        	.line	5558
 19472                        ;	}
 19473                        	.line	5559
 19474                        ;
 19475                        ;	LEAVE_FF(fs, res);
 19476                        L10410:
 19477                        	.line	5561
 19478 0B:8AFA: A5 05        	lda	<L767+res_1
 19479 0B:8AFC: 82 54 FE     	brl	L772
 19480                        ;}
 19481                        	.line	5562
 19482                        	.endblock	5562
 19483             0000000E   L766	equ	14
 19484             00000005   L767	equ	5
 19485 0B:8AFF:              	ends
 19486                        	efunc
 19487                        	.endfunc	5562,5,14
 19488                        	.line	5562
 19489                        ;
 19490                        ;/*-----------------------------------------------
                    ------------------------*/
 19491                        ;/* Delete a File/Directory                       
                                            */
 19492                        ;/*-----------------------------------------------
                    ------------------------*/
 19493                        ;
 19494                        ;FRESULT f_unlink(const TCHAR* path /* Pointer to 
                    the file or directory path */
 19495                        ;)
 19496                        ;{
 19497                        	.line	5568
 19498                        	.line	5570
 19499                        	FFDOS
 19500                        	xdef	~~f_unlink
 19501                        	func
 19502                        	.function	5570
 19503                        ~~f_unlink:
 19504                        	longa	on
 19505                        	longi	on
 19506 0B:8AFF: 3B           	tsc
 19507 0B:8B00: 38           	sec
 19508 0B:8B01: E9 6A 00     	sbc	#L786
 19509 0B:8B04: 1B           	tcs
 19510 0B:8B05: 0B           	phd
 19511 0B:8B06: 5B           	tcd
 19512             00000004   path_0	set	4
 19513                        	.block	5570
 19514                        ;	FRESULT res;
 19515                        ;	DIR dj, sdj;
 19516                        ;	DWORD dclst = 0;
 19517                        ;	FATFS *fs;
  Fri Jul 16 2021 14:42                                                Page 376


 19518                        ;#if FF_FS_EXFAT
 19519                        ;	FFOBJID obj;
 19520                        ;#endif
 19521                        ;	DEF_NAMBUF
 19522                        ;
 19523                        ;	/* Get logical drive */
 19524                        ;	res = mount_volume(&path, &fs, FA_WRITE);
 19525             00000000   res_1	set	0
 19526             00000002   dj_1	set	2
 19527             00000032   sdj_1	set	50
 19528             00000062   dclst_1	set	98
 19529             00000066   fs_1	set	102
 19530                        	.sym	res,0,5,1,16
 19531                        	.sym	dj,2,10,1,384,52
 19532                        	.sym	sdj,50,10,1,384,52
 19533                        	.sym	dclst,98,18,1,32
 19534                        	.sym	fs,102,138,1,32,49
 19535                        	.sym	path,4,142,6,32
 19536 0B:8B07: 64 63        	stz	<L787+dclst_1
 19537 0B:8B09: 64 65        	stz	<L787+dclst_1+2
 19538                        	.line	5581
 19539 0B:8B0B: F4 02 00     	pea	#<$2
 19540 0B:8B0E: F4 00 00     	pea	#0
 19541 0B:8B11: 18           	clc
 19542 0B:8B12: 7B           	tdc
 19543 0B:8B13: 69 67 00     	adc	#<L787+fs_1
 19544 0B:8B16: 48           	pha
 19545 0B:8B17: F4 00 00     	pea	#0
 19546 0B:8B1A: 18           	clc
 19547 0B:8B1B: 7B           	tdc
 19548 0B:8B1C: 69 6E 00     	adc	#<L786+path_0
 19549 0B:8B1F: 48           	pha
 19550 0B:8B20: 22 F6 66 0B  	jsl	~~mount_volume
 19551 0B:8B24: 85 01        	sta	<L787+res_1
 19552                        ;	if (res == FR_OK)
 19553                        	.line	5582
 19554                        ;	{
 19555 0B:8B26: A5 01        	lda	<L787+res_1
 19556 0B:8B28: F0 03        	beq	L789
 19557 0B:8B2A: 82 2F 01     	brl	L10420
 19558                        L789:
 19559                        	.line	5583
 19560                        ;		dj.obj.fs = fs;
 19561                        	.line	5584
 19562 0B:8B2D: A5 67        	lda	<L787+fs_1
 19563 0B:8B2F: 85 03        	sta	<L787+dj_1
 19564 0B:8B31: A5 69        	lda	<L787+fs_1+2
 19565 0B:8B33: 85 05        	sta	<L787+dj_1+2
 19566                        ;		INIT_NAMBUF(fs);
 19567                        	.line	5585
 19568                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 19569                        	.line	5586
 19570 0B:8B35: D4 70        	pei	<L786+path_0+2
 19571 0B:8B37: D4 6E        	pei	<L786+path_0
 19572 0B:8B39: F4 00 00     	pea	#0
 19573 0B:8B3C: 18           	clc
 19574 0B:8B3D: 7B           	tdc
  Fri Jul 16 2021 14:42                                                Page 377


 19575 0B:8B3E: 69 03 00     	adc	#<L787+dj_1
 19576 0B:8B41: 48           	pha
 19577 0B:8B42: 22 73 60 0B  	jsl	~~follow_path
 19578 0B:8B46: 85 01        	sta	<L787+res_1
 19579                        ;		if (FF_FS_RPATH && res == FR_OK && (dj.f
                    n[NSFLAG] & NS_DOT))
 19580                        	.line	5587
 19581                        ;		{
 19582 0B:8B48: 82 19 00     	brl	L10421
 19583 0B:8B4B: A5 01        	lda	<L787+res_1
 19584 0B:8B4D: F0 03        	beq	L790
 19585 0B:8B4F: 82 12 00     	brl	L10421
 19586                        L790:
 19587 0B:8B52: E2 20        	sep	#$20
 19588                        	longa	off
 19589 0B:8B54: A5 2E        	lda	<L787+dj_1+43
 19590 0B:8B56: 29 20        	and	#<$20
 19591 0B:8B58: C2 20        	rep	#$20
 19592                        	longa	on
 19593 0B:8B5A: D0 03        	bne	L791
 19594 0B:8B5C: 82 05 00     	brl	L10421
 19595                        L791:
 19596                        	.line	5588
 19597                        ;			res = FR_INVALID_NAME; /* Cannot
                     remove dot entry */
 19598                        	.line	5589
 19599 0B:8B5F: A9 06 00     	lda	#$6
 19600 0B:8B62: 85 01        	sta	<L787+res_1
 19601                        ;		}
 19602                        	.line	5590
 19603                        ;#if FF_FS_LOCK != 0
 19604                        ;		if (res == FR_OK) res = chk_lock(&dj, 2)
                    ; /* Check if it is an open object */
 19605                        ;#endif
 19606                        ;		if (res == FR_OK)
 19607                        L10421:
 19608                        	.line	5594
 19609                        ;		{ /* The object is accessible */
 19610 0B:8B64: A5 01        	lda	<L787+res_1
 19611 0B:8B66: F0 03        	beq	L792
 19612 0B:8B68: 82 F1 00     	brl	L10422
 19613                        L792:
 19614                        	.line	5595
 19615                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 19616                        	.line	5596
 19617                        ;			{
 19618 0B:8B6B: E2 20        	sep	#$20
 19619                        	longa	off
 19620 0B:8B6D: A5 2E        	lda	<L787+dj_1+43
 19621 0B:8B6F: 29 80        	and	#<$80
 19622 0B:8B71: C2 20        	rep	#$20
 19623                        	longa	on
 19624 0B:8B73: D0 03        	bne	L793
 19625 0B:8B75: 82 08 00     	brl	L10423
 19626                        L793:
 19627                        	.line	5597
 19628                        ;				res = FR_INVALID_NAME; /
                    * Cannot remove the origin directory */
  Fri Jul 16 2021 14:42                                                Page 378


 19629                        	.line	5598
 19630 0B:8B78: A9 06 00     	lda	#$6
 19631 0B:8B7B: 85 01        	sta	<L787+res_1
 19632                        ;			}
 19633                        	.line	5599
 19634                        ;			else
 19635 0B:8B7D: 82 12 00     	brl	L10424
 19636                        L10423:
 19637                        ;			{
 19638                        	.line	5601
 19639                        ;				if (dj.obj.attr & AM_RDO
                    )
 19640                        	.line	5602
 19641                        ;				{
 19642 0B:8B80: E2 20        	sep	#$20
 19643                        	longa	off
 19644 0B:8B82: A5 09        	lda	<L787+dj_1+6
 19645 0B:8B84: 29 01        	and	#<$1
 19646 0B:8B86: C2 20        	rep	#$20
 19647                        	longa	on
 19648 0B:8B88: D0 03        	bne	L794
 19649 0B:8B8A: 82 05 00     	brl	L10425
 19650                        L794:
 19651                        	.line	5603
 19652                        ;					res = FR_DENIED;
                     /* Cannot remove R/O object */
 19653                        	.line	5604
 19654 0B:8B8D: A9 07 00     	lda	#$7
 19655 0B:8B90: 85 01        	sta	<L787+res_1
 19656                        ;				}
 19657                        	.line	5605
 19658                        ;			}
 19659                        L10425:
 19660                        	.line	5606
 19661                        L10424:
 19662                        ;			if (res == FR_OK)
 19663                        	.line	5607
 19664                        ;			{
 19665 0B:8B92: A5 01        	lda	<L787+res_1
 19666 0B:8B94: F0 03        	beq	L795
 19667 0B:8B96: 82 73 00     	brl	L10426
 19668                        L795:
 19669                        	.line	5608
 19670                        ;#if FF_FS_EXFAT
 19671                        ;				obj.fs = fs;
 19672                        ;				if (fs->fs_type == FS_EX
                    FAT)
 19673                        ;				{
 19674                        ;					init_alloc_info(
                    fs, &obj);
 19675                        ;					dclst = obj.sclu
                    st;
 19676                        ;				}
 19677                        ;				else
 19678                        ;#endif
 19679                        ;				{
 19680                        	.line	5618
 19681                        ;					dclst = ld_clust
  Fri Jul 16 2021 14:42                                                Page 379


                    (fs, dj.dir);
 19682                        	.line	5619
 19683 0B:8B99: D4 21        	pei	<L787+dj_1+30
 19684 0B:8B9B: D4 1F        	pei	<L787+dj_1+28
 19685 0B:8B9D: D4 69        	pei	<L787+fs_1+2
 19686 0B:8B9F: D4 67        	pei	<L787+fs_1
 19687 0B:8BA1: 22 F3 56 0B  	jsl	~~ld_clust
 19688 0B:8BA5: 85 63        	sta	<L787+dclst_1
 19689 0B:8BA7: 86 65        	stx	<L787+dclst_1+2
 19690                        ;				}
 19691                        	.line	5620
 19692                        ;				if (dj.obj.attr & AM_DIR
                    )
 19693                        	.line	5621
 19694                        ;				{ /* Is it a sub-directo
                    ry? */
 19695 0B:8BA9: E2 20        	sep	#$20
 19696                        	longa	off
 19697 0B:8BAB: A5 09        	lda	<L787+dj_1+6
 19698 0B:8BAD: 29 10        	and	#<$10
 19699 0B:8BAF: C2 20        	rep	#$20
 19700                        	longa	on
 19701 0B:8BB1: D0 03        	bne	L796
 19702 0B:8BB3: 82 56 00     	brl	L10427
 19703                        L796:
 19704                        	.line	5622
 19705                        ;#if FF_FS_RPATH != 0
 19706                        ;					if (dclst == fs-
                    >cdir)
 19707                        ;					{ /* Is it the c
                    urrent directory? */
 19708                        ;						res = FR
                    _DENIED;
 19709                        ;					}
 19710                        ;					else
 19711                        ;#endif
 19712                        ;					{
 19713                        	.line	5630
 19714                        ;						sdj.obj.
                    fs = fs; /* Open the sub-directory */
 19715                        	.line	5631
 19716 0B:8BB6: A5 67        	lda	<L787+fs_1
 19717 0B:8BB8: 85 33        	sta	<L787+sdj_1
 19718 0B:8BBA: A5 69        	lda	<L787+fs_1+2
 19719 0B:8BBC: 85 35        	sta	<L787+sdj_1+2
 19720                        ;						sdj.obj.
                    sclust = dclst;
 19721                        	.line	5632
 19722 0B:8BBE: A5 63        	lda	<L787+dclst_1
 19723 0B:8BC0: 85 3B        	sta	<L787+sdj_1+8
 19724 0B:8BC2: A5 65        	lda	<L787+dclst_1+2
 19725 0B:8BC4: 85 3D        	sta	<L787+sdj_1+10
 19726                        ;#if FF_FS_EXFAT
 19727                        ;						if (fs->
                    fs_type == FS_EXFAT)
 19728                        ;						{
 19729                        ;							
                    sdj.obj.objsize = obj.objsize;
  Fri Jul 16 2021 14:42                                                Page 380


 19730                        ;							
                    sdj.obj.stat = obj.stat;
 19731                        ;						}
 19732                        ;#endif
 19733                        ;						res = di
                    r_sdi(&sdj, 0);
 19734                        	.line	5640
 19735 0B:8BC6: F4 00 00     	pea	#^$0
 19736 0B:8BC9: F4 00 00     	pea	#<$0
 19737 0B:8BCC: F4 00 00     	pea	#0
 19738 0B:8BCF: 18           	clc
 19739 0B:8BD0: 7B           	tdc
 19740 0B:8BD1: 69 33 00     	adc	#<L787+sdj_1
 19741 0B:8BD4: 48           	pha
 19742 0B:8BD5: 22 3D 51 0B  	jsl	~~dir_sdi
 19743 0B:8BD9: 85 01        	sta	<L787+res_1
 19744                        ;						if (res 
                    == FR_OK)
 19745                        	.line	5641
 19746                        ;						{
 19747 0B:8BDB: A5 01        	lda	<L787+res_1
 19748 0B:8BDD: F0 03        	beq	L797
 19749 0B:8BDF: 82 2A 00     	brl	L10428
 19750                        L797:
 19751                        	.line	5642
 19752                        ;							
                    res = DIR_READ_FILE(&sdj); /* Test if the directory is empty
                     */
 19753                        	.line	5643
 19754 0B:8BE2: F4 00 00     	pea	#<$0
 19755 0B:8BE5: F4 00 00     	pea	#0
 19756 0B:8BE8: 18           	clc
 19757 0B:8BE9: 7B           	tdc
 19758 0B:8BEA: 69 33 00     	adc	#<L787+sdj_1
 19759 0B:8BED: 48           	pha
 19760 0B:8BEE: 22 E9 57 0B  	jsl	~~dir_read
 19761 0B:8BF2: 85 01        	sta	<L787+res_1
 19762                        ;							
                    if (res == FR_OK)
 19763                        	.line	5644
 19764                        ;							
                    	res = FR_DENIED; /* Not empty? */
 19765 0B:8BF4: A5 01        	lda	<L787+res_1
 19766 0B:8BF6: F0 03        	beq	L798
 19767 0B:8BF8: 82 05 00     	brl	L10429
 19768                        L798:
 19769                        	.line	5645
 19770 0B:8BFB: A9 07 00     	lda	#$7
 19771 0B:8BFE: 85 01        	sta	<L787+res_1
 19772                        ;							
                    if (res == FR_NO_FILE)
 19773                        L10429:
 19774                        	.line	5646
 19775                        ;							
                    	res = FR_OK; /* Empty? */
 19776 0B:8C00: A5 01        	lda	<L787+res_1
 19777 0B:8C02: C9 04 00     	cmp	#<$4
 19778 0B:8C05: F0 03        	beq	L799
  Fri Jul 16 2021 14:42                                                Page 381


 19779 0B:8C07: 82 02 00     	brl	L10430
 19780                        L799:
 19781                        	.line	5647
 19782 0B:8C0A: 64 01        	stz	<L787+res_1
 19783                        ;						}
 19784                        L10430:
 19785                        	.line	5648
 19786                        ;					}
 19787                        L10428:
 19788                        	.line	5649
 19789                        ;				}
 19790                        	.line	5650
 19791                        ;			}
 19792                        L10427:
 19793                        	.line	5651
 19794                        ;			if (res == FR_OK)
 19795                        L10426:
 19796                        	.line	5652
 19797                        ;			{
 19798 0B:8C0C: A5 01        	lda	<L787+res_1
 19799 0B:8C0E: F0 03        	beq	L800
 19800 0B:8C10: 82 49 00     	brl	L10431
 19801                        L800:
 19802                        	.line	5653
 19803                        ;				res = dir_remove(&dj); /
                    * Remove the directory entry */
 19804                        	.line	5654
 19805 0B:8C13: F4 00 00     	pea	#0
 19806 0B:8C16: 18           	clc
 19807 0B:8C17: 7B           	tdc
 19808 0B:8C18: 69 03 00     	adc	#<L787+dj_1
 19809 0B:8C1B: 48           	pha
 19810 0B:8C1C: 22 AF 5A 0B  	jsl	~~dir_remove
 19811 0B:8C20: 85 01        	sta	<L787+res_1
 19812                        ;				if (res == FR_OK && dcls
                    t != 0)
 19813                        	.line	5655
 19814                        ;				{ /* Remove the cluster 
                    chain if exist */
 19815 0B:8C22: A5 01        	lda	<L787+res_1
 19816 0B:8C24: F0 03        	beq	L801
 19817 0B:8C26: 82 22 00     	brl	L10432
 19818                        L801:
 19819 0B:8C29: A5 63        	lda	<L787+dclst_1
 19820 0B:8C2B: 05 65        	ora	<L787+dclst_1+2
 19821 0B:8C2D: D0 03        	bne	L802
 19822 0B:8C2F: 82 19 00     	brl	L10432
 19823                        L802:
 19824                        	.line	5656
 19825                        ;#if FF_FS_EXFAT
 19826                        ;					res = remove_cha
                    in(&obj, dclst, 0);
 19827                        ;#else
 19828                        ;					res = remove_cha
                    in(&dj.obj, dclst, 0);
 19829                        	.line	5660
 19830 0B:8C32: F4 00 00     	pea	#^$0
 19831 0B:8C35: F4 00 00     	pea	#<$0
  Fri Jul 16 2021 14:42                                                Page 382


 19832 0B:8C38: D4 65        	pei	<L787+dclst_1+2
 19833 0B:8C3A: D4 63        	pei	<L787+dclst_1
 19834 0B:8C3C: F4 00 00     	pea	#0
 19835 0B:8C3F: 18           	clc
 19836 0B:8C40: 7B           	tdc
 19837 0B:8C41: 69 03 00     	adc	#<L787+dj_1
 19838 0B:8C44: 48           	pha
 19839 0B:8C45: 22 C3 4B 0B  	jsl	~~remove_chain
 19840 0B:8C49: 85 01        	sta	<L787+res_1
 19841                        ;#endif
 19842                        ;				}
 19843                        	.line	5662
 19844                        ;				if (res == FR_OK)
 19845                        L10432:
 19846                        	.line	5663
 19847                        ;					res = sync_fs(fs
                    );
 19848 0B:8C4B: A5 01        	lda	<L787+res_1
 19849 0B:8C4D: F0 03        	beq	L803
 19850 0B:8C4F: 82 0A 00     	brl	L10433
 19851                        L803:
 19852                        	.line	5664
 19853 0B:8C52: D4 69        	pei	<L787+fs_1+2
 19854 0B:8C54: D4 67        	pei	<L787+fs_1
 19855 0B:8C56: 22 05 44 0B  	jsl	~~sync_fs
 19856 0B:8C5A: 85 01        	sta	<L787+res_1
 19857                        ;			}
 19858                        L10433:
 19859                        	.line	5665
 19860                        ;		} FREE_NAMBUF();
 19861                        L10431:
 19862                        	.line	5666
 19863                        L10422:
 19864                        	.line	5666
 19865                        ;	}
 19866                        	.line	5667
 19867                        ;
 19868                        ;	LEAVE_FF(fs, res);
 19869                        L10420:
 19870                        	.line	5669
 19871 0B:8C5C: A5 01        	lda	<L787+res_1
 19872                        L804:
 19873 0B:8C5E: A8           	tay
 19874 0B:8C5F: A5 6C        	lda	<L786+2
 19875 0B:8C61: 85 70        	sta	<L786+2+4
 19876 0B:8C63: A5 6B        	lda	<L786+1
 19877 0B:8C65: 85 6F        	sta	<L786+1+4
 19878 0B:8C67: 2B           	pld
 19879 0B:8C68: 3B           	tsc
 19880 0B:8C69: 18           	clc
 19881 0B:8C6A: 69 6E 00     	adc	#L786+4
 19882 0B:8C6D: 1B           	tcs
 19883 0B:8C6E: 98           	tya
 19884 0B:8C6F: 6B           	rtl
 19885                        ;}
 19886                        	.line	5670
 19887                        	.endblock	5670
 19888             0000006A   L786	equ	106
  Fri Jul 16 2021 14:42                                                Page 383


 19889             00000001   L787	equ	1
 19890 0B:8C70:              	ends
 19891                        	efunc
 19892                        	.endfunc	5670,1,106
 19893                        	.line	5670
 19894                        ;
 19895                        ;/*-----------------------------------------------
                    ------------------------*/
 19896                        ;/* Create a Directory                            
                                            */
 19897                        ;/*-----------------------------------------------
                    ------------------------*/
 19898                        ;
 19899                        ;FRESULT f_mkdir(const TCHAR* path /* Pointer to t
                    he directory path */
 19900                        ;)
 19901                        ;{
 19902                        	.line	5676
 19903                        	.line	5678
 19904                        	FFDOS
 19905                        	xdef	~~f_mkdir
 19906                        	func
 19907                        	.function	5678
 19908                        ~~f_mkdir:
 19909                        	longa	on
 19910                        	longi	on
 19911 0B:8C70: 3B           	tsc
 19912 0B:8C71: 38           	sec
 19913 0B:8C72: E9 5A 00     	sbc	#L805
 19914 0B:8C75: 1B           	tcs
 19915 0B:8C76: 0B           	phd
 19916 0B:8C77: 5B           	tcd
 19917             00000004   path_0	set	4
 19918                        	.block	5678
 19919                        ;	FRESULT res;
 19920                        ;	DIR dj;
 19921                        ;	FFOBJID sobj;
 19922                        ;	FATFS *fs;
 19923                        ;	DWORD dcl, pcl, tm;
 19924                        ;	DEF_NAMBUF
 19925                        ;
 19926                        ;	res = mount_volume(&path, &fs, FA_WRITE); /* Get
                     logical drive */
 19927             00000000   res_1	set	0
 19928             00000002   dj_1	set	2
 19929             00000032   sobj_1	set	50
 19930             00000042   fs_1	set	66
 19931             00000046   dcl_1	set	70
 19932             0000004A   pcl_1	set	74
 19933             0000004E   tm_1	set	78
 19934                        	.sym	res,0,5,1,16
 19935                        	.sym	dj,2,10,1,384,52
 19936                        	.sym	sobj,50,10,1,128,50
 19937                        	.sym	fs,66,138,1,32,49
 19938                        	.sym	dcl,70,18,1,32
 19939                        	.sym	pcl,74,18,1,32
 19940                        	.sym	tm,78,18,1,32
 19941                        	.sym	path,4,142,6,32
  Fri Jul 16 2021 14:42                                                Page 384


 19942                        	.line	5686
 19943 0B:8C78: F4 02 00     	pea	#<$2
 19944 0B:8C7B: F4 00 00     	pea	#0
 19945 0B:8C7E: 18           	clc
 19946 0B:8C7F: 7B           	tdc
 19947 0B:8C80: 69 4B 00     	adc	#<L806+fs_1
 19948 0B:8C83: 48           	pha
 19949 0B:8C84: F4 00 00     	pea	#0
 19950 0B:8C87: 18           	clc
 19951 0B:8C88: 7B           	tdc
 19952 0B:8C89: 69 5E 00     	adc	#<L805+path_0
 19953 0B:8C8C: 48           	pha
 19954 0B:8C8D: 22 F6 66 0B  	jsl	~~mount_volume
 19955 0B:8C91: 85 09        	sta	<L806+res_1
 19956                        ;	if (res == FR_OK)
 19957                        	.line	5687
 19958                        ;	{
 19959 0B:8C93: A5 09        	lda	<L806+res_1
 19960 0B:8C95: F0 03        	beq	L808
 19961 0B:8C97: 82 3A 02     	brl	L10434
 19962                        L808:
 19963                        	.line	5688
 19964                        ;		dj.obj.fs = fs;
 19965                        	.line	5689
 19966 0B:8C9A: A5 4B        	lda	<L806+fs_1
 19967 0B:8C9C: 85 0B        	sta	<L806+dj_1
 19968 0B:8C9E: A5 4D        	lda	<L806+fs_1+2
 19969 0B:8CA0: 85 0D        	sta	<L806+dj_1+2
 19970                        ;		INIT_NAMBUF(fs);
 19971                        	.line	5690
 19972                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 19973                        	.line	5691
 19974 0B:8CA2: D4 60        	pei	<L805+path_0+2
 19975 0B:8CA4: D4 5E        	pei	<L805+path_0
 19976 0B:8CA6: F4 00 00     	pea	#0
 19977 0B:8CA9: 18           	clc
 19978 0B:8CAA: 7B           	tdc
 19979 0B:8CAB: 69 0B 00     	adc	#<L806+dj_1
 19980 0B:8CAE: 48           	pha
 19981 0B:8CAF: 22 73 60 0B  	jsl	~~follow_path
 19982 0B:8CB3: 85 09        	sta	<L806+res_1
 19983                        ;		if (res == FR_OK)
 19984                        	.line	5692
 19985                        ;			res = FR_EXIST; /* Name collisio
                    n? */
 19986 0B:8CB5: A5 09        	lda	<L806+res_1
 19987 0B:8CB7: F0 03        	beq	L809
 19988 0B:8CB9: 82 05 00     	brl	L10435
 19989                        L809:
 19990                        	.line	5693
 19991 0B:8CBC: A9 08 00     	lda	#$8
 19992 0B:8CBF: 85 09        	sta	<L806+res_1
 19993                        ;		if (FF_FS_RPATH && res == FR_NO_FILE && 
                    (dj.fn[NSFLAG] & NS_DOT))
 19994                        L10435:
 19995                        	.line	5694
 19996                        ;		{ /* Invalid name? */
  Fri Jul 16 2021 14:42                                                Page 385


 19997 0B:8CC1: 82 1C 00     	brl	L10436
 19998 0B:8CC4: A5 09        	lda	<L806+res_1
 19999 0B:8CC6: C9 04 00     	cmp	#<$4
 20000 0B:8CC9: F0 03        	beq	L810
 20001 0B:8CCB: 82 12 00     	brl	L10436
 20002                        L810:
 20003 0B:8CCE: E2 20        	sep	#$20
 20004                        	longa	off
 20005 0B:8CD0: A5 36        	lda	<L806+dj_1+43
 20006 0B:8CD2: 29 20        	and	#<$20
 20007 0B:8CD4: C2 20        	rep	#$20
 20008                        	longa	on
 20009 0B:8CD6: D0 03        	bne	L811
 20010 0B:8CD8: 82 05 00     	brl	L10436
 20011                        L811:
 20012                        	.line	5695
 20013                        ;			res = FR_INVALID_NAME;
 20014                        	.line	5696
 20015 0B:8CDB: A9 06 00     	lda	#$6
 20016 0B:8CDE: 85 09        	sta	<L806+res_1
 20017                        ;		}
 20018                        	.line	5697
 20019                        ;		if (res == FR_NO_FILE)
 20020                        L10436:
 20021                        	.line	5698
 20022                        ;		{ /* It is clear to create a new directo
                    ry */
 20023 0B:8CE0: A5 09        	lda	<L806+res_1
 20024 0B:8CE2: C9 04 00     	cmp	#<$4
 20025 0B:8CE5: F0 03        	beq	L812
 20026 0B:8CE7: 82 EA 01     	brl	L10437
 20027                        L812:
 20028                        	.line	5699
 20029                        ;			sobj.fs = fs; /* New object id t
                    o create a new chain */
 20030                        	.line	5700
 20031 0B:8CEA: A5 4B        	lda	<L806+fs_1
 20032 0B:8CEC: 85 3B        	sta	<L806+sobj_1
 20033 0B:8CEE: A5 4D        	lda	<L806+fs_1+2
 20034 0B:8CF0: 85 3D        	sta	<L806+sobj_1+2
 20035                        ;			dcl = create_chain(&sobj, 0); /*
                     Allocate a cluster for the new directory */
 20036                        	.line	5701
 20037 0B:8CF2: F4 00 00     	pea	#^$0
 20038 0B:8CF5: F4 00 00     	pea	#<$0
 20039 0B:8CF8: F4 00 00     	pea	#0
 20040 0B:8CFB: 18           	clc
 20041 0B:8CFC: 7B           	tdc
 20042 0B:8CFD: 69 3B 00     	adc	#<L806+sobj_1
 20043 0B:8D00: 48           	pha
 20044 0B:8D01: 22 4C 4D 0B  	jsl	~~create_chain
 20045 0B:8D05: 85 4F        	sta	<L806+dcl_1
 20046 0B:8D07: 86 51        	stx	<L806+dcl_1+2
 20047                        ;
 20048                        ;			////k_debug_long("f_mkdir::creat
                    e_chain:dcl:",dcl);
 20049                        ;
 20050                        ;			res = FR_OK;
  Fri Jul 16 2021 14:42                                                Page 386


 20051                        	.line	5705
 20052 0B:8D09: 64 09        	stz	<L806+res_1
 20053                        ;			if (dcl == 0)
 20054                        	.line	5706
 20055                        ;				res = FR_DENIED; /* No s
                    pace to allocate a new cluster? */
 20056 0B:8D0B: A5 4F        	lda	<L806+dcl_1
 20057 0B:8D0D: 05 51        	ora	<L806+dcl_1+2
 20058 0B:8D0F: F0 03        	beq	L813
 20059 0B:8D11: 82 05 00     	brl	L10438
 20060                        L813:
 20061                        	.line	5707
 20062 0B:8D14: A9 07 00     	lda	#$7
 20063 0B:8D17: 85 09        	sta	<L806+res_1
 20064                        ;			if (dcl == 1)
 20065                        L10438:
 20066                        	.line	5708
 20067                        ;				res = FR_INT_ERR; /* Any
                     insanity? */
 20068 0B:8D19: A5 4F        	lda	<L806+dcl_1
 20069 0B:8D1B: C9 01 00     	cmp	#<$1
 20070 0B:8D1E: D0 05        	bne	L814
 20071 0B:8D20: A5 51        	lda	<L806+dcl_1+2
 20072 0B:8D22: C9 00 00     	cmp	#^$1
 20073                        L814:
 20074 0B:8D25: F0 03        	beq	L815
 20075 0B:8D27: 82 05 00     	brl	L10439
 20076                        L815:
 20077                        	.line	5709
 20078 0B:8D2A: A9 02 00     	lda	#$2
 20079 0B:8D2D: 85 09        	sta	<L806+res_1
 20080                        ;			if (dcl == 0xFFFFFFFF)
 20081                        L10439:
 20082                        	.line	5710
 20083                        ;				res = FR_DISK_ERR; /* Di
                    sk error? */
 20084 0B:8D2F: A5 4F        	lda	<L806+dcl_1
 20085 0B:8D31: C9 FF FF     	cmp	#<$ffffffff
 20086 0B:8D34: D0 05        	bne	L816
 20087 0B:8D36: A5 51        	lda	<L806+dcl_1+2
 20088 0B:8D38: C9 FF FF     	cmp	#^$ffffffff
 20089                        L816:
 20090 0B:8D3B: F0 03        	beq	L817
 20091 0B:8D3D: 82 05 00     	brl	L10440
 20092                        L817:
 20093                        	.line	5711
 20094 0B:8D40: A9 01 00     	lda	#$1
 20095 0B:8D43: 85 09        	sta	<L806+res_1
 20096                        ;
 20097                        ;			tm = GET_FATTIME();
 20098                        L10440:
 20099                        	.line	5713
 20100 0B:8D45: A9 00 00     	lda	#$0
 20101 0B:8D48: 85 57        	sta	<L806+tm_1
 20102 0B:8D4A: A9 21 52     	lda	#$5221
 20103 0B:8D4D: 85 59        	sta	<L806+tm_1+2
 20104                        ;
 20105                        ;			////k_debug_long("f_mkdir::creat
  Fri Jul 16 2021 14:42                                                Page 387


                    e_chain:tm:",tm);
 20106                        ;			////k_debug_integer("f_mkdir::cr
                    eate_chain:res:",res);
 20107                        ;
 20108                        ;			if (res == FR_OK)
 20109                        	.line	5718
 20110                        ;			{
 20111 0B:8D4F: A5 09        	lda	<L806+res_1
 20112 0B:8D51: F0 03        	beq	L818
 20113 0B:8D53: 82 0B 01     	brl	L10441
 20114                        L818:
 20115                        	.line	5719
 20116                        ;				res = dir_clear(fs, dcl)
                    ; /* Clean up the new table */
 20117                        	.line	5720
 20118 0B:8D56: D4 51        	pei	<L806+dcl_1+2
 20119 0B:8D58: D4 4F        	pei	<L806+dcl_1
 20120 0B:8D5A: D4 4D        	pei	<L806+fs_1+2
 20121 0B:8D5C: D4 4B        	pei	<L806+fs_1
 20122 0B:8D5E: 22 67 50 0B  	jsl	~~dir_clear
 20123 0B:8D62: 85 09        	sta	<L806+res_1
 20124                        ;
 20125                        ;				////k_debug_integer("f_m
                    kdir::dir_clear:",res);
 20126                        ;
 20127                        ;				if (res == FR_OK)
 20128                        	.line	5724
 20129                        ;				{
 20130 0B:8D64: A5 09        	lda	<L806+res_1
 20131 0B:8D66: F0 03        	beq	L819
 20132 0B:8D68: 82 F6 00     	brl	L10442
 20133                        L819:
 20134                        	.line	5725
 20135                        ;					if (!FF_FS_EXFAT
                     || fs->fs_type != FS_EXFAT)
 20136                        	.line	5726
 20137                        ;					{ /* Create dot 
                    entries (FAT only) */
 20138 0B:8D6B: 82 0D 00     	brl	L820
 20139 0B:8D6E: E2 20        	sep	#$20
 20140                        	longa	off
 20141 0B:8D70: A7 4B        	lda	[<L806+fs_1]
 20142 0B:8D72: C9 04        	cmp	#<$4
 20143 0B:8D74: C2 20        	rep	#$20
 20144                        	longa	on
 20145 0B:8D76: D0 03        	bne	L821
 20146 0B:8D78: 82 D7 00     	brl	L10443
 20147                        L821:
 20148                        L820:
 20149                        	.line	5727
 20150                        ;						mem_set(
                    fs->win + DIR_Name, ' ', 11); /* Create "." entry */
 20151                        	.line	5728
 20152 0B:8D7B: F4 0B 00     	pea	#<$b
 20153 0B:8D7E: F4 20 00     	pea	#<$20
 20154 0B:8D81: 18           	clc
 20155 0B:8D82: A9 2F 00     	lda	#$2f
 20156 0B:8D85: 65 4B        	adc	<L806+fs_1
  Fri Jul 16 2021 14:42                                                Page 388


 20157 0B:8D87: 85 01        	sta	<R0
 20158 0B:8D89: A9 00 00     	lda	#$0
 20159 0B:8D8C: 65 4D        	adc	<L806+fs_1+2
 20160 0B:8D8E: 85 03        	sta	<R0+2
 20161 0B:8D90: D4 03        	pei	<R0+2
 20162 0B:8D92: D4 01        	pei	<R0
 20163 0B:8D94: 22 5F 41 0B  	jsl	~~mem_set
 20164                        ;						fs->win[
                    DIR_Name] = '.';
 20165                        	.line	5729
 20166 0B:8D98: E2 20        	sep	#$20
 20167                        	longa	off
 20168 0B:8D9A: A9 2E        	lda	#$2e
 20169 0B:8D9C: A0 2F 00     	ldy	#$2f
 20170 0B:8D9F: 97 4B        	sta	[<L806+fs_1],Y
 20171 0B:8DA1: C2 20        	rep	#$20
 20172                        	longa	on
 20173                        ;						fs->win[
                    DIR_Attr] = AM_DIR;
 20174                        	.line	5730
 20175 0B:8DA3: E2 20        	sep	#$20
 20176                        	longa	off
 20177 0B:8DA5: A9 10        	lda	#$10
 20178 0B:8DA7: A0 3A 00     	ldy	#$3a
 20179 0B:8DAA: 97 4B        	sta	[<L806+fs_1],Y
 20180 0B:8DAC: C2 20        	rep	#$20
 20181                        	longa	on
 20182                        ;						st_dword
                    (fs->win + DIR_ModTime, tm);
 20183                        	.line	5731
 20184 0B:8DAE: D4 59        	pei	<L806+tm_1+2
 20185 0B:8DB0: D4 57        	pei	<L806+tm_1
 20186 0B:8DB2: 18           	clc
 20187 0B:8DB3: A9 45 00     	lda	#$45
 20188 0B:8DB6: 65 4B        	adc	<L806+fs_1
 20189 0B:8DB8: 85 01        	sta	<R0
 20190 0B:8DBA: A9 00 00     	lda	#$0
 20191 0B:8DBD: 65 4D        	adc	<L806+fs_1+2
 20192 0B:8DBF: 85 03        	sta	<R0+2
 20193 0B:8DC1: D4 03        	pei	<R0+2
 20194 0B:8DC3: D4 01        	pei	<R0
 20195 0B:8DC5: 22 96 40 0B  	jsl	~~st_dword
 20196                        ;						st_clust
                    (fs, fs->win, dcl);
 20197                        	.line	5732
 20198 0B:8DC9: D4 51        	pei	<L806+dcl_1+2
 20199 0B:8DCB: D4 4F        	pei	<L806+dcl_1
 20200 0B:8DCD: 18           	clc
 20201 0B:8DCE: A9 2F 00     	lda	#$2f
 20202 0B:8DD1: 65 4B        	adc	<L806+fs_1
 20203 0B:8DD3: 85 01        	sta	<R0
 20204 0B:8DD5: A9 00 00     	lda	#$0
 20205 0B:8DD8: 65 4D        	adc	<L806+fs_1+2
 20206 0B:8DDA: 85 03        	sta	<R0+2
 20207 0B:8DDC: D4 03        	pei	<R0+2
 20208 0B:8DDE: D4 01        	pei	<R0
 20209 0B:8DE0: D4 4D        	pei	<L806+fs_1+2
 20210 0B:8DE2: D4 4B        	pei	<L806+fs_1
  Fri Jul 16 2021 14:42                                                Page 389


 20211 0B:8DE4: 22 83 57 0B  	jsl	~~st_clust
 20212                        ;						mem_cpy(
                    fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
 20213                        	.line	5733
 20214 0B:8DE8: F4 20 00     	pea	#<$20
 20215 0B:8DEB: 18           	clc
 20216 0B:8DEC: A9 2F 00     	lda	#$2f
 20217 0B:8DEF: 65 4B        	adc	<L806+fs_1
 20218 0B:8DF1: 85 01        	sta	<R0
 20219 0B:8DF3: A9 00 00     	lda	#$0
 20220 0B:8DF6: 65 4D        	adc	<L806+fs_1+2
 20221 0B:8DF8: 85 03        	sta	<R0+2
 20222 0B:8DFA: D4 03        	pei	<R0+2
 20223 0B:8DFC: D4 01        	pei	<R0
 20224 0B:8DFE: 18           	clc
 20225 0B:8DFF: A9 4F 00     	lda	#$4f
 20226 0B:8E02: 65 4B        	adc	<L806+fs_1
 20227 0B:8E04: 85 05        	sta	<R1
 20228 0B:8E06: A9 00 00     	lda	#$0
 20229 0B:8E09: 65 4D        	adc	<L806+fs_1+2
 20230 0B:8E0B: 85 07        	sta	<R1+2
 20231 0B:8E0D: D4 07        	pei	<R1+2
 20232 0B:8E0F: D4 05        	pei	<R1
 20233 0B:8E11: 22 13 41 0B  	jsl	~~mem_cpy
 20234                        ;						fs->win[
                    SZDIRE + 1] = '.';
 20235                        	.line	5734
 20236 0B:8E15: E2 20        	sep	#$20
 20237                        	longa	off
 20238 0B:8E17: A9 2E        	lda	#$2e
 20239 0B:8E19: A0 50 00     	ldy	#$50
 20240 0B:8E1C: 97 4B        	sta	[<L806+fs_1],Y
 20241 0B:8E1E: C2 20        	rep	#$20
 20242                        	longa	on
 20243                        ;						pcl = dj
                    .obj.sclust;
 20244                        	.line	5735
 20245 0B:8E20: A5 13        	lda	<L806+dj_1+8
 20246 0B:8E22: 85 53        	sta	<L806+pcl_1
 20247 0B:8E24: A5 15        	lda	<L806+dj_1+10
 20248 0B:8E26: 85 55        	sta	<L806+pcl_1+2
 20249                        ;						st_clust
                    (fs, fs->win + SZDIRE, pcl);
 20250                        	.line	5736
 20251 0B:8E28: D4 55        	pei	<L806+pcl_1+2
 20252 0B:8E2A: D4 53        	pei	<L806+pcl_1
 20253 0B:8E2C: 18           	clc
 20254 0B:8E2D: A9 4F 00     	lda	#$4f
 20255 0B:8E30: 65 4B        	adc	<L806+fs_1
 20256 0B:8E32: 85 01        	sta	<R0
 20257 0B:8E34: A9 00 00     	lda	#$0
 20258 0B:8E37: 65 4D        	adc	<L806+fs_1+2
 20259 0B:8E39: 85 03        	sta	<R0+2
 20260 0B:8E3B: D4 03        	pei	<R0+2
 20261 0B:8E3D: D4 01        	pei	<R0
 20262 0B:8E3F: D4 4D        	pei	<L806+fs_1+2
 20263 0B:8E41: D4 4B        	pei	<L806+fs_1
 20264 0B:8E43: 22 83 57 0B  	jsl	~~st_clust
  Fri Jul 16 2021 14:42                                                Page 390


 20265                        ;						fs->wfla
                    g = 1;
 20266                        	.line	5737
 20267 0B:8E47: E2 20        	sep	#$20
 20268                        	longa	off
 20269 0B:8E49: A9 01        	lda	#$1
 20270 0B:8E4B: A0 03 00     	ldy	#$3
 20271 0B:8E4E: 97 4B        	sta	[<L806+fs_1],Y
 20272 0B:8E50: C2 20        	rep	#$20
 20273                        	longa	on
 20274                        ;					}
 20275                        	.line	5738
 20276                        ;					res = dir_regist
                    er(&dj); /* Register the object to the parent directoy */
 20277                        L10443:
 20278                        	.line	5739
 20279 0B:8E52: F4 00 00     	pea	#0
 20280 0B:8E55: 18           	clc
 20281 0B:8E56: 7B           	tdc
 20282 0B:8E57: 69 0B 00     	adc	#<L806+dj_1
 20283 0B:8E5A: 48           	pha
 20284 0B:8E5B: 22 10 5A 0B  	jsl	~~dir_register
 20285 0B:8E5F: 85 09        	sta	<L806+res_1
 20286                        ;					////k_debug_inte
                    ger("f_mkdir::dir_register:",res);
 20287                        ;				}
 20288                        	.line	5741
 20289                        ;			}
 20290                        L10442:
 20291                        	.line	5742
 20292                        ;			if (res == FR_OK)
 20293                        L10441:
 20294                        	.line	5743
 20295                        ;			{
 20296 0B:8E61: A5 09        	lda	<L806+res_1
 20297 0B:8E63: F0 03        	beq	L822
 20298 0B:8E65: 82 55 00     	brl	L10444
 20299                        L822:
 20300                        	.line	5744
 20301                        ;#if FF_FS_EXFAT
 20302                        ;				if (fs->fs_type == FS_EX
                    FAT)
 20303                        ;				{ /* Initialize director
                    y entry block */
 20304                        ;					st_dword(fs->dir
                    buf + XDIR_ModTime, tm); /* Created time */
 20305                        ;					st_dword(fs->dir
                    buf + XDIR_FstClus, dcl); /* Table start cluster */
 20306                        ;					st_dword(fs->dir
                    buf + XDIR_FileSize, (DWORD)fs->csize * SS(fs)); /* Director
                    y size needs to be valid */
 20307                        ;					st_dword(fs->dir
                    buf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
 20308                        ;					fs->dirbuf[XDIR_
                    GenFlags] = 3; /* Initialize the object flag */
 20309                        ;					fs->dirbuf[XDIR_
                    Attr] = AM_DIR; /* Attribute */
 20310                        ;					res = store_xdir
  Fri Jul 16 2021 14:42                                                Page 391


                    (&dj);
 20311                        ;				}
 20312                        ;				else
 20313                        ;#endif
 20314                        ;				{
 20315                        	.line	5758
 20316                        ;					st_dword(dj.dir 
                    + DIR_ModTime, tm); /* Created time */
 20317                        	.line	5759
 20318 0B:8E68: D4 59        	pei	<L806+tm_1+2
 20319 0B:8E6A: D4 57        	pei	<L806+tm_1
 20320 0B:8E6C: 18           	clc
 20321 0B:8E6D: A9 16 00     	lda	#$16
 20322 0B:8E70: 65 27        	adc	<L806+dj_1+28
 20323 0B:8E72: 85 01        	sta	<R0
 20324 0B:8E74: A9 00 00     	lda	#$0
 20325 0B:8E77: 65 29        	adc	<L806+dj_1+30
 20326 0B:8E79: 85 03        	sta	<R0+2
 20327 0B:8E7B: D4 03        	pei	<R0+2
 20328 0B:8E7D: D4 01        	pei	<R0
 20329 0B:8E7F: 22 96 40 0B  	jsl	~~st_dword
 20330                        ;					st_clust(fs, dj.
                    dir, dcl); /* Table start cluster */
 20331                        	.line	5760
 20332 0B:8E83: D4 51        	pei	<L806+dcl_1+2
 20333 0B:8E85: D4 4F        	pei	<L806+dcl_1
 20334 0B:8E87: D4 29        	pei	<L806+dj_1+30
 20335 0B:8E89: D4 27        	pei	<L806+dj_1+28
 20336 0B:8E8B: D4 4D        	pei	<L806+fs_1+2
 20337 0B:8E8D: D4 4B        	pei	<L806+fs_1
 20338 0B:8E8F: 22 83 57 0B  	jsl	~~st_clust
 20339                        ;					dj.dir[DIR_Attr]
                     = AM_DIR; /* Attribute */
 20340                        	.line	5761
 20341 0B:8E93: E2 20        	sep	#$20
 20342                        	longa	off
 20343 0B:8E95: A9 10        	lda	#$10
 20344 0B:8E97: A0 0B 00     	ldy	#$b
 20345 0B:8E9A: 97 27        	sta	[<L806+dj_1+28],Y
 20346 0B:8E9C: C2 20        	rep	#$20
 20347                        	longa	on
 20348                        ;					fs->wflag = 1;
 20349                        	.line	5762
 20350 0B:8E9E: E2 20        	sep	#$20
 20351                        	longa	off
 20352 0B:8EA0: A9 01        	lda	#$1
 20353 0B:8EA2: A0 03 00     	ldy	#$3
 20354 0B:8EA5: 97 4B        	sta	[<L806+fs_1],Y
 20355 0B:8EA7: C2 20        	rep	#$20
 20356                        	longa	on
 20357                        ;				}
 20358                        	.line	5763
 20359                        ;				if (res == FR_OK)
 20360                        	.line	5764
 20361                        ;				{
 20362 0B:8EA9: A5 09        	lda	<L806+res_1
 20363 0B:8EAB: F0 03        	beq	L823
 20364 0B:8EAD: 82 0A 00     	brl	L10445
  Fri Jul 16 2021 14:42                                                Page 392


 20365                        L823:
 20366                        	.line	5765
 20367                        ;					res = sync_fs(fs
                    );
 20368                        	.line	5766
 20369 0B:8EB0: D4 4D        	pei	<L806+fs_1+2
 20370 0B:8EB2: D4 4B        	pei	<L806+fs_1
 20371 0B:8EB4: 22 05 44 0B  	jsl	~~sync_fs
 20372 0B:8EB8: 85 09        	sta	<L806+res_1
 20373                        ;				}
 20374                        	.line	5767
 20375                        ;
 20376                        ;				////k_debug_integer("f_m
                    kdir::sync_fs:",res);
 20377                        ;			}
 20378                        L10445:
 20379                        	.line	5770
 20380                        ;			else
 20381 0B:8EBA: 82 17 00     	brl	L10446
 20382                        L10444:
 20383                        ;			{
 20384                        	.line	5772
 20385                        ;				remove_chain(&sobj, dcl,
                     0); /* Could not register, remove the allocated cluster */
 20386                        	.line	5773
 20387 0B:8EBD: F4 00 00     	pea	#^$0
 20388 0B:8EC0: F4 00 00     	pea	#<$0
 20389 0B:8EC3: D4 51        	pei	<L806+dcl_1+2
 20390 0B:8EC5: D4 4F        	pei	<L806+dcl_1
 20391 0B:8EC7: F4 00 00     	pea	#0
 20392 0B:8ECA: 18           	clc
 20393 0B:8ECB: 7B           	tdc
 20394 0B:8ECC: 69 3B 00     	adc	#<L806+sobj_1
 20395 0B:8ECF: 48           	pha
 20396 0B:8ED0: 22 C3 4B 0B  	jsl	~~remove_chain
 20397                        ;			}
 20398                        	.line	5774
 20399                        L10446:
 20400                        ;		} FREE_NAMBUF();
 20401                        	.line	5775
 20402                        L10437:
 20403                        	.line	5775
 20404                        ;	}
 20405                        	.line	5776
 20406                        ;
 20407                        ;	LEAVE_FF(fs, res);
 20408                        L10434:
 20409                        	.line	5778
 20410 0B:8ED4: A5 09        	lda	<L806+res_1
 20411                        L824:
 20412 0B:8ED6: A8           	tay
 20413 0B:8ED7: A5 5C        	lda	<L805+2
 20414 0B:8ED9: 85 60        	sta	<L805+2+4
 20415 0B:8EDB: A5 5B        	lda	<L805+1
 20416 0B:8EDD: 85 5F        	sta	<L805+1+4
 20417 0B:8EDF: 2B           	pld
 20418 0B:8EE0: 3B           	tsc
 20419 0B:8EE1: 18           	clc
  Fri Jul 16 2021 14:42                                                Page 393


 20420 0B:8EE2: 69 5E 00     	adc	#L805+4
 20421 0B:8EE5: 1B           	tcs
 20422 0B:8EE6: 98           	tya
 20423 0B:8EE7: 6B           	rtl
 20424                        ;}
 20425                        	.line	5779
 20426                        	.endblock	5779
 20427             0000005A   L805	equ	90
 20428             00000009   L806	equ	9
 20429 0B:8EE8:              	ends
 20430                        	efunc
 20431                        	.endfunc	5779,9,90
 20432                        	.line	5779
 20433                        ;
 20434                        ;/*-----------------------------------------------
                    ------------------------*/
 20435                        ;/* Rename a File/Directory                       
                                            */
 20436                        ;/*-----------------------------------------------
                    ------------------------*/
 20437                        ;
 20438                        ;FRESULT f_rename(const TCHAR* path_old, /* Pointe
                    r to the object name to be renamed */
 20439                        ;const TCHAR* path_new /* Pointer to the new name 
                    */
 20440                        ;)
 20441                        ;{
 20442                        	.line	5785
 20443                        	.line	5788
 20444                        	FFDOS
 20445                        	xdef	~~f_rename
 20446                        	func
 20447                        	.function	5788
 20448                        ~~f_rename:
 20449                        	longa	on
 20450                        	longi	on
 20451 0B:8EE8: 3B           	tsc
 20452 0B:8EE9: 38           	sec
 20453 0B:8EEA: E9 92 00     	sbc	#L825
 20454 0B:8EED: 1B           	tcs
 20455 0B:8EEE: 0B           	phd
 20456 0B:8EEF: 5B           	tcd
 20457             00000004   path_old_0	set	4
 20458             00000008   path_new_0	set	8
 20459                        	.block	5788
 20460                        ;	FRESULT res;
 20461                        ;	DIR djo, djn;
 20462                        ;	FATFS *fs;
 20463                        ;	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *di
                    r;
 20464                        ;	LBA_t sect;
 20465                        ;	DEF_NAMBUF
 20466                        ;
 20467                        ;	get_ldnumber(&path_new); /* Snip the drive numbe
                    r of new name off */
 20468             00000000   res_1	set	0
 20469             00000002   djo_1	set	2
 20470             00000032   djn_1	set	50
  Fri Jul 16 2021 14:42                                                Page 394


 20471             00000062   fs_1	set	98
 20472             00000066   buf_1	set	102
 20473             00000086   dir_1	set	134
 20474             0000008A   sect_1	set	138
 20475                        	.sym	res,0,5,1,16
 20476                        	.sym	djo,2,10,1,384,52
 20477                        	.sym	djn,50,10,1,384,52
 20478                        	.sym	fs,98,138,1,32,49
 20479                        	.sym	buf,102,110,1,0,32
 20480                        	.sym	dir,134,142,1,32
 20481                        	.sym	sect,138,18,1,32
 20482                        	.sym	path_old,4,142,6,32
 20483                        	.sym	path_new,8,142,6,32
 20484                        	.line	5796
 20485 0B:8EF0: F4 00 00     	pea	#0
 20486 0B:8EF3: 18           	clc
 20487 0B:8EF4: 7B           	tdc
 20488 0B:8EF5: 69 9A 00     	adc	#<L825+path_new_0
 20489 0B:8EF8: 48           	pha
 20490 0B:8EF9: 22 E8 61 0B  	jsl	~~get_ldnumber
 20491                        ;	res = mount_volume(&path_old, &fs, FA_WRITE); /*
                     Get logical drive of the old object */
 20492                        	.line	5797
 20493 0B:8EFD: F4 02 00     	pea	#<$2
 20494 0B:8F00: F4 00 00     	pea	#0
 20495 0B:8F03: 18           	clc
 20496 0B:8F04: 7B           	tdc
 20497 0B:8F05: 69 67 00     	adc	#<L826+fs_1
 20498 0B:8F08: 48           	pha
 20499 0B:8F09: F4 00 00     	pea	#0
 20500 0B:8F0C: 18           	clc
 20501 0B:8F0D: 7B           	tdc
 20502 0B:8F0E: 69 96 00     	adc	#<L825+path_old_0
 20503 0B:8F11: 48           	pha
 20504 0B:8F12: 22 F6 66 0B  	jsl	~~mount_volume
 20505 0B:8F16: 85 05        	sta	<L826+res_1
 20506                        ;	if (res == FR_OK)
 20507                        	.line	5798
 20508                        ;	{
 20509 0B:8F18: A5 05        	lda	<L826+res_1
 20510 0B:8F1A: F0 03        	beq	L828
 20511 0B:8F1C: 82 F8 01     	brl	L10447
 20512                        L828:
 20513                        	.line	5799
 20514                        ;		djo.obj.fs = fs;
 20515                        	.line	5800
 20516 0B:8F1F: A5 67        	lda	<L826+fs_1
 20517 0B:8F21: 85 07        	sta	<L826+djo_1
 20518 0B:8F23: A5 69        	lda	<L826+fs_1+2
 20519 0B:8F25: 85 09        	sta	<L826+djo_1+2
 20520                        ;		INIT_NAMBUF(fs);
 20521                        	.line	5801
 20522                        ;		res = follow_path(&djo, path_old); /* Ch
                    eck old object */
 20523                        	.line	5802
 20524 0B:8F27: D4 98        	pei	<L825+path_old_0+2
 20525 0B:8F29: D4 96        	pei	<L825+path_old_0
 20526 0B:8F2B: F4 00 00     	pea	#0
  Fri Jul 16 2021 14:42                                                Page 395


 20527 0B:8F2E: 18           	clc
 20528 0B:8F2F: 7B           	tdc
 20529 0B:8F30: 69 07 00     	adc	#<L826+djo_1
 20530 0B:8F33: 48           	pha
 20531 0B:8F34: 22 73 60 0B  	jsl	~~follow_path
 20532 0B:8F38: 85 05        	sta	<L826+res_1
 20533                        ;		if (res == FR_OK && (djo.fn[NSFLAG] & (N
                    S_DOT | NS_NONAME)))
 20534                        	.line	5803
 20535                        ;			res = FR_INVALID_NAME; /* Check 
                    validity of name */
 20536 0B:8F3A: A5 05        	lda	<L826+res_1
 20537 0B:8F3C: F0 03        	beq	L829
 20538 0B:8F3E: 82 12 00     	brl	L10448
 20539                        L829:
 20540 0B:8F41: E2 20        	sep	#$20
 20541                        	longa	off
 20542 0B:8F43: A5 32        	lda	<L826+djo_1+43
 20543 0B:8F45: 29 A0        	and	#<$a0
 20544 0B:8F47: C2 20        	rep	#$20
 20545                        	longa	on
 20546 0B:8F49: D0 03        	bne	L830
 20547 0B:8F4B: 82 05 00     	brl	L10448
 20548                        L830:
 20549                        	.line	5804
 20550 0B:8F4E: A9 06 00     	lda	#$6
 20551 0B:8F51: 85 05        	sta	<L826+res_1
 20552                        ;#if FF_FS_LOCK != 0
 20553                        ;		if (res == FR_OK)
 20554                        ;		{
 20555                        ;			res = chk_lock(&djo, 2);
 20556                        ;		}
 20557                        ;#endif
 20558                        ;		if (res == FR_OK)
 20559                        L10448:
 20560                        	.line	5811
 20561                        ;		{ /* Object to be renamed is found */
 20562 0B:8F53: A5 05        	lda	<L826+res_1
 20563 0B:8F55: F0 03        	beq	L831
 20564 0B:8F57: 82 BD 01     	brl	L10449
 20565                        L831:
 20566                        	.line	5812
 20567                        ;#if FF_FS_EXFAT
 20568                        ;			if (fs->fs_type == FS_EXFAT)
 20569                        ;			{ /* At exFAT volume */
 20570                        ;				BYTE nf, nn;
 20571                        ;				WORD nh;
 20572                        ;
 20573                        ;				mem_cpy(buf, fs->dirbuf,
                     SZDIRE * 2); /* Save 85+C0 entry of old object */
 20574                        ;				mem_cpy(&djn, &djo, size
                    of djo);
 20575                        ;				res = follow_path(&djn, 
                    path_new); /* Make sure if new object name is not in use */
 20576                        ;				if (res == FR_OK)
 20577                        ;				{ /* Is new name already
                     in use by any other object? */
 20578                        ;					res = (djn.obj.s
  Fri Jul 16 2021 14:42                                                Page 396


                    clust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FIL
                    E : FR_EXIST;
 20579                        ;				}
 20580                        ;				if (res == FR_NO_FILE)
 20581                        ;				{ /* It is a valid path 
                    and no name collision */
 20582                        ;					res = dir_regist
                    er(&djn); /* Register the new entry */
 20583                        ;					if (res == FR_OK
                    )
 20584                        ;					{
 20585                        ;						nf = fs-
                    >dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
 20586                        ;						nh = ld_
                    word(fs->dirbuf + XDIR_NameHash);
 20587                        ;						mem_cpy(
                    fs->dirbuf, buf, SZDIRE * 2); /* Restore 85+C0 entry */
 20588                        ;						fs->dirb
                    uf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
 20589                        ;						st_word(
                    fs->dirbuf + XDIR_NameHash, nh);
 20590                        ;						if (!(fs
                    ->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_A
                    RC; /* Set archive attribute if it is a file */
 20591                        ;						/* Start
                     of critical section where an interruption can cause a cross
                    -link */
 20592                        ;						res = st
                    ore_xdir(&djn);
 20593                        ;					}
 20594                        ;				}
 20595                        ;			}
 20596                        ;			else
 20597                        ;#endif
 20598                        ;			{ /* At FAT/FAT32 volume */
 20599                        	.line	5844
 20600                        ;				mem_cpy(buf, djo.dir, SZ
                    DIRE); /* Save directory entry of the object */
 20601                        	.line	5845
 20602 0B:8F5A: F4 20 00     	pea	#<$20
 20603 0B:8F5D: D4 25        	pei	<L826+djo_1+30
 20604 0B:8F5F: D4 23        	pei	<L826+djo_1+28
 20605 0B:8F61: F4 00 00     	pea	#0
 20606 0B:8F64: 18           	clc
 20607 0B:8F65: 7B           	tdc
 20608 0B:8F66: 69 6B 00     	adc	#<L826+buf_1
 20609 0B:8F69: 48           	pha
 20610 0B:8F6A: 22 13 41 0B  	jsl	~~mem_cpy
 20611                        ;				mem_cpy(&djn, &djo, size
                    of(DIR)); /* Duplicate the directory object */
 20612                        	.line	5846
 20613 0B:8F6E: F4 30 00     	pea	#<$30
 20614 0B:8F71: F4 00 00     	pea	#0
 20615 0B:8F74: 18           	clc
 20616 0B:8F75: 7B           	tdc
 20617 0B:8F76: 69 07 00     	adc	#<L826+djo_1
 20618 0B:8F79: 48           	pha
 20619 0B:8F7A: F4 00 00     	pea	#0
  Fri Jul 16 2021 14:42                                                Page 397


 20620 0B:8F7D: 18           	clc
 20621 0B:8F7E: 7B           	tdc
 20622 0B:8F7F: 69 37 00     	adc	#<L826+djn_1
 20623 0B:8F82: 48           	pha
 20624 0B:8F83: 22 13 41 0B  	jsl	~~mem_cpy
 20625                        ;				res = follow_path(&djn, 
                    path_new); /* Make sure if new object name is not in use */
 20626                        	.line	5847
 20627 0B:8F87: D4 9C        	pei	<L825+path_new_0+2
 20628 0B:8F89: D4 9A        	pei	<L825+path_new_0
 20629 0B:8F8B: F4 00 00     	pea	#0
 20630 0B:8F8E: 18           	clc
 20631 0B:8F8F: 7B           	tdc
 20632 0B:8F90: 69 37 00     	adc	#<L826+djn_1
 20633 0B:8F93: 48           	pha
 20634 0B:8F94: 22 73 60 0B  	jsl	~~follow_path
 20635 0B:8F98: 85 05        	sta	<L826+res_1
 20636                        ;				if (res == FR_OK)
 20637                        	.line	5848
 20638                        ;				{ /* Is new name already
                     in use by any other object? */
 20639 0B:8F9A: A5 05        	lda	<L826+res_1
 20640 0B:8F9C: F0 03        	beq	L832
 20641 0B:8F9E: 82 28 00     	brl	L10450
 20642                        L832:
 20643                        	.line	5849
 20644                        ;					res = (djn.obj.s
                    clust == djo.obj.sclust
 20645                        	.line	5850
 20646                        ;							
                    && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 20647 0B:8FA1: A5 3F        	lda	<L826+djn_1+8
 20648 0B:8FA3: C5 0F        	cmp	<L826+djo_1+8
 20649 0B:8FA5: D0 04        	bne	L834
 20650 0B:8FA7: A5 41        	lda	<L826+djn_1+10
 20651 0B:8FA9: C5 11        	cmp	<L826+djo_1+10
 20652                        L834:
 20653 0B:8FAB: F0 03        	beq	L835
 20654 0B:8FAD: 82 14 00     	brl	L833
 20655                        L835:
 20656 0B:8FB0: A5 47        	lda	<L826+djn_1+16
 20657 0B:8FB2: C5 17        	cmp	<L826+djo_1+16
 20658 0B:8FB4: D0 04        	bne	L836
 20659 0B:8FB6: A5 49        	lda	<L826+djn_1+18
 20660 0B:8FB8: C5 19        	cmp	<L826+djo_1+18
 20661                        L836:
 20662 0B:8FBA: F0 03        	beq	L837
 20663 0B:8FBC: 82 05 00     	brl	L833
 20664                        L837:
 20665 0B:8FBF: A9 04 00     	lda	#$4
 20666 0B:8FC2: 80 03        	bra	L838
 20667                        L833:
 20668 0B:8FC4: A9 08 00     	lda	#$8
 20669                        L838:
 20670 0B:8FC7: 85 05        	sta	<L826+res_1
 20671                        ;				}
 20672                        	.line	5852
 20673                        ;				if (res == FR_NO_FILE)
  Fri Jul 16 2021 14:42                                                Page 398


 20674                        L10450:
 20675                        	.line	5853
 20676                        ;				{ /* It is a valid path 
                    and no name collision */
 20677 0B:8FC9: A5 05        	lda	<L826+res_1
 20678 0B:8FCB: C9 04 00     	cmp	#<$4
 20679 0B:8FCE: F0 03        	beq	L839
 20680 0B:8FD0: 82 1D 01     	brl	L10451
 20681                        L839:
 20682                        	.line	5854
 20683                        ;					res = dir_regist
                    er(&djn); /* Register the new entry */
 20684                        	.line	5855
 20685 0B:8FD3: F4 00 00     	pea	#0
 20686 0B:8FD6: 18           	clc
 20687 0B:8FD7: 7B           	tdc
 20688 0B:8FD8: 69 37 00     	adc	#<L826+djn_1
 20689 0B:8FDB: 48           	pha
 20690 0B:8FDC: 22 10 5A 0B  	jsl	~~dir_register
 20691 0B:8FE0: 85 05        	sta	<L826+res_1
 20692                        ;					if (res == FR_OK
                    )
 20693                        	.line	5856
 20694                        ;					{
 20695 0B:8FE2: A5 05        	lda	<L826+res_1
 20696 0B:8FE4: F0 03        	beq	L840
 20697 0B:8FE6: 82 07 01     	brl	L10452
 20698                        L840:
 20699                        	.line	5857
 20700                        ;						dir = dj
                    n.dir; /* Copy directory entry of the object except name */
 20701                        	.line	5858
 20702 0B:8FE9: A5 53        	lda	<L826+djn_1+28
 20703 0B:8FEB: 85 8B        	sta	<L826+dir_1
 20704 0B:8FED: A5 55        	lda	<L826+djn_1+30
 20705 0B:8FEF: 85 8D        	sta	<L826+dir_1+2
 20706                        ;						mem_cpy(
                    dir + 13, buf + 13, SZDIRE - 13);
 20707                        	.line	5859
 20708 0B:8FF1: F4 13 00     	pea	#<$13
 20709 0B:8FF4: F4 00 00     	pea	#0
 20710 0B:8FF7: 18           	clc
 20711 0B:8FF8: 7B           	tdc
 20712 0B:8FF9: 69 78 00     	adc	#<L826+buf_1+13
 20713 0B:8FFC: 48           	pha
 20714 0B:8FFD: 18           	clc
 20715 0B:8FFE: A9 0D 00     	lda	#$d
 20716 0B:9001: 65 8B        	adc	<L826+dir_1
 20717 0B:9003: 85 01        	sta	<R0
 20718 0B:9005: A9 00 00     	lda	#$0
 20719 0B:9008: 65 8D        	adc	<L826+dir_1+2
 20720 0B:900A: 85 03        	sta	<R0+2
 20721 0B:900C: D4 03        	pei	<R0+2
 20722 0B:900E: D4 01        	pei	<R0
 20723 0B:9010: 22 13 41 0B  	jsl	~~mem_cpy
 20724                        ;						dir[DIR_
                    Attr] = buf[DIR_Attr];
 20725                        	.line	5860
  Fri Jul 16 2021 14:42                                                Page 399


 20726 0B:9014: E2 20        	sep	#$20
 20727                        	longa	off
 20728 0B:9016: A5 76        	lda	<L826+buf_1+11
 20729 0B:9018: A0 0B 00     	ldy	#$b
 20730 0B:901B: 97 8B        	sta	[<L826+dir_1],Y
 20731 0B:901D: C2 20        	rep	#$20
 20732                        	longa	on
 20733                        ;						if (!(di
                    r[DIR_Attr] & AM_DIR))
 20734                        	.line	5861
 20735                        ;							
                    dir[DIR_Attr] |= AM_ARC; /* Set archive attribute if it is a
                     file */
 20736 0B:901F: E2 20        	sep	#$20
 20737                        	longa	off
 20738 0B:9021: A0 0B 00     	ldy	#$b
 20739 0B:9024: B7 8B        	lda	[<L826+dir_1],Y
 20740 0B:9026: 29 10        	and	#<$10
 20741 0B:9028: C2 20        	rep	#$20
 20742                        	longa	on
 20743 0B:902A: F0 03        	beq	L841
 20744 0B:902C: 82 19 00     	brl	L10453
 20745                        L841:
 20746                        	.line	5862
 20747 0B:902F: 18           	clc
 20748 0B:9030: A9 0B 00     	lda	#$b
 20749 0B:9033: 65 8B        	adc	<L826+dir_1
 20750 0B:9035: 85 01        	sta	<R0
 20751 0B:9037: A9 00 00     	lda	#$0
 20752 0B:903A: 65 8D        	adc	<L826+dir_1+2
 20753 0B:903C: 85 03        	sta	<R0+2
 20754 0B:903E: E2 20        	sep	#$20
 20755                        	longa	off
 20756 0B:9040: A7 01        	lda	[<R0]
 20757 0B:9042: 09 20        	ora	#<$20
 20758 0B:9044: 87 01        	sta	[<R0]
 20759 0B:9046: C2 20        	rep	#$20
 20760                        	longa	on
 20761                        ;						fs->wfla
                    g = 1;
 20762                        L10453:
 20763                        	.line	5863
 20764 0B:9048: E2 20        	sep	#$20
 20765                        	longa	off
 20766 0B:904A: A9 01        	lda	#$1
 20767 0B:904C: A0 03 00     	ldy	#$3
 20768 0B:904F: 97 67        	sta	[<L826+fs_1],Y
 20769 0B:9051: C2 20        	rep	#$20
 20770                        	longa	on
 20771                        ;						if ((dir
                    [DIR_Attr] & AM_DIR)
 20772                        	.line	5864
 20773                        ;							
                    	&& djo.obj.sclust != djn.obj.sclust)
 20774                        ;						{ /* Upd
                    ate .. entry in the sub-directory if needed */
 20775 0B:9053: E2 20        	sep	#$20
 20776                        	longa	off
  Fri Jul 16 2021 14:42                                                Page 400


 20777 0B:9055: A0 0B 00     	ldy	#$b
 20778 0B:9058: B7 8B        	lda	[<L826+dir_1],Y
 20779 0B:905A: 29 10        	and	#<$10
 20780 0B:905C: C2 20        	rep	#$20
 20781                        	longa	on
 20782 0B:905E: D0 03        	bne	L842
 20783 0B:9060: 82 8D 00     	brl	L10454
 20784                        L842:
 20785 0B:9063: A5 0F        	lda	<L826+djo_1+8
 20786 0B:9065: C5 3F        	cmp	<L826+djn_1+8
 20787 0B:9067: D0 04        	bne	L843
 20788 0B:9069: A5 11        	lda	<L826+djo_1+10
 20789 0B:906B: C5 41        	cmp	<L826+djn_1+10
 20790                        L843:
 20791 0B:906D: D0 03        	bne	L844
 20792 0B:906F: 82 7E 00     	brl	L10454
 20793                        L844:
 20794                        	.line	5866
 20795                        ;							
                    sect = clst2sect(fs, ld_clust(fs, dir));
 20796                        	.line	5867
 20797 0B:9072: D4 8D        	pei	<L826+dir_1+2
 20798 0B:9074: D4 8B        	pei	<L826+dir_1
 20799 0B:9076: D4 69        	pei	<L826+fs_1+2
 20800 0B:9078: D4 67        	pei	<L826+fs_1
 20801 0B:907A: 22 F3 56 0B  	jsl	~~ld_clust
 20802 0B:907E: 85 01        	sta	<R0
 20803 0B:9080: 86 03        	stx	<R0+2
 20804 0B:9082: DA           	phx
 20805 0B:9083: 48           	pha
 20806 0B:9084: D4 69        	pei	<L826+fs_1+2
 20807 0B:9086: D4 67        	pei	<L826+fs_1
 20808 0B:9088: 22 7E 45 0B  	jsl	~~clst2sect
 20809 0B:908C: 85 8F        	sta	<L826+sect_1
 20810 0B:908E: 86 91        	stx	<L826+sect_1+2
 20811                        ;							
                    if (sect == 0)
 20812                        	.line	5868
 20813                        ;							
                    {
 20814 0B:9090: A5 8F        	lda	<L826+sect_1
 20815 0B:9092: 05 91        	ora	<L826+sect_1+2
 20816 0B:9094: F0 03        	beq	L845
 20817 0B:9096: 82 08 00     	brl	L10455
 20818                        L845:
 20819                        	.line	5869
 20820                        ;							
                    	res = FR_INT_ERR;
 20821                        	.line	5870
 20822 0B:9099: A9 02 00     	lda	#$2
 20823 0B:909C: 85 05        	sta	<L826+res_1
 20824                        ;							
                    }
 20825                        	.line	5871
 20826                        ;							
                    else
 20827 0B:909E: 82 4F 00     	brl	L10456
 20828                        L10455:
  Fri Jul 16 2021 14:42                                                Page 401


 20829                        ;							
                    {
 20830                        	.line	5873
 20831                        ;							
                    	/* Start of critical section where an interruption can c
                    ause a cross-link */
 20832                        ;							
                    	res = move_window(fs, sect);
 20833                        	.line	5875
 20834 0B:90A1: D4 91        	pei	<L826+sect_1+2
 20835 0B:90A3: D4 8F        	pei	<L826+sect_1
 20836 0B:90A5: D4 69        	pei	<L826+fs_1+2
 20837 0B:90A7: D4 67        	pei	<L826+fs_1
 20838 0B:90A9: 22 7A 43 0B  	jsl	~~move_window
 20839 0B:90AD: 85 05        	sta	<L826+res_1
 20840                        ;							
                    	dir = fs->win + SZDIRE * 1; /* Ptr to .. entry */
 20841                        	.line	5876
 20842 0B:90AF: 18           	clc
 20843 0B:90B0: A9 4F 00     	lda	#$4f
 20844 0B:90B3: 65 67        	adc	<L826+fs_1
 20845 0B:90B5: 85 8B        	sta	<L826+dir_1
 20846 0B:90B7: A9 00 00     	lda	#$0
 20847 0B:90BA: 65 69        	adc	<L826+fs_1+2
 20848 0B:90BC: 85 8D        	sta	<L826+dir_1+2
 20849                        ;							
                    	if (res == FR_OK && dir[1] == '.')
 20850                        	.line	5877
 20851                        ;							
                    	{
 20852 0B:90BE: A5 05        	lda	<L826+res_1
 20853 0B:90C0: F0 03        	beq	L846
 20854 0B:90C2: 82 2B 00     	brl	L10457
 20855                        L846:
 20856 0B:90C5: E2 20        	sep	#$20
 20857                        	longa	off
 20858 0B:90C7: A0 01 00     	ldy	#$1
 20859 0B:90CA: B7 8B        	lda	[<L826+dir_1],Y
 20860 0B:90CC: C9 2E        	cmp	#<$2e
 20861 0B:90CE: C2 20        	rep	#$20
 20862                        	longa	on
 20863 0B:90D0: F0 03        	beq	L847
 20864 0B:90D2: 82 1B 00     	brl	L10457
 20865                        L847:
 20866                        	.line	5878
 20867                        ;							
                    		st_clust(fs, dir, djn.obj.sclust);
 20868                        	.line	5879
 20869 0B:90D5: D4 41        	pei	<L826+djn_1+10
 20870 0B:90D7: D4 3F        	pei	<L826+djn_1+8
 20871 0B:90D9: D4 8D        	pei	<L826+dir_1+2
 20872 0B:90DB: D4 8B        	pei	<L826+dir_1
 20873 0B:90DD: D4 69        	pei	<L826+fs_1+2
 20874 0B:90DF: D4 67        	pei	<L826+fs_1
 20875 0B:90E1: 22 83 57 0B  	jsl	~~st_clust
 20876                        ;							
                    		fs->wflag = 1;
 20877                        	.line	5880
  Fri Jul 16 2021 14:42                                                Page 402


 20878 0B:90E5: E2 20        	sep	#$20
 20879                        	longa	off
 20880 0B:90E7: A9 01        	lda	#$1
 20881 0B:90E9: A0 03 00     	ldy	#$3
 20882 0B:90EC: 97 67        	sta	[<L826+fs_1],Y
 20883 0B:90EE: C2 20        	rep	#$20
 20884                        	longa	on
 20885                        ;							
                    	}
 20886                        	.line	5881
 20887                        ;							
                    }
 20888                        L10457:
 20889                        	.line	5882
 20890                        L10456:
 20891                        ;						}
 20892                        	.line	5883
 20893                        ;					}
 20894                        L10454:
 20895                        	.line	5884
 20896                        ;				}
 20897                        L10452:
 20898                        	.line	5885
 20899                        ;			}
 20900                        L10451:
 20901                        	.line	5886
 20902                        ;			if (res == FR_OK)
 20903                        	.line	5887
 20904                        ;			{
 20905 0B:90F0: A5 05        	lda	<L826+res_1
 20906 0B:90F2: F0 03        	beq	L848
 20907 0B:90F4: 82 20 00     	brl	L10458
 20908                        L848:
 20909                        	.line	5888
 20910                        ;				res = dir_remove(&djo); 
                    /* Remove old entry */
 20911                        	.line	5889
 20912 0B:90F7: F4 00 00     	pea	#0
 20913 0B:90FA: 18           	clc
 20914 0B:90FB: 7B           	tdc
 20915 0B:90FC: 69 07 00     	adc	#<L826+djo_1
 20916 0B:90FF: 48           	pha
 20917 0B:9100: 22 AF 5A 0B  	jsl	~~dir_remove
 20918 0B:9104: 85 05        	sta	<L826+res_1
 20919                        ;				if (res == FR_OK)
 20920                        	.line	5890
 20921                        ;				{
 20922 0B:9106: A5 05        	lda	<L826+res_1
 20923 0B:9108: F0 03        	beq	L849
 20924 0B:910A: 82 0A 00     	brl	L10459
 20925                        L849:
 20926                        	.line	5891
 20927                        ;					res = sync_fs(fs
                    );
 20928                        	.line	5892
 20929 0B:910D: D4 69        	pei	<L826+fs_1+2
 20930 0B:910F: D4 67        	pei	<L826+fs_1
 20931 0B:9111: 22 05 44 0B  	jsl	~~sync_fs
  Fri Jul 16 2021 14:42                                                Page 403


 20932 0B:9115: 85 05        	sta	<L826+res_1
 20933                        ;				}
 20934                        	.line	5893
 20935                        ;			}
 20936                        L10459:
 20937                        	.line	5894
 20938                        ;			/* End of the critical section *
                    /
 20939                        ;		} FREE_NAMBUF();
 20940                        L10458:
 20941                        	.line	5896
 20942                        L10449:
 20943                        	.line	5896
 20944                        ;	}
 20945                        	.line	5897
 20946                        ;
 20947                        ;	LEAVE_FF(fs, res);
 20948                        L10447:
 20949                        	.line	5899
 20950 0B:9117: A5 05        	lda	<L826+res_1
 20951                        L850:
 20952 0B:9119: A8           	tay
 20953 0B:911A: A5 94        	lda	<L825+2
 20954 0B:911C: 85 9C        	sta	<L825+2+8
 20955 0B:911E: A5 93        	lda	<L825+1
 20956 0B:9120: 85 9B        	sta	<L825+1+8
 20957 0B:9122: 2B           	pld
 20958 0B:9123: 3B           	tsc
 20959 0B:9124: 18           	clc
 20960 0B:9125: 69 9A 00     	adc	#L825+8
 20961 0B:9128: 1B           	tcs
 20962 0B:9129: 98           	tya
 20963 0B:912A: 6B           	rtl
 20964                        ;}
 20965                        	.line	5900
 20966                        	.endblock	5900
 20967             00000092   L825	equ	146
 20968             00000005   L826	equ	5
 20969 0B:912B:              	ends
 20970                        	efunc
 20971                        	.endfunc	5900,5,146
 20972                        	.line	5900
 20973                        ;
 20974                        ;#endif /* !FF_FS_READONLY */
 20975                        ;#endif /* FF_FS_MINIMIZE == 0 */
 20976                        ;#endif /* FF_FS_MINIMIZE <= 1 */
 20977                        ;#endif /* FF_FS_MINIMIZE <= 2 */
 20978                        ;
 20979                        ;#if FF_USE_CHMOD && !FF_FS_READONLY
 20980                        ;/*-----------------------------------------------
                    ------------------------*/
 20981                        ;/* Change Attribute                              
                                            */
 20982                        ;/*-----------------------------------------------
                    ------------------------*/
 20983                        ;
 20984                        ;FRESULT f_chmod (
 20985                        ;		const TCHAR* path, /* Pointer to the fil
  Fri Jul 16 2021 14:42                                                Page 404


                    e path */
 20986                        ;		BYTE attr, /* Attribute bits */
 20987                        ;		BYTE mask /* Attribute mask to change */
 20988                        ;)
 20989                        ;{
 20990                        ;	FRESULT res;
 20991                        ;	DIR dj;
 20992                        ;	FATFS *fs;
 20993                        ;	DEF_NAMBUF
 20994                        ;
 20995                        ;	res = mount_volume(&path, &fs, FA_WRITE); /* Get
                     logical drive */
 20996                        ;	if (res == FR_OK)
 20997                        ;	{
 20998                        ;		dj.obj.fs = fs;
 20999                        ;		INIT_NAMBUF(fs);
 21000                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 21001                        ;		if (res == FR_OK && (dj.fn[NSFLAG] & (NS
                    _DOT | NS_NONAME))) res = FR_INVALID_NAME; /* Check object v
                    alidity */
 21002                        ;		if (res == FR_OK)
 21003                        ;		{
 21004                        ;			mask &= AM_RDO|AM_HID|AM_SYS|AM_
                    ARC; /* Valid attribute mask */
 21005                        ;#if FF_FS_EXFAT
 21006                        ;			if (fs->fs_type == FS_EXFAT)
 21007                        ;			{
 21008                        ;				fs->dirbuf[XDIR_Attr] = 
                    (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask); /* Ap
                    ply attribute change */
 21009                        ;				res = store_xdir(&dj);
 21010                        ;			}
 21011                        ;			else
 21012                        ;#endif
 21013                        ;			{
 21014                        ;				dj.dir[DIR_Attr] = (attr
                     & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask); /* Apply attrib
                    ute change */
 21015                        ;				fs->wflag = 1;
 21016                        ;			}
 21017                        ;			if (res == FR_OK)
 21018                        ;			{
 21019                        ;				res = sync_fs(fs);
 21020                        ;			}
 21021                        ;		}
 21022                        ;		FREE_NAMBUF();
 21023                        ;	}
 21024                        ;
 21025                        ;	LEAVE_FF(fs, res);
 21026                        ;}
 21027                        ;
 21028                        ;/*-----------------------------------------------
                    ------------------------*/
 21029                        ;/* Change Timestamp                              
                                            */
 21030                        ;/*-----------------------------------------------
                    ------------------------*/
  Fri Jul 16 2021 14:42                                                Page 405


 21031                        ;
 21032                        ;FRESULT f_utime (
 21033                        ;		const TCHAR* path, /* Pointer to the fil
                    e/directory name */
 21034                        ;		const FILINFO* fno /* Pointer to the tim
                    estamp to be set */
 21035                        ;)
 21036                        ;{
 21037                        ;	FRESULT res;
 21038                        ;	DIR dj;
 21039                        ;	FATFS *fs;
 21040                        ;	DEF_NAMBUF
 21041                        ;
 21042                        ;	res = mount_volume(&path, &fs, FA_WRITE); /* Get
                     logical drive */
 21043                        ;	if (res == FR_OK)
 21044                        ;	{
 21045                        ;		dj.obj.fs = fs;
 21046                        ;		INIT_NAMBUF(fs);
 21047                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 21048                        ;		if (res == FR_OK && (dj.fn[NSFLAG] & (NS
                    _DOT | NS_NONAME))) res = FR_INVALID_NAME; /* Check object v
                    alidity */
 21049                        ;		if (res == FR_OK)
 21050                        ;		{
 21051                        ;#if FF_FS_EXFAT
 21052                        ;			if (fs->fs_type == FS_EXFAT)
 21053                        ;			{
 21054                        ;				st_dword(fs->dirbuf + XD
                    IR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
 21055                        ;				res = store_xdir(&dj);
 21056                        ;			}
 21057                        ;			else
 21058                        ;#endif
 21059                        ;			{
 21060                        ;				st_dword(dj.dir + DIR_Mo
                    dTime, (DWORD)fno->fdate << 16 | fno->ftime);
 21061                        ;				fs->wflag = 1;
 21062                        ;			}
 21063                        ;			if (res == FR_OK)
 21064                        ;			{
 21065                        ;				res = sync_fs(fs);
 21066                        ;			}
 21067                        ;		}
 21068                        ;		FREE_NAMBUF();
 21069                        ;	}
 21070                        ;
 21071                        ;	LEAVE_FF(fs, res);
 21072                        ;}
 21073                        ;
 21074                        ;#endif	/* FF_USE_CHMOD && !FF_FS_READONLY */
 21075                        ;
 21076                        ;#if FF_USE_LABEL
 21077                        ;/*-----------------------------------------------
                    ------------------------*/
 21078                        ;/* Get Volume Label                              
                                            */
  Fri Jul 16 2021 14:42                                                Page 406


 21079                        ;/*-----------------------------------------------
                    ------------------------*/
 21080                        ;
 21081                        ;FRESULT f_getlabel (
 21082                        ;		const TCHAR* path, /* Logical drive numb
                    er */
 21083                        ;		TCHAR* label, /* Buffer to store the vol
                    ume label */
 21084                        ;		DWORD* vsn /* Variable to store the volu
                    me serial number */
 21085                        ;)
 21086                        ;{
 21087                        ;	FRESULT res;
 21088                        ;	DIR dj;
 21089                        ;	FATFS *fs;
 21090                        ;	UINT si, di;
 21091                        ;	WCHAR wc;
 21092                        ;
 21093                        ;	/* Get logical drive */
 21094                        ;	res = mount_volume(&path, &fs, 0);
 21095                        ;
 21096                        ;	/* Get volume label */
 21097                        ;	if (res == FR_OK && label)
 21098                        ;	{
 21099                        ;		dj.obj.fs = fs; dj.obj.sclust = 0; /* Op
                    en root directory */
 21100                        ;		res = dir_sdi(&dj, 0);
 21101                        ;		if (res == FR_OK)
 21102                        ;		{
 21103                        ;			res = DIR_READ_LABEL(&dj); /* Fi
                    nd a volume label entry */
 21104                        ;			if (res == FR_OK)
 21105                        ;			{
 21106                        ;#if FF_FS_EXFAT
 21107                        ;				if (fs->fs_type == FS_EX
                    FAT)
 21108                        ;				{
 21109                        ;					WCHAR hs;
 21110                        ;
 21111                        ;					for (si = di = h
                    s = 0; si < dj.dir[XDIR_NumLabel]; si++)
 21112                        ;					{ /* Extract vol
                    ume label from 83 entry */
 21113                        ;						wc = ld_
                    word(dj.dir + XDIR_Label + si * 2);
 21114                        ;						if (hs =
                    = 0 && IsSurrogate(wc))
 21115                        ;						{ /* Is 
                    the code a surrogate? */
 21116                        ;							
                    hs = wc; continue;
 21117                        ;						}
 21118                        ;						wc = put
                    _utf((DWORD)hs << 16 | wc, &label[di], 4);
 21119                        ;						if (wc =
                    = 0)
 21120                        ;						{	
                    di = 0; break;}
  Fri Jul 16 2021 14:42                                                Page 407


 21121                        ;						di += wc
                    ;
 21122                        ;						hs = 0;
 21123                        ;					}
 21124                        ;					if (hs != 0) di 
                    = 0; /* Broken surrogate pair? */
 21125                        ;					label[di] = 0;
 21126                        ;				}
 21127                        ;				else
 21128                        ;#endif
 21129                        ;				{
 21130                        ;					si = di = 0; /* 
                    Extract volume label from AM_VOL entry */
 21131                        ;					while (si < 11)
 21132                        ;					{
 21133                        ;						wc = dj.
                    dir[si++];
 21134                        ;#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unico
                    de output */
 21135                        ;						if (dbc_
                    1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++]; /* Is
                     it a DBC? */
 21136                        ;						wc = ff_
                    oem2uni(wc, CODEPAGE); /* Convert it into Unicode */
 21137                        ;						if (wc !
                    = 0) wc = put_utf(wc, &label[di], 4); /* Put it in Unicode *
                    /
 21138                        ;						if (wc =
                    = 0)
 21139                        ;						{	
                    di = 0; break;}
 21140                        ;						di += wc
                    ;
 21141                        ;#else						
                    			/* ANSI/OEM output */
 21142                        ;						label[di
                    ++] = (TCHAR)wc;
 21143                        ;#endif
 21144                        ;					}
 21145                        ;					do
 21146                        ;					{ /* Truncate tr
                    ailing spaces */
 21147                        ;						label[di
                    ] = 0;
 21148                        ;						if (di =
                    = 0) break;
 21149                        ;					}while (label[--
                    di] == ' ');
 21150                        ;				}
 21151                        ;			}
 21152                        ;		}
 21153                        ;		if (res == FR_NO_FILE)
 21154                        ;		{ /* No label entry and return nul strin
                    g */
 21155                        ;			label[0] = 0;
 21156                        ;			res = FR_OK;
 21157                        ;		}
 21158                        ;	}
  Fri Jul 16 2021 14:42                                                Page 408


 21159                        ;
 21160                        ;	/* Get volume serial number */
 21161                        ;	if (res == FR_OK && vsn)
 21162                        ;	{
 21163                        ;		res = move_window(fs, fs->volbase);
 21164                        ;		if (res == FR_OK)
 21165                        ;		{
 21166                        ;			switch (fs->fs_type)
 21167                        ;			{
 21168                        ;				case FS_EXFAT:
 21169                        ;				di = BPB_VolIDEx; break;
 21170                        ;
 21171                        ;				case FS_FAT32:
 21172                        ;				di = BS_VolID32; break;
 21173                        ;
 21174                        ;				default:
 21175                        ;				di = BS_VolID;
 21176                        ;			}
 21177                        ;			*vsn = ld_dword(fs->win + di);
 21178                        ;		}
 21179                        ;	}
 21180                        ;
 21181                        ;	LEAVE_FF(fs, res);
 21182                        ;}
 21183                        ;
 21184                        ;#if !FF_FS_READONLY
 21185                        ;/*-----------------------------------------------
                    ------------------------*/
 21186                        ;/* Set Volume Label                              
                                            */
 21187                        ;/*-----------------------------------------------
                    ------------------------*/
 21188                        ;
 21189                        ;FRESULT f_setlabel (
 21190                        ;		const TCHAR* label /* Volume label to se
                    t with heading logical drive number */
 21191                        ;)
 21192                        ;{
 21193                        ;	FRESULT res;
 21194                        ;	DIR dj;
 21195                        ;	FATFS *fs;
 21196                        ;	BYTE dirvn[22];
 21197                        ;	UINT di;
 21198                        ;	WCHAR wc;
 21199                        ;	static const char badchr[] = "+.,;=[]/\\\"*:<>\?
                    |\x7F"; /* [0..] for FAT, [7..] for exFAT */
 21200                        ;#if FF_USE_LFN
 21201                        ;	DWORD dc;
 21202                        ;#endif
 21203                        ;
 21204                        ;	/* Get logical drive */
 21205                        ;	res = mount_volume(&label, &fs, FA_WRITE);
 21206                        ;	if (res != FR_OK) LEAVE_FF(fs, res);
 21207                        ;
 21208                        ;#if FF_FS_EXFAT
 21209                        ;	if (fs->fs_type == FS_EXFAT)
 21210                        ;	{ /* On the exFAT volume */
 21211                        ;		mem_set(dirvn, 0, 22);
  Fri Jul 16 2021 14:42                                                Page 409


 21212                        ;		di = 0;
 21213                        ;		while ((UINT)*label >= ' ')
 21214                        ;		{ /* Create volume label */
 21215                        ;			dc = tchar2uni(&label); /* Get a
                     Unicode character */
 21216                        ;			if (dc >= 0x10000)
 21217                        ;			{
 21218                        ;				if (dc == 0xFFFFFFFF || 
                    di >= 10)
 21219                        ;				{ /* Wrong surrogate or 
                    buffer overflow */
 21220                        ;					dc = 0;
 21221                        ;				}
 21222                        ;				else
 21223                        ;				{
 21224                        ;					st_word(dirvn + 
                    di * 2, (WCHAR)(dc >> 16)); di++;
 21225                        ;				}
 21226                        ;			}
 21227                        ;			if (dc == 0 || chk_chr(badchr + 
                    7, (int)dc) || di >= 11)
 21228                        ;			{ /* Check validity of the volum
                    e label */
 21229                        ;				LEAVE_FF(fs, FR_INVALID_
                    NAME);
 21230                        ;			}
 21231                        ;			st_word(dirvn + di * 2, (WCHAR)d
                    c); di++;
 21232                        ;		}
 21233                        ;	}
 21234                        ;	else
 21235                        ;#endif
 21236                        ;	{ /* On the FAT/FAT32 volume */
 21237                        ;		mem_set(dirvn, ' ', 11);
 21238                        ;		di = 0;
 21239                        ;		while ((UINT)*label >= ' ')
 21240                        ;		{ /* Create volume label */
 21241                        ;#if FF_USE_LFN
 21242                        ;			dc = tchar2uni(&label);
 21243                        ;			wc = (dc < 0x10000) ? ff_uni2oem
                    (ff_wtoupper(dc), CODEPAGE) : 0;
 21244                        ;#else						
                    			/* ANSI/OEM input */
 21245                        ;			wc = (BYTE)*label++;
 21246                        ;			if (dbc_1st((BYTE)wc)) wc = dbc_
                    2nd((BYTE)*label) ? wc << 8 | (BYTE)*label++ : 0;
 21247                        ;			if (IsLower(wc)) wc -= 0x20; /* 
                    To upper ASCII characters */
 21248                        ;#if FF_CODE_PAGE == 0
 21249                        ;			if (ExCvt && wc >= 0x80) wc = Ex
                    Cvt[wc - 0x80]; /* To upper extended characters (SBCS cfg) *
                    /
 21250                        ;#elif FF_CODE_PAGE < 900
 21251                        ;			if (wc >= 0x80) wc = ExCvt[wc - 
                    0x80]; /* To upper extended characters (SBCS cfg) */
 21252                        ;#endif
 21253                        ;#endif
 21254                        ;			if (wc == 0 || chk_chr(badchr + 
  Fri Jul 16 2021 14:42                                                Page 410


                    0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11))
 21255                        ;			{ /* Reject invalid characters f
                    or volume label */
 21256                        ;				LEAVE_FF(fs, FR_INVALID_
                    NAME);
 21257                        ;			}
 21258                        ;			if (wc >= 0x100) dirvn[di++] = (
                    BYTE)(wc >> 8);
 21259                        ;			dirvn[di++] = (BYTE)wc;
 21260                        ;		}
 21261                        ;		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_IN
                    VALID_NAME); /* Reject illegal name (heading DDEM) */
 21262                        ;		while (di && dirvn[di - 1] == ' ') di--;
                     /* Snip trailing spaces */
 21263                        ;	}
 21264                        ;
 21265                        ;	/* Set volume label */
 21266                        ;	dj.obj.fs = fs; dj.obj.sclust = 0; /* Open root 
                    directory */
 21267                        ;	res = dir_sdi(&dj, 0);
 21268                        ;	if (res == FR_OK)
 21269                        ;	{
 21270                        ;		res = DIR_READ_LABEL(&dj); /* Get volume
                     label entry */
 21271                        ;		if (res == FR_OK)
 21272                        ;		{
 21273                        ;			if (FF_FS_EXFAT && fs->fs_type =
                    = FS_EXFAT)
 21274                        ;			{
 21275                        ;				dj.dir[XDIR_NumLabel] = 
                    (BYTE)di; /* Change the volume label */
 21276                        ;				mem_cpy(dj.dir + XDIR_La
                    bel, dirvn, 22);
 21277                        ;			}
 21278                        ;			else
 21279                        ;			{
 21280                        ;				if (di != 0)
 21281                        ;				{
 21282                        ;					mem_cpy(dj.dir, 
                    dirvn, 11); /* Change the volume label */
 21283                        ;				}
 21284                        ;				else
 21285                        ;				{
 21286                        ;					dj.dir[DIR_Name]
                     = DDEM; /* Remove the volume label */
 21287                        ;				}
 21288                        ;			}
 21289                        ;			fs->wflag = 1;
 21290                        ;			res = sync_fs(fs);
 21291                        ;		}
 21292                        ;		else
 21293                        ;		{ /* No volume label entry or an error *
                    /
 21294                        ;			if (res == FR_NO_FILE)
 21295                        ;			{
 21296                        ;				res = FR_OK;
 21297                        ;				if (di != 0)
 21298                        ;				{ /* Create a volume lab
  Fri Jul 16 2021 14:42                                                Page 411


                    el entry */
 21299                        ;					res = dir_alloc(
                    &dj, 1); /* Allocate an entry */
 21300                        ;					if (res == FR_OK
                    )
 21301                        ;					{
 21302                        ;						mem_set(
                    dj.dir, 0, SZDIRE); /* Clean the entry */
 21303                        ;						if (FF_F
                    S_EXFAT && fs->fs_type == FS_EXFAT)
 21304                        ;						{
 21305                        ;							
                    dj.dir[XDIR_Type] = ET_VLABEL; /* Create volume label entry 
                    */
 21306                        ;							
                    dj.dir[XDIR_NumLabel] = (BYTE)di;
 21307                        ;							
                    mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
 21308                        ;						}
 21309                        ;						else
 21310                        ;						{
 21311                        ;							
                    dj.dir[DIR_Attr] = AM_VOL; /* Create volume label entry */
 21312                        ;							
                    mem_cpy(dj.dir, dirvn, 11);
 21313                        ;						}
 21314                        ;						fs->wfla
                    g = 1;
 21315                        ;						res = sy
                    nc_fs(fs);
 21316                        ;					}
 21317                        ;				}
 21318                        ;			}
 21319                        ;		}
 21320                        ;	}
 21321                        ;
 21322                        ;	LEAVE_FF(fs, res);
 21323                        ;}
 21324                        ;
 21325                        ;#endif /* !FF_FS_READONLY */
 21326                        ;#endif /* FF_USE_LABEL */
 21327                        ;
 21328                        ;#if FF_USE_EXPAND && !FF_FS_READONLY
 21329                        ;/*-----------------------------------------------
                    ------------------------*/
 21330                        ;/* Allocate a Contiguous Blocks to the File      
                                            */
 21331                        ;/*-----------------------------------------------
                    ------------------------*/
 21332                        ;
 21333                        ;FRESULT f_expand (
 21334                        ;		FIL* fp, /* Pointer to the file object *
                    /
 21335                        ;		FSIZE_t fsz, /* File size to be expanded
                     to */
 21336                        ;		BYTE opt /* Operation mode 0:Find and pr
                    epare or 1:Find and allocate */
 21337                        ;)
  Fri Jul 16 2021 14:42                                                Page 412


 21338                        ;{
 21339                        ;	FRESULT res;
 21340                        ;	FATFS *fs;
 21341                        ;	DWORD n, clst, stcl, scl, ncl, tcl, lclst;
 21342                        ;
 21343                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 21344                        ;	if (res != FR_OK || (res = (FRESULT)fp->err) != 
                    FR_OK) LEAVE_FF(fs, res);
 21345                        ;	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->fl
                    ag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
 21346                        ;#if FF_FS_EXFAT
 21347                        ;	if (fs->fs_type != FS_EXFAT && fsz >= 0x10000000
                    0) LEAVE_FF(fs, FR_DENIED); /* Check if in size limit */
 21348                        ;#endif
 21349                        ;	n = (DWORD)fs->csize * SS(fs); /* Cluster size *
                    /
 21350                        ;	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 
                    0); /* Number of clusters required */
 21351                        ;	stcl = fs->last_clst; lclst = 0;
 21352                        ;	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
 21353                        ;
 21354                        ;#if FF_FS_EXFAT
 21355                        ;	if (fs->fs_type == FS_EXFAT)
 21356                        ;	{
 21357                        ;		scl = find_bitmap(fs, stcl, tcl); /* Fin
                    d a contiguous cluster block */
 21358                        ;		if (scl == 0) res = FR_DENIED; /* No con
                    tiguous cluster block was found */
 21359                        ;		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR
                    ;
 21360                        ;		if (res == FR_OK)
 21361                        ;		{ /* A contiguous free area is found */
 21362                        ;			if (opt)
 21363                        ;			{ /* Allocate it now */
 21364                        ;				res = change_bitmap(fs, 
                    scl, tcl, 1); /* Mark the cluster block 'in use' */
 21365                        ;				lclst = scl + tcl - 1;
 21366                        ;			}
 21367                        ;			else
 21368                        ;			{ /* Set it as suggested point f
                    or next allocation */
 21369                        ;				lclst = scl - 1;
 21370                        ;			}
 21371                        ;		}
 21372                        ;	}
 21373                        ;	else
 21374                        ;#endif
 21375                        ;	{
 21376                        ;		scl = clst = stcl; ncl = 0;
 21377                        ;		for (;;)
 21378                        ;		{ /* Find a contiguous cluster block */
 21379                        ;			n = get_fat(&fp->obj, clst);
 21380                        ;			if (++clst >= fs->n_fatent) clst
                     = 2;
 21381                        ;			if (n == 1)
 21382                        ;			{	res = FR_INT_ERR; break;
                    }
  Fri Jul 16 2021 14:42                                                Page 413


 21383                        ;			if (n == 0xFFFFFFFF)
 21384                        ;			{	res = FR_DISK_ERR; break
                    ;}
 21385                        ;			if (n == 0)
 21386                        ;			{ /* Is it a free cluster? */
 21387                        ;				if (++ncl == tcl) break;
                     /* Break if a contiguous cluster block is found */
 21388                        ;			}
 21389                        ;			else
 21390                        ;			{
 21391                        ;				scl = clst; ncl = 0; /* 
                    Not a free cluster */
 21392                        ;			}
 21393                        ;			if (clst == stcl)
 21394                        ;			{	res = FR_DENIED; break;}
                     /* No contiguous cluster? */
 21395                        ;		}
 21396                        ;		if (res == FR_OK)
 21397                        ;		{ /* A contiguous free area is found */
 21398                        ;			if (opt)
 21399                        ;			{ /* Allocate it now */
 21400                        ;				for (clst = scl, n = tcl
                    ; n; clst++, n--)
 21401                        ;				{ /* Create a cluster ch
                    ain on the FAT */
 21402                        ;					res = put_fat(fs
                    , clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
 21403                        ;					if (res != FR_OK
                    ) break;
 21404                        ;					lclst = clst;
 21405                        ;				}
 21406                        ;			}
 21407                        ;			else
 21408                        ;			{ /* Set it as suggested point f
                    or next allocation */
 21409                        ;				lclst = scl - 1;
 21410                        ;			}
 21411                        ;		}
 21412                        ;	}
 21413                        ;
 21414                        ;	if (res == FR_OK)
 21415                        ;	{
 21416                        ;		fs->last_clst = lclst; /* Set suggested 
                    start cluster to start next */
 21417                        ;		if (opt)
 21418                        ;		{ /* Is it allocated now? */
 21419                        ;			fp->obj.sclust = scl; /* Update 
                    object allocation information */
 21420                        ;			fp->obj.objsize = fsz;
 21421                        ;			if (FF_FS_EXFAT) fp->obj.stat = 
                    2; /* Set status 'contiguous chain' */
 21422                        ;			fp->flag |= FA_MODIFIED;
 21423                        ;			if (fs->free_clst <= fs->n_faten
                    t - 2)
 21424                        ;			{ /* Update FSINFO */
 21425                        ;				fs->free_clst -= tcl;
 21426                        ;				fs->fsi_flag |= 1;
 21427                        ;			}
  Fri Jul 16 2021 14:42                                                Page 414


 21428                        ;		}
 21429                        ;	}
 21430                        ;
 21431                        ;	LEAVE_FF(fs, res);
 21432                        ;}
 21433                        ;
 21434                        ;#endif /* FF_USE_EXPAND && !FF_FS_READONLY */
 21435                        ;
 21436                        ;#if FF_USE_FORWARD
 21437                        ;/*-----------------------------------------------
                    ------------------------*/
 21438                        ;/* Forward Data to the Stream Directly           
                                            */
 21439                        ;/*-----------------------------------------------
                    ------------------------*/
 21440                        ;
 21441                        ;FRESULT f_forward (
 21442                        ;		FIL* fp, /* Pointer to the file object *
                    /
 21443                        ;		UINT (*func)(const BYTE*,UINT), /* Point
                    er to the streaming function */
 21444                        ;		UINT btf, /* Number of bytes to forward 
                    */
 21445                        ;		UINT* bf /* Pointer to number of bytes f
                    orwarded */
 21446                        ;)
 21447                        ;{
 21448                        ;	FRESULT res;
 21449                        ;	FATFS *fs;
 21450                        ;	DWORD clst;
 21451                        ;	LBA_t sect;
 21452                        ;	FSIZE_t remain;
 21453                        ;	UINT rcnt, csect;
 21454                        ;	BYTE *dbuf;
 21455                        ;
 21456                        ;	*bf = 0; /* Clear transfer byte counter */
 21457                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 21458                        ;	if (res != FR_OK || (res = (FRESULT)fp->err) != 
                    FR_OK) LEAVE_FF(fs, res);
 21459                        ;	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIE
                    D); /* Check access mode */
 21460                        ;
 21461                        ;	remain = fp->obj.objsize - fp->fptr;
 21462                        ;	if (btf > remain) btf = (UINT)remain; /* Truncat
                    e btf by remaining bytes */
 21463                        ;
 21464                        ;	for (; btf && (*func)(0, 0); /* Repeat until all
                     data transferred or stream goes busy */
 21465                        ;			fp->fptr += rcnt, *bf += rcnt, b
                    tf -= rcnt)
 21466                        ;	{
 21467                        ;		csect = (UINT)(fp->fptr / SS(fs) & (fs->
                    csize - 1)); /* Sector offset in the cluster */
 21468                        ;		if (fp->fptr % SS(fs) == 0)
 21469                        ;		{ /* On the sector boundary? */
 21470                        ;			if (csect == 0)
 21471                        ;			{ /* On the cluster boundary? */
  Fri Jul 16 2021 14:42                                                Page 415


 21472                        ;				clst = (fp->fptr == 0) ?
                     /* On the top of the file? */
 21473                        ;				fp->obj.sclust : get_fat
                    (&fp->obj, fp->clust);
 21474                        ;				if (clst <= 1) ABORT(fs,
                     FR_INT_ERR);
 21475                        ;				if (clst == 0xFFFFFFFF) 
                    ABORT(fs, FR_DISK_ERR);
 21476                        ;				fp->clust = clst; /* Upd
                    ate current cluster */
 21477                        ;			}
 21478                        ;		}
 21479                        ;		sect = clst2sect(fs, fp->clust); /* Get 
                    current data sector */
 21480                        ;		if (sect == 0) ABORT(fs, FR_INT_ERR);
 21481                        ;		sect += csect;
 21482                        ;#if FF_FS_TINY
 21483                        ;		if (move_window(fs, sect) != FR_OK) ABOR
                    T(fs, FR_DISK_ERR); /* Move sector window to the file data *
                    /
 21484                        ;		dbuf = fs->win;
 21485                        ;#else
 21486                        ;		if (fp->sect != sect)
 21487                        ;		{ /* Fill sector cache with file data */
 21488                        ;#if !FF_FS_READONLY
 21489                        ;			if (fp->flag & FA_DIRTY)
 21490                        ;			{ /* Write-back dirty sector cac
                    he */
 21491                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 21492                        ;				fp->flag &= (BYTE)~FA_DI
                    RTY;
 21493                        ;			}
 21494                        ;#endif
 21495                        ;			if (disk_read(fs->pdrv, fp->buf,
                     sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 21496                        ;		}
 21497                        ;		dbuf = fp->buf;
 21498                        ;#endif
 21499                        ;		fp->sect = sect;
 21500                        ;		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);
                     /* Number of bytes remains in the sector */
 21501                        ;		if (rcnt > btf) rcnt = btf; /* Clip it b
                    y btr if needed */
 21502                        ;		rcnt = (*func)(dbuf + ((UINT)fp->fptr % 
                    SS(fs)), rcnt); /* Forward the file data */
 21503                        ;		if (rcnt == 0) ABORT(fs, FR_INT_ERR);
 21504                        ;	}
 21505                        ;
 21506                        ;	LEAVE_FF(fs, FR_OK);
 21507                        ;}
 21508                        ;#endif /* FF_USE_FORWARD */
 21509                        ;
 21510                        ;#if !FF_FS_READONLY && FF_USE_MKFS
 21511                        ;/*-----------------------------------------------
                    ------------------------*/
 21512                        ;/* Create an FAT/exFAT volume                    
                                            */
  Fri Jul 16 2021 14:42                                                Page 416


 21513                        ;/*-----------------------------------------------
                    ------------------------*/
 21514                        ;
 21515                        ;#define N_SEC_TRACK 63			/* Secto
                    rs per track for determination of drive CHS */
 21516                        ;#define	GPT_ALIGN	0x100000	/* Align
                    ment of partitions in GPT [byte] (>=128KB) */
 21517                        ;#define GPT_ITEMS	128			
                    /* Number of GPT table size (>=128, sector aligned) */
 21518                        ;
 21519                        ;/* Create partitions on the physical drive */
 21520                        ;
 21521                        ;static FRESULT create_partition (
 21522                        ;		BYTE drv, /* Physical drive number */
 21523                        ;		const LBA_t plst[], /* Partition list */
 21524                        ;		UINT sys, /* System ID (for only MBR, te
                    mp setting) and bit8:GPT */
 21525                        ;		BYTE* buf /* Working buffer for a sector
                     */
 21526                        ;)
 21527                        ;{
 21528                        ;	UINT i, cy;
 21529                        ;	LBA_t sz_drv;
 21530                        ;	DWORD sz_drv32, s_lba32, n_lba32;
 21531                        ;	BYTE *pte, hd, n_hd, sc, n_sc;
 21532                        ;
 21533                        ;	/* Get drive size */
 21534                        ;	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) !
                    = RES_OK) return FR_DISK_ERR;
 21535                        ;
 21536                        ;#if FF_LBA64
 21537                        ;	if (sz_drv >= FF_MIN_GPT)
 21538                        ;	{ /* Create partitions in GPT */
 21539                        ;		WORD ss;
 21540                        ;		UINT sz_pt, pi, si, ofs;
 21541                        ;		DWORD bcc, rnd, align;
 21542                        ;		QWORD s_lba64, n_lba64, sz_pool, s_bpt;
 21543                        ;		static const BYTE gpt_mbr[16] =
 21544                        ;		{	0x00, 0x00, 0x02, 0x00, 0xEE, 0x
                    FE, 0xFF, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x
                    FF};
 21545                        ;
 21546                        ;#if FF_MAX_SS != FF_MIN_SS
 21547                        ;		if (disk_ioctl(drv, GET_SECTOR_SIZE, &ss
                    ) != RES_OK) return FR_DISK_ERR; /* Get sector size */
 21548                        ;		if (ss > FF_MAX_SS || ss < FF_MIN_SS || 
                    (ss & (ss - 1))) return FR_DISK_ERR;
 21549                        ;#else
 21550                        ;		ss = FF_MAX_SS;
 21551                        ;#endif
 21552                        ;		rnd = GET_FATTIME(); /* Random seed */
 21553                        ;		align = GPT_ALIGN / ss; /* Partition ali
                    gnment [sector] */
 21554                        ;		sz_pt = GPT_ITEMS * SZ_GPTE / ss; /* Siz
                    e of PT [sector] */
 21555                        ;		s_bpt = sz_drv - sz_pt - 1; /* Backup PT
                     start sector */
 21556                        ;		s_lba64 = 2 + sz_pt; /* First allocatabl
  Fri Jul 16 2021 14:42                                                Page 417


                    e sector */
 21557                        ;		sz_pool = s_bpt - s_lba64; /* Size of al
                    locatable area */
 21558                        ;		bcc = 0xFFFFFFFF; n_lba64 = 1;
 21559                        ;		pi = si = 0; /* partition table index, s
                    ize table index */
 21560                        ;		do
 21561                        ;		{
 21562                        ;			if (pi * SZ_GPTE % ss == 0) mem_
                    set(buf, 0, ss); /* Clean the buffer if needed */
 21563                        ;			if (n_lba64 != 0)
 21564                        ;			{ /* Is the size table not termi
                    ntated? */
 21565                        ;				s_lba64 = (s_lba64 + ali
                    gn - 1) & ((QWORD)0 - align); /* Align partition start */
 21566                        ;				n_lba64 = plst[si++]; /*
                     Get a partition size */
 21567                        ;				if (n_lba64 <= 100)
 21568                        ;				{ /* Is the size in perc
                    entage? */
 21569                        ;					n_lba64 = sz_poo
                    l * n_lba64 / 100;
 21570                        ;					n_lba64 = (n_lba
                    64 + align - 1) & ((QWORD)0 - align); /* Align partition end
                     (only if in percentage) */
 21571                        ;				}
 21572                        ;				if (s_lba64 + n_lba64 > 
                    s_bpt)
 21573                        ;				{ /* Clip at end of the 
                    pool */
 21574                        ;					n_lba64 = (s_lba
                    64 < s_bpt) ? s_bpt - s_lba64 : 0;
 21575                        ;				}
 21576                        ;			}
 21577                        ;			if (n_lba64 != 0)
 21578                        ;			{ /* Add a partition? */
 21579                        ;				ofs = pi * SZ_GPTE % ss;
 21580                        ;				mem_cpy(buf + ofs + GPTE
                    _PtGuid, GUID_MS_Basic, 16); /* Partition GUID (Microsoft Ba
                    sic Data) */
 21581                        ;				rnd = make_rand(rnd, buf
                     + ofs + GPTE_UpGuid, 16); /* Unique partition GUID */
 21582                        ;				st_qword(buf + ofs + GPT
                    E_FstLba, s_lba64); /* Partition start LBA */
 21583                        ;				st_qword(buf + ofs + GPT
                    E_LstLba, s_lba64 + n_lba64 - 1); /* Partition end LBA */
 21584                        ;				s_lba64 += n_lba64; /* N
                    ext partition LBA */
 21585                        ;			}
 21586                        ;			if ((pi + 1) * SZ_GPTE % ss == 0
                    )
 21587                        ;			{ /* Write the buffer if it is f
                    illed up */
 21588                        ;				for (i = 0; i < ss; bcc 
                    = crc32(bcc, buf[i++])); /* Calculate table check sum */
 21589                        ;				if (disk_write(drv, buf,
                     2 + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR; /*
                     Primary table */
  Fri Jul 16 2021 14:42                                                Page 418


 21590                        ;				if (disk_write(drv, buf,
                     s_bpt + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR
                    ; /* Secondary table */
 21591                        ;			}
 21592                        ;		}while (++pi < GPT_ITEMS);
 21593                        ;
 21594                        ;		/* Create primary GPT header */
 21595                        ;		mem_set(buf, 0, ss);
 21596                        ;		mem_cpy(buf + GPTH_Sign, "EFI PART" "\0\
                    0\1\0" "\x5C\0\0", 16); /* Signature, version (1.0) and size
                     (92) */
 21597                        ;		st_dword(buf + GPTH_PtBcc, ~bcc); /* Tab
                    le check sum */
 21598                        ;		st_qword(buf + GPTH_CurLba, 1); /* LBA o
                    f this header */
 21599                        ;		st_qword(buf + GPTH_BakLba, sz_drv - 1);
                     /* LBA of another header */
 21600                        ;		st_qword(buf + GPTH_FstLba, 2 + sz_pt); 
                    /* LBA of first allocatable sector */
 21601                        ;		st_qword(buf + GPTH_LstLba, s_bpt - 1); 
                    /* LBA of last allocatable sector */
 21602                        ;		st_dword(buf + GPTH_PteSize, SZ_GPTE); /
                    * Size of a table entry */
 21603                        ;		st_dword(buf + GPTH_PtNum, GPT_ITEMS); /
                    * Number of table entries */
 21604                        ;		st_dword(buf + GPTH_PtOfs, 2); /* LBA of
                     this table */
 21605                        ;		rnd = make_rand(rnd, buf + GPTH_DskGuid,
                     16); /* Disk GUID */
 21606                        ;		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc
                     = crc32(bcc, buf[i++])); /* Calculate header check sum */
 21607                        ;		st_dword(buf + GPTH_Bcc, ~bcc); /* Heade
                    r check sum */
 21608                        ;		if (disk_write(drv, buf, 1, 1) != RES_OK
                    ) return FR_DISK_ERR;
 21609                        ;
 21610                        ;		/* Create secondary GPT header */
 21611                        ;		st_qword(buf + GPTH_CurLba, sz_drv - 1);
                     /* LBA of this header */
 21612                        ;		st_qword(buf + GPTH_BakLba, 1); /* LBA o
                    f another header */
 21613                        ;		st_qword(buf + GPTH_PtOfs, s_bpt); /* LB
                    A of this table */
 21614                        ;		st_dword(buf + GPTH_Bcc, 0);
 21615                        ;		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc
                     = crc32(bcc, buf[i++])); /* Calculate header check sum */
 21616                        ;		st_dword(buf + GPTH_Bcc, ~bcc); /* Heade
                    r check sum */
 21617                        ;		if (disk_write(drv, buf, sz_drv - 1, 1) 
                    != RES_OK) return FR_DISK_ERR;
 21618                        ;
 21619                        ;		/* Create protective MBR */
 21620                        ;		mem_set(buf, 0, ss);
 21621                        ;		mem_cpy(buf + MBR_Table, gpt_mbr, 16); /
                    * Create a GPT partition */
 21622                        ;		st_word(buf + BS_55AA, 0xAA55);
 21623                        ;		if (disk_write(drv, buf, 0, 1) != RES_OK
                    ) return FR_DISK_ERR;
  Fri Jul 16 2021 14:42                                                Page 419


 21624                        ;
 21625                        ;	}
 21626                        ;	else
 21627                        ;#endif
 21628                        ;	{ /* Create partitions in MBR */
 21629                        ;		sz_drv32 = (DWORD)sz_drv;
 21630                        ;		n_sc = N_SEC_TRACK; /* Determine drive C
                    HS without any consideration of the drive geometry */
 21631                        ;		for (n_hd = 8; n_hd != 0 && sz_drv32 / n
                    _hd / n_sc > 1024; n_hd *= 2);
 21632                        ;		if (n_hd == 0) n_hd = 255; /* Number of 
                    heads needs to be <256 */
 21633                        ;
 21634                        ;		mem_set(buf, 0, FF_MAX_SS); /* Clear MBR
                     */
 21635                        ;		pte = buf + MBR_Table; /* Partition tabl
                    e in the MBR */
 21636                        ;		for (i = 0, s_lba32 = n_sc; i < 4 && s_l
                    ba32 != 0 && s_lba32 < sz_drv32; i++, s_lba32 += n_lba32)
 21637                        ;		{
 21638                        ;			n_lba32 = (DWORD)plst[i]; /* Get
                     partition size */
 21639                        ;			if (n_lba32 <= 100) n_lba32 = (n
                    _lba32 == 100) ? sz_drv32 : sz_drv32 / 100 * n_lba32; /* Siz
                    e in percentage? */
 21640                        ;			if (s_lba32 + n_lba32 > sz_drv32
                     || s_lba32 + n_lba32 < s_lba32) n_lba32 = sz_drv32 - s_lba3
                    2; /* Clip at drive size */
 21641                        ;			if (n_lba32 == 0) break; /* End 
                    of table or no sector to allocate? */
 21642                        ;
 21643                        ;			st_dword(pte + PTE_StLba, s_lba3
                    2); /* Start LBA */
 21644                        ;			st_dword(pte + PTE_SizLba, n_lba
                    32); /* Number of sectors */
 21645                        ;			pte[PTE_System] = (BYTE)sys; /* 
                    System type */
 21646                        ;
 21647                        ;			cy = (UINT)(s_lba32 / n_sc / n_h
                    d); /* Start cylinder */
 21648                        ;			hd = (BYTE)(s_lba32 / n_sc % n_h
                    d); /* Start head */
 21649                        ;			sc = (BYTE)(s_lba32 % n_sc + 1);
                     /* Start sector */
 21650                        ;			pte[PTE_StHead] = hd;
 21651                        ;			pte[PTE_StSec] = (BYTE)((cy >> 2
                     & 0xC0) | sc);
 21652                        ;			pte[PTE_StCyl] = (BYTE)cy;
 21653                        ;
 21654                        ;			cy = (UINT)((s_lba32 + n_lba32 -
                     1) / n_sc / n_hd); /* End cylinder */
 21655                        ;			hd = (BYTE)((s_lba32 + n_lba32 -
                     1) / n_sc % n_hd); /* End head */
 21656                        ;			sc = (BYTE)((s_lba32 + n_lba32 -
                     1) % n_sc + 1); /* End sector */
 21657                        ;			pte[PTE_EdHead] = hd;
 21658                        ;			pte[PTE_EdSec] = (BYTE)((cy >> 2
                     & 0xC0) | sc);
  Fri Jul 16 2021 14:42                                                Page 420


 21659                        ;			pte[PTE_EdCyl] = (BYTE)cy;
 21660                        ;
 21661                        ;			pte += SZ_PTE; /* Next entry */
 21662                        ;		}
 21663                        ;
 21664                        ;		st_word(buf + BS_55AA, 0xAA55); /* MBR s
                    ignature */
 21665                        ;		if (disk_write(drv, buf, 0, 1) != RES_OK
                    ) return FR_DISK_ERR; /* Write it to the MBR */
 21666                        ;	}
 21667                        ;
 21668                        ;	return FR_OK;
 21669                        ;}
 21670                        ;
 21671                        ;FRESULT f_mkfs (
 21672                        ;		const TCHAR* path, /* Logical drive numb
                    er */
 21673                        ;		const MKFS_PARM* opt, /* Format options 
                    */
 21674                        ;		void* work, /* Pointer to working buffer
                     (null: use heap memory) */
 21675                        ;		UINT len /* Size of working buffer [byte
                    ] */
 21676                        ;)
 21677                        ;{
 21678                        ;	static const WORD cst[] =
 21679                        ;	{	1, 4, 16, 64, 256, 512, 0}; /* Cluster s
                    ize boundary for FAT volume (4Ks unit) */
 21680                        ;	static const WORD cst32[] =
 21681                        ;	{	1, 2, 4, 8, 16, 32, 0}; /* Cluster size 
                    boundary for FAT32 volume (128Ks unit) */
 21682                        ;	static const MKFS_PARM defopt =
 21683                        ;	{	FM_ANY, 0, 0, 0, 0}; /* Default paramete
                    r */
 21684                        ;	BYTE fsopt, fsty, sys, *buf, *pte, pdrv, ipart;
 21685                        ;	WORD ss; /* Sector size */
 21686                        ;	DWORD sz_buf, sz_blk, n_clst, pau, nsect, n;
 21687                        ;	LBA_t sz_vol, b_vol, b_fat, b_data; /* Size of v
                    olume, Base LBA of volume, fat, data */
 21688                        ;	LBA_t sect, lba[2];
 21689                        ;	DWORD sz_rsv, sz_fat, sz_dir, sz_au; /* Size of 
                    reserved, fat, dir, data, cluster */
 21690                        ;	UINT n_fat, n_root, i; /* Index, Number of FATs 
                    and Number of roor dir entries */
 21691                        ;	int vol;
 21692                        ;	DSTATUS ds;
 21693                        ;	FRESULT fr;
 21694                        ;
 21695                        ;	/* Check mounted drive and clear work area */
 21696                        ;	vol = get_ldnumber(&path); /* Get target logical
                     drive */
 21697                        ;	if (vol < 0) return FR_INVALID_DRIVE;
 21698                        ;	if (FatFs[vol]) FatFs[vol]->fs_type = 0; /* Clea
                    r the fs object if mounted */
 21699                        ;	pdrv = LD2PD(vol); /* Physical drive */
 21700                        ;	ipart = LD2PT(vol); /* Partition (0:create as ne
                    w, 1..:get from partition table) */
 21701                        ;	if (!opt) opt = &defopt; /* Use default paramete
  Fri Jul 16 2021 14:42                                                Page 421


                    r if it is not given */
 21702                        ;
 21703                        ;	/* Get physical drive status (sz_drv, sz_blk, ss
                    ) */
 21704                        ;	ds = disk_initialize(pdrv);
 21705                        ;	if (ds & STA_NOINIT) return FR_NOT_READY;
 21706                        ;	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 21707                        ;	sz_blk = opt->align;
 21708                        ;	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SI
                    ZE, &sz_blk) != RES_OK) sz_blk = 1;
 21709                        ;	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & 
                    (sz_blk - 1))) sz_blk = 1;
 21710                        ;#if FF_MAX_SS != FF_MIN_SS
 21711                        ;	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RE
                    S_OK) return FR_DISK_ERR;
 21712                        ;	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (s
                    s - 1))) return FR_DISK_ERR;
 21713                        ;#else
 21714                        ;	ss = FF_MAX_SS;
 21715                        ;#endif
 21716                        ;	/* Options for FAT sub-type and FAT parameters *
                    /
 21717                        ;	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 21718                        ;	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? o
                    pt->n_fat : 1;
 21719                        ;	n_root = (opt->n_root >= 1 && opt->n_root <= 327
                    68 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 51
                    2;
 21720                        ;	sz_au = (opt->au_size <= 0x1000000 && (opt->au_s
                    ize & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 21721                        ;	sz_au /= ss; /* Byte --> Sector */
 21722                        ;
 21723                        ;	/* Get working buffer */
 21724                        ;	sz_buf = len / ss; /* Size of working buffer [se
                    ctor] */
 21725                        ;	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 21726                        ;	buf = (BYTE*)work; /* Working buffer */
 21727                        ;#if FF_USE_LFN == 3
 21728                        ;	if (!buf) buf = ff_memalloc(sz_buf * ss); /* Use
                     heap memory for working buffer */
 21729                        ;#endif
 21730                        ;	if (!buf) return FR_NOT_ENOUGH_CORE;
 21731                        ;
 21732                        ;	/* Determine where the volume to be located (b_v
                    ol, sz_vol) */
 21733                        ;	b_vol = sz_vol = 0;
 21734                        ;	if (FF_MULTI_PARTITION && ipart != 0)
 21735                        ;	{ /* Is the volume associated with any specific 
                    partition? */
 21736                        ;		/* Get partition location from the exist
                    ing partition table */
 21737                        ;		if (disk_read(pdrv, buf, 0, 1) != RES_OK
                    ) LEAVE_MKFS(FR_DISK_ERR); /* Load MBR */
 21738                        ;		if (ld_word(buf + BS_55AA) != 0xAA55) LE
                    AVE_MKFS(FR_MKFS_ABORTED); /* Check if MBR is valid */
 21739                        ;#if FF_LBA64
 21740                        ;		if (buf[MBR_Table + PTE_System] == 0xEE)
 21741                        ;		{ /* GPT protective MBR? */
  Fri Jul 16 2021 14:42                                                Page 422


 21742                        ;			DWORD n_ent, ofs;
 21743                        ;			QWORD pt_lba;
 21744                        ;
 21745                        ;			/* Get the partition location fr
                    om GPT */
 21746                        ;			if (disk_read(pdrv, buf, 1, 1) !
                    = RES_OK) LEAVE_MKFS(FR_DISK_ERR); /* Load GPT header sector
                     (next to MBR) */
 21747                        ;			if (!test_gpt_header(buf)) LEAVE
                    _MKFS(FR_MKFS_ABORTED); /* Check if GPT header is valid */
 21748                        ;			n_ent = ld_dword(buf + GPTH_PtNu
                    m); /* Number of entries */
 21749                        ;			pt_lba = ld_qword(buf + GPTH_PtO
                    fs); /* Table start sector */
 21750                        ;			ofs = i = 0;
 21751                        ;			while (n_ent)
 21752                        ;			{ /* Find MS Basic partition wit
                    h order of ipart */
 21753                        ;				if (ofs == 0 && disk_rea
                    d(pdrv, buf, pt_lba++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR)
                    ; /* Get PT sector */
 21754                        ;				if (!mem_cmp(buf + ofs +
                     GPTE_PtGuid, GUID_MS_Basic, 16) && ++i == ipart)
 21755                        ;				{ /* MS basic data parti
                    tion? */
 21756                        ;					b_vol = ld_qword
                    (buf + ofs + GPTE_FstLba);
 21757                        ;					sz_vol = ld_qwor
                    d(buf + ofs + GPTE_LstLba) - b_vol + 1;
 21758                        ;					break;
 21759                        ;				}
 21760                        ;				n_ent--; ofs = (ofs + SZ
                    _GPTE) % ss; /* Next entry */
 21761                        ;			}
 21762                        ;			if (n_ent == 0) LEAVE_MKFS(FR_MK
                    FS_ABORTED); /* Partition not found */
 21763                        ;			fsopt |= 0x80; /* Partitioning i
                    s in GPT */
 21764                        ;		}
 21765                        ;		else
 21766                        ;#endif
 21767                        ;		{ /* Get the partition location from MBR
                     partition table */
 21768                        ;			pte = buf + (MBR_Table + (ipart 
                    - 1) * SZ_PTE);
 21769                        ;			if (ipart > 4 || pte[PTE_System]
                     == 0) LEAVE_MKFS(FR_MKFS_ABORTED); /* No partition? */
 21770                        ;			b_vol = ld_dword(pte + PTE_StLba
                    ); /* Get volume start sector */
 21771                        ;			sz_vol = ld_dword(pte + PTE_SizL
                    ba); /* Get volume size */
 21772                        ;		}
 21773                        ;	}
 21774                        ;	else
 21775                        ;	{ /* The volume is associated with a physical dr
                    ive */
 21776                        ;		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &
                    sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
  Fri Jul 16 2021 14:42                                                Page 423


 21777                        ;		if (!(fsopt & FM_SFD))
 21778                        ;		{ /* To be partitioned? */
 21779                        ;			/* Create a single-partition on 
                    the drive in this function */
 21780                        ;#if FF_LBA64
 21781                        ;			if (sz_vol >= FF_MIN_GPT)
 21782                        ;			{ /* Which partition type to cre
                    ate, MBR or GPT? */
 21783                        ;				fsopt |= 0x80; /* Partit
                    ioning is in GPT */
 21784                        ;				b_vol = GPT_ALIGN / ss; 
                    sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1; /* Estimated
                     partition offset and size */
 21785                        ;			}
 21786                        ;			else
 21787                        ;#endif
 21788                        ;			{ /* Partitioning is in MBR */
 21789                        ;				if (sz_vol > N_SEC_TRACK
                    )
 21790                        ;				{
 21791                        ;					b_vol = N_SEC_TR
                    ACK; sz_vol -= b_vol; /* Estimated partition offset and size
                     */
 21792                        ;				}
 21793                        ;			}
 21794                        ;		}
 21795                        ;	}
 21796                        ;	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED); /
                    * Check if volume size is >=128s */
 21797                        ;
 21798                        ;	/* Now start to create a FAT volume at b_vol and
                     sz_vol */
 21799                        ;
 21800                        ;	do
 21801                        ;	{ /* Pre-determine the FAT type */
 21802                        ;		if (FF_FS_EXFAT && (fsopt & FM_EXFAT))
 21803                        ;		{ /* exFAT possible? */
 21804                        ;			if ((fsopt & FM_ANY) == FM_EXFAT
                     || sz_vol >= 0x4000000 || sz_au > 128)
 21805                        ;			{ /* exFAT only, vol >= 64MS or 
                    sz_au > 128S ? */
 21806                        ;				fsty = FS_EXFAT; break;
 21807                        ;			}
 21808                        ;		}
 21809                        ;#if FF_LBA64
 21810                        ;		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR
                    _MKFS_ABORTED); /* Too large volume for FAT/FAT32 */
 21811                        ;#endif
 21812                        ;		if (sz_au > 128) sz_au = 128; /* Invalid
                     AU for FAT/FAT32? */
 21813                        ;		if (fsopt & FM_FAT32)
 21814                        ;		{ /* FAT32 possible? */
 21815                        ;			if (!(fsopt & FM_FAT))
 21816                        ;			{ /* no-FAT? */
 21817                        ;				fsty = FS_FAT32; break;
 21818                        ;			}
 21819                        ;		}
 21820                        ;		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INV
  Fri Jul 16 2021 14:42                                                Page 424


                    ALID_PARAMETER); /* no-FAT? */
 21821                        ;		fsty = FS_FAT16;
 21822                        ;	}while (0);
 21823                        ;
 21824                        ;#if FF_FS_EXFAT
 21825                        ;	if (fsty == FS_EXFAT)
 21826                        ;	{ /* Create an exFAT volume */
 21827                        ;		DWORD szb_bit, szb_case, sum, nb, cl, tb
                    l[3];
 21828                        ;		WCHAR ch, si;
 21829                        ;		UINT j, st;
 21830                        ;		BYTE b;
 21831                        ;
 21832                        ;		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_
                    ABORTED); /* Too small volume for exFAT? */
 21833                        ;#if FF_USE_TRIM
 21834                        ;		lba[0] = b_vol; lba[1] = b_vol + sz_vol 
                    - 1; /* Inform storage device that the volume area may be er
                    ased */
 21835                        ;		disk_ioctl(pdrv, CTRL_TRIM, lba);
 21836                        ;#endif
 21837                        ;		/* Determine FAT location, data location
                     and number of clusters */
 21838                        ;		if (sz_au == 0)
 21839                        ;		{ /* AU auto-selection */
 21840                        ;			sz_au = 8;
 21841                        ;			if (sz_vol >= 0x80000) sz_au = 6
                    4; /* >= 512Ks */
 21842                        ;			if (sz_vol >= 0x4000000) sz_au =
                     256; /* >= 64Ms */
 21843                        ;		}
 21844                        ;		b_fat = b_vol + 32; /* FAT start at offs
                    et 32 */
 21845                        ;		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 
                    4 + ss - 1) / ss; /* Number of FAT sectors */
 21846                        ;		b_data = (b_fat + sz_fat + sz_blk - 1) &
                     ~((LBA_t)sz_blk - 1); /* Align data area to the erase block
                     boundary */
 21847                        ;		if (b_data - b_vol >= sz_vol / 2) LEAVE_
                    MKFS(FR_MKFS_ABORTED); /* Too small volume? */
 21848                        ;		n_clst = (DWORD)(sz_vol - (b_data - b_vo
                    l)) / sz_au; /* Number of clusters */
 21849                        ;		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORT
                    ED); /* Too few clusters? */
 21850                        ;		if (n_clst > MAX_EXFAT) LEAVE_MKFS(FR_MK
                    FS_ABORTED); /* Too many clusters? */
 21851                        ;
 21852                        ;		szb_bit = (n_clst + 7) / 8; /* Size of a
                    llocation bitmap */
 21853                        ;		tbl[0] = (szb_bit + sz_au * ss - 1) / (s
                    z_au * ss); /* Number of allocation bitmap clusters */
 21854                        ;
 21855                        ;		/* Create a compressed up-case table */
 21856                        ;		sect = b_data + sz_au * tbl[0]; /* Table
                     start sector */
 21857                        ;		sum = 0; /* Table checksum to be stored 
                    in the 82 entry */
 21858                        ;		st = 0; si = 0; i = 0; j = 0; szb_case =
  Fri Jul 16 2021 14:42                                                Page 425


                     0;
 21859                        ;		do
 21860                        ;		{
 21861                        ;			switch (st)
 21862                        ;			{
 21863                        ;				case 0:
 21864                        ;				ch = (WCHAR)ff_wtoupper(
                    si); /* Get an up-case char */
 21865                        ;				if (ch != si)
 21866                        ;				{
 21867                        ;					si++; break; /* 
                    Store the up-case char if exist */
 21868                        ;				}
 21869                        ;				for (j = 1; (WCHAR)(si +
                     j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++)
                    ; /* Get run length of no-case block */
 21870                        ;				if (j >= 128)
 21871                        ;				{
 21872                        ;					ch = 0xFFFF; st 
                    = 2; break; /* Compress the no-case block if run is >= 128 *
                    /
 21873                        ;				}
 21874                        ;				st = 1; /* Do not compre
                    ss short run */
 21875                        ;				/* go to next case */
 21876                        ;				case 1:
 21877                        ;				ch = si++; /* Fill the s
                    hort run */
 21878                        ;				if (--j == 0) st = 0;
 21879                        ;				break;
 21880                        ;
 21881                        ;				default:
 21882                        ;				ch = (WCHAR)j; si += (WC
                    HAR)j; /* Number of chars to skip */
 21883                        ;				st = 0;
 21884                        ;			}
 21885                        ;			sum = xsum32(buf[i + 0] = (BYTE)
                    ch, sum); /* Put it into the write buffer */
 21886                        ;			sum = xsum32(buf[i + 1] = (BYTE)
                    (ch >> 8), sum);
 21887                        ;			i += 2; szb_case += 2;
 21888                        ;			if (si == 0 || i == sz_buf * ss)
 21889                        ;			{ /* Write buffered data when bu
                    ffer full or end of process */
 21890                        ;				n = (i + ss - 1) / ss;
 21891                        ;				if (disk_write(pdrv, buf
                    , sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21892                        ;				sect += n; i = 0;
 21893                        ;			}
 21894                        ;		}while (si);
 21895                        ;		tbl[1] = (szb_case + sz_au * ss - 1) / (
                    sz_au * ss); /* Number of up-case table clusters */
 21896                        ;		tbl[2] = 1; /* Number of root dir cluste
                    rs */
 21897                        ;
 21898                        ;		/* Initialize the allocation bitmap */
 21899                        ;		sect = b_data; nsect = (szb_bit + ss - 1
                    ) / ss; /* Start of bitmap and number of sectors */
  Fri Jul 16 2021 14:42                                                Page 426


 21900                        ;		nb = tbl[0] + tbl[1] + tbl[2]; /* Number
                     of clusters in-use by system */
 21901                        ;		do
 21902                        ;		{
 21903                        ;			mem_set(buf, 0, sz_buf * ss);
 21904                        ;			for (i = 0; nb >= 8 && i < sz_bu
                    f * ss; buf[i++] = 0xFF, nb -= 8);
 21905                        ;			for (b = 1; nb != 0 && i < sz_bu
                    f * ss; buf[i] |= b, b <<= 1, nb--);
 21906                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect; /* Write the buffered data */
 21907                        ;			if (disk_write(pdrv, buf, sect, 
                    n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21908                        ;			sect += n; nsect -= n;
 21909                        ;		}while (nsect);
 21910                        ;
 21911                        ;		/* Initialize the FAT */
 21912                        ;		sect = b_fat; nsect = sz_fat; /* Start o
                    f FAT and number of FAT sectors */
 21913                        ;		j = nb = cl = 0;
 21914                        ;		do
 21915                        ;		{
 21916                        ;			mem_set(buf, 0, sz_buf * ss); i 
                    = 0; /* Clear work area and reset write index */
 21917                        ;			if (cl == 0)
 21918                        ;			{ /* Set FAT [0] and FAT[1] */
 21919                        ;				st_dword(buf + i, 0xFFFF
                    FFF8); i += 4; cl++;
 21920                        ;				st_dword(buf + i, 0xFFFF
                    FFFF); i += 4; cl++;
 21921                        ;			}
 21922                        ;			do
 21923                        ;			{ /* Create chains of bitmap, up
                    -case and root dir */
 21924                        ;				while (nb != 0 && i < sz
                    _buf * ss)
 21925                        ;				{ /* Create a chain */
 21926                        ;					st_dword(buf + i
                    , (nb > 1) ? cl + 1 : 0xFFFFFFFF);
 21927                        ;					i += 4; cl++; nb
                    --;
 21928                        ;				}
 21929                        ;				if (nb == 0 && j < 3) nb
                     = tbl[j++]; /* Next chain */
 21930                        ;			}while (nb != 0 && i < sz_buf * 
                    ss);
 21931                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect; /* Write the buffered data */
 21932                        ;			if (disk_write(pdrv, buf, sect, 
                    n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21933                        ;			sect += n; nsect -= n;
 21934                        ;		}while (nsect);
 21935                        ;
 21936                        ;		/* Initialize the root directory */
 21937                        ;		mem_set(buf, 0, sz_buf * ss);
 21938                        ;		buf[SZDIRE * 0 + 0] = ET_VLABEL; /* Volu
                    me label entry (no label) */
 21939                        ;		buf[SZDIRE * 1 + 0] = ET_BITMAP; /* Bitm
  Fri Jul 16 2021 14:42                                                Page 427


                    ap entry */
 21940                        ;		st_dword(buf + SZDIRE * 1 + 20, 2); /*  
                    cluster */
 21941                        ;		st_dword(buf + SZDIRE * 1 + 24, szb_bit)
                    ; /*  size */
 21942                        ;		buf[SZDIRE * 2 + 0] = ET_UPCASE; /* Up-c
                    ase table entry */
 21943                        ;		st_dword(buf + SZDIRE * 2 + 4, sum); /* 
                     sum */
 21944                        ;		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[
                    0]); /*  cluster */
 21945                        ;		st_dword(buf + SZDIRE * 2 + 24, szb_case
                    ); /*  size */
 21946                        ;		sect = b_data + sz_au * (tbl[0] + tbl[1]
                    ); nsect = sz_au; /* Start of the root directory and number 
                    of sectors */
 21947                        ;		do
 21948                        ;		{ /* Fill root directory sectors */
 21949                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect;
 21950                        ;			if (disk_write(pdrv, buf, sect, 
                    n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21951                        ;			mem_set(buf, 0, ss);
 21952                        ;			sect += n; nsect -= n;
 21953                        ;		}while (nsect);
 21954                        ;
 21955                        ;		/* Create two set of the exFAT VBR block
                    s */
 21956                        ;		sect = b_vol;
 21957                        ;		for (n = 0; n < 2; n++)
 21958                        ;		{
 21959                        ;			/* Main record (+0) */
 21960                        ;			mem_set(buf, 0, ss);
 21961                        ;			mem_cpy(buf + BS_JmpBoot, "\xEB\
                    x76\x90" "EXFAT   ", 11); /* Boot jump code (x86), OEM name 
                    */
 21962                        ;			st_qword(buf + BPB_VolOfsEx, b_v
                    ol); /* Volume offset in the physical drive [sector] */
 21963                        ;			st_qword(buf + BPB_TotSecEx, sz_
                    vol); /* Volume size [sector] */
 21964                        ;			st_dword(buf + BPB_FatOfsEx, (DW
                    ORD)(b_fat - b_vol)); /* FAT offset [sector] */
 21965                        ;			st_dword(buf + BPB_FatSzEx, sz_f
                    at); /* FAT size [sector] */
 21966                        ;			st_dword(buf + BPB_DataOfsEx, (D
                    WORD)(b_data - b_vol)); /* Data offset [sector] */
 21967                        ;			st_dword(buf + BPB_NumClusEx, n_
                    clst); /* Number of clusters */
 21968                        ;			st_dword(buf + BPB_RootClusEx, 2
                     + tbl[0] + tbl[1]); /* Root dir cluster # */
 21969                        ;			st_dword(buf + BPB_VolIDEx, GET_
                    FATTIME()); /* VSN */
 21970                        ;			st_word(buf + BPB_FSVerEx, 0x100
                    ); /* Filesystem version (1.00) */
 21971                        ;			for (buf[BPB_BytsPerSecEx] = 0, 
                    i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++); /* Log2 of sector
                     size [byte] */
 21972                        ;			for (buf[BPB_SecPerClusEx] = 0, 
  Fri Jul 16 2021 14:42                                                Page 428


                    i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++); /* Log2 of clu
                    ster size [sector] */
 21973                        ;			buf[BPB_NumFATsEx] = 1; /* Numbe
                    r of FATs */
 21974                        ;			buf[BPB_DrvNumEx] = 0x80; /* Dri
                    ve number (for int13) */
 21975                        ;			st_word(buf + BS_BootCodeEx, 0xF
                    EEB); /* Boot code (x86) */
 21976                        ;			st_word(buf + BS_55AA, 0xAA55); 
                    /* Signature (placed here regardless of sector size) */
 21977                        ;			for (i = sum = 0; i < ss; i++)
 21978                        ;			{ /* VBR checksum */
 21979                        ;				if (i != BPB_VolFlagEx &
                    & i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum
                    32(buf[i], sum);
 21980                        ;			}
 21981                        ;			if (disk_write(pdrv, buf, sect++
                    , 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21982                        ;			/* Extended bootstrap record (+1
                    ..+8) */
 21983                        ;			mem_set(buf, 0, ss);
 21984                        ;			st_word(buf + ss - 2, 0xAA55); /
                    * Signature (placed at end of sector) */
 21985                        ;			for (j = 1; j < 9; j++)
 21986                        ;			{
 21987                        ;				for (i = 0; i < ss; sum 
                    = xsum32(buf[i++], sum)); /* VBR checksum */
 21988                        ;				if (disk_write(pdrv, buf
                    , sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21989                        ;			}
 21990                        ;			/* OEM/Reserved record (+9..+10)
                     */
 21991                        ;			mem_set(buf, 0, ss);
 21992                        ;			for (; j < 11; j++)
 21993                        ;			{
 21994                        ;				for (i = 0; i < ss; sum 
                    = xsum32(buf[i++], sum)); /* VBR checksum */
 21995                        ;				if (disk_write(pdrv, buf
                    , sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21996                        ;			}
 21997                        ;			/* Sum record (+11) */
 21998                        ;			for (i = 0; i < ss; i += 4) st_d
                    word(buf + i, sum); /* Fill with checksum value */
 21999                        ;			if (disk_write(pdrv, buf, sect++
                    , 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 22000                        ;		}
 22001                        ;
 22002                        ;	}
 22003                        ;	else
 22004                        ;#endif	/* FF_FS_EXFAT */
 22005                        ;	{ /* Create an FAT/FAT32 volume */
 22006                        ;		do
 22007                        ;		{
 22008                        ;			pau = sz_au;
 22009                        ;			/* Pre-determine number of clust
                    ers and FAT sub-type */
 22010                        ;			if (fsty == FS_FAT32)
 22011                        ;			{ /* FAT32 volume */
  Fri Jul 16 2021 14:42                                                Page 429


 22012                        ;				if (pau == 0)
 22013                        ;				{ /* AU auto-selection *
                    /
 22014                        ;					n = (DWORD)sz_vo
                    l / 0x20000; /* Volume size in unit of 128KS */
 22015                        ;					for (i = 0, pau 
                    = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1); /* Get from
                     table */
 22016                        ;				}
 22017                        ;				n_clst = (DWORD)sz_vol /
                     pau; /* Number of clusters */
 22018                        ;				sz_fat = (n_clst * 4 + 8
                     + ss - 1) / ss; /* FAT size [sector] */
 22019                        ;				sz_rsv = 32; /* Number o
                    f reserved sectors */
 22020                        ;				sz_dir = 0; /* No static
                     directory */
 22021                        ;				if (n_clst <= MAX_FAT16 
                    || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 22022                        ;			}
 22023                        ;			else
 22024                        ;			{ /* FAT volume */
 22025                        ;				if (pau == 0)
 22026                        ;				{ /* au auto-selection *
                    /
 22027                        ;					n = (DWORD)sz_vo
                    l / 0x1000; /* Volume size in unit of 4KS */
 22028                        ;					for (i = 0, pau 
                    = 1; cst[i] && cst[i] <= n; i++, pau <<= 1); /* Get from tab
                    le */
 22029                        ;				}
 22030                        ;				n_clst = (DWORD)sz_vol /
                     pau;
 22031                        ;				if (n_clst > MAX_FAT12)
 22032                        ;				{
 22033                        ;					n = n_clst * 2 +
                     4; /* FAT size [byte] */
 22034                        ;				}
 22035                        ;				else
 22036                        ;				{
 22037                        ;					fsty = FS_FAT12;
 22038                        ;					n = (n_clst * 3 
                    + 1) / 2 + 3; /* FAT size [byte] */
 22039                        ;				}
 22040                        ;				sz_fat = (n + ss - 1) / 
                    ss; /* FAT size [sector] */
 22041                        ;				sz_rsv = 1; /* Number of
                     reserved sectors */
 22042                        ;				sz_dir = (DWORD)n_root *
                     SZDIRE / ss; /* Root dir size [sector] */
 22043                        ;			}
 22044                        ;			b_fat = b_vol + sz_rsv; /* FAT b
                    ase */
 22045                        ;			b_data = b_fat + sz_fat * n_fat 
                    + sz_dir; /* Data base */
 22046                        ;
 22047                        ;			/* Align data area to erase bloc
                    k boundary (for flash memory media) */
  Fri Jul 16 2021 14:42                                                Page 430


 22048                        ;			n = (DWORD)(((b_data + sz_blk - 
                    1) & ~(sz_blk - 1)) - b_data); /* Sectors to next nearest fr
                    om current data base */
 22049                        ;			if (fsty == FS_FAT32)
 22050                        ;			{ /* FAT32: Move FAT */
 22051                        ;				sz_rsv += n; b_fat += n;
 22052                        ;			}
 22053                        ;			else
 22054                        ;			{ /* FAT: Expand FAT */
 22055                        ;				if (n % n_fat)
 22056                        ;				{ /* Adjust fractional e
                    rror if needed */
 22057                        ;					n--; sz_rsv++; b
                    _fat++;
 22058                        ;				}
 22059                        ;				sz_fat += n / n_fat;
 22060                        ;			}
 22061                        ;
 22062                        ;			/* Determine number of clusters 
                    and final check of validity of the FAT sub-type */
 22063                        ;			if (sz_vol < b_data + pau * 16 -
                     b_vol) LEAVE_MKFS(FR_MKFS_ABORTED); /* Too small volume? */
 22064                        ;			n_clst = ((DWORD)sz_vol - sz_rsv
                     - sz_fat * n_fat - sz_dir) / pau;
 22065                        ;			if (fsty == FS_FAT32)
 22066                        ;			{
 22067                        ;				if (n_clst <= MAX_FAT16)
 22068                        ;				{ /* Too few clusters fo
                    r FAT32? */
 22069                        ;					if (sz_au == 0 &
                    & (sz_au = pau / 2) != 0) continue; /* Adjust cluster size a
                    nd retry */
 22070                        ;					LEAVE_MKFS(FR_MK
                    FS_ABORTED);
 22071                        ;				}
 22072                        ;			}
 22073                        ;			if (fsty == FS_FAT16)
 22074                        ;			{
 22075                        ;				if (n_clst > MAX_FAT16)
 22076                        ;				{ /* Too many clusters f
                    or FAT16 */
 22077                        ;					if (sz_au == 0 &
                    & (pau * 2) <= 64)
 22078                        ;					{
 22079                        ;						sz_au = 
                    pau * 2; continue; /* Adjust cluster size and retry */
 22080                        ;					}
 22081                        ;					if ((fsopt & FM_
                    FAT32))
 22082                        ;					{
 22083                        ;						fsty = F
                    S_FAT32; continue; /* Switch type to FAT32 and retry */
 22084                        ;					}
 22085                        ;					if (sz_au == 0 &
                    & (sz_au = pau * 2) <= 128) continue; /* Adjust cluster size
                     and retry */
 22086                        ;					LEAVE_MKFS(FR_MK
                    FS_ABORTED);
  Fri Jul 16 2021 14:42                                                Page 431


 22087                        ;				}
 22088                        ;				if (n_clst <= MAX_FAT12)
 22089                        ;				{ /* Too few clusters fo
                    r FAT16 */
 22090                        ;					if (sz_au == 0 &
                    & (sz_au = pau * 2) <= 128) continue; /* Adjust cluster size
                     and retry */
 22091                        ;					LEAVE_MKFS(FR_MK
                    FS_ABORTED);
 22092                        ;				}
 22093                        ;			}
 22094                        ;			if (fsty == FS_FAT12 && n_clst >
                     MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED); /* Too many cluster
                    s for FAT12 */
 22095                        ;
 22096                        ;			/* Ok, it is the valid cluster c
                    onfiguration */
 22097                        ;			break;
 22098                        ;		}while (1);
 22099                        ;
 22100                        ;#if FF_USE_TRIM
 22101                        ;		lba[0] = b_vol; lba[1] = b_vol + sz_vol 
                    - 1; /* Inform storage device that the volume area may be er
                    ased */
 22102                        ;		disk_ioctl(pdrv, CTRL_TRIM, lba);
 22103                        ;#endif
 22104                        ;		/* Create FAT VBR */
 22105                        ;		mem_set(buf, 0, ss);
 22106                        ;		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90"
                     "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 22107                        ;		st_word(buf + BPB_BytsPerSec, ss); /* Se
                    ctor size [byte] */
 22108                        ;		buf[BPB_SecPerClus] = (BYTE)pau; /* Clus
                    ter size [sector] */
 22109                        ;		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_r
                    sv); /* Size of reserved area */
 22110                        ;		buf[BPB_NumFATs] = (BYTE)n_fat; /* Numbe
                    r of FATs */
 22111                        ;		st_word(buf + BPB_RootEntCnt, (WORD)((fs
                    ty == FS_FAT32) ? 0 : n_root)); /* Number of root directory 
                    entries */
 22112                        ;		if (sz_vol < 0x10000)
 22113                        ;		{
 22114                        ;			st_word(buf + BPB_TotSec16, (WOR
                    D)sz_vol); /* Volume size in 16-bit LBA */
 22115                        ;		}
 22116                        ;		else
 22117                        ;		{
 22118                        ;			st_dword(buf + BPB_TotSec32, (DW
                    ORD)sz_vol); /* Volume size in 32-bit LBA */
 22119                        ;		}
 22120                        ;		buf[BPB_Media] = 0xF8; /* Media descript
                    or byte */
 22121                        ;		st_word(buf + BPB_SecPerTrk, 63); /* Num
                    ber of sectors per track (for int13) */
 22122                        ;		st_word(buf + BPB_NumHeads, 255); /* Num
                    ber of heads (for int13) */
 22123                        ;		st_dword(buf + BPB_HiddSec, (DWORD)b_vol
  Fri Jul 16 2021 14:42                                                Page 432


                    ); /* Volume offset in the physical drive [sector] */
 22124                        ;		if (fsty == FS_FAT32)
 22125                        ;		{
 22126                        ;			st_dword(buf + BS_VolID32, GET_F
                    ATTIME()); /* VSN */
 22127                        ;			st_dword(buf + BPB_FATSz32, sz_f
                    at); /* FAT size [sector] */
 22128                        ;			st_dword(buf + BPB_RootClus32, 2
                    ); /* Root directory cluster # (2) */
 22129                        ;			st_word(buf + BPB_FSInfo32, 1); 
                    /* Offset of FSINFO sector (VBR + 1) */
 22130                        ;			st_word(buf + BPB_BkBootSec32, 6
                    ); /* Offset of backup VBR (VBR + 6) */
 22131                        ;			buf[BS_DrvNum32] = 0x80; /* Driv
                    e number (for int13) */
 22132                        ;			buf[BS_BootSig32] = 0x29; /* Ext
                    ended boot signature */
 22133                        ;			mem_cpy(buf + BS_VolLab32, "NO N
                    AME    " "FAT32   ", 19); /* Volume label, FAT signature */
 22134                        ;		}
 22135                        ;		else
 22136                        ;		{
 22137                        ;			st_dword(buf + BS_VolID, GET_FAT
                    TIME()); /* VSN */
 22138                        ;			st_word(buf + BPB_FATSz16, (WORD
                    )sz_fat); /* FAT size [sector] */
 22139                        ;			buf[BS_DrvNum] = 0x80; /* Drive 
                    number (for int13) */
 22140                        ;			buf[BS_BootSig] = 0x29; /* Exten
                    ded boot signature */
 22141                        ;			mem_cpy(buf + BS_VolLab, "NO NAM
                    E    " "FAT     ", 19); /* Volume label, FAT signature */
 22142                        ;		}
 22143                        ;		st_word(buf + BS_55AA, 0xAA55); /* Signa
                    ture (offset is fixed here regardless of sector size) */
 22144                        ;		if (disk_write(pdrv, buf, b_vol, 1) != R
                    ES_OK) LEAVE_MKFS(FR_DISK_ERR); /* Write it to the VBR secto
                    r */
 22145                        ;
 22146                        ;		/* Create FSINFO record if needed */
 22147                        ;		if (fsty == FS_FAT32)
 22148                        ;		{
 22149                        ;			disk_write(pdrv, buf, b_vol + 6,
                     1); /* Write backup VBR (VBR + 6) */
 22150                        ;			mem_set(buf, 0, ss);
 22151                        ;			st_dword(buf + FSI_LeadSig, 0x41
                    615252);
 22152                        ;			st_dword(buf + FSI_StrucSig, 0x6
                    1417272);
 22153                        ;			st_dword(buf + FSI_Free_Count, n
                    _clst - 1); /* Number of free clusters */
 22154                        ;			st_dword(buf + FSI_Nxt_Free, 2);
                     /* Last allocated cluster# */
 22155                        ;			st_word(buf + BS_55AA, 0xAA55);
 22156                        ;			disk_write(pdrv, buf, b_vol + 7,
                     1); /* Write backup FSINFO (VBR + 7) */
 22157                        ;			disk_write(pdrv, buf, b_vol + 1,
                     1); /* Write original FSINFO (VBR + 1) */
  Fri Jul 16 2021 14:42                                                Page 433


 22158                        ;		}
 22159                        ;
 22160                        ;		/* Initialize FAT area */
 22161                        ;		mem_set(buf, 0, sz_buf * ss);
 22162                        ;		sect = b_fat; /* FAT start sector */
 22163                        ;		for (i = 0; i < n_fat; i++)
 22164                        ;		{ /* Initialize FATs each */
 22165                        ;			if (fsty == FS_FAT32)
 22166                        ;			{
 22167                        ;				st_dword(buf + 0, 0xFFFF
                    FFF8); /* FAT[0] */
 22168                        ;				st_dword(buf + 4, 0xFFFF
                    FFFF); /* FAT[1] */
 22169                        ;				st_dword(buf + 8, 0x0FFF
                    FFFF); /* FAT[2] (root directory) */
 22170                        ;			}
 22171                        ;			else
 22172                        ;			{
 22173                        ;				st_dword(buf + 0, (fsty 
                    == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8); /* FAT[0] and FAT[1] 
                    */
 22174                        ;			}
 22175                        ;			nsect = sz_fat; /* Number of FAT
                     sectors */
 22176                        ;			do
 22177                        ;			{ /* Fill FAT sectors */
 22178                        ;				n = (nsect > sz_buf) ? s
                    z_buf : nsect;
 22179                        ;				if (disk_write(pdrv, buf
                    , sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 22180                        ;				mem_set(buf, 0, ss); /* 
                    Rest of FAT all are cleared */
 22181                        ;				sect += n; nsect -= n;
 22182                        ;			}while (nsect);
 22183                        ;		}
 22184                        ;
 22185                        ;		/* Initialize root directory (fill with 
                    zero) */
 22186                        ;		nsect = (fsty == FS_FAT32) ? pau : sz_di
                    r; /* Number of root directory sectors */
 22187                        ;		do
 22188                        ;		{
 22189                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect;
 22190                        ;			if (disk_write(pdrv, buf, sect, 
                    (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 22191                        ;			sect += n; nsect -= n;
 22192                        ;		}while (nsect);
 22193                        ;	}
 22194                        ;
 22195                        ;	/* A FAT volume has been created here */
 22196                        ;
 22197                        ;	/* Determine system ID in the MBR partition tabl
                    e */
 22198                        ;	if (FF_FS_EXFAT && fsty == FS_EXFAT)
 22199                        ;	{
 22200                        ;		sys = 0x07; /* exFAT */
 22201                        ;	}
  Fri Jul 16 2021 14:42                                                Page 434


 22202                        ;	else
 22203                        ;	{
 22204                        ;		if (fsty == FS_FAT32)
 22205                        ;		{
 22206                        ;			sys = 0x0C; /* FAT32X */
 22207                        ;		}
 22208                        ;		else
 22209                        ;		{
 22210                        ;			if (sz_vol >= 0x10000)
 22211                        ;			{
 22212                        ;				sys = 0x06; /* FAT12/16 
                    (large) */
 22213                        ;			}
 22214                        ;			else
 22215                        ;			{
 22216                        ;				sys = (fsty == FS_FAT16)
                     ? 0x04 : 0x01; /* FAT16 : FAT12 */
 22217                        ;			}
 22218                        ;		}
 22219                        ;	}
 22220                        ;
 22221                        ;	/* Update partition information */
 22222                        ;	if (FF_MULTI_PARTITION && ipart != 0)
 22223                        ;	{ /* Volume is in the existing partition */
 22224                        ;		if (!FF_LBA64 || !(fsopt & 0x80))
 22225                        ;		{
 22226                        ;			/* Update system ID in the parti
                    tion table */
 22227                        ;			if (disk_read(pdrv, buf, 0, 1) !
                    = RES_OK) LEAVE_MKFS(FR_DISK_ERR); /* Read the MBR */
 22228                        ;			buf[MBR_Table + (ipart - 1) * SZ
                    _PTE + PTE_System] = sys; /* Set system ID */
 22229                        ;			if (disk_write(pdrv, buf, 0, 1) 
                    != RES_OK) LEAVE_MKFS(FR_DISK_ERR); /* Write it back to the 
                    MBR */
 22230                        ;		}
 22231                        ;	}
 22232                        ;	else
 22233                        ;	{ /* Volume as a new single partition */
 22234                        ;		if (!(fsopt & FM_SFD))
 22235                        ;		{ /* Create partition table if not in SF
                    D */
 22236                        ;			lba[0] = sz_vol, lba[1] = 0;
 22237                        ;			fr = create_partition(pdrv, lba,
                     sys, buf);
 22238                        ;			if (fr != FR_OK) LEAVE_MKFS(fr);
 22239                        ;		}
 22240                        ;	}
 22241                        ;
 22242                        ;	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LE
                    AVE_MKFS(FR_DISK_ERR);
 22243                        ;
 22244                        ;	LEAVE_MKFS(FR_OK);
 22245                        ;}
 22246                        ;
 22247                        ;#if FF_MULTI_PARTITION
 22248                        ;/*-----------------------------------------------
                    ------------------------*/
  Fri Jul 16 2021 14:42                                                Page 435


 22249                        ;/* Create Partition Table on the Physical Drive  
                                            */
 22250                        ;/*-----------------------------------------------
                    ------------------------*/
 22251                        ;
 22252                        ;FRESULT f_fdisk (
 22253                        ;		BYTE pdrv, /* Physical drive number */
 22254                        ;		const LBA_t ptbl[], /* Pointer to the si
                    ze table for each partitions */
 22255                        ;		void* work /* Pointer to the working buf
                    fer (null: use heap memory) */
 22256                        ;)
 22257                        ;{
 22258                        ;	BYTE *buf = (BYTE*)work;
 22259                        ;	DSTATUS stat;
 22260                        ;
 22261                        ;	stat = disk_initialize(pdrv);
 22262                        ;	if (stat & STA_NOINIT) return FR_NOT_READY;
 22263                        ;	if (stat & STA_PROTECT) return FR_WRITE_PROTECTE
                    D;
 22264                        ;#if FF_USE_LFN == 3
 22265                        ;	if (!buf) buf = ff_memalloc(FF_MAX_SS); /* Use h
                    eap memory for working buffer */
 22266                        ;#endif
 22267                        ;	if (!buf) return FR_NOT_ENOUGH_CORE;
 22268                        ;
 22269                        ;	LEAVE_MKFS(create_partition(pdrv, ptbl, 0x07, bu
                    f));
 22270                        ;}
 22271                        ;
 22272                        ;#endif /* FF_MULTI_PARTITION */
 22273                        ;#endif /* !FF_FS_READONLY && FF_USE_MKFS */
 22274                        ;
 22275                        ;#if FF_USE_STRFUNC
 22276                        ;#if FF_USE_LFN && FF_LFN_UNICODE && (FF_STRF_ENCO
                    DE < 0 || FF_STRF_ENCODE > 3)
 22277                        ;#error Wrong FF_STRF_ENCODE setting
 22278                        ;#endif
 22279                        ;/*-----------------------------------------------
                    ------------------------*/
 22280                        ;/* Get a String from the File                    
                                            */
 22281                        ;/*-----------------------------------------------
                    ------------------------*/
 22282                        ;
 22283                        ;TCHAR* f_gets(TCHAR* buff, /* Pointer to the buff
                    er to store read string */
 22284                        ;int len, /* Size of string buffer (items) */
 22285                        ;FIL* fp /* Pointer to the file object */
 22286                        ;)
 22287                        ;{
 22288                        ;	int nc = 0;
 22289                        ;	TCHAR *p = buff;
 22290                        ;	BYTE s[4];
 22291                        ;	UINT rc;
 22292                        ;	DWORD dc;
 22293                        ;#if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCOD
                    E <= 2
  Fri Jul 16 2021 14:42                                                Page 436


 22294                        ;	WCHAR wc;
 22295                        ;#endif
 22296                        ;#if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCOD
                    E == 3
 22297                        ;	UINT ct;
 22298                        ;#endif
 22299                        ;
 22300                        ;#if FF_USE_LFN && FF_LFN_UNICODE			
                    /* With code conversion (Unicode API) */
 22301                        ;	/* Make a room for the character and terminator 
                     */
 22302                        ;	if (FF_LFN_UNICODE == 1) len -= (FF_STRF_ENCODE 
                    == 0) ? 1 : 2;
 22303                        ;	if (FF_LFN_UNICODE == 2) len -= (FF_STRF_ENCODE 
                    == 0) ? 3 : 4;
 22304                        ;	if (FF_LFN_UNICODE == 3) len -= 1;
 22305                        ;	while (nc < len)
 22306                        ;	{
 22307                        ;#if FF_STRF_ENCODE == 0				
                    /* Read a character in ANSI/OEM */
 22308                        ;		f_read(fp, s, 1, &rc); /* Get a code uni
                    t */
 22309                        ;		if (rc != 1) break; /* EOF? */
 22310                        ;		wc = s[0];
 22311                        ;		if (dbc_1st((BYTE)wc))
 22312                        ;		{ /* DBC 1st byte? */
 22313                        ;			f_read(fp, s, 1, &rc); /* Get DB
                    C 2nd byte */
 22314                        ;			if (rc != 1 || !dbc_2nd(s[0])) c
                    ontinue; /* Wrong code? */
 22315                        ;			wc = wc << 8 | s[0];
 22316                        ;		}
 22317                        ;		dc = ff_oem2uni(wc, CODEPAGE); /* OEM --
                    > */
 22318                        ;		if (dc == 0) continue;
 22319                        ;#elif FF_STRF_ENCODE == 1 || FF_STRF_ENCODE == 2 
                    	/* Read a character in UTF-16LE/BE */
 22320                        ;		f_read(fp, s, 2, &rc); /* Get a code uni
                    t */
 22321                        ;		if (rc != 2) break; /* EOF? */
 22322                        ;		dc = (FF_STRF_ENCODE == 1) ? ld_word(s) 
                    : s[0] << 8 | s[1];
 22323                        ;		if (IsSurrogateL(dc)) continue; /* Broke
                    n surrogate pair? */
 22324                        ;		if (IsSurrogateH(dc))
 22325                        ;		{ /* High surrogate? */
 22326                        ;			f_read(fp, s, 2, &rc); /* Get lo
                    w surrogate */
 22327                        ;			if (rc != 2) break; /* EOF? */
 22328                        ;			wc = (FF_STRF_ENCODE == 1) ? ld_
                    word(s) : s[0] << 8 | s[1];
 22329                        ;			if (!IsSurrogateL(wc)) continue;
                     /* Broken surrogate pair? */
 22330                        ;			dc = ((dc & 0x3FF) + 0x40) << 10
                     | (wc & 0x3FF); /* Merge surrogate pair */
 22331                        ;		}
 22332                        ;#else	/* Read a character in UTF-8 */
 22333                        ;		f_read(fp, s, 1, &rc); /* Get a code uni
  Fri Jul 16 2021 14:42                                                Page 437


                    t */
 22334                        ;		if (rc != 1) break; /* EOF? */
 22335                        ;		dc = s[0];
 22336                        ;		if (dc >= 0x80)
 22337                        ;		{ /* Multi-byte sequence? */
 22338                        ;			ct = 0;
 22339                        ;			if ((dc & 0xE0) == 0xC0)
 22340                        ;			{	dc &= 0x1F; ct = 1;} /* 
                    2-byte sequence? */
 22341                        ;			if ((dc & 0xF0) == 0xE0)
 22342                        ;			{	dc &= 0x0F; ct = 2;} /* 
                    3-byte sequence? */
 22343                        ;			if ((dc & 0xF8) == 0xF0)
 22344                        ;			{	dc &= 0x07; ct = 3;} /* 
                    4-byte sequence? */
 22345                        ;			if (ct == 0) continue;
 22346                        ;			f_read(fp, s, ct, &rc); /* Get t
                    railing bytes */
 22347                        ;			if (rc != ct) break;
 22348                        ;			rc = 0;
 22349                        ;			do
 22350                        ;			{ /* Merge the byte sequence */
 22351                        ;				if ((s[rc] & 0xC0) != 0x
                    80) break;
 22352                        ;				dc = dc << 6 | (s[rc] & 
                    0x3F);
 22353                        ;			}while (++rc < ct);
 22354                        ;			if (rc != ct || dc < 0x80 || IsS
                    urrogate(dc) || dc >= 0x110000) continue; /* Wrong encoding?
                     */
 22355                        ;		}
 22356                        ;#endif
 22357                        ;		/* A code point is avaialble in dc to be
                     output */
 22358                        ;
 22359                        ;		if (FF_USE_STRFUNC == 2 && dc == '\r') c
                    ontinue; /* Strip \r off if needed */
 22360                        ;#if FF_LFN_UNICODE == 1	|| FF_LFN_UNICODE == 3	
                    /* Output it in UTF-16/32 encoding */
 22361                        ;		if (FF_LFN_UNICODE == 1 && dc >= 0x10000
                    )
 22362                        ;		{ /* Out of BMP at UTF-16? */
 22363                        ;			*p++ = (TCHAR)(0xD800 | ((dc >> 
                    10) - 0x40)); nc++; /* Make and output high surrogate */
 22364                        ;			dc = 0xDC00 | (dc & 0x3FF); /* M
                    ake low surrogate */
 22365                        ;		}
 22366                        ;		*p++ = (TCHAR)dc; nc++;
 22367                        ;		if (dc == '\n') break; /* End of line? *
                    /
 22368                        ;#elif FF_LFN_UNICODE == 2		/* Outpu
                    t it in UTF-8 encoding */
 22369                        ;		if (dc < 0x80)
 22370                        ;		{ /* Single byte? */
 22371                        ;			*p++ = (TCHAR)dc;
 22372                        ;			nc++;
 22373                        ;			if (dc == '\n') break; /* End of
                     line? */
  Fri Jul 16 2021 14:42                                                Page 438


 22374                        ;		}
 22375                        ;		else
 22376                        ;		{
 22377                        ;			if (dc < 0x800)
 22378                        ;			{ /* 2-byte sequence? */
 22379                        ;				*p++ = (TCHAR)(0xC0 | (d
                    c >> 6 & 0x1F));
 22380                        ;				*p++ = (TCHAR)(0x80 | (d
                    c >> 0 & 0x3F));
 22381                        ;				nc += 2;
 22382                        ;			}
 22383                        ;			else
 22384                        ;			{
 22385                        ;				if (dc < 0x10000)
 22386                        ;				{ /* 3-byte sequence? */
 22387                        ;					*p++ = (TCHAR)(0
                    xE0 | (dc >> 12 & 0x0F));
 22388                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 6 & 0x3F));
 22389                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 0 & 0x3F));
 22390                        ;					nc += 3;
 22391                        ;				}
 22392                        ;				else
 22393                        ;				{ /* 4-byte sequence? */
 22394                        ;					*p++ = (TCHAR)(0
                    xF0 | (dc >> 18 & 0x07));
 22395                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 12 & 0x3F));
 22396                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 6 & 0x3F));
 22397                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 0 & 0x3F));
 22398                        ;					nc += 4;
 22399                        ;				}
 22400                        ;			}
 22401                        ;		}
 22402                        ;#endif
 22403                        ;	}
 22404                        ;
 22405                        ;#else			/* Byte-by-byte read wit
                    hout any conversion (ANSI/OEM API) */
 22406                        ;	len -= 1; /* Make a room for the terminator */
 22407                        ;	while (nc < len)
 22408                        ;	{
 22409                        ;		f_read(fp, s, 1, &rc); /* Get a byte */
 22410                        ;		if (rc != 1)
 22411                        ;			break; /* EOF? */
 22412                        ;		dc = s[0];
 22413                        ;		if (FF_USE_STRFUNC == 2 && dc == '\r')
 22414                        ;			continue;
 22415                        ;		*p++ = (TCHAR) dc;
 22416                        ;		nc++;
 22417                        ;		if (dc == '\n')
 22418                        ;			break;
 22419                        ;	}
 22420                        ;#endif
 22421                        ;
  Fri Jul 16 2021 14:42                                                Page 439


 22422                        ;	*p = 0; /* Terminate the string */
 22423                        ;	return nc ? buff : 0; /* When no data read due t
                    o EOF or error, return with error. */
 22424                        ;}
 22425                        ;
 22426                        ;#if !FF_FS_READONLY
 22427                        ;#include <stdarg.h>
 22428                        ;/*-----------------------------------------------
                    ------------------------*/
 22429                        ;/* Put a Character to the File (sub-functions)   
                                            */
 22430                        ;/*-----------------------------------------------
                    ------------------------*/
 22431                        ;
 22432                        ;/* Putchar output buffer and work area */
 22433                        ;
 22434                        ;typedef struct
 22435                        ;{
 22436                        ;	FIL *fp; /* Ptr to the writing file */
 22437                        ;	int idx, nchr; /* Write index of buf[] (-1:error
                    ), number of encoding units written */
 22438                        ;#if FF_USE_LFN && FF_LFN_UNICODE == 1
 22439                        ;	WCHAR hs;
 22440                        ;#elif FF_USE_LFN && FF_LFN_UNICODE == 2
 22441                        ;	BYTE bs[4];
 22442                        ;	UINT wi, ct;
 22443                        ;#endif
 22444                        ;	BYTE buf[64]; /* Write buffer */
 22445                        ;} putbuff;
 22446                        ;
 22447                        ;/* Buffered write with code conversion */
 22448                        ;
 22449                        ;static void putc_bfd(putbuff* pb, TCHAR c)
 22450                        ;{
 22451                        ;	UINT n;
 22452                        ;	int i, nc;
 22453                        ;#if FF_USE_LFN && FF_LFN_UNICODE
 22454                        ;	WCHAR hs, wc;
 22455                        ;#if FF_LFN_UNICODE == 2
 22456                        ;	DWORD dc;
 22457                        ;	TCHAR *tp;
 22458                        ;#endif
 22459                        ;#endif
 22460                        ;
 22461                        ;	if (FF_USE_STRFUNC == 2 && c == '\n')
 22462                        ;	{ /* LF -> CRLF conversion */
 22463                        ;		putc_bfd(pb, '\r');
 22464                        ;	}
 22465                        ;
 22466                        ;	i = pb->idx; /* Write index of pb->buf[] */
 22467                        ;	if (i < 0)
 22468                        ;		return;
 22469                        ;	nc = pb->nchr; /* Write unit counter */
 22470                        ;
 22471                        ;#if FF_USE_LFN && FF_LFN_UNICODE
 22472                        ;#if FF_LFN_UNICODE == 1		/* UTF-16 input 
                    */
 22473                        ;	if (IsSurrogateH(c))
  Fri Jul 16 2021 14:42                                                Page 440


 22474                        ;	{ /* High surrogate? */
 22475                        ;		pb->hs = c; return; /* Save it for next 
                    */
 22476                        ;	}
 22477                        ;	hs = pb->hs; pb->hs = 0;
 22478                        ;	if (hs != 0)
 22479                        ;	{ /* There is a leading high surrogate */
 22480                        ;		if (!IsSurrogateL(c)) hs = 0; /* Discard
                     high surrogate if not a surrogate pair */
 22481                        ;	}
 22482                        ;	else
 22483                        ;	{
 22484                        ;		if (IsSurrogateL(c)) return; /* Discard 
                    stray low surrogate */
 22485                        ;	}
 22486                        ;	wc = c;
 22487                        ;#elif FF_LFN_UNICODE == 2	/* UTF-8 input *
                    /
 22488                        ;	for (;;)
 22489                        ;	{
 22490                        ;		if (pb->ct == 0)
 22491                        ;		{ /* Out of multi-byte sequence? */
 22492                        ;			pb->bs[pb->wi = 0] = (BYTE)c; /*
                     Save 1st byte */
 22493                        ;			if ((BYTE)c < 0x80) break; /* Si
                    ngle byte? */
 22494                        ;			if (((BYTE)c & 0xE0) == 0xC0) pb
                    ->ct = 1; /* 2-byte sequence? */
 22495                        ;			if (((BYTE)c & 0xF0) == 0xE0) pb
                    ->ct = 2; /* 3-byte sequence? */
 22496                        ;			if (((BYTE)c & 0xF1) == 0xF0) pb
                    ->ct = 3; /* 4-byte sequence? */
 22497                        ;			return;
 22498                        ;		}
 22499                        ;		else
 22500                        ;		{ /* In the multi-byte sequence */
 22501                        ;			if (((BYTE)c & 0xC0) != 0x80)
 22502                        ;			{ /* Broken sequence? */
 22503                        ;				pb->ct = 0; continue;
 22504                        ;			}
 22505                        ;			pb->bs[++pb->wi] = (BYTE)c; /* S
                    ave the trailing byte */
 22506                        ;			if (--pb->ct == 0) break; /* End
                     of multi-byte sequence? */
 22507                        ;			return;
 22508                        ;		}
 22509                        ;	}
 22510                        ;	tp = (TCHAR*)pb->bs;
 22511                        ;	dc = tchar2uni(&tp); /* UTF-8 ==> UTF-16 */
 22512                        ;	if (dc == 0xFFFFFFFF) return; /* Wrong code? */
 22513                        ;	wc = (WCHAR)dc;
 22514                        ;	hs = (WCHAR)(dc >> 16);
 22515                        ;#elif FF_LFN_UNICODE == 3	/* UTF-32 input 
                    */
 22516                        ;	if (IsSurrogate(c) || c >= 0x110000) return; /* 
                    Discard invalid code */
 22517                        ;	if (c >= 0x10000)
 22518                        ;	{ /* Out of BMP? */
  Fri Jul 16 2021 14:42                                                Page 441


 22519                        ;		hs = (WCHAR)(0xD800 | ((c >> 10) - 0x40)
                    ); /* Make high surrogate */
 22520                        ;		wc = 0xDC00 | (c & 0x3FF); /* Make low s
                    urrogate */
 22521                        ;	}
 22522                        ;	else
 22523                        ;	{
 22524                        ;		hs = 0;
 22525                        ;		wc = (WCHAR)c;
 22526                        ;	}
 22527                        ;#endif
 22528                        ;	/* A code point in UTF-16 is available in hs and
                     wc */
 22529                        ;
 22530                        ;#if FF_STRF_ENCODE == 1		/* Write a code 
                    point in UTF-16LE */
 22531                        ;	if (hs != 0)
 22532                        ;	{ /* Surrogate pair? */
 22533                        ;		st_word(&pb->buf[i], hs);
 22534                        ;		i += 2;
 22535                        ;		nc++;
 22536                        ;	}
 22537                        ;	st_word(&pb->buf[i], wc);
 22538                        ;	i += 2;
 22539                        ;#elif FF_STRF_ENCODE == 2	/* Write a code 
                    point in UTF-16BE */
 22540                        ;	if (hs != 0)
 22541                        ;	{ /* Surrogate pair? */
 22542                        ;		pb->buf[i++] = (BYTE)(hs >> 8);
 22543                        ;		pb->buf[i++] = (BYTE)hs;
 22544                        ;		nc++;
 22545                        ;	}
 22546                        ;	pb->buf[i++] = (BYTE)(wc >> 8);
 22547                        ;	pb->buf[i++] = (BYTE)wc;
 22548                        ;#elif FF_STRF_ENCODE == 3	/* Write a code 
                    point in UTF-8 */
 22549                        ;	if (hs != 0)
 22550                        ;	{ /* 4-byte sequence? */
 22551                        ;		nc += 3;
 22552                        ;		hs = (hs & 0x3FF) + 0x40;
 22553                        ;		pb->buf[i++] = (BYTE)(0xF0 | hs >> 8);
 22554                        ;		pb->buf[i++] = (BYTE)(0x80 | (hs >> 2 & 
                    0x3F));
 22555                        ;		pb->buf[i++] = (BYTE)(0x80 | (hs & 3) <<
                     4 | (wc >> 6 & 0x0F));
 22556                        ;		pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F)
                    );
 22557                        ;	}
 22558                        ;	else
 22559                        ;	{
 22560                        ;		if (wc < 0x80)
 22561                        ;		{ /* Single byte? */
 22562                        ;			pb->buf[i++] = (BYTE)wc;
 22563                        ;		}
 22564                        ;		else
 22565                        ;		{
 22566                        ;			if (wc < 0x800)
 22567                        ;			{ /* 2-byte sequence? */
  Fri Jul 16 2021 14:42                                                Page 442


 22568                        ;				nc += 1;
 22569                        ;				pb->buf[i++] = (BYTE)(0x
                    C0 | wc >> 6);
 22570                        ;			}
 22571                        ;			else
 22572                        ;			{ /* 3-byte sequence */
 22573                        ;				nc += 2;
 22574                        ;				pb->buf[i++] = (BYTE)(0x
                    E0 | wc >> 12);
 22575                        ;				pb->buf[i++] = (BYTE)(0x
                    80 | (wc >> 6 & 0x3F));
 22576                        ;			}
 22577                        ;			pb->buf[i++] = (BYTE)(0x80 | (wc
                     & 0x3F));
 22578                        ;		}
 22579                        ;	}
 22580                        ;#else						
                    /* Write a code point in ANSI/OEM */
 22581                        ;	if (hs != 0) return;
 22582                        ;	wc = ff_uni2oem(wc, CODEPAGE); /* UTF-16 ==> ANS
                    I/OEM */
 22583                        ;	if (wc == 0) return;
 22584                        ;	if (wc >= 0x100)
 22585                        ;	{
 22586                        ;		pb->buf[i++] = (BYTE)(wc >> 8); nc++;
 22587                        ;	}
 22588                        ;	pb->buf[i++] = (BYTE)wc;
 22589                        ;#endif
 22590                        ;
 22591                        ;#else						
                    			/* ANSI/OEM input (without re-encoding) 
                    */
 22592                        ;	pb->buf[i++] = (BYTE) c;
 22593                        ;#endif
 22594                        ;
 22595                        ;	if (i >= (int) (sizeof pb->buf) - 4)
 22596                        ;	{ /* Write buffered characters to the file */
 22597                        ;		f_write(pb->fp, pb->buf, (UINT) i, &n);
 22598                        ;		i = (n == (UINT) i) ? 0 : -1;
 22599                        ;	}
 22600                        ;	pb->idx = i;
 22601                        ;	pb->nchr = nc + 1;
 22602                        ;}
 22603                        ;
 22604                        ;/* Flush remaining characters in the buffer */
 22605                        ;
 22606                        ;static int putc_flush(putbuff* pb)
 22607                        ;{
 22608                        ;	UINT nw;
 22609                        ;
 22610                        ;	if (pb->idx >= 0 /* Flush buffered characters to
                     the file */
 22611                        ;	&& f_write(pb->fp, pb->buf, (UINT) pb->idx, &nw)
                     == FR_OK
 22612                        ;			&& (UINT) pb->idx == nw)
 22613                        ;		return pb->nchr;
 22614                        ;	return EOF;
 22615                        ;}
  Fri Jul 16 2021 14:42                                                Page 443


 22616                        ;
 22617                        ;/* Initialize write buffer */
 22618                        ;
 22619                        ;static void putc_init(putbuff* pb, FIL* fp)
 22620                        ;{
 22621                        ;	mem_set(pb, 0, sizeof(putbuff));
 22622                        ;	pb->fp = fp;
 22623                        ;}
 22624                        ;
 22625                        ;int f_putc(TCHAR c, /* A character to be output *
                    /
 22626                        ;FIL* fp /* Pointer to the file object */
 22627                        ;)
 22628                        ;{
 22629                        ;	putbuff pb;
 22630                        ;
 22631                        ;	putc_init(&pb, fp);
 22632                        ;	putc_bfd(&pb, c); /* Put the character */
 22633                        ;	return putc_flush(&pb);
 22634                        ;}
 22635                        ;
 22636                        ;/*-----------------------------------------------
                    ------------------------*/
 22637                        ;/* Put a String to the File                      
                                            */
 22638                        ;/*-----------------------------------------------
                    ------------------------*/
 22639                        ;
 22640                        ;int f_puts(const TCHAR* str, /* Pointer to the st
                    ring to be output */
 22641                        ;FIL* fp /* Pointer to the file object */
 22642                        ;)
 22643                        ;{
 22644                        ;	putbuff pb;
 22645                        ;
 22646                        ;	putc_init(&pb, fp);
 22647                        ;	while (*str)
 22648                        ;		putc_bfd(&pb, *str++); /* Put the string
                     */
 22649                        ;	return putc_flush(&pb);
 22650                        ;}
 22651                        ;
 22652                        ;/*-----------------------------------------------
                    ------------------------*/
 22653                        ;/* Put a Formatted String to the File            
                                            */
 22654                        ;/*-----------------------------------------------
                    ------------------------*/
 22655                        ;
 22656                        ;int f_printf(FIL* fp, /* Pointer to the file obje
                    ct */
 22657                        ;const TCHAR* fmt, /* Pointer to the format string
                     */
 22658                        ;... /* Optional arguments... */
 22659                        ;)
 22660                        ;{
 22661                        ;	va_list arp;
 22662                        ;	putbuff pb;
  Fri Jul 16 2021 14:42                                                Page 444


 22663                        ;	BYTE f, r;
 22664                        ;	UINT i, j, w;
 22665                        ;	DWORD v;
 22666                        ;	TCHAR c, d, str[32], *p;
 22667                        ;
 22668                        ;	putc_init(&pb, fp);
 22669                        ;
 22670                        ;	va_start(arp, fmt);
 22671                        ;
 22672                        ;	for (;;)
 22673                        ;	{
 22674                        ;		c = *fmt++;
 22675                        ;		if (c == 0)
 22676                        ;			break; /* End of string */
 22677                        ;		if (c != '%')
 22678                        ;		{ /* Non escape character */
 22679                        ;			putc_bfd(&pb, c);
 22680                        ;			continue;
 22681                        ;		}
 22682                        ;		w = f = 0;
 22683                        ;		c = *fmt++;
 22684                        ;		if (c == '0')
 22685                        ;		{ /* Flag: '0' padding */
 22686                        ;			f = 1;
 22687                        ;			c = *fmt++;
 22688                        ;		}
 22689                        ;		else
 22690                        ;		{
 22691                        ;			if (c == '-')
 22692                        ;			{ /* Flag: left justified */
 22693                        ;				f = 2;
 22694                        ;				c = *fmt++;
 22695                        ;			}
 22696                        ;		}
 22697                        ;		if (c == '*')
 22698                        ;		{ /* Minimum width by argument */
 22699                        ;			w = va_arg(arp, int);
 22700                        ;			c = *fmt++;
 22701                        ;		}
 22702                        ;		else
 22703                        ;		{
 22704                        ;			while (IsDigit(c))
 22705                        ;			{ /* Minimum width */
 22706                        ;				w = w * 10 + c - '0';
 22707                        ;				c = *fmt++;
 22708                        ;			}
 22709                        ;		}
 22710                        ;		if (c == 'l' || c == 'L')
 22711                        ;		{ /* Type prefix: Size is long int */
 22712                        ;			f |= 4;
 22713                        ;			c = *fmt++;
 22714                        ;		}
 22715                        ;		if (c == 0)
 22716                        ;			break;
 22717                        ;		d = c;
 22718                        ;		if (IsLower(d))
 22719                        ;			d -= 0x20;
 22720                        ;		switch (d)
  Fri Jul 16 2021 14:42                                                Page 445


 22721                        ;		{ /* Atgument type is... */
 22722                        ;		case 'S': /* String */
 22723                        ;			p = va_arg(arp, TCHAR*);
 22724                        ;			for (j = 0; p[j]; j++)
 22725                        ;				;
 22726                        ;			if (!(f & 2))
 22727                        ;			{ /* Right padded */
 22728                        ;				while (j++ < w)
 22729                        ;					putc_bfd(&pb, ' 
                    ');
 22730                        ;			}
 22731                        ;			while (*p)
 22732                        ;				putc_bfd(&pb, *p++); /* 
                    String body */
 22733                        ;			while (j++ < w)
 22734                        ;				putc_bfd(&pb, ' '); /* L
                    eft padded */
 22735                        ;			continue;
 22736                        ;
 22737                        ;		case 'C': /* Character */
 22738                        ;			putc_bfd(&pb, (TCHAR) va_arg(arp
                    , int));
 22739                        ;			continue;
 22740                        ;
 22741                        ;		case 'B': /* Unsigned binary */
 22742                        ;			r = 2;
 22743                        ;			break;
 22744                        ;
 22745                        ;		case 'O': /* Unsigned octal */
 22746                        ;			r = 8;
 22747                        ;			break;
 22748                        ;
 22749                        ;		case 'D': /* Signed decimal */
 22750                        ;		case 'U': /* Unsigned decimal */
 22751                        ;			r = 10;
 22752                        ;			break;
 22753                        ;
 22754                        ;		case 'X': /* Unsigned hexdecimal */
 22755                        ;			r = 16;
 22756                        ;			break;
 22757                        ;
 22758                        ;		default: /* Unknown type (pass-through) 
                    */
 22759                        ;			putc_bfd(&pb, c);
 22760                        ;			continue;
 22761                        ;		}
 22762                        ;
 22763                        ;		/* Get an argument and put it in numeral
                     */
 22764                        ;		v = (f & 4) ?
 22765                        ;				(DWORD) va_arg(arp, long
                    ) :
 22766                        ;				((d == 'D') ?
 22767                        ;						(DWORD) 
                    (long) va_arg(arp, int) :
 22768                        ;						(DWORD) 
                    va_arg(arp, unsigned int));
 22769                        ;		if (d == 'D' && (v & 0x80000000))
  Fri Jul 16 2021 14:42                                                Page 446


 22770                        ;		{
 22771                        ;			v = 0 - v;
 22772                        ;			f |= 8;
 22773                        ;		}
 22774                        ;		i = 0;
 22775                        ;		do
 22776                        ;		{
 22777                        ;			d = (TCHAR) (v % r);
 22778                        ;			v /= r;
 22779                        ;			if (d > 9)
 22780                        ;				d += (c == 'x') ? 0x27 :
                     0x07;
 22781                        ;			str[i++] = d + '0';
 22782                        ;		} while (v && i < sizeof str / sizeof *s
                    tr);
 22783                        ;		if (f & 8)
 22784                        ;			str[i++] = '-';
 22785                        ;		j = i;
 22786                        ;		d = (f & 1) ? '0' : ' ';
 22787                        ;		if (!(f & 2))
 22788                        ;		{
 22789                        ;			while (j++ < w)
 22790                        ;				putc_bfd(&pb, d); /* Rig
                    ht pad */
 22791                        ;		}
 22792                        ;		do
 22793                        ;		{
 22794                        ;			putc_bfd(&pb, str[--i]); /* Numb
                    er body */
 22795                        ;		} while (i);
 22796                        ;		while (j++ < w)
 22797                        ;			putc_bfd(&pb, d); /* Left pad */
 22798                        ;	}
 22799                        ;
 22800                        ;	va_end(arp);
 22801                        ;
 22802                        ;	return putc_flush(&pb);
 22803                        ;}
 22804                        ;
 22805                        ;#endif /* !FF_FS_READONLY */
 22806                        ;#endif /* FF_USE_STRFUNC */
 22807                        ;
 22808                        ;#if FF_CODE_PAGE == 0
 22809                        ;/*-----------------------------------------------
                    ------------------------*/
 22810                        ;/* Set Active Codepage for the Path Name         
                                            */
 22811                        ;/*-----------------------------------------------
                    ------------------------*/
 22812                        ;
 22813                        ;FRESULT f_setcp (
 22814                        ;		WORD cp /* Value to be set as active cod
                    e page */
 22815                        ;)
 22816                        ;{
 22817                        ;	static const WORD validcp[] =
 22818                        ;	{	437, 720, 737, 771, 775, 850, 852, 857, 
                    860, 861, 862, 863, 864, 865, 866, 869, 932, 936, 949, 950, 
  Fri Jul 16 2021 14:42                                                Page 447


                    0};
 22819                        ;	static const BYTE* const tables[] =
 22820                        ;	{	Ct437, Ct720, Ct737, Ct771, Ct775, Ct850
                    , Ct852, Ct857, Ct860, Ct861, Ct862, Ct863, Ct864, Ct865, Ct
                    866, Ct869, Dc932, Dc936, Dc949, Dc950, 0};
 22821                        ;	UINT i;
 22822                        ;
 22823                        ;	for (i = 0; validcp[i] != 0 && validcp[i] != cp;
                     i++); /* Find the code page */
 22824                        ;	if (validcp[i] != cp) return FR_INVALID_PARAMETE
                    R; /* Not found? */
 22825                        ;
 22826                        ;	CodePage = cp;
 22827                        ;	if (cp >= 900)
 22828                        ;	{ /* DBCS */
 22829                        ;		ExCvt = 0;
 22830                        ;		DbcTbl = tables[i];
 22831                        ;	}
 22832                        ;	else
 22833                        ;	{ /* SBCS */
 22834                        ;		ExCvt = tables[i];
 22835                        ;		DbcTbl = 0;
 22836                        ;	}
 22837                        ;	return FR_OK;
 22838                        ;}
 22839                        ;#endif	/* FF_CODE_PAGE == 0 */
 22840                        ;
 22841                        ;#if FF_USE_LFN >= 1				
                    		/* Code conversion (defined in unicode.c) */
 22842                        ;WCHAR ff_oem2uni (WCHAR oem, WORD cp)
 22843                        ;{
 22844                        ;	return oem;
 22845                        ;}
 22846                        ;
 22847                        ;WCHAR ff_uni2oem (DWORD uni, WORD cp)
 22848                        ;{
 22849                        ;	return uni;
 22850                        ;}
 22851                        ;
 22852                        ;DWORD ff_wtoupper (DWORD uni)
 22853                        ;{
 22854                        ;	return uni;
 22855                        ;}
 22856                        ;#endif
 22857                        ;
 22858                        ;#if FF_USE_LFN == 3				
                    		/* Dynamic memory allocation */
 22859                        ;void* ff_memalloc (UINT msize)
 22860                        ;{
 22861                        ;	return malloc(msize);
 22862                        ;	//return NULL;
 22863                        ;}
 22864                        ;
 22865                        ;void ff_memfree (void* mblock)
 22866                        ;{
 22867                        ;	free(mblock);
 22868                        ;}
 22869                        ;
  Fri Jul 16 2021 14:42                                                Page 448


 22870                        ;#endif
 22871                        ;
 22872                        ;
 22873                        	.line	7799
 22874                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\boot\src\ff.C",5785
 22875                        	xref	~~disk_ioctl
 22876                        	xref	~~disk_write
 22877                        	xref	~~disk_read
 22878                        	xref	~~disk_status
 22879                        	xref	~~disk_initialize
 22880                        	udata
 22881                        ~~Fsid
 22882 00:0000:              	ds	2
 22883 00:0002:              	ends
 22884                        	udata
 22885                        ~~FatFs
 22886 00:0002:              	ds	32
 22887 00:0022:              	ends
 22888                        	.sym	~~validate,~~validate,69,3,0
 22889                        	.sym	~~mount_volume,~~mount_volume,69,3,0
 22890                        	.sym	~~find_volume,~~find_volume,80,3,0
 22891                        	.sym	~~check_fs,~~check_fs,80,3,0
 22892                        	.sym	~~get_ldnumber,~~get_ldnumber,69,3,0
 22893                        	.sym	~~follow_path,~~follow_path,69,3,0
 22894                        	.sym	~~create_name,~~create_name,69,3,0
 22895                        	.sym	~~pattern_matching,~~pattern_matching,69
                    ,3,0
 22896                        	.sym	~~get_achar,~~get_achar,82,3,0
 22897                        	.sym	~~get_fileinfo,~~get_fileinfo,65,3,0
 22898                        	.sym	~~dir_remove,~~dir_remove,69,3,0
 22899                        	.sym	~~dir_register,~~dir_register,69,3,0
 22900                        	.sym	~~dir_find,~~dir_find,69,3,0
 22901                        	.sym	~~dir_read,~~dir_read,69,3,0
 22902                        	.sym	~~st_clust,~~st_clust,65,3,0
 22903                        	.sym	~~ld_clust,~~ld_clust,82,3,0
 22904                        	.sym	~~dir_alloc,~~dir_alloc,69,3,0
 22905                        	.sym	~~dir_next,~~dir_next,69,3,0
 22906                        	.sym	~~dir_sdi,~~dir_sdi,69,3,0
 22907                        	.sym	~~dir_clear,~~dir_clear,69,3,0
 22908                        	.sym	~~create_chain,~~create_chain,82,3,0
 22909                        	.sym	~~remove_chain,~~remove_chain,69,3,0
 22910                        	.sym	~~put_fat,~~put_fat,69,3,0
 22911                        	.sym	~~get_fat,~~get_fat,82,3,0
 22912                        	.sym	~~clst2sect,~~clst2sect,82,3,0
 22913                        	.sym	~~sync_fs,~~sync_fs,69,3,0
 22914                        	.sym	~~move_window,~~move_window,69,3,0
 22915                        	.sym	~~sync_window,~~sync_window,69,3,0
 22916                        	.sym	~~dbc_2nd,~~dbc_2nd,69,3,0
 22917                        	.sym	~~dbc_1st,~~dbc_1st,69,3,0
 22918                        	.sym	~~chk_chr,~~chk_chr,69,3,0
 22919                        	.sym	~~mem_cmp,~~mem_cmp,69,3,0
 22920                        	.sym	~~mem_set,~~mem_set,65,3,0
 22921                        	.sym	~~mem_cpy,~~mem_cpy,65,3,0
 22922                        	.sym	~~st_dword,~~st_dword,65,3,0
 22923                        	.sym	~~st_word,~~st_word,65,3,0
 22924                        	.sym	~~ld_dword,~~ld_dword,82,3,0
 22925                        	.sym	~~ld_word,~~ld_word,69,3,0
  Fri Jul 16 2021 14:42                                                Page 449


 22926                        	.sym	~~ExCvt,~~ExCvt,110,3,0,128
 22927                        	.sym	~~VolumeStr,~~VolumeStr,1134,3,32,8
 22928                        	.sym	~~Fsid,~~Fsid,5,3,16
 22929                        	.sym	~~FatFs,~~FatFs,1130,3,32,49,8
 22930                        	.sym	ldiv_t,0,10,14,64,57
 22931                        	.sym	div_t,0,10,14,32,56
 22932                        	.sym	wctype_t,0,16,14,16
 22933                        	.sym	wint_t,0,16,14,16
 22934                        	.sym	wchar_t,0,14,14,8
 22935                        	.sym	ptrdiff_t,0,7,14,32
 22936                        	.sym	size_t,0,16,14,16
 22937                        	.sym	va_list,0,142,14,32
 22938                        	.sym	~~disk_ioctl,~~disk_ioctl,69,18,0
 22939                        	.sym	~~disk_write,~~disk_write,69,18,0
 22940                        	.sym	~~disk_read,~~disk_read,69,18,0
 22941                        	.sym	~~disk_status,~~disk_status,78,18,0
 22942                        	.sym	~~disk_initialize,~~disk_initialize,78,1
                    8,0
 22943                        	.sym	DRESULT,0,5,14,16
 22944                        	.sym	DSTATUS,0,14,14,8
 22945                        	.sym	~~f_mount,~~f_mount,69,2,0
 22946                        	.sym	~~f_getfree,~~f_getfree,69,2,0
 22947                        	.sym	~~f_stat,~~f_stat,69,2,0
 22948                        	.sym	~~f_rename,~~f_rename,69,2,0
 22949                        	.sym	~~f_unlink,~~f_unlink,69,2,0
 22950                        	.sym	~~f_mkdir,~~f_mkdir,69,2,0
 22951                        	.sym	~~f_findnext,~~f_findnext,69,2,0
 22952                        	.sym	~~f_findfirst,~~f_findfirst,69,2,0
 22953                        	.sym	~~f_readdir,~~f_readdir,69,2,0
 22954                        	.sym	~~f_closedir,~~f_closedir,69,2,0
 22955                        	.sym	~~f_opendir,~~f_opendir,69,2,0
 22956                        	.sym	~~f_sync,~~f_sync,69,2,0
 22957                        	.sym	~~f_truncate,~~f_truncate,69,2,0
 22958                        	.sym	~~f_lseek,~~f_lseek,69,2,0
 22959                        	.sym	~~f_write,~~f_write,69,2,0
 22960                        	.sym	~~f_read,~~f_read,69,2,0
 22961                        	.sym	~~f_close,~~f_close,69,2,0
 22962                        	.sym	~~f_open,~~f_open,69,2,0
 22963                        	.sym	PPARTITIONTABLE,0,138,14,32,55
 22964                        	.sym	PARTITIONTABLE,0,10,14,128,55
 22965                        	.sym	FRESULT,0,5,14,16
 22966                        	.sym	MKFS_PARM,0,10,14,80,54
 22967                        	.sym	FILINFO,0,10,14,176,53
 22968                        	.sym	DIR,0,10,14,384,52
 22969                        	.sym	FIL,0,10,14,4400,51
 22970                        	.sym	FFOBJID,0,10,14,128,50
 22971                        	.sym	FATFS,0,10,14,4472,49
 22972                        	.sym	LBA_t,0,18,14,32
 22973                        	.sym	FSIZE_t,0,18,14,32
 22974                        	.sym	TCHAR,0,14,14,8
 22975                        	.sym	PFXRFHEADER_STRING_ENTRY,0,138,14,32,48
 22976                        	.sym	FXRFHEADER_STRING_ENTRY,0,10,14,40,48
 22977                        	.sym	PFXRFHEADER_STRING,0,138,14,32,47
 22978                        	.sym	FXRFHEADER_STRING,0,10,14,32,47
 22979                        	.sym	PFXRFHEADER_FONT,0,138,14,32,46
 22980                        	.sym	FXRFHEADER_FONT,0,10,14,144,46
 22981                        	.sym	PFXRFHEADER,0,138,14,32,45
 22982                        	.sym	FXRFHEADER,0,10,14,72,45
  Fri Jul 16 2021 14:42                                                Page 450


 22983                        	.sym	PFXCOMBUFFER,0,138,14,32,44
 22984                        	.sym	FXCOMBUFFER,0,10,14,2080,44
 22985                        	.sym	PSUBMENULIST,0,138,14,32,43
 22986                        	.sym	SUBMENULIST,0,10,14,40,43
 22987                        	.sym	HSUBMENU,0,7,14,32
 22988                        	.sym	PSUBMENU,0,138,14,32,42
 22989                        	.sym	SUBMENU,0,10,14,64,42
 22990                        	.sym	MenuAction,0,641,14,32
 22991                        	.sym	PMENUANCHOR,0,138,14,32,41
 22992                        	.sym	MENUANCHOR,0,10,14,272,41
 22993                        	.sym	PMSGBOX,0,138,14,32,40
 22994                        	.sym	MSGBOX,0,10,14,144,40
 22995                        	.sym	PTEXTBOX,0,138,14,32,39
 22996                        	.sym	TEXTBOX,0,10,14,144,39
 22997                        	.sym	PLISTBOX,0,138,14,32,38
 22998                        	.sym	LISTBOX,0,10,14,240,38
 22999                        	.sym	PSCROLLBAR,0,138,14,32,37
 23000                        	.sym	SCROLLBAR,0,10,14,240,37
 23001                        	.sym	PBUTTON,0,138,14,32,36
 23002                        	.sym	BUTTON,0,10,14,96,36
 23003                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,35
 23004                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,35
 23005                        	.sym	PMENUTAG,0,138,14,32,34
 23006                        	.sym	MENUTAG,0,10,14,160,34
 23007                        	.sym	PMENU,0,138,14,32,33
 23008                        	.sym	MENU,0,10,14,280,33
 23009                        	.sym	HMENURESOURCE,0,129,14,32
 23010                        	.sym	FONTMETRIC,0,10,14,32,32
 23011                        	.sym	TITLE,0,142,14,32
 23012                        	.sym	PHANDLE,0,1153,14,32
 23013                        	.sym	HANDLE,0,129,14,32
 23014                        	.sym	PWINDOWEX,0,138,14,32,31
 23015                        	.sym	WINDOWEX,0,10,14,3880,31
 23016                        	.sym	PWINDOW,0,138,14,32,30
 23017                        	.sym	WINDOW,0,10,14,3904,30
 23018                        	.sym	PDRAGDATA,0,138,14,32,29
 23019                        	.sym	DRAGDATA,0,10,14,216,29
 23020                        	.sym	PNCCLICKABLE,0,138,14,32,28
 23021                        	.sym	NCCLICKABLE,0,10,14,136,28
 23022                        	.sym	HCLICKABLE,0,7,14,32
 23023                        	.sym	PCLICKABLE,0,138,14,32,27
 23024                        	.sym	CLICKABLE,0,10,14,152,27
 23025                        	.sym	PWNDCLASS,0,138,14,32,26
 23026                        	.sym	WNDCLASS,0,10,14,272,26
 23027                        	.sym	HBRUSH,0,129,14,32
 23028                        	.sym	HCURSOR,0,129,14,32
 23029                        	.sym	HICON,0,129,14,32
 23030                        	.sym	HINSTANCE,0,129,14,32
 23031                        	.sym	FXWndProc,0,654,14,32
 23032                        	.sym	PDRECT,0,138,14,32,25
 23033                        	.sym	DRECT,0,10,14,112,25
 23034                        	.sym	PRECTP,0,138,14,32,24
 23035                        	.sym	RECTP,0,10,14,96,24
 23036                        	.sym	PRECT,0,138,14,32,23
 23037                        	.sym	RECT,0,10,14,112,23
 23038                        	.sym	PPOINT,0,138,14,32,22
 23039                        	.sym	POINT,0,10,14,32,22
 23040                        	.sym	PFXPROPERTY,0,138,14,32,20
  Fri Jul 16 2021 14:42                                                Page 451


 23041                        	.sym	FXPROPERTY,0,10,14,384,20
 23042                        	.sym	PKEYSTATE,0,138,14,32,19
 23043                        	.sym	KEYSTATE,0,10,14,112,19
 23044                        	.sym	SCANCODE,0,14,14,8
 23045                        	.sym	KEYCODE,0,16,14,16
 23046                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,18
 23047                        	.sym	FXPROCESSMESSAGE,0,10,14,112,18
 23048                        	.sym	PFXPROCESS,0,138,14,32,17
 23049                        	.sym	FXPROCESS,0,10,14,800,17
 23050                        	.sym	PDESKTOP_CONTROL,0,138,14,32,16
 23051                        	.sym	DESKTOP_CONTROL,0,10,14,392,16
 23052                        	.sym	PCONSOLE_CONTROL,0,138,14,32,15
 23053                        	.sym	CONSOLE_CONTROL,0,10,14,448,15
 23054                        	.sym	FXProcessProc,0,641,14,32
 23055                        	.sym	PFXCMDMESSAGE,0,138,14,32,14
 23056                        	.sym	FXCMDMESSAGE,0,10,14,304,14
 23057                        	.sym	PFXOSMESSAGE,0,138,14,32,13
 23058                        	.sym	FXOSMESSAGE,0,10,14,304,13
 23059                        	.sym	PINT_REGS,0,138,14,32,12
 23060                        	.sym	INT_REGS,0,10,14,104,12
 23061                        	.sym	TASK_STACK,0,10,14,32,11
 23062                        	.sym	TASK,0,10,14,48,10
 23063                        	.sym	PIRQDATA,0,138,14,32,9
 23064                        	.sym	IRQDATA,0,10,14,48,9
 23065                        	.sym	HMENU,0,129,14,32
 23066                        	.sym	HWND,0,129,14,32
 23067                        	.sym	MSGDATA,0,14,14,8
 23068                        	.sym	MSGDEST,0,18,14,32
 23069                        	.sym	MSGSRC,0,18,14,32
 23070                        	.sym	MSGTYPE,0,16,14,16
 23071                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,3
 23072                        	.sym	PROCESS_TLS_LIST,0,138,14,32,3
 23073                        	.sym	SEMAPHORE_LIST,0,138,14,32,3
 23074                        	.sym	FILE_BLOCK_LIST,0,138,14,32,3
 23075                        	.sym	FILE_PATH_LIST,0,138,14,32,3
 23076                        	.sym	PROCEDURE_LIST,0,138,14,32,3
 23077                        	.sym	FILE_HANDLE,0,138,14,32,8
 23078                        	.sym	FILE_BLOCK,0,10,14,552,8
 23079                        	.sym	SEMAPHORE,0,10,14,16,7
 23080                        	.sym	PPROCESS_SIGNAL,0,138,14,32,6
 23081                        	.sym	PROCESS_SIGNAL,0,10,14,16,6
 23082                        	.sym	KRESULT,0,18,14,32
 23083                        	.sym	PKERNEL_ERROR,0,138,14,32,5
 23084                        	.sym	KERNEL_ERROR,0,10,14,32,5
 23085                        	.sym	PROCESS_STATUS,0,16,14,16
 23086                        	.sym	FILE_PATH_NAME,0,142,14,32
 23087                        	.sym	PROCESS_RESOURCE,0,129,14,32
 23088                        	.sym	PROCESS_TLS,0,129,14,32
 23089                        	.sym	PROCESS_CTX,0,129,14,32
 23090                        	.sym	USERID,0,16,14,16
 23091                        	.sym	PROCESS_ID,0,18,14,32
 23092                        	.sym	PROCESS_BANK,0,14,14,8
 23093                        	.sym	PFXQUEUE,0,138,14,32,4
 23094                        	.sym	FXQUEUE,0,10,14,80,4
 23095                        	.sym	PFXNODELIST,0,138,14,32,3
 23096                        	.sym	FXNODELIST,0,10,14,96,3
 23097                        	.sym	NodeListDeallocator,0,641,14,32
 23098                        	.sym	PFXNODE,0,138,14,32,2
  Fri Jul 16 2021 14:42                                                Page 452


 23099                        	.sym	FXNODE,0,10,14,384,2
 23100                        	.sym	PBYTEBITS,0,138,14,32,1
 23101                        	.sym	BYTEBITS,0,10,14,8,1
 23102                        	.sym	HRESULT,0,18,14,32
 23103                        	.sym	LPWCHAR,0,144,14,32
 23104                        	.sym	WCHAR,0,16,14,16
 23105                        	.sym	HSTRINGTABLE,0,129,14,32
 23106                        	.sym	HCOLOR,0,129,14,32
 23107                        	.sym	HFONT,0,129,14,32
 23108                        	.sym	HDC,0,129,14,32
 23109                        	.sym	HPOINTER,0,129,14,32
 23110                        	.sym	uint32_t,0,18,14,32
 23111                        	.sym	uint8_t,0,14,14,8
 23112                        	.sym	LPBOOL,0,142,14,32
 23113                        	.sym	BOOL,0,14,14,8
 23114                        	.sym	DWORD,0,18,14,32
 23115                        	.sym	ULONG,0,18,14,32
 23116                        	.sym	LPLONG,0,135,14,32
 23117                        	.sym	LONG,0,7,14,32
 23118                        	.sym	PUINT,0,144,14,32
 23119                        	.sym	USHORT,0,16,14,16
 23120                        	.sym	UINT,0,16,14,16
 23121                        	.sym	INT,0,5,14,16
 23122                        	.sym	WORD,0,5,14,16
 23123                        	.sym	PBYTE,0,142,14,32
 23124                        	.sym	BYTE,0,14,14,8
 23125                        	.sym	IOPORT,0,142,14,32
 23126                        	.sym	PUCHAR,0,142,14,32
 23127                        	.sym	UCHAR,0,14,14,8
 23128                        	.sym	LPWCSTR,0,142,14,32
 23129                        	.sym	LPCSTR,0,142,14,32
 23130                        	.sym	LPSTR,0,142,14,32
 23131                        	.sym	LPCHAR,0,142,14,32
 23132                        	.sym	CHAR,0,14,14,8
 23133                        	.sym	LPVOID,0,129,14,32
 23134                        	.sym	VOID,0,1,14,32
 23135                        	end


      Lines assembled: 23135
      Errors: 0
