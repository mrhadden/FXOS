  Mon Aug  9 2021 16:52                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.c",0
     7                        ;
     8                        ;#include "fxkernel.h"
     9                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",0
    10                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
    11                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
    12                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
    13                        	.line	88
    14                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
    15                        	.stag	fake1_,32,1
    16                        	.member	quot,0,5,8,16
    17                        	.member	rem,16,5,8,16
    18                        	.eos
    19                        	.stag	fake2_,64,2
    20                        	.member	quot,0,7,8,32
    21                        	.member	rem,32,7,8,32
    22                        	.eos
    23                        	.stag	int_sqrt,32,3
    24                        	.member	sqrt,0,16,8,16
    25                        	.member	frac,16,16,8,16
    26                        	.eos
    27                        	.line	205
    28                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",4
    29                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    30                        	.line	134
    31                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",5
    32                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
    33                        	.line	103
    34                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",6
    35                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
    36                        	.stag	_fx_bytebits,8,4
    37                        	.member	b7,0,14,17,1
    38                        	.member	b6,1,14,17,1
    39                        	.member	b5,2,14,17,1
    40                        	.member	b4,3,14,17,1
  Mon Aug  9 2021 16:52                                                Page 2


    41                        	.member	b3,4,14,17,1
    42                        	.member	b2,5,14,17,1
    43                        	.member	b1,6,14,17,1
    44                        	.member	b0,7,14,17,1
    45                        	.eos
    46                        	.stag	_fx_node,384,5
    47                        	.member	type,0,14,8,8
    48                        	.member	Reserved0,8,14,8,8
    49                        	.member	data,16,129,8,32
    50                        	.member	last,48,138,8,32,5
    51                        	.member	next,80,138,8,32,5
    52                        	.member	name,112,110,8,0,32
    53                        	.member	Reserved1,368,16,8,16
    54                        	.eos
    55                        	.stag	_fx_nodelist,96,6
    56                        	.member	listhead,0,138,8,32,5
    57                        	.member	listData,32,129,8,32
    58                        	.member	deallocator,64,641,8,32
    59                        	.eos
    60                        	.stag	_fx_queue,80,7
    61                        	.member	count,0,5,8,16
    62                        	.member	front,16,138,8,32,5
    63                        	.member	rear,48,138,8,32,5
    64                        	.eos
    65                        	.stag	fake8_,32,8
    66                        	.member	subsystem,0,14,8,8
    67                        	.member	level,8,14,8,8
    68                        	.member	error,16,16,8,16
    69                        	.eos
    70                        	.stag	_fx_process_signal,16,9
    71                        	.member	cbSize,0,16,8,16
    72                        	.eos
    73                        	.stag	_fx_semaphore,16,10
    74                        	.member	reserved,0,5,8,16
    75                        	.eos
    76                        	.stag	_fx_fileBlock,552,11
    77                        	.member	openCount,0,16,8,16
    78                        	.member	lockCount,16,16,8,16
    79                        	.member	dirty,32,14,8,8
    80                        	.member	fileBuffer,40,110,8,0,64
    81                        	.eos
    82                        	.stag	_fx_irq_data,48,12
    83                        	.member	line,0,5,8,16
    84                        	.member	keycode,16,142,8,32
    85                        	.eos
    86                        	.stag	_task,48,13
    87                        	.member	SPL,0,14,8,8
    88                        	.member	SPH,8,14,8,8
    89                        	.member	pstack,16,142,8,32
    90                        	.eos
    91                        	.stag	_task_stack,32,14
    92                        	.member	SS,0,142,8,32
    93                        	.eos
    94                        	.stag	int_regs,104,15
    95                        	.member	PB,0,14,8,8
    96                        	.member	PH,8,14,8,8
    97                        	.member	PL,16,14,8,8
    98                        	.member	PP,24,14,8,8
  Mon Aug  9 2021 16:52                                                Page 3


    99                        	.member	DB,32,14,8,8
   100                        	.member	DH,40,14,8,8
   101                        	.member	DL,48,14,8,8
   102                        	.member	AH,56,14,8,8
   103                        	.member	AL,64,14,8,8
   104                        	.member	XH,72,14,8,8
   105                        	.member	XL,80,14,8,8
   106                        	.member	YH,88,14,8,8
   107                        	.member	YL,96,14,8,8
   108                        	.eos
   109                        	.stag	_fx_eventMessage,312,16
   110                        	.member	src,0,18,8,32
   111                        	.member	dest,32,18,8,32
   112                        	.member	type,64,16,8,16
   113                        	.member	hwnd,80,129,8,32
   114                        	.member	pheap,112,129,8,32
   115                        	.member	msgTime,144,18,8,32
   116                        	.member	data,176,110,8,0,16
   117                        	.member	attr,304,14,8,8
   118                        	.eos
   119                        	.stag	_fx_cmdMessage,312,17
   120                        	.member	src,0,18,8,32
   121                        	.member	dest,32,18,8,32
   122                        	.member	type,64,16,8,16
   123                        	.member	hwnd,80,129,8,32
   124                        	.member	pheap,112,129,8,32
   125                        	.member	msgTime,144,18,8,32
   126                        	.member	cmdCId,176,16,8,16
   127                        	.member	cmdMId,192,16,8,16
   128                        	.member	parameter1,208,18,8,32
   129                        	.member	parameter2,240,18,8,32
   130                        	.member	parameter3,272,18,8,32
   131                        	.member	attr,304,14,8,8
   132                        	.eos
   133                        	.stag	_fx_console_ctl,448,18
   134                        	.member	maxCols,0,5,8,16
   135                        	.member	maxRows,16,5,8,16
   136                        	.member	curX,32,5,8,16
   137                        	.member	curY,48,5,8,16
   138                        	.member	fgColor,64,5,8,16
   139                        	.member	bgColor,80,5,8,16
   140                        	.member	mode,96,14,8,8
   141                        	.member	kbBuffer,104,101,8,0,16
   142                        	.member	screenBuffer,360,142,8,32
   143                        	.member	desktopMode,392,14,8,8
   144                        	.member	lastMouseButton,400,5,8,16
   145                        	.member	lastMouseX,416,5,8,16
   146                        	.member	lastMouseY,432,5,8,16
   147                        	.eos
   148                        	.stag	_fx_desktop_ctl,392,19
   149                        	.member	desktopMode,0,14,8,8
   150                        	.member	cursorCtl,8,5,8,16
   151                        	.member	cursorState,24,5,8,16
   152                        	.member	backgroundColor,40,5,8,16
   153                        	.member	foregroundColor,56,5,8,16
   154                        	.member	menuMode,72,5,8,16
   155                        	.member	lastMouseButton,88,5,8,16
   156                        	.member	lastMouseX,104,5,8,16
  Mon Aug  9 2021 16:52                                                Page 4


   157                        	.member	lastMouseY,120,5,8,16
   158                        	.member	currentDiskName,136,142,8,32
   159                        	.member	diskNodes,168,129,8,32
   160                        	.member	titleNodes,200,129,8,32
   161                        	.member	menuNodes,232,129,8,32
   162                        	.member	iconNodes,264,129,8,32
   163                        	.member	windowNodes,296,129,8,32
   164                        	.member	fontNodes,328,129,8,32
   165                        	.member	wndProc,360,138,8,32,6
   166                        	.eos
   167                        	.stag	_fx_process,800,20
   168                        	.member	cbSize,0,5,8,16
   169                        	.member	procId,16,18,8,32
   170                        	.member	parentId,48,18,8,32
   171                        	.member	ctx,80,129,8,32
   172                        	.member	userId,112,16,8,16
   173                        	.member	status,128,16,8,16
   174                        	.member	foregroundActive,144,14,8,8
   175                        	.member	tls,152,1121,8,32,8
   176                        	.member	commandLine,408,142,8,32
   177                        	.member	semaphores,440,138,8,32,6
   178                        	.member	fileHandles,472,138,8,32,6
   179                        	.member	pathList,504,138,8,32,6
   180                        	.member	resources,536,138,8,32,6
   181                        	.member	timerAware,568,14,8,8
   182                        	.member	timerTicks,576,112,8,0,2
   183                        	.member	timerTickCount,608,112,8,0,2
   184                        	.member	kernelError,640,10,8,32,8
   185                        	.member	consoleCtl,672,138,8,32,18
   186                        	.member	desktopCtl,704,138,8,32,19
   187                        	.member	execProc,736,641,8,32
   188                        	.member	startupArgs,768,129,8,32
   189                        	.eos
   190                        	.stag	_fxProcessMessage,112,21
   191                        	.member	src,0,18,8,32
   192                        	.member	dest,32,18,8,32
   193                        	.member	type,64,16,8,16
   194                        	.member	processInfo,80,138,8,32,20
   195                        	.eos
   196                        	.stag	_k_key_state,112,22
   197                        	.member	scanCode,0,14,8,8
   198                        	.member	isShifted,8,14,8,8
   199                        	.member	isAlt,16,14,8,8
   200                        	.member	isExtended,24,14,8,8
   201                        	.member	isCapsLock,32,14,8,8
   202                        	.member	isNumLock,40,14,8,8
   203                        	.member	isScrollLock,48,14,8,8
   204                        	.member	keyChar,56,16,8,16
   205                        	.member	scanTime,72,18,8,32
   206                        	.member	ledStatus,104,14,8,8
   207                        	.eos
   208                        	.stag	_fx_property,384,23
   209                        	.member	name,0,110,8,0,16
   210                        	.member	value,128,110,8,0,32
   211                        	.eos
   212                        	.utag	_24bitPointer,32,24
   213                        	.member	address,0,142,11,32
   214                        	.member	bytes,0,110,11,0,4
  Mon Aug  9 2021 16:52                                                Page 5


   215                        	.eos
   216                        	.stag	_PointStruct,32,25
   217                        	.member	x,0,5,8,16
   218                        	.member	y,16,5,8,16
   219                        	.eos
   220                        	.stag	_RectStruct,112,26
   221                        	.member	x,0,5,8,16
   222                        	.member	y,16,5,8,16
   223                        	.member	z,32,18,8,32
   224                        	.member	width,64,5,8,16
   225                        	.member	height,80,5,8,16
   226                        	.member	attr,96,5,8,16
   227                        	.eos
   228                        	.stag	fake27_,96,27
   229                        	.member	name,0,142,8,32
   230                        	.member	topLeft,32,10,8,32,25
   231                        	.member	bottomRight,64,10,8,32,25
   232                        	.eos
   233                        	.stag	fake28_,112,28
   234                        	.member	x,0,5,8,16
   235                        	.member	y,16,5,8,16
   236                        	.member	z,32,5,8,16
   237                        	.member	width,48,5,8,16
   238                        	.member	height,64,5,8,16
   239                        	.member	data,80,18,8,32
   240                        	.eos
   241                        	.stag	_k_WindowClass,272,29
   242                        	.member	cbSize,0,16,8,16
   243                        	.member	style,16,16,8,16
   244                        	.member	styleEx,32,16,8,16
   245                        	.member	pWndProc,48,654,8,32
   246                        	.member	hInstance,80,129,8,32
   247                        	.member	hIcon,112,129,8,32
   248                        	.member	hCursor,144,129,8,32
   249                        	.member	hbrBackground,176,129,8,32
   250                        	.member	lpszMenuName,208,142,8,32
   251                        	.member	lpszClassName,240,142,8,32
   252                        	.eos
   253                        	.stag	_ClickableRect,152,30
   254                        	.member	area,0,10,8,112,26
   255                        	.member	z,112,18,8,32
   256                        	.member	enabled,144,14,8,8
   257                        	.eos
   258                        	.stag	_NCClickableRect,136,31
   259                        	.member	area,0,10,8,112,26
   260                        	.member	msgType,112,16,8,16
   261                        	.member	enabled,128,14,8,8
   262                        	.eos
   263                        	.stag	_DragData,216,32
   264                        	.member	area,0,10,8,112,26
   265                        	.member	xoffset,112,5,8,16
   266                        	.member	yoffset,128,5,8,16
   267                        	.member	msgType,144,16,8,16
   268                        	.member	ncAction,160,16,8,16
   269                        	.member	isDrag,176,14,8,8
   270                        	.member	isResize,184,14,8,8
   271                        	.member	canDrag,192,14,8,8
   272                        	.member	canDrop,200,14,8,8
  Mon Aug  9 2021 16:52                                                Page 6


   273                        	.member	didDrag,208,14,8,8
   274                        	.eos
   275                        	.stag	_k_WindowStruct,3904,33
   276                        	.member	cbSize,0,16,8,16
   277                        	.member	style,16,18,8,32
   278                        	.member	styleEx,48,18,8,32
   279                        	.member	win_id,80,5,8,16
   280                        	.member	win_x,96,5,8,16
   281                        	.member	win_y,112,5,8,16
   282                        	.member	win_width,128,5,8,16
   283                        	.member	win_height,144,5,8,16
   284                        	.member	win_xoffset,160,5,8,16
   285                        	.member	win_yoffset,176,5,8,16
   286                        	.member	win_cxoffset,192,5,8,16
   287                        	.member	win_cyoffset,208,5,8,16
   288                        	.member	wndRect,224,10,8,112,26
   289                        	.member	clientRect,336,10,8,112,26
   290                        	.member	nonclientGadgets,448,106,8,0,31,16
   291                        	.member	clickable,2624,129,8,32
   292                        	.member	win_title,2656,110,8,0,32
   293                        	.member	Reserved0,2912,16,8,16
   294                        	.member	win_class,2928,110,8,0,16
   295                        	.member	win_class_name,3056,110,8,0,32
   296                        	.member	nBitmapLayer,3312,16,8,16
   297                        	.member	bgRegion,3328,129,8,32
   298                        	.member	procid,3360,18,8,32
   299                        	.member	pWndClass,3392,138,8,32,29
   300                        	.member	pParentWindow,3424,129,8,32
   301                        	.member	hMenu,3456,129,8,32
   302                        	.member	hPointer,3488,129,8,32
   303                        	.member	hBackground,3520,129,8,32
   304                        	.member	pChildWindows,3552,138,8,32,6
   305                        	.member	pChildHitList,3584,138,8,32,6
   306                        	.member	isVisible,3616,14,8,8
   307                        	.member	windowData,3624,129,8,32
   308                        	.member	clientData,3656,1121,8,32,6
   309                        	.member	isClosed,3848,14,8,8
   310                        	.member	isClosing,3856,14,8,8
   311                        	.member	isDesktop,3864,14,8,8
   312                        	.member	clickableNode,3872,138,8,32,5
   313                        	.eos
   314                        	.stag	_k_WindowStructEx,3880,34
   315                        	.member	cbSize,0,16,8,16
   316                        	.member	style,16,18,8,32
   317                        	.member	styleEx,48,18,8,32
   318                        	.member	win_id,80,5,8,16
   319                        	.member	win_x,96,5,8,16
   320                        	.member	win_y,112,5,8,16
   321                        	.member	win_width,128,5,8,16
   322                        	.member	win_height,144,5,8,16
   323                        	.member	win_xoffset,160,5,8,16
   324                        	.member	win_yoffset,176,5,8,16
   325                        	.member	win_cxoffset,192,5,8,16
   326                        	.member	win_cyoffset,208,5,8,16
   327                        	.member	wndRect,224,10,8,112,26
   328                        	.member	clientRect,336,10,8,112,26
   329                        	.member	nonclientGadgets,448,106,8,0,31,16
   330                        	.member	clickable,2624,129,8,32
  Mon Aug  9 2021 16:52                                                Page 7


   331                        	.member	win_title,2656,110,8,0,32
   332                        	.member	Reserved0,2912,16,8,16
   333                        	.member	win_class,2928,110,8,0,16
   334                        	.member	nBitmapLayer,3056,16,8,16
   335                        	.member	procid,3072,18,8,32
   336                        	.member	pWndClass,3104,138,8,32,29
   337                        	.member	pParentWindow,3136,129,8,32
   338                        	.member	hMenu,3168,129,8,32
   339                        	.member	hPointer,3200,129,8,32
   340                        	.member	hBackground,3232,129,8,32
   341                        	.member	pChildWindows,3264,138,8,32,6
   342                        	.member	pChildHitList,3296,138,8,32,6
   343                        	.member	isVisible,3328,14,8,8
   344                        	.member	windowData,3336,129,8,32
   345                        	.member	clientData,3368,1121,8,32,4
   346                        	.member	isClosed,3496,14,8,8
   347                        	.member	hWnd,3504,129,8,32
   348                        	.member	localRect,3536,10,8,112,26
   349                        	.member	globalRect,3648,10,8,112,26
   350                        	.member	clientOffsetRect,3760,10,8,112,26
   351                        	.member	isDesktop,3872,14,8,8
   352                        	.eos
   353                        	.stag	_FontMetric,32,35
   354                        	.member	width,0,5,8,16
   355                        	.member	height,16,5,8,16
   356                        	.eos
   357                        	.stag	_MenuStruct,280,36
   358                        	.member	cx,0,5,8,16
   359                        	.member	cy,16,5,8,16
   360                        	.member	width,32,5,8,16
   361                        	.member	height,48,5,8,16
   362                        	.member	fcolor,64,14,8,8
   363                        	.member	bcolor,72,14,8,8
   364                        	.member	chromeLeft,80,14,8,8
   365                        	.member	chromeRight1,88,14,8,8
   366                        	.member	chromeRight2,96,14,8,8
   367                        	.member	hFont,104,129,8,32
   368                        	.member	itemId,136,16,8,16
   369                        	.member	pCaption,152,142,8,32
   370                        	.member	subMenus,184,138,8,32,6
   371                        	.member	pBackground,216,129,8,32
   372                        	.member	hWndOwner,248,129,8,32
   373                        	.eos
   374                        	.stag	fake37_,160,37
   375                        	.member	menuId,0,16,8,16
   376                        	.member	caption,16,142,8,32
   377                        	.member	rect,48,10,8,112,26
   378                        	.eos
   379                        	.stag	fake38_,5152,38
   380                        	.member	pParent,0,138,8,32,33
   381                        	.member	rect,32,10,8,112,26
   382                        	.member	captions,144,1134,8,32,24
   383                        	.member	chrome,912,110,8,0,24
   384                        	.member	ids,1104,112,8,0,24
   385                        	.member	clickable,1488,106,8,0,30,24
   386                        	.member	selected,5136,16,8,16
   387                        	.eos
   388                        	.stag	_fx_button_t,96,39
  Mon Aug  9 2021 16:52                                                Page 8


   389                        	.member	pCaption,0,142,8,32
   390                        	.member	cCaption,32,16,8,16
   391                        	.member	data,48,129,8,32
   392                        	.member	captionPixelWidth,80,16,8,16
   393                        	.eos
   394                        	.stag	_fx_scrollbar_t,240,40
   395                        	.member	min,0,16,8,16
   396                        	.member	max,16,16,8,16
   397                        	.member	increment,32,16,8,16
   398                        	.member	stopsize,48,16,8,16
   399                        	.member	location,64,5,8,16
   400                        	.member	state,80,5,8,16
   401                        	.member	rectThumb,96,10,8,112,26
   402                        	.member	data,208,129,8,32
   403                        	.eos
   404                        	.stag	_fx_listbox_t,240,41
   405                        	.member	pos,0,5,8,16
   406                        	.member	selected,16,16,8,16
   407                        	.member	offsetX,32,5,8,16
   408                        	.member	offsetY,48,5,8,16
   409                        	.member	inc,64,5,8,16
   410                        	.member	direction,80,5,8,16
   411                        	.member	top,96,5,8,16
   412                        	.member	bottom,112,5,8,16
   413                        	.member	indexTop,128,5,8,16
   414                        	.member	indexBottom,144,5,8,16
   415                        	.member	maxItems,160,16,8,16
   416                        	.member	fontSet,176,142,8,32
   417                        	.member	data,208,129,8,32
   418                        	.eos
   419                        	.stag	_fx_textbox_t,144,42
   420                        	.member	pos,0,5,8,16
   421                        	.member	selected,16,16,8,16
   422                        	.member	offsetX,32,5,8,16
   423                        	.member	offsetY,48,5,8,16
   424                        	.member	isShifted,64,14,8,8
   425                        	.member	cursorState,72,14,8,8
   426                        	.member	fontSet,80,142,8,32
   427                        	.member	data,112,129,8,32
   428                        	.eos
   429                        	.stag	_fx_msgbox_t,144,43
   430                        	.member	pos,0,5,8,16
   431                        	.member	selected,16,16,8,16
   432                        	.member	offsetX,32,5,8,16
   433                        	.member	offsetY,48,5,8,16
   434                        	.member	isShifted,64,14,8,8
   435                        	.member	cursorState,72,14,8,8
   436                        	.member	fontSet,80,142,8,32
   437                        	.member	data,112,129,8,32
   438                        	.eos
   439                        	.stag	_fx_menuAnchor_t,272,44
   440                        	.member	pCaption,0,142,8,32
   441                        	.member	renderLayoutX,32,16,8,16
   442                        	.member	renderLayoutY,48,16,8,16
   443                        	.member	captionPixelWidth,64,16,8,16
   444                        	.member	data,80,129,8,32
   445                        	.member	droppedWindow,112,138,8,32,33
   446                        	.member	bytes,144,110,8,0,16
  Mon Aug  9 2021 16:52                                                Page 9


   447                        	.eos
   448                        	.stag	_SubMenuStruct,64,45
   449                        	.member	caption,0,142,8,32
   450                        	.member	action,32,641,8,32
   451                        	.eos
   452                        	.stag	_SubMenuListStruct,40,46
   453                        	.member	cMenus,0,14,8,8
   454                        	.member	psubmenus,8,9354,8,32,45
   455                        	.eos
   456                        	.stag	_fx_ComBuffer,2080,47
   457                        	.member	cbSize,0,16,8,16
   458                        	.member	cbBuffer,16,16,8,16
   459                        	.member	buffer,32,110,8,0,256
   460                        	.eos
   461                        	.stag	_fx_resource_header,72,48
   462                        	.member	magic,0,110,8,0,4
   463                        	.member	major,32,14,8,8
   464                        	.member	minor,40,14,8,8
   465                        	.member	type,48,14,8,8
   466                        	.member	reserved,56,14,8,8
   467                        	.member	resheaderSize,64,14,8,8
   468                        	.eos
   469                        	.stag	_fx_resource_header_font,144,49
   470                        	.member	title,0,110,8,0,16
   471                        	.member	height,128,14,8,8
   472                        	.member	width,136,14,8,8
   473                        	.eos
   474                        	.stag	_fx_resource_string,32,50
   475                        	.member	locale,0,110,8,0,2
   476                        	.member	entries,16,16,8,16
   477                        	.eos
   478                        	.stag	_fx_resource_string_entry,40,51
   479                        	.member	index,0,16,8,16
   480                        	.member	length,16,16,8,16
   481                        	.member	data,32,14,8,8
   482                        	.eos
   483                        	.line	1064
   484                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",8
   485                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstringtable.h",0
   486                        	.line	90
   487                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",9
   488                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   489                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   490                        	.line	1064
   491                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",5
   492                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",0
   493                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   494                        	.line	1064
   495                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",11
  Mon Aug  9 2021 16:52                                                Page 10


   496                        	.line	72
   497                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",6
   498                        	.line	1960
   499                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",16
   500                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",0
   501                        	.line	490
   502                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",22
   503                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   504                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   505                        	.line	134
   506                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",5
   507                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   508                        	.line	205
   509                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",6
   510                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   511                        	.line	1064
   512                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",7
   513                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   514                        	.line	1960
   515                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",12
   516                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   517                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   518                        	.line	205
   519                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",5
   520                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   521                        	.line	134
   522                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",6
   523                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   524                        	.line	1064
   525                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",7
   526                        	.stag	_fx_string,64,52
   527                        	.member	size,0,16,8,16
   528                        	.member	pos,16,5,8,16
   529                        	.member	buffer,32,142,8,32
   530                        	.eos
   531                        	.line	141
   532                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",17
  Mon Aug  9 2021 16:52                                                Page 11


   533                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   534                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   535                        	.line	30
   536                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",5
   537                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",0
   538                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   539                        	.line	1064
   540                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",5
   541                        	.stag	_fxos_executive_vtable,128,53
   542                        	.member	Init,0,8833,8,32
   543                        	.member	Configure,32,656,8,32
   544                        	.member	Query,64,656,8,32
   545                        	.member	Uninit,96,641,8,32
   546                        	.eos
   547                        	.line	86
   548                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",6
   549                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   550                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   551                        	.line	1064
   552                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",11
   553                        	.line	118
   554                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",7
   555                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   556                        	.line	208
   557                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",8
   558                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",0
   559                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   560                        	.line	30
   561                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",5
   562                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",0
   563                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   564                        	.line	30
   565                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",5
   566                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",0
   567                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_build_parameters.h",0
   568                        	.line	35
   569                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Mon Aug  9 2021 16:52                                                Page 12


                    space\FXOS-Beta\src\umm_malloc_cfg.h",8
   570                        	.stag	UMM_HEAP_INFO_t,256,54
   571                        	.member	totalEntries,0,18,8,32
   572                        	.member	usedEntries,32,18,8,32
   573                        	.member	freeEntries,64,18,8,32
   574                        	.member	totalBlocks,96,18,8,32
   575                        	.member	usedBlocks,128,18,8,32
   576                        	.member	freeBlocks,160,18,8,32
   577                        	.member	maxFreeContiguousBlocks,192,18,8,32
   578                        	.member	blockSize,224,18,8,32
   579                        	.eos
   580                        	.line	199
   581                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",6
   582                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",0
   583                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   584                        	.line	1064
   585                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",11
   586                        	.line	24
   587                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",7
   588                        	.stag	_fx_memory_map,2072,55
   589                        	.member	availableMemory,0,18,8,32
   590                        	.member	valid_segments,32,110,8,0,255
   591                        	.eos
   592                        	.stag	_fx_ipc_port,144,56
   593                        	.member	id,0,18,8,32
   594                        	.member	type,32,14,8,8
   595                        	.member	name,40,138,8,32,52
   596                        	.member	time,72,18,8,32
   597                        	.member	queue,104,138,8,32,7
   598                        	.member	reserved_1,136,14,8,8
   599                        	.eos
   600                        	.stag	_k_mem_alloc_header,80,57
   601                        	.member	user,0,14,8,8
   602                        	.member	attr,8,14,8,8
   603                        	.member	size,16,18,8,32
   604                        	.member	virtual,48,129,8,32
   605                        	.eos
   606                        	.line	129
   607                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",6
   608                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   609                        	.line	568
   610                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",7
   611                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",0
   612                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfont.h",0
   613                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   614                        	.line	1064
   615                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Mon Aug  9 2021 16:52                                                Page 13


                    space\FXOS-Beta\src\fxfont.h",6
   616                        	.line	74
   617                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",5
   618                        	.stag	_click_detected,64,58
   619                        	.member	window,0,138,8,32,33
   620                        	.member	handler,32,641,8,32
   621                        	.eos
   622                        	.stag	_current_palette_map,400,59
   623                        	.member	CUR_DESKTOP,0,5,8,16
   624                        	.member	CUR_BACKGROUND,16,5,8,16
   625                        	.member	CUR_FONT,32,5,8,16
   626                        	.member	CUR_SELECTED_FONT,48,5,8,16
   627                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   628                        	.member	CUR_WINDOWFRAME,80,5,8,16
   629                        	.member	CUR_WINDOWBORDER,96,5,8,16
   630                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   631                        	.member	CUR_MENU,128,5,8,16
   632                        	.member	CUR_GADGET,144,5,8,16
   633                        	.member	CUR_COLOR,160,101,8,0,15
   634                        	.eos
   635                        	.line	359
   636                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",8
   637                        	.stag	_fxos_winman_vtable,160,60
   638                        	.member	Events,0,641,8,32
   639                        	.member	ConfigureWindowManager,32,656,8,32
   640                        	.member	ProcessWindowEvent,64,8833,8,32
   641                        	.member	QueryWindowManager,96,656,8,32
   642                        	.member	DoWndProcs,128,641,8,32
   643                        	.eos
   644                        	.stag	fake61_,64,61
   645                        	.member	type,0,16,8,16
   646                        	.member	size,16,16,8,16
   647                        	.member	desktopAction,32,129,8,32
   648                        	.eos
   649                        	.stag	fake62_,96,62
   650                        	.member	type,0,16,8,16
   651                        	.member	caption,16,138,8,32,52
   652                        	.member	buttonType,48,16,8,16
   653                        	.member	x,64,5,8,16
   654                        	.member	y,80,5,8,16
   655                        	.eos
   656                        	.stag	_childMessage_t,64,63
   657                        	.member	msgType,0,16,8,16
   658                        	.member	msgData,16,129,8,32
   659                        	.member	dataSize,48,16,8,16
   660                        	.eos
   661                        	.line	594
   662                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",9
   663                        	.stag	_fx_main_loopvars,16,64
   664                        	.member	dummy,0,5,8,16
   665                        	.eos
   666                        	.stag	_fxMouseMessageData,64,65
   667                        	.member	button1,0,14,8,8
   668                        	.member	button2,8,14,8,8
   669                        	.member	button3,16,14,8,8
  Mon Aug  9 2021 16:52                                                Page 14


   670                        	.member	button4,24,14,8,8
   671                        	.member	x,32,16,8,16
   672                        	.member	y,48,16,8,16
   673                        	.eos
   674                        	.utag	marshalled_data,32,66
   675                        	.member	byteValue,0,14,11,8
   676                        	.member	verbValue,0,110,11,0,2
   677                        	.member	intValue,0,16,11,16
   678                        	.member	longValue,0,18,11,32
   679                        	.member	pointerValue,0,129,11,32
   680                        	.eos
   681                        	.stag	_fx_eventProcess,64,67
   682                        	.member	process,0,138,8,32,20
   683                        	.member	eventProc,32,641,8,32
   684                        	.eos
   685                        	.stag	_mouse_msg_state,184,68
   686                        	.member	lastEvent,0,18,8,32
   687                        	.member	buttonLeftDown,32,14,8,8
   688                        	.member	lastLeftDown,40,18,8,32
   689                        	.member	buttonRightDown,72,14,8,8
   690                        	.member	lastRightDown,80,18,8,32
   691                        	.member	buttonMiddleDown,112,14,8,8
   692                        	.member	lastMiddleDown,120,18,8,32
   693                        	.member	lastX,152,16,8,16
   694                        	.member	lastY,168,16,8,16
   695                        	.eos
   696                        	.stag	_fxos_eventmanager_vtable,192,69
   697                        	.member	EventQueue,0,138,8,32,7
   698                        	.member	Init,32,8833,8,32
   699                        	.member	Run,64,656,8,32
   700                        	.member	Configure,96,656,8,32
   701                        	.member	Query,128,656,8,32
   702                        	.member	Uninit,160,641,8,32
   703                        	.eos
   704                        	.stag	_k_clipboard_data,168,70
   705                        	.member	type,0,14,8,8
   706                        	.member	readable,8,110,8,0,16
   707                        	.member	data,136,129,8,32
   708                        	.eos
   709                        	.line	568
   710                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",18
   711                        	.stag	_fx_spinner_ctx,48,71
   712                        	.member	index,0,5,8,16
   713                        	.member	spinner,16,142,8,32
   714                        	.eos
   715                        	.stag	_fx_console_ctx,1144,72
   716                        	.member	lineBufferIndex,0,5,8,16
   717                        	.member	lineBuffer,16,110,8,0,128
   718                        	.member	isShifted,1040,14,8,8
   719                        	.member	userData,1048,129,8,32
   720                        	.member	screenBuffer,1080,129,8,32
   721                        	.member	Reserved1,1112,129,8,32
   722                        	.eos
   723                        	.stag	_token,64,73
   724                        	.member	type,0,5,8,16
   725                        	.member	depth,16,16,8,16
   726                        	.member	text,32,142,8,32
  Mon Aug  9 2021 16:52                                                Page 15


   727                        	.eos
   728                        	.stag	_command_args,64,74
   729                        	.member	proc,0,656,8,32
   730                        	.member	tokens,32,138,8,32,5
   731                        	.eos
   732                        	.line	208
   733                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",23
   734                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   735                        	.line	141
   736                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",24
   737                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   738                        	.line	118
   739                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",25
   740                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",0
   741                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ffconf.h",0
   742                        	.line	298
   743                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",29
   744                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   745                        	.line	1064
   746                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",30
   747                        	.stag	fake75_,4504,75
   748                        	.member	fs_type,0,14,8,8
   749                        	.member	pdrv,8,14,8,8
   750                        	.member	n_fats,16,14,8,8
   751                        	.member	wflag,24,14,8,8
   752                        	.member	fsi_flag,32,14,8,8
   753                        	.member	id,40,5,8,16
   754                        	.member	n_rootdir,56,5,8,16
   755                        	.member	csize,72,5,8,16
   756                        	.member	lfnbuf,88,144,8,32
   757                        	.member	last_clst,120,18,8,32
   758                        	.member	free_clst,152,18,8,32
   759                        	.member	n_fatent,184,18,8,32
   760                        	.member	fsize,216,18,8,32
   761                        	.member	volbase,248,18,8,32
   762                        	.member	fatbase,280,18,8,32
   763                        	.member	dirbase,312,18,8,32
   764                        	.member	database,344,18,8,32
   765                        	.member	winsect,376,18,8,32
   766                        	.member	win,408,110,8,0,512
   767                        	.eos
   768                        	.stag	fake76_,128,76
   769                        	.member	fs,0,138,8,32,75
   770                        	.member	id,32,5,8,16
   771                        	.member	attr,48,14,8,8
   772                        	.member	stat,56,14,8,8
   773                        	.member	sclust,64,18,8,32
   774                        	.member	objsize,96,18,8,32
  Mon Aug  9 2021 16:52                                                Page 16


   775                        	.eos
   776                        	.stag	fake77_,4400,77
   777                        	.member	obj,0,10,8,128,76
   778                        	.member	flag,128,14,8,8
   779                        	.member	err,136,14,8,8
   780                        	.member	fptr,144,18,8,32
   781                        	.member	clust,176,18,8,32
   782                        	.member	sect,208,18,8,32
   783                        	.member	dir_sect,240,18,8,32
   784                        	.member	dir_ptr,272,142,8,32
   785                        	.member	buf,304,110,8,0,512
   786                        	.eos
   787                        	.stag	fake78_,416,78
   788                        	.member	obj,0,10,8,128,76
   789                        	.member	dptr,128,18,8,32
   790                        	.member	clust,160,18,8,32
   791                        	.member	sect,192,18,8,32
   792                        	.member	dir,224,142,8,32
   793                        	.member	fn,256,110,8,0,12
   794                        	.member	blk_ofs,352,18,8,32
   795                        	.member	pat,384,142,8,32
   796                        	.eos
   797                        	.stag	fake79_,2224,79
   798                        	.member	fsize,0,18,8,32
   799                        	.member	fdate,32,5,8,16
   800                        	.member	ftime,48,5,8,16
   801                        	.member	fattrib,64,14,8,8
   802                        	.member	altname,72,110,8,0,13
   803                        	.member	fname,176,110,8,0,256
   804                        	.eos
   805                        	.stag	fake80_,80,80
   806                        	.member	fmt,0,14,8,8
   807                        	.member	n_fat,8,14,8,8
   808                        	.member	align,16,16,8,16
   809                        	.member	n_root,32,16,8,16
   810                        	.member	au_size,48,18,8,32
   811                        	.eos
   812                        	.line	429
   813                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",26
   814                        	.line	30
   815                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",5
   816                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   817                        	.line	118
   818                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",6
   819                        	.stag	_fx_api_call_table,8192,81
   820                        	.member	call_table,0,1121,8,32,256
   821                        	.eos
   822                        	.stag	_fx_zero_page_irq_data,32,82
   823                        	.member	data,0,110,8,0,4
   824                        	.eos
   825                        	.stag	_fx_zero_page,720,83
   826                        	.member	fxos_mouse_byte_0,0,14,8,8
   827                        	.member	fxos_mouse_byte_1,8,14,8,8
   828                        	.member	fxos_mouse_byte_2,16,14,8,8
  Mon Aug  9 2021 16:52                                                Page 17


   829                        	.member	fxos_mouse_byte_t,24,14,8,8
   830                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   831                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   832                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   833                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   834                        	.member	fxos_key_byte_0,64,14,8,8
   835                        	.member	fxos_key_byte_1,72,14,8,8
   836                        	.member	fxos_key_byte_2,80,14,8,8
   837                        	.member	fxos_mouse_ctl,88,14,8,8
   838                        	.member	fxos_mouse_index,96,14,8,8
   839                        	.member	fxos_mouse_status,104,14,8,8
   840                        	.member	Endianness,112,16,8,16
   841                        	.member	VersionMajor,128,16,8,16
   842                        	.member	VersionMinor,144,16,8,16
   843                        	.member	VersionRelease,160,16,8,16
   844                        	.member	topMemory,176,18,8,32
   845                        	.member	bottomMemory,208,18,8,32
   846                        	.member	availableMemory,240,18,8,32
   847                        	.member	availableMemoryK,272,18,8,32
   848                        	.member	availableHeapMemory,304,18,8,32
   849                        	.member	availableHeapMemoryK,336,18,8,32
   850                        	.member	fxos_console_row,368,16,8,16
   851                        	.member	fxos_console_col,384,16,8,16
   852                        	.member	executive,400,129,8,32
   853                        	.member	eventmanager,432,129,8,32
   854                        	.member	devicemanager,464,129,8,32
   855                        	.member	windowmanager,496,129,8,32
   856                        	.member	fxos_kernel_api,528,138,8,32,81
   857                        	.member	fxos_dos_api,560,138,8,32,81
   858                        	.member	fxos_gfx_api,592,138,8,32,81
   859                        	.member	fxos_gui_api,624,138,8,32,81
   860                        	.member	fxos_con_api,656,138,8,32,81
   861                        	.member	fxos_reserved_2_api,688,138,8,32,81
   862                        	.eos
   863                        	.stag	_fx_environment,96,84
   864                        	.member	variables,0,142,8,32
   865                        	.member	reserved1,32,5,8,16
   866                        	.member	reserved2,48,5,8,16
   867                        	.member	reserved3,64,5,8,16
   868                        	.member	reserved4,80,5,8,16
   869                        	.eos
   870                        	.stag	_debug_byte_bits,8,85
   871                        	.member	bit7,0,14,17,1
   872                        	.member	bit6,1,14,17,1
   873                        	.member	bit5,2,14,17,1
   874                        	.member	bit4,3,14,17,1
   875                        	.member	bit3,4,14,17,1
   876                        	.member	bit2,5,14,17,1
   877                        	.member	bit1,6,14,17,1
   878                        	.member	bit0,7,14,17,1
   879                        	.eos
   880                        	.stag	_k_segmentheader,160,86
   881                        	.member	version_major,0,14,8,8
   882                        	.member	version_minor,8,14,8,8
   883                        	.member	length,16,5,8,16
   884                        	.member	segment_start_addr,32,7,8,32
   885                        	.member	segment_end_addr,64,7,8,32
   886                        	.member	segment_size,96,7,8,32
  Mon Aug  9 2021 16:52                                                Page 18


   887                        	.member	main_entry_addr,128,7,8,32
   888                        	.eos
   889                        	.stag	_fx_device_driver,776,87
   890                        	.member	name,0,110,8,0,32
   891                        	.member	version,256,110,8,0,16
   892                        	.member	hmajor,384,110,8,0,8
   893                        	.member	hminor,448,110,8,0,8
   894                        	.member	type,512,14,8,8
   895                        	.member	designation,520,110,8,0,6
   896                        	.member	irq_ctl,568,16,8,16
   897                        	.member	f_driver_irq,584,129,8,32
   898                        	.member	driver_context,616,129,8,32
   899                        	.member	f_driver_load,648,129,8,32
   900                        	.member	f_driver_read,680,129,8,32
   901                        	.member	f_driver_write,712,129,8,32
   902                        	.member	f_driver_unload,744,129,8,32
   903                        	.eos
   904                        	.stag	_fx_block_device_driver,808,88
   905                        	.member	name,0,110,8,0,32
   906                        	.member	version,256,110,8,0,16
   907                        	.member	hmajor,384,110,8,0,8
   908                        	.member	hminor,448,110,8,0,8
   909                        	.member	type,512,14,8,8
   910                        	.member	designation,520,110,8,0,6
   911                        	.member	irq_ctl,568,16,8,16
   912                        	.member	f_driver_irq,584,129,8,32
   913                        	.member	driver_context,616,129,8,32
   914                        	.member	f_driver_load,648,129,8,32
   915                        	.member	f_driver_read,680,129,8,32
   916                        	.member	f_driver_write,712,129,8,32
   917                        	.member	f_driver_unload,744,129,8,32
   918                        	.member	f_driver_command,776,129,8,32
   919                        	.eos
   920                        	.stag	_k_irq_chain,128,89
   921                        	.member	handlers,0,5217,8,32,4
   922                        	.eos
   923                        	.line	490
   924                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.c",2
   925                        ;#include <stdarg.h>
   926                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdarg.h",0
   927                        	.line	51
   928                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.c",3
   929                        ;
   930                        ;//void *heap_start=(void FAR *)0x030000,*heap_end
                    =(void FAR *)(0x04FFFF);
   931                        ;
   932                        ;
   933                        ;
   934                        ;static ULONG FXOSVERSION	   = 0x010000;
   935                        	data
   936                        ~~FXOSVERSION:
   937 00:0000: 00 00 01 00  	dl	$10000
   938 00:0004:              	ends
   939                        ;static LPSTR FXOSVERSIONSTRING = "FX/OS Version 1
                    .0.0 Beta";
  Mon Aug  9 2021 16:52                                                Page 19


   940                        	data
   941                        ~~FXOSVERSIONSTRING:
   942 00:0004: xx xx xx xx  	dl	L1+0
   943 00:0008:              	ends
   944                        	data
   945                        L1:
   946 00:0008: 46 58 2F 4F  	db	$46,$58,$2F,$4F,$53,$20,$56,$65,$72,$73,
                    $69,$6F,$6E,$20,$31
       00:000C: 53 20 56 65 
       00:0010: 72 73 69 6F 
       00:0014: 6E 20 31 
   947 00:0017: 2E 30 2E 30  	db	$2E,$30,$2E,$30,$20,$42,$65,$74,$61,$00
       00:001B: 20 42 65 74 
       00:001F: 61 00 
   948 00:0021:              	ends
   949                        ;
   950                        ;static BOOL _k_isOSDebug = FALSE;
   951                        	data
   952                        ~~_k_isOSDebug:
   953 00:0021: 00           	db	$0
   954 00:0022:              	ends
   955                        ;
   956                        ;static char k16buffer[16];
   957                        ;
   958                        ;static KERNELTRAPCALL *KERNEL_FUNCTION_TABLE;
   959                        ;
   960                        ;//static FXKERNEL_API_CALLTABLE fx_kernel_api_tab
                    le;
   961                        ;//static FXKERNEL_API_CALLTABLE fx_dos_api_table;
   962                        ;//static FXKERNEL_API_CALLTABLE fx_gfx_api_table;
   963                        ;//static FXKERNEL_API_CALLTABLE fx_gui_api_table;
   964                        ;//static FXKERNEL_API_CALLTABLE fx_con_api_table;
   965                        ;
   966                        ;IRQCHAIN g_irq_handlers[4][8];
   967                        ;
   968                        ;ULONG _system_timer 	= 0L;
   969                        	data
   970                        	xdef	~~_system_timer
   971                        ~~_system_timer:
   972 00:0022: 00 00 00 00  	dl	$0
   973 00:0026:              	ends
   974                        ;ULONG _k_exec_context 	= 0L;
   975                        	data
   976                        	xdef	~~_k_exec_context
   977                        ~~_k_exec_context:
   978 00:0026: 00 00 00 00  	dl	$0
   979 00:002A:              	ends
   980                        ;ULONG _k_exec_error		= 0L;
   981                        	data
   982                        	xdef	~~_k_exec_error
   983                        ~~_k_exec_error:
   984 00:002A: 00 00 00 00  	dl	$0
   985 00:002E:              	ends
   986                        ;UCHAR _k_exec_message[64];
   987                        ;
   988                        ;
   989                        ;BOOL _k_in_irq_enabled = FALSE;
   990                        	data
  Mon Aug  9 2021 16:52                                                Page 20


   991                        	xdef	~~_k_in_irq_enabled
   992                        ~~_k_in_irq_enabled:
   993 00:002E: 00           	db	$0
   994 00:002F:              	ends
   995                        ;BYTE _k_lock_enabled = FALSE;
   996                        	data
   997                        	xdef	~~_k_lock_enabled
   998                        ~~_k_lock_enabled:
   999 00:002F: 00           	db	$0
  1000 00:0030:              	ends
  1001                        ;INT  _k_lock_depth = 0;
  1002                        	data
  1003                        	xdef	~~_k_lock_depth
  1004                        ~~_k_lock_depth:
  1005 00:0030: 00 00        	dw	$0
  1006 00:0032:              	ends
  1007                        ;//ULONG _k_irq_handler_calls = 0L;
  1008                        ;
  1009                        ;
  1010                        ;VOID k_enable_locking(VOID)
  1011                        ;{
  1012                        	.line	38
  1013                        	.line	39
  1014                        	code
  1015                        	xdef	~~k_enable_locking
  1016                        	func
  1017                        	.function	39
  1018                        ~~k_enable_locking:
  1019                        	longa	on
  1020                        	longi	on
  1021 00:0000: 3B           	tsc
  1022 00:0001: 38           	sec
  1023 00:0002: E9 00 00     	sbc	#L3
  1024 00:0005: 1B           	tcs
  1025 00:0006: 0B           	phd
  1026 00:0007: 5B           	tcd
  1027                        	.block	39
  1028                        ;	_k_lock_enabled = TRUE;
  1029                        	.line	40
  1030 00:0008: E2 20        	sep	#$20
  1031                        	longa	off
  1032 00:000A: A9 01        	lda	#$1
  1033 00:000C: 8D xx xx     	sta	|~~_k_lock_enabled
  1034 00:000F: C2 20        	rep	#$20
  1035                        	longa	on
  1036                        ;}
  1037                        	.line	41
  1038                        L6:
  1039 00:0011: 2B           	pld
  1040 00:0012: 3B           	tsc
  1041 00:0013: 18           	clc
  1042 00:0014: 69 00 00     	adc	#L3
  1043 00:0017: 1B           	tcs
  1044 00:0018: 6B           	rtl
  1045                        	.endblock	41
  1046             00000000   L3	equ	0
  1047             00000001   L4	equ	1
  1048                        	ends
  Mon Aug  9 2021 16:52                                                Page 21


  1049                        	efunc
  1050                        	.endfunc	41,1,0
  1051                        	.line	41
  1052                        ;
  1053                        ;UINT k_lock_depth(VOID)
  1054                        ;{
  1055                        	.line	43
  1056                        	.line	44
  1057                        	code
  1058                        	xdef	~~k_lock_depth
  1059                        	func
  1060                        	.function	44
  1061                        ~~k_lock_depth:
  1062                        	longa	on
  1063                        	longi	on
  1064 00:0019: 3B           	tsc
  1065 00:001A: 38           	sec
  1066 00:001B: E9 00 00     	sbc	#L7
  1067 00:001E: 1B           	tcs
  1068 00:001F: 0B           	phd
  1069 00:0020: 5B           	tcd
  1070                        	.block	44
  1071                        ;	return _k_lock_depth;
  1072                        	.line	45
  1073 00:0021: AD xx xx     	lda	|~~_k_lock_depth
  1074                        L10:
  1075 00:0024: A8           	tay
  1076 00:0025: 2B           	pld
  1077 00:0026: 3B           	tsc
  1078 00:0027: 18           	clc
  1079 00:0028: 69 00 00     	adc	#L7
  1080 00:002B: 1B           	tcs
  1081 00:002C: 98           	tya
  1082 00:002D: 6B           	rtl
  1083                        ;}
  1084                        	.line	46
  1085                        	.endblock	46
  1086             00000000   L7	equ	0
  1087             00000001   L8	equ	1
  1088                        	ends
  1089                        	efunc
  1090                        	.endfunc	46,1,0
  1091                        	.line	46
  1092                        ;
  1093                        ;UINT k_lock_irq(VOID)
  1094                        ;{
  1095                        	.line	48
  1096                        	.line	49
  1097                        	code
  1098                        	xdef	~~k_lock_irq
  1099                        	func
  1100                        	.function	49
  1101                        ~~k_lock_irq:
  1102                        	longa	on
  1103                        	longi	on
  1104 00:002E: 3B           	tsc
  1105 00:002F: 38           	sec
  1106 00:0030: E9 00 00     	sbc	#L11
  Mon Aug  9 2021 16:52                                                Page 22


  1107 00:0033: 1B           	tcs
  1108 00:0034: 0B           	phd
  1109 00:0035: 5B           	tcd
  1110                        	.block	49
  1111                        ;	//k_debug_string("lock\r\n");
  1112                        ;	//return 0;
  1113                        ;
  1114                        ;	if(_k_in_irq_enabled)
  1115                        	.line	53
  1116                        ;	{
  1117 00:0036: AD xx xx     	lda	|~~_k_in_irq_enabled
  1118 00:0039: 29 FF 00     	and	#$ff
  1119 00:003C: D0 03        	bne	L14
  1120 00:003E: 82 0D 00     	brl	L10001
  1121                        L14:
  1122                        	.line	54
  1123                        ;		//k_debug_char_com1('*');
  1124                        ;		return 0;
  1125                        	.line	56
  1126 00:0041: A9 00 00     	lda	#$0
  1127                        L15:
  1128 00:0044: A8           	tay
  1129 00:0045: 2B           	pld
  1130 00:0046: 3B           	tsc
  1131 00:0047: 18           	clc
  1132 00:0048: 69 00 00     	adc	#L11
  1133 00:004B: 1B           	tcs
  1134 00:004C: 98           	tya
  1135 00:004D: 6B           	rtl
  1136                        ;	}
  1137                        	.line	57
  1138                        ;
  1139                        ;	if(!_k_lock_enabled)
  1140                        L10001:
  1141                        	.line	59
  1142                        ;	{
  1143 00:004E: AD xx xx     	lda	|~~_k_lock_enabled
  1144 00:0051: 29 FF 00     	and	#$ff
  1145 00:0054: F0 03        	beq	L16
  1146 00:0056: 82 06 00     	brl	L10002
  1147                        L16:
  1148                        	.line	60
  1149                        ;		//k_debug_char_com1('&');
  1150                        ;		return 0;
  1151                        	.line	62
  1152 00:0059: A9 00 00     	lda	#$0
  1153 00:005C: 82 E5 FF     	brl	L15
  1154                        ;	}
  1155                        	.line	63
  1156                        ;
  1157                        ;	asm SEI;
  1158                        L10002:
  1159                        	.line	65
  1160                        	asmstart
  1161 00:005F: 78           	SEI
  1162                        	asmend
  1163                        ;
  1164                        ;	_k_lock_depth++;
  Mon Aug  9 2021 16:52                                                Page 23


  1165                        	.line	67
  1166 00:0060: EE xx xx     	inc	|~~_k_lock_depth
  1167                        ;
  1168                        ;	/*
  1169                        ;	if(_k_lock_depth == 1)
  1170                        ;		k_debug_char_com1('<');
  1171                        ;	else
  1172                        ;	{
  1173                        ;		k_debug_char_com1('0' + _k_lock_depth );
  1174                        ;	}
  1175                        ;	*/
  1176                        ;	//if(_k_lock_depth > 1)
  1177                        ;	//	k_debug_integer("k_lock_irq::locked:",_k
                    _lock_depth);
  1178                        ;
  1179                        ;
  1180                        ;
  1181                        ;	return _k_lock_depth;
  1182                        	.line	82
  1183 00:0063: AD xx xx     	lda	|~~_k_lock_depth
  1184 00:0066: 82 DB FF     	brl	L15
  1185                        ;}
  1186                        	.line	83
  1187                        	.endblock	83
  1188             00000000   L11	equ	0
  1189             00000001   L12	equ	1
  1190                        	ends
  1191                        	efunc
  1192                        	.endfunc	83,1,0
  1193                        	.line	83
  1194                        ;
  1195                        ;
  1196                        ;UINT k_unlock_irq(VOID)
  1197                        ;{
  1198                        	.line	86
  1199                        	.line	87
  1200                        	code
  1201                        	xdef	~~k_unlock_irq
  1202                        	func
  1203                        	.function	87
  1204                        ~~k_unlock_irq:
  1205                        	longa	on
  1206                        	longi	on
  1207 00:0069: 3B           	tsc
  1208 00:006A: 38           	sec
  1209 00:006B: E9 00 00     	sbc	#L17
  1210 00:006E: 1B           	tcs
  1211 00:006F: 0B           	phd
  1212 00:0070: 5B           	tcd
  1213                        	.block	87
  1214                        ;	//return 0;
  1215                        ;
  1216                        ;	//k_debug_string("unlock\r\n");
  1217                        ;
  1218                        ;	if(_k_in_irq_enabled)
  1219                        	.line	92
  1220                        ;	{
  1221 00:0071: AD xx xx     	lda	|~~_k_in_irq_enabled
  Mon Aug  9 2021 16:52                                                Page 24


  1222 00:0074: 29 FF 00     	and	#$ff
  1223 00:0077: D0 03        	bne	L20
  1224 00:0079: 82 0D 00     	brl	L10003
  1225                        L20:
  1226                        	.line	93
  1227                        ;		//k_debug_char_com1('!');
  1228                        ;		return 0;
  1229                        	.line	95
  1230 00:007C: A9 00 00     	lda	#$0
  1231                        L21:
  1232 00:007F: A8           	tay
  1233 00:0080: 2B           	pld
  1234 00:0081: 3B           	tsc
  1235 00:0082: 18           	clc
  1236 00:0083: 69 00 00     	adc	#L17
  1237 00:0086: 1B           	tcs
  1238 00:0087: 98           	tya
  1239 00:0088: 6B           	rtl
  1240                        ;	}
  1241                        	.line	96
  1242                        ;	if(!_k_lock_enabled)
  1243                        L10003:
  1244                        	.line	97
  1245                        ;	{
  1246 00:0089: AD xx xx     	lda	|~~_k_lock_enabled
  1247 00:008C: 29 FF 00     	and	#$ff
  1248 00:008F: F0 03        	beq	L22
  1249 00:0091: 82 06 00     	brl	L10004
  1250                        L22:
  1251                        	.line	98
  1252                        ;		//k_debug_char_com1('?');
  1253                        ;		return 0;
  1254                        	.line	100
  1255 00:0094: A9 00 00     	lda	#$0
  1256 00:0097: 82 E5 FF     	brl	L21
  1257                        ;	}
  1258                        	.line	101
  1259                        ;
  1260                        ;	if(_k_lock_depth < 1)
  1261                        L10004:
  1262                        	.line	103
  1263                        ;	{
  1264 00:009A: AD xx xx     	lda	|~~_k_lock_depth
  1265 00:009D: 30 06        	bmi	L23
  1266 00:009F: 3A           	dea
  1267 00:00A0: 30 03        	bmi	L23
  1268 00:00A2: 82 06 00     	brl	L10005
  1269                        L23:
  1270                        	.line	104
  1271                        ;		//k_debug_char_com1('N');
  1272                        ;		return 0;
  1273                        	.line	106
  1274 00:00A5: A9 00 00     	lda	#$0
  1275 00:00A8: 82 D4 FF     	brl	L21
  1276                        ;	}
  1277                        	.line	107
  1278                        ;
  1279                        ;	_k_lock_depth--;
  Mon Aug  9 2021 16:52                                                Page 25


  1280                        L10005:
  1281                        	.line	109
  1282 00:00AB: CE xx xx     	dec	|~~_k_lock_depth
  1283                        ;
  1284                        ;	if(_k_lock_depth == 0)
  1285                        	.line	111
  1286                        ;	{
  1287 00:00AE: AD xx xx     	lda	|~~_k_lock_depth
  1288 00:00B1: F0 03        	beq	L24
  1289 00:00B3: 82 04 00     	brl	L10006
  1290                        L24:
  1291                        	.line	112
  1292                        ;		//k_debug_char_com1('>');
  1293                        ;		asm CLI;
  1294                        	.line	114
  1295                        	asmstart
  1296 00:00B6: 58           	CLI
  1297                        	asmend
  1298                        ;	}
  1299                        	.line	115
  1300                        ;	else if(_k_lock_depth < 0)
  1301 00:00B7: 82 2B 00     	brl	L10007
  1302                        L10006:
  1303                        	.line	116
  1304                        ;	{
  1305 00:00BA: AD xx xx     	lda	|~~_k_lock_depth
  1306 00:00BD: 30 03        	bmi	L25
  1307 00:00BF: 82 23 00     	brl	L10008
  1308                        L25:
  1309                        	.line	117
  1310                        ;		k_debug_string("k_unlock_irq::ERROR!r\b"
                    );
  1311                        	.line	118
  1312 00:00C2: F4 xx xx     	pea	#^L2
  1313 00:00C5: F4 xx xx     	pea	#<L2
  1314 00:00C8: 22 xx xx xx  	jsl	~~k_debug_string
  1315                        ;		k_exec_throw_exception(k_unlock_irq,0x00
                    010111,"Kernel Locking Mismatch",-1);
  1316                        	.line	119
  1317 00:00CC: F4 FF FF     	pea	#<$ffffffff
  1318 00:00CF: F4 xx xx     	pea	#^L2+23
  1319 00:00D2: F4 xx xx     	pea	#<L2+23
  1320 00:00D5: F4 01 00     	pea	#^$10111
  1321 00:00D8: F4 11 01     	pea	#<$10111
  1322 00:00DB: F4 xx xx     	pea	#^~~k_unlock_irq
  1323 00:00DE: F4 xx xx     	pea	#<~~k_unlock_irq
  1324 00:00E1: 22 xx xx xx  	jsl	~~k_exec_throw_exception
  1325                        ;	}
  1326                        	.line	120
  1327                        ;	/*
  1328                        ;	else
  1329                        ;	{
  1330                        ;		k_debug_char_com1('1' + _k_lock_depth );
  1331                        ;	}
  1332                        ;	*/
  1333                        ;	//if(_k_lock_depth > 0)
  1334                        ;	//	k_debug_integer("k_unlock_irq::unlocked:
                    ",_k_lock_depth);
  Mon Aug  9 2021 16:52                                                Page 26


  1335                        ;
  1336                        ;	return _k_lock_depth;
  1337                        L10008:
  1338                        L10007:
  1339                        	.line	130
  1340 00:00E5: AD xx xx     	lda	|~~_k_lock_depth
  1341 00:00E8: 82 94 FF     	brl	L21
  1342                        ;}
  1343                        	.line	131
  1344                        	.endblock	131
  1345             00000000   L17	equ	0
  1346             00000001   L18	equ	1
  1347                        	ends
  1348                        	efunc
  1349                        	.endfunc	131,1,0
  1350                        	.line	131
  1351                        	data
  1352                        L2:
  1353 00:0032: 6B 5F 75 6E  	db	$6B,$5F,$75,$6E,$6C,$6F,$63,$6B,$5F,$69,
                    $72,$71,$3A,$3A,$45
       00:0036: 6C 6F 63 6B 
       00:003A: 5F 69 72 71 
       00:003E: 3A 3A 45 
  1354 00:0041: 52 52 4F 52  	db	$52,$52,$4F,$52,$21,$72,$08,$00,$4B,$65,
                    $72,$6E,$65,$6C,$20
       00:0045: 21 72 08 00 
       00:0049: 4B 65 72 6E 
       00:004D: 65 6C 20 
  1355 00:0050: 4C 6F 63 6B  	db	$4C,$6F,$63,$6B,$69,$6E,$67,$20,$4D,$69,
                    $73,$6D,$61,$74,$63
       00:0054: 69 6E 67 20 
       00:0058: 4D 69 73 6D 
       00:005C: 61 74 63 
  1356 00:005F: 68 00        	db	$68,$00
  1357 00:0061:              	ends
  1358                        ;
  1359                        ;
  1360                        ;BOOL k_enter_critical_section(VOID)
  1361                        ;{
  1362                        	.line	134
  1363                        	.line	135
  1364                        	code
  1365                        	xdef	~~k_enter_critical_section
  1366                        	func
  1367                        	.function	135
  1368                        ~~k_enter_critical_section:
  1369                        	longa	on
  1370                        	longi	on
  1371 00:00EB: 3B           	tsc
  1372 00:00EC: 38           	sec
  1373 00:00ED: E9 06 00     	sbc	#L27
  1374 00:00F0: 1B           	tcs
  1375 00:00F1: 0B           	phd
  1376 00:00F2: 5B           	tcd
  1377                        	.block	135
  1378                        ;	UINT lock = k_lock_irq();
  1379                        ;	return (lock > 0);
  1380             00000000   lock_1	set	0
  Mon Aug  9 2021 16:52                                                Page 27


  1381                        	.sym	lock,0,16,1,16
  1382 00:00F3: 22 xx xx xx  	jsl	~~k_lock_irq
  1383 00:00F7: 85 05        	sta	<L28+lock_1
  1384                        	.line	137
  1385 00:00F9: 64 01        	stz	<R0
  1386 00:00FB: A9 00 00     	lda	#$0
  1387 00:00FE: C5 05        	cmp	<L28+lock_1
  1388 00:0100: 90 03        	bcc	L31
  1389 00:0102: 82 02 00     	brl	L30
  1390                        L31:
  1391 00:0105: E6 01        	inc	<R0
  1392                        L30:
  1393 00:0107: A5 01        	lda	<R0
  1394 00:0109: 29 FF 00     	and	#$ff
  1395                        L32:
  1396 00:010C: A8           	tay
  1397 00:010D: 2B           	pld
  1398 00:010E: 3B           	tsc
  1399 00:010F: 18           	clc
  1400 00:0110: 69 06 00     	adc	#L27
  1401 00:0113: 1B           	tcs
  1402 00:0114: 98           	tya
  1403 00:0115: 6B           	rtl
  1404                        ;}
  1405                        	.line	138
  1406                        	.endblock	138
  1407             00000006   L27	equ	6
  1408             00000005   L28	equ	5
  1409                        	ends
  1410                        	efunc
  1411                        	.endfunc	138,5,6
  1412                        	.line	138
  1413                        ;
  1414                        ;
  1415                        ;VOID k_exit_critical_section(VOID)
  1416                        ;{
  1417                        	.line	141
  1418                        	.line	142
  1419                        	code
  1420                        	xdef	~~k_exit_critical_section
  1421                        	func
  1422                        	.function	142
  1423                        ~~k_exit_critical_section:
  1424                        	longa	on
  1425                        	longi	on
  1426 00:0116: 3B           	tsc
  1427 00:0117: 38           	sec
  1428 00:0118: E9 00 00     	sbc	#L33
  1429 00:011B: 1B           	tcs
  1430 00:011C: 0B           	phd
  1431 00:011D: 5B           	tcd
  1432                        	.block	142
  1433                        ;	k_unlock_irq();
  1434                        	.line	143
  1435 00:011E: 22 xx xx xx  	jsl	~~k_unlock_irq
  1436                        ;}
  1437                        	.line	144
  1438                        L36:
  Mon Aug  9 2021 16:52                                                Page 28


  1439 00:0122: 2B           	pld
  1440 00:0123: 3B           	tsc
  1441 00:0124: 18           	clc
  1442 00:0125: 69 00 00     	adc	#L33
  1443 00:0128: 1B           	tcs
  1444 00:0129: 6B           	rtl
  1445                        	.endblock	144
  1446             00000000   L33	equ	0
  1447             00000001   L34	equ	1
  1448                        	ends
  1449                        	efunc
  1450                        	.endfunc	144,1,0
  1451                        	.line	144
  1452                        ;
  1453                        ;
  1454                        ;
  1455                        ;ULONG k_millis(VOID)
  1456                        ;{
  1457                        	.line	148
  1458                        	.line	149
  1459                        	code
  1460                        	xdef	~~k_millis
  1461                        	func
  1462                        	.function	149
  1463                        ~~k_millis:
  1464                        	longa	on
  1465                        	longi	on
  1466 00:012A: 3B           	tsc
  1467 00:012B: 38           	sec
  1468 00:012C: E9 00 00     	sbc	#L37
  1469 00:012F: 1B           	tcs
  1470 00:0130: 0B           	phd
  1471 00:0131: 5B           	tcd
  1472                        	.block	149
  1473                        ;	return _system_timer;
  1474                        	.line	150
  1475 00:0132: AE xx xx     	ldx	|~~_system_timer+2
  1476 00:0135: AD xx xx     	lda	|~~_system_timer
  1477                        L40:
  1478 00:0138: A8           	tay
  1479 00:0139: 2B           	pld
  1480 00:013A: 3B           	tsc
  1481 00:013B: 18           	clc
  1482 00:013C: 69 00 00     	adc	#L37
  1483 00:013F: 1B           	tcs
  1484 00:0140: 98           	tya
  1485 00:0141: 6B           	rtl
  1486                        ;}
  1487                        	.line	151
  1488                        	.endblock	151
  1489             00000000   L37	equ	0
  1490             00000001   L38	equ	1
  1491                        	ends
  1492                        	efunc
  1493                        	.endfunc	151,1,0
  1494                        	.line	151
  1495                        ;
  1496                        ;void k_delay_nop(void)
  Mon Aug  9 2021 16:52                                                Page 29


  1497                        ;{
  1498                        	.line	153
  1499                        	.line	154
  1500                        	code
  1501                        	xdef	~~k_delay_nop
  1502                        	func
  1503                        	.function	154
  1504                        ~~k_delay_nop:
  1505                        	longa	on
  1506                        	longi	on
  1507 00:0142: 3B           	tsc
  1508 00:0143: 38           	sec
  1509 00:0144: E9 00 00     	sbc	#L41
  1510 00:0147: 1B           	tcs
  1511 00:0148: 0B           	phd
  1512 00:0149: 5B           	tcd
  1513                        	.block	154
  1514                        ;	asm NOP;
  1515                        	.line	155
  1516                        	asmstart
  1517 00:014A: EA           	NOP
  1518                        	asmend
  1519                        ;	asm NOP;
  1520                        	.line	156
  1521                        	asmstart
  1522 00:014B: EA           	NOP
  1523                        	asmend
  1524                        ;	asm NOP;
  1525                        	.line	157
  1526                        	asmstart
  1527 00:014C: EA           	NOP
  1528                        	asmend
  1529                        ;	asm NOP;
  1530                        	.line	158
  1531                        	asmstart
  1532 00:014D: EA           	NOP
  1533                        	asmend
  1534                        ;	asm NOP;
  1535                        	.line	159
  1536                        	asmstart
  1537 00:014E: EA           	NOP
  1538                        	asmend
  1539                        ;	asm NOP;
  1540                        	.line	160
  1541                        	asmstart
  1542 00:014F: EA           	NOP
  1543                        	asmend
  1544                        ;	asm NOP;
  1545                        	.line	161
  1546                        	asmstart
  1547 00:0150: EA           	NOP
  1548                        	asmend
  1549                        ;	asm NOP;
  1550                        	.line	162
  1551                        	asmstart
  1552 00:0151: EA           	NOP
  1553                        	asmend
  1554                        ;	asm NOP;
  Mon Aug  9 2021 16:52                                                Page 30


  1555                        	.line	163
  1556                        	asmstart
  1557 00:0152: EA           	NOP
  1558                        	asmend
  1559                        ;	asm NOP;
  1560                        	.line	164
  1561                        	asmstart
  1562 00:0153: EA           	NOP
  1563                        	asmend
  1564                        ;}
  1565                        	.line	165
  1566                        L44:
  1567 00:0154: 2B           	pld
  1568 00:0155: 3B           	tsc
  1569 00:0156: 18           	clc
  1570 00:0157: 69 00 00     	adc	#L41
  1571 00:015A: 1B           	tcs
  1572 00:015B: 6B           	rtl
  1573                        	.endblock	165
  1574             00000000   L41	equ	0
  1575             00000001   L42	equ	1
  1576                        	ends
  1577                        	efunc
  1578                        	.endfunc	165,1,0
  1579                        	.line	165
  1580                        ;
  1581                        ;void k_delay_1(void)
  1582                        ;{
  1583                        	.line	167
  1584                        	.line	168
  1585                        	code
  1586                        	xdef	~~k_delay_1
  1587                        	func
  1588                        	.function	168
  1589                        ~~k_delay_1:
  1590                        	longa	on
  1591                        	longi	on
  1592 00:015C: 3B           	tsc
  1593 00:015D: 38           	sec
  1594 00:015E: E9 02 00     	sbc	#L45
  1595 00:0161: 1B           	tcs
  1596 00:0162: 0B           	phd
  1597 00:0163: 5B           	tcd
  1598                        	.block	168
  1599                        ;	int c = 0;
  1600                        ;
  1601                        ;	for(c=0;c<10;c++)
  1602             00000000   c_1	set	0
  1603                        	.sym	c,0,5,1,16
  1604 00:0164: 64 01        	stz	<L46+c_1
  1605                        	.line	171
  1606 00:0166: 64 01        	stz	<L46+c_1
  1607                        L10011:
  1608                        ;	{
  1609                        	.line	172
  1610                        ;		k_delay_nop();
  1611                        	.line	173
  1612 00:0168: 22 xx xx xx  	jsl	~~k_delay_nop
  Mon Aug  9 2021 16:52                                                Page 31


  1613                        ;	}
  1614                        	.line	174
  1615                        L10009:
  1616 00:016C: E6 01        	inc	<L46+c_1
  1617 00:016E: 38           	sec
  1618 00:016F: A5 01        	lda	<L46+c_1
  1619 00:0171: E9 0A 00     	sbc	#<$a
  1620 00:0174: 70 03        	bvs	L48
  1621 00:0176: 49 00 80     	eor	#$8000
  1622                        L48:
  1623 00:0179: 30 03        	bmi	L49
  1624 00:017B: 82 EA FF     	brl	L10011
  1625                        L49:
  1626                        L10010:
  1627                        ;}
  1628                        	.line	175
  1629                        L50:
  1630 00:017E: 2B           	pld
  1631 00:017F: 3B           	tsc
  1632 00:0180: 18           	clc
  1633 00:0181: 69 02 00     	adc	#L45
  1634 00:0184: 1B           	tcs
  1635 00:0185: 6B           	rtl
  1636                        	.endblock	175
  1637             00000002   L45	equ	2
  1638             00000001   L46	equ	1
  1639                        	ends
  1640                        	efunc
  1641                        	.endfunc	175,1,2
  1642                        	.line	175
  1643                        ;
  1644                        ;void k_delay_1ms(void)
  1645                        ;{
  1646                        	.line	177
  1647                        	.line	178
  1648                        	code
  1649                        	xdef	~~k_delay_1ms
  1650                        	func
  1651                        	.function	178
  1652                        ~~k_delay_1ms:
  1653                        	longa	on
  1654                        	longi	on
  1655 00:0186: 3B           	tsc
  1656 00:0187: 38           	sec
  1657 00:0188: E9 00 00     	sbc	#L51
  1658 00:018B: 1B           	tcs
  1659 00:018C: 0B           	phd
  1660 00:018D: 5B           	tcd
  1661                        	.block	178
  1662                        ;	k_delay_1();
  1663                        	.line	179
  1664 00:018E: 22 xx xx xx  	jsl	~~k_delay_1
  1665                        ;}
  1666                        	.line	180
  1667                        L54:
  1668 00:0192: 2B           	pld
  1669 00:0193: 3B           	tsc
  1670 00:0194: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 32


  1671 00:0195: 69 00 00     	adc	#L51
  1672 00:0198: 1B           	tcs
  1673 00:0199: 6B           	rtl
  1674                        	.endblock	180
  1675             00000000   L51	equ	0
  1676             00000001   L52	equ	1
  1677                        	ends
  1678                        	efunc
  1679                        	.endfunc	180,1,0
  1680                        	.line	180
  1681                        ;
  1682                        ;void sleep(int msec)
  1683                        ;{
  1684                        	.line	182
  1685                        	.line	183
  1686                        	code
  1687                        	xdef	~~sleep
  1688                        	func
  1689                        	.function	183
  1690                        ~~sleep:
  1691                        	longa	on
  1692                        	longi	on
  1693 00:019A: 3B           	tsc
  1694 00:019B: 38           	sec
  1695 00:019C: E9 02 00     	sbc	#L55
  1696 00:019F: 1B           	tcs
  1697 00:01A0: 0B           	phd
  1698 00:01A1: 5B           	tcd
  1699             00000004   msec_0	set	4
  1700                        	.block	183
  1701                        ;	int c = 0;
  1702                        ;	for(c=0;c<msec;c++)
  1703             00000000   c_1	set	0
  1704                        	.sym	c,0,5,1,16
  1705                        	.sym	msec,4,5,6,16
  1706 00:01A2: 64 01        	stz	<L56+c_1
  1707                        	.line	185
  1708 00:01A4: 64 01        	stz	<L56+c_1
  1709 00:01A6: 82 06 00     	brl	L10015
  1710                        L10014:
  1711                        ;	{
  1712                        	.line	186
  1713                        ;		k_delay_1ms();
  1714                        	.line	187
  1715 00:01A9: 22 xx xx xx  	jsl	~~k_delay_1ms
  1716                        ;	}
  1717                        	.line	188
  1718                        L10012:
  1719 00:01AD: E6 01        	inc	<L56+c_1
  1720                        L10015:
  1721 00:01AF: 38           	sec
  1722 00:01B0: A5 01        	lda	<L56+c_1
  1723 00:01B2: E5 06        	sbc	<L55+msec_0
  1724 00:01B4: 70 03        	bvs	L58
  1725 00:01B6: 49 00 80     	eor	#$8000
  1726                        L58:
  1727 00:01B9: 30 03        	bmi	L59
  1728 00:01BB: 82 EB FF     	brl	L10014
  Mon Aug  9 2021 16:52                                                Page 33


  1729                        L59:
  1730                        L10013:
  1731                        ;}
  1732                        	.line	189
  1733                        L60:
  1734 00:01BE: A5 04        	lda	<L55+2
  1735 00:01C0: 85 06        	sta	<L55+2+2
  1736 00:01C2: A5 03        	lda	<L55+1
  1737 00:01C4: 85 05        	sta	<L55+1+2
  1738 00:01C6: 2B           	pld
  1739 00:01C7: 3B           	tsc
  1740 00:01C8: 18           	clc
  1741 00:01C9: 69 04 00     	adc	#L55+2
  1742 00:01CC: 1B           	tcs
  1743 00:01CD: 6B           	rtl
  1744                        	.endblock	189
  1745             00000002   L55	equ	2
  1746             00000001   L56	equ	1
  1747                        	ends
  1748                        	efunc
  1749                        	.endfunc	189,1,2
  1750                        	.line	189
  1751                        ;
  1752                        ;/*
  1753                        ; *
  1754                        ; *
  1755                        ; *
  1756                        ; *
  1757                        ; */
  1758                        ;LPSTR k_getFXOSVersionName(void)
  1759                        ;{
  1760                        	.line	197
  1761                        	.line	198
  1762                        	code
  1763                        	xdef	~~k_getFXOSVersionName
  1764                        	func
  1765                        	.function	198
  1766                        ~~k_getFXOSVersionName:
  1767                        	longa	on
  1768                        	longi	on
  1769 00:01CE: 3B           	tsc
  1770 00:01CF: 38           	sec
  1771 00:01D0: E9 00 00     	sbc	#L61
  1772 00:01D3: 1B           	tcs
  1773 00:01D4: 0B           	phd
  1774 00:01D5: 5B           	tcd
  1775                        	.block	198
  1776                        ;	return FXOSVERSIONSTRING;
  1777                        	.line	199
  1778 00:01D6: AE xx xx     	ldx	|~~FXOSVERSIONSTRING+2
  1779 00:01D9: AD xx xx     	lda	|~~FXOSVERSIONSTRING
  1780                        L64:
  1781 00:01DC: A8           	tay
  1782 00:01DD: 2B           	pld
  1783 00:01DE: 3B           	tsc
  1784 00:01DF: 18           	clc
  1785 00:01E0: 69 00 00     	adc	#L61
  1786 00:01E3: 1B           	tcs
  Mon Aug  9 2021 16:52                                                Page 34


  1787 00:01E4: 98           	tya
  1788 00:01E5: 6B           	rtl
  1789                        ;}
  1790                        	.line	200
  1791                        	.endblock	200
  1792             00000000   L61	equ	0
  1793             00000001   L62	equ	1
  1794                        	ends
  1795                        	efunc
  1796                        	.endfunc	200,1,0
  1797                        	.line	200
  1798                        ;
  1799                        ;PFXZEROPAGE k_getZeroPage(void)
  1800                        ;{
  1801                        	.line	202
  1802                        	.line	203
  1803                        	code
  1804                        	xdef	~~k_getZeroPage
  1805                        	func
  1806                        	.function	203
  1807                        ~~k_getZeroPage:
  1808                        	longa	on
  1809                        	longi	on
  1810 00:01E6: 3B           	tsc
  1811 00:01E7: 38           	sec
  1812 00:01E8: E9 00 00     	sbc	#L65
  1813 00:01EB: 1B           	tcs
  1814 00:01EC: 0B           	phd
  1815 00:01ED: 5B           	tcd
  1816                        	.block	203
  1817                        ;	return (PFXZEROPAGE)ZEROPAGE;
  1818                        	.line	204
  1819 00:01EE: A9 00 00     	lda	#$0
  1820 00:01F1: AA           	tax
  1821 00:01F2: A9 00 15     	lda	#$1500
  1822                        L68:
  1823 00:01F5: A8           	tay
  1824 00:01F6: 2B           	pld
  1825 00:01F7: 3B           	tsc
  1826 00:01F8: 18           	clc
  1827 00:01F9: 69 00 00     	adc	#L65
  1828 00:01FC: 1B           	tcs
  1829 00:01FD: 98           	tya
  1830 00:01FE: 6B           	rtl
  1831                        ;}
  1832                        	.line	205
  1833                        	.endblock	205
  1834             00000000   L65	equ	0
  1835             00000001   L66	equ	1
  1836                        	ends
  1837                        	efunc
  1838                        	.endfunc	205,1,0
  1839                        	.line	205
  1840                        ;
  1841                        ;KERNELTRAPCALL FAR *k_getKernelTrapTable(VOID)
  1842                        ;{
  1843                        	.line	207
  1844                        	.line	208
  Mon Aug  9 2021 16:52                                                Page 35


  1845                        	code
  1846                        	xdef	~~k_getKernelTrapTable
  1847                        	func
  1848                        	.function	208
  1849                        ~~k_getKernelTrapTable:
  1850                        	longa	on
  1851                        	longi	on
  1852 00:01FF: 3B           	tsc
  1853 00:0200: 38           	sec
  1854 00:0201: E9 00 00     	sbc	#L69
  1855 00:0204: 1B           	tcs
  1856 00:0205: 0B           	phd
  1857 00:0206: 5B           	tcd
  1858                        	.block	208
  1859                        ;	return KERNEL_FUNCTION_TABLE;
  1860                        	.line	209
  1861 00:0207: AE xx xx     	ldx	|~~KERNEL_FUNCTION_TABLE+2
  1862 00:020A: AD xx xx     	lda	|~~KERNEL_FUNCTION_TABLE
  1863                        L72:
  1864 00:020D: A8           	tay
  1865 00:020E: 2B           	pld
  1866 00:020F: 3B           	tsc
  1867 00:0210: 18           	clc
  1868 00:0211: 69 00 00     	adc	#L69
  1869 00:0214: 1B           	tcs
  1870 00:0215: 98           	tya
  1871 00:0216: 6B           	rtl
  1872                        ;}
  1873                        	.line	210
  1874                        	.endblock	210
  1875             00000000   L69	equ	0
  1876             00000001   L70	equ	1
  1877                        	ends
  1878                        	efunc
  1879                        	.endfunc	210,1,0
  1880                        	.line	210
  1881                        ;
  1882                        ;PFXZEROPAGE k_initializeZeroPage(VOID)
  1883                        ;{
  1884                        	.line	212
  1885                        	.line	213
  1886                        	code
  1887                        	xdef	~~k_initializeZeroPage
  1888                        	func
  1889                        	.function	213
  1890                        ~~k_initializeZeroPage:
  1891                        	longa	on
  1892                        	longi	on
  1893 00:0217: 3B           	tsc
  1894 00:0218: 38           	sec
  1895 00:0219: E9 10 00     	sbc	#L73
  1896 00:021C: 1B           	tcs
  1897 00:021D: 0B           	phd
  1898 00:021E: 5B           	tcd
  1899                        	.block	213
  1900                        ;	PFXZEROPAGE zp =  k_getZeroPage();
  1901                        ;	ULONG		endianCheck = 0x12345678;
  1902                        ;
  Mon Aug  9 2021 16:52                                                Page 36


  1903                        ;	memset(zp,0,sizeof(FXZEROPAGE));
  1904             00000000   zp_1	set	0
  1905             00000004   endianCheck_1	set	4
  1906                        	.sym	zp,0,138,1,32,83
  1907                        	.sym	endianCheck,4,18,1,32
  1908 00:021F: 22 xx xx xx  	jsl	~~k_getZeroPage
  1909 00:0223: 85 09        	sta	<L74+zp_1
  1910 00:0225: 86 0B        	stx	<L74+zp_1+2
  1911 00:0227: A9 78 56     	lda	#$5678
  1912 00:022A: 85 0D        	sta	<L74+endianCheck_1
  1913 00:022C: A9 34 12     	lda	#$1234
  1914 00:022F: 85 0F        	sta	<L74+endianCheck_1+2
  1915                        	.line	217
  1916 00:0231: F4 5A 00     	pea	#<$5a
  1917 00:0234: F4 00 00     	pea	#<$0
  1918 00:0237: D4 0B        	pei	<L74+zp_1+2
  1919 00:0239: D4 09        	pei	<L74+zp_1
  1920 00:023B: 22 xx xx xx  	jsl	~~memset
  1921                        ;
  1922                        ;	//k_get_c256_release(zp->boardRelease);
  1923                        ;
  1924                        ;
  1925                        ;	if( (H24BYTE(endianCheck) == ((LPSTR)(&endianChe
                    ck))[0]))
  1926                        	.line	222
  1927                        ;	{
  1928 00:023F: D4 0F        	pei	<L74+endianCheck_1+2
  1929 00:0241: D4 0D        	pei	<L74+endianCheck_1
  1930 00:0243: A9 10 00     	lda	#$10
  1931                        	xref	~~~llsr
  1932 00:0246: 22 xx xx xx  	jsl	~~~llsr
  1933 00:024A: 85 01        	sta	<R0
  1934 00:024C: 86 03        	stx	<R0+2
  1935 00:024E: A5 01        	lda	<R0
  1936 00:0250: 29 FF 00     	and	#<$ff
  1937 00:0253: 85 05        	sta	<R1
  1938 00:0255: 64 07        	stz	<R1+2
  1939 00:0257: E2 20        	sep	#$20
  1940                        	longa	off
  1941 00:0259: A5 05        	lda	<R1
  1942 00:025B: C5 0D        	cmp	<L74+endianCheck_1
  1943 00:025D: C2 20        	rep	#$20
  1944                        	longa	on
  1945 00:025F: F0 03        	beq	L76
  1946 00:0261: 82 08 00     	brl	L10016
  1947                        L76:
  1948                        	.line	223
  1949                        ;		zp->Endianness = ENDIAN_BIG;
  1950                        	.line	224
  1951 00:0264: A9 01 00     	lda	#$1
  1952 00:0267: A0 0E 00     	ldy	#$e
  1953 00:026A: 97 09        	sta	[<L74+zp_1],Y
  1954                        ;	}
  1955                        	.line	225
  1956                        ;
  1957                        ;	zp->VersionMajor    = 0;
  1958                        L10016:
  1959                        	.line	227
  Mon Aug  9 2021 16:52                                                Page 37


  1960 00:026C: A9 00 00     	lda	#$0
  1961 00:026F: A0 10 00     	ldy	#$10
  1962 00:0272: 97 09        	sta	[<L74+zp_1],Y
  1963                        ;	zp->VersionMinor    = 5;
  1964                        	.line	228
  1965 00:0274: A9 05 00     	lda	#$5
  1966 00:0277: A0 12 00     	ldy	#$12
  1967 00:027A: 97 09        	sta	[<L74+zp_1],Y
  1968                        ;	zp->VersionRelease = -1;
  1969                        	.line	229
  1970 00:027C: A9 FF FF     	lda	#$ffff
  1971 00:027F: A0 14 00     	ldy	#$14
  1972 00:0282: 97 09        	sta	[<L74+zp_1],Y
  1973                        ;
  1974                        ;	zp->topMemory 	 = MEM_USER_CEILING;
  1975                        	.line	231
  1976 00:0284: A9 00 00     	lda	#$0
  1977 00:0287: A0 16 00     	ldy	#$16
  1978 00:028A: 97 09        	sta	[<L74+zp_1],Y
  1979 00:028C: A9 AF 00     	lda	#$af
  1980 00:028F: A0 18 00     	ldy	#$18
  1981 00:0292: 97 09        	sta	[<L74+zp_1],Y
  1982                        ;	zp->bottomMemory = MEM_USER_FLOOR;
  1983                        	.line	232
  1984 00:0294: A9 00 00     	lda	#$0
  1985 00:0297: A0 1A 00     	ldy	#$1a
  1986 00:029A: 97 09        	sta	[<L74+zp_1],Y
  1987 00:029C: A9 19 00     	lda	#$19
  1988 00:029F: A0 1C 00     	ldy	#$1c
  1989 00:02A2: 97 09        	sta	[<L74+zp_1],Y
  1990                        ;
  1991                        ;
  1992                        ;	zp->fxos_kernel_api = malloc(sizeof(FXKERNEL_API
                    _CALLTABLE));//&fx_kernel_api_table;
  1993                        	.line	235
  1994 00:02A4: F4 00 04     	pea	#<$400
  1995 00:02A7: 22 xx xx xx  	jsl	~~malloc
  1996 00:02AB: 85 01        	sta	<R0
  1997 00:02AD: 86 03        	stx	<R0+2
  1998 00:02AF: A5 01        	lda	<R0
  1999 00:02B1: A0 42 00     	ldy	#$42
  2000 00:02B4: 97 09        	sta	[<L74+zp_1],Y
  2001 00:02B6: A5 03        	lda	<R0+2
  2002 00:02B8: A0 44 00     	ldy	#$44
  2003 00:02BB: 97 09        	sta	[<L74+zp_1],Y
  2004                        ;	zp->fxos_dos_api    = malloc(sizeof(FXKERNEL_API
                    _CALLTABLE));//&fx_dos_api_table;
  2005                        	.line	236
  2006 00:02BD: F4 00 04     	pea	#<$400
  2007 00:02C0: 22 xx xx xx  	jsl	~~malloc
  2008 00:02C4: 85 01        	sta	<R0
  2009 00:02C6: 86 03        	stx	<R0+2
  2010 00:02C8: A5 01        	lda	<R0
  2011 00:02CA: A0 46 00     	ldy	#$46
  2012 00:02CD: 97 09        	sta	[<L74+zp_1],Y
  2013 00:02CF: A5 03        	lda	<R0+2
  2014 00:02D1: A0 48 00     	ldy	#$48
  2015 00:02D4: 97 09        	sta	[<L74+zp_1],Y
  Mon Aug  9 2021 16:52                                                Page 38


  2016                        ;	zp->fxos_gfx_api    = malloc(sizeof(FXKERNEL_API
                    _CALLTABLE));//&fx_gfx_api_table;
  2017                        	.line	237
  2018 00:02D6: F4 00 04     	pea	#<$400
  2019 00:02D9: 22 xx xx xx  	jsl	~~malloc
  2020 00:02DD: 85 01        	sta	<R0
  2021 00:02DF: 86 03        	stx	<R0+2
  2022 00:02E1: A5 01        	lda	<R0
  2023 00:02E3: A0 4A 00     	ldy	#$4a
  2024 00:02E6: 97 09        	sta	[<L74+zp_1],Y
  2025 00:02E8: A5 03        	lda	<R0+2
  2026 00:02EA: A0 4C 00     	ldy	#$4c
  2027 00:02ED: 97 09        	sta	[<L74+zp_1],Y
  2028                        ;	zp->fxos_gui_api    = malloc(sizeof(FXKERNEL_API
                    _CALLTABLE));//&fx_gui_api_table;
  2029                        	.line	238
  2030 00:02EF: F4 00 04     	pea	#<$400
  2031 00:02F2: 22 xx xx xx  	jsl	~~malloc
  2032 00:02F6: 85 01        	sta	<R0
  2033 00:02F8: 86 03        	stx	<R0+2
  2034 00:02FA: A5 01        	lda	<R0
  2035 00:02FC: A0 4E 00     	ldy	#$4e
  2036 00:02FF: 97 09        	sta	[<L74+zp_1],Y
  2037 00:0301: A5 03        	lda	<R0+2
  2038 00:0303: A0 50 00     	ldy	#$50
  2039 00:0306: 97 09        	sta	[<L74+zp_1],Y
  2040                        ;	zp->fxos_con_api    = malloc(sizeof(FXKERNEL_API
                    _CALLTABLE));//&fx_con_api_table;
  2041                        	.line	239
  2042 00:0308: F4 00 04     	pea	#<$400
  2043 00:030B: 22 xx xx xx  	jsl	~~malloc
  2044 00:030F: 85 01        	sta	<R0
  2045 00:0311: 86 03        	stx	<R0+2
  2046 00:0313: A5 01        	lda	<R0
  2047 00:0315: A0 52 00     	ldy	#$52
  2048 00:0318: 97 09        	sta	[<L74+zp_1],Y
  2049 00:031A: A5 03        	lda	<R0+2
  2050 00:031C: A0 54 00     	ldy	#$54
  2051 00:031F: 97 09        	sta	[<L74+zp_1],Y
  2052                        ;
  2053                        ;
  2054                        ;	_k_initialize_call_table(zp,API_CALLTABLE_KERNEL
                    _IDX);
  2055                        	.line	242
  2056 00:0321: F4 00 00     	pea	#<$0
  2057 00:0324: D4 0B        	pei	<L74+zp_1+2
  2058 00:0326: D4 09        	pei	<L74+zp_1
  2059 00:0328: 22 xx xx xx  	jsl	~~_k_initialize_call_table
  2060                        ;	_k_initialize_call_table(zp,API_CALLTABLE_DOS_ID
                    X);
  2061                        	.line	243
  2062 00:032C: F4 01 00     	pea	#<$1
  2063 00:032F: D4 0B        	pei	<L74+zp_1+2
  2064 00:0331: D4 09        	pei	<L74+zp_1
  2065 00:0333: 22 xx xx xx  	jsl	~~_k_initialize_call_table
  2066                        ;	_k_initialize_call_table(zp,API_CALLTABLE_GFX_ID
                    X);
  2067                        	.line	244
  Mon Aug  9 2021 16:52                                                Page 39


  2068 00:0337: F4 02 00     	pea	#<$2
  2069 00:033A: D4 0B        	pei	<L74+zp_1+2
  2070 00:033C: D4 09        	pei	<L74+zp_1
  2071 00:033E: 22 xx xx xx  	jsl	~~_k_initialize_call_table
  2072                        ;	_k_initialize_call_table(zp,API_CALLTABLE_GUI_ID
                    X);
  2073                        	.line	245
  2074 00:0342: F4 03 00     	pea	#<$3
  2075 00:0345: D4 0B        	pei	<L74+zp_1+2
  2076 00:0347: D4 09        	pei	<L74+zp_1
  2077 00:0349: 22 xx xx xx  	jsl	~~_k_initialize_call_table
  2078                        ;	_k_initialize_call_table(zp,API_CALLTABLE_CON_ID
                    X);
  2079                        	.line	246
  2080 00:034D: F4 04 00     	pea	#<$4
  2081 00:0350: D4 0B        	pei	<L74+zp_1+2
  2082 00:0352: D4 09        	pei	<L74+zp_1
  2083 00:0354: 22 xx xx xx  	jsl	~~_k_initialize_call_table
  2084                        ;
  2085                        ;	//zp->kernel_call_tables = malloc(sizeof(FXKERNE
                    L_API_CALLTABLE) * FXOS_CALLTABLES);
  2086                        ;
  2087                        ;	return zp;
  2088                        	.line	250
  2089 00:0358: A6 0B        	ldx	<L74+zp_1+2
  2090 00:035A: A5 09        	lda	<L74+zp_1
  2091                        L77:
  2092 00:035C: A8           	tay
  2093 00:035D: 2B           	pld
  2094 00:035E: 3B           	tsc
  2095 00:035F: 18           	clc
  2096 00:0360: 69 10 00     	adc	#L73
  2097 00:0363: 1B           	tcs
  2098 00:0364: 98           	tya
  2099 00:0365: 6B           	rtl
  2100                        ;}
  2101                        	.line	251
  2102                        	.endblock	251
  2103             00000010   L73	equ	16
  2104             00000009   L74	equ	9
  2105                        	ends
  2106                        	efunc
  2107                        	.endfunc	251,9,16
  2108                        	.line	251
  2109                        ;
  2110                        ;/*
  2111                        ; *
  2112                        ; *
  2113                        ; *
  2114                        ; *
  2115                        ; */
  2116                        ;
  2117                        ;
  2118                        ;int k_report_configuration(int offset,int line)
  2119                        ;{
  2120                        	.line	261
  2121                        	.line	262
  2122                        	code
  Mon Aug  9 2021 16:52                                                Page 40


  2123                        	xdef	~~k_report_configuration
  2124                        	func
  2125                        	.function	262
  2126                        ~~k_report_configuration:
  2127                        	longa	on
  2128                        	longi	on
  2129 00:0366: 3B           	tsc
  2130 00:0367: 38           	sec
  2131 00:0368: E9 16 00     	sbc	#L78
  2132 00:036B: 1B           	tcs
  2133 00:036C: 0B           	phd
  2134 00:036D: 5B           	tcd
  2135             00000004   offset_0	set	4
  2136             00000006   line_0	set	6
  2137                        	.block	262
  2138                        ;	char krcBuffer[16];
  2139                        ;	int pos = offset;
  2140                        ;
  2141                        ;
  2142                        ;	k_put_string(pos,line,CONST_COMPUTER_NAME,15,0);
  2143             00000000   krcBuffer_1	set	0
  2144             00000010   pos_1	set	16
  2145                        	.sym	krcBuffer,0,110,1,0,16
  2146                        	.sym	pos,16,5,1,16
  2147                        	.sym	offset,4,5,6,16
  2148                        	.sym	line,6,5,6,16
  2149 00:036E: A5 1A        	lda	<L78+offset_0
  2150 00:0370: 85 15        	sta	<L79+pos_1
  2151                        	.line	267
  2152 00:0372: F4 00 00     	pea	#<$0
  2153 00:0375: F4 0F 00     	pea	#<$f
  2154 00:0378: F4 xx xx     	pea	#^L26
  2155 00:037B: F4 xx xx     	pea	#<L26
  2156 00:037E: D4 1C        	pei	<L78+line_0
  2157 00:0380: D4 15        	pei	<L79+pos_1
  2158 00:0382: 22 xx xx xx  	jsl	~~k_put_string
  2159                        ;	k_put_color (pos,line,CONST_COMPUTER_NAME_COLOR)
                    ;
  2160                        	.line	268
  2161 00:0386: F4 xx xx     	pea	#^L26+44
  2162 00:0389: F4 xx xx     	pea	#<L26+44
  2163 00:038C: D4 1C        	pei	<L78+line_0
  2164 00:038E: D4 15        	pei	<L79+pos_1
  2165 00:0390: 22 xx xx xx  	jsl	~~k_put_color
  2166                        ;	line++;
  2167                        	.line	269
  2168 00:0394: E6 1C        	inc	<L78+line_0
  2169                        ;
  2170                        ;	k_put_string(pos,line,CONST_COMPUTER_ACK_1,15,0)
                    ;
  2171                        	.line	271
  2172 00:0396: F4 00 00     	pea	#<$0
  2173 00:0399: F4 0F 00     	pea	#<$f
  2174 00:039C: F4 xx xx     	pea	#^L26+57
  2175 00:039F: F4 xx xx     	pea	#<L26+57
  2176 00:03A2: D4 1C        	pei	<L78+line_0
  2177 00:03A4: D4 15        	pei	<L79+pos_1
  2178 00:03A6: 22 xx xx xx  	jsl	~~k_put_string
  Mon Aug  9 2021 16:52                                                Page 41


  2179                        ;	k_put_color (pos,line,CONST_COMPUTER_ACK_1_COLOR
                    );
  2180                        	.line	272
  2181 00:03AA: F4 xx xx     	pea	#^L26+118
  2182 00:03AD: F4 xx xx     	pea	#<L26+118
  2183 00:03B0: D4 1C        	pei	<L78+line_0
  2184 00:03B2: D4 15        	pei	<L79+pos_1
  2185 00:03B4: 22 xx xx xx  	jsl	~~k_put_color
  2186                        ;	line++;
  2187                        	.line	273
  2188 00:03B8: E6 1C        	inc	<L78+line_0
  2189                        ;
  2190                        ;	pos = k_put_string(pos,line,CONST_COMPUTER_ACK_2
                    ,15,0);
  2191                        	.line	275
  2192 00:03BA: F4 00 00     	pea	#<$0
  2193 00:03BD: F4 0F 00     	pea	#<$f
  2194 00:03C0: F4 xx xx     	pea	#^L26+131
  2195 00:03C3: F4 xx xx     	pea	#<L26+131
  2196 00:03C6: D4 1C        	pei	<L78+line_0
  2197 00:03C8: D4 15        	pei	<L79+pos_1
  2198 00:03CA: 22 xx xx xx  	jsl	~~k_put_string
  2199 00:03CE: 85 15        	sta	<L79+pos_1
  2200                        ;	k_put_string(pos,line,k_getFXOSVersionName(),15,
                    0);
  2201                        	.line	276
  2202 00:03D0: F4 00 00     	pea	#<$0
  2203 00:03D3: F4 0F 00     	pea	#<$f
  2204 00:03D6: 22 xx xx xx  	jsl	~~k_getFXOSVersionName
  2205 00:03DA: 85 01        	sta	<R0
  2206 00:03DC: 86 03        	stx	<R0+2
  2207 00:03DE: DA           	phx
  2208 00:03DF: 48           	pha
  2209 00:03E0: D4 1C        	pei	<L78+line_0
  2210 00:03E2: D4 15        	pei	<L79+pos_1
  2211 00:03E4: 22 xx xx xx  	jsl	~~k_put_string
  2212                        ;
  2213                        ;	pos = offset;
  2214                        	.line	278
  2215 00:03E8: A5 1A        	lda	<L78+offset_0
  2216 00:03EA: 85 15        	sta	<L79+pos_1
  2217                        ;	k_put_color (pos,line,CONST_COMPUTER_ACK_2_COLOR
                    );
  2218                        	.line	279
  2219 00:03EC: F4 xx xx     	pea	#^L26+145
  2220 00:03EF: F4 xx xx     	pea	#<L26+145
  2221 00:03F2: D4 1C        	pei	<L78+line_0
  2222 00:03F4: D4 15        	pei	<L79+pos_1
  2223 00:03F6: 22 xx xx xx  	jsl	~~k_put_color
  2224                        ;
  2225                        ;
  2226                        ;	line++;
  2227                        	.line	282
  2228 00:03FA: E6 1C        	inc	<L78+line_0
  2229                        ;	line++;
  2230                        	.line	283
  2231 00:03FC: E6 1C        	inc	<L78+line_0
  2232                        ;
  Mon Aug  9 2021 16:52                                                Page 42


  2233                        ;	pos = offset;
  2234                        	.line	285
  2235 00:03FE: A5 1A        	lda	<L78+offset_0
  2236 00:0400: 85 15        	sta	<L79+pos_1
  2237                        ;	pos = k_put_string(pos,line,CONST_BOARD_REVISION
                    ,15,0);
  2238                        	.line	286
  2239 00:0402: F4 00 00     	pea	#<$0
  2240 00:0405: F4 0F 00     	pea	#<$f
  2241 00:0408: F4 xx xx     	pea	#^L26+158
  2242 00:040B: F4 xx xx     	pea	#<L26+158
  2243 00:040E: D4 1C        	pei	<L78+line_0
  2244 00:0410: D4 15        	pei	<L79+pos_1
  2245 00:0412: 22 xx xx xx  	jsl	~~k_put_string
  2246 00:0416: 85 15        	sta	<L79+pos_1
  2247                        ;	k_get_c256_major_version(krcBuffer);
  2248                        	.line	287
  2249 00:0418: F4 00 00     	pea	#0
  2250 00:041B: 18           	clc
  2251 00:041C: 7B           	tdc
  2252 00:041D: 69 05 00     	adc	#<L79+krcBuffer_1
  2253 00:0420: 48           	pha
  2254 00:0421: 22 xx xx xx  	jsl	~~k_get_c256_major_version
  2255                        ;	pos = k_put_string(pos,line,krcBuffer,15,0);
  2256                        	.line	288
  2257 00:0425: F4 00 00     	pea	#<$0
  2258 00:0428: F4 0F 00     	pea	#<$f
  2259 00:042B: F4 00 00     	pea	#0
  2260 00:042E: 18           	clc
  2261 00:042F: 7B           	tdc
  2262 00:0430: 69 05 00     	adc	#<L79+krcBuffer_1
  2263 00:0433: 48           	pha
  2264 00:0434: D4 1C        	pei	<L78+line_0
  2265 00:0436: D4 15        	pei	<L79+pos_1
  2266 00:0438: 22 xx xx xx  	jsl	~~k_put_string
  2267 00:043C: 85 15        	sta	<L79+pos_1
  2268                        ;	k_get_c256_minor_version(krcBuffer);
  2269                        	.line	289
  2270 00:043E: F4 00 00     	pea	#0
  2271 00:0441: 18           	clc
  2272 00:0442: 7B           	tdc
  2273 00:0443: 69 05 00     	adc	#<L79+krcBuffer_1
  2274 00:0446: 48           	pha
  2275 00:0447: 22 xx xx xx  	jsl	~~k_get_c256_minor_version
  2276                        ;	pos = k_put_string(pos,line,krcBuffer,15,0);
  2277                        	.line	290
  2278 00:044B: F4 00 00     	pea	#<$0
  2279 00:044E: F4 0F 00     	pea	#<$f
  2280 00:0451: F4 00 00     	pea	#0
  2281 00:0454: 18           	clc
  2282 00:0455: 7B           	tdc
  2283 00:0456: 69 05 00     	adc	#<L79+krcBuffer_1
  2284 00:0459: 48           	pha
  2285 00:045A: D4 1C        	pei	<L78+line_0
  2286 00:045C: D4 15        	pei	<L79+pos_1
  2287 00:045E: 22 xx xx xx  	jsl	~~k_put_string
  2288 00:0462: 85 15        	sta	<L79+pos_1
  2289                        ;
  Mon Aug  9 2021 16:52                                                Page 43


  2290                        ;	pos  = offset;
  2291                        	.line	292
  2292 00:0464: A5 1A        	lda	<L78+offset_0
  2293 00:0466: 85 15        	sta	<L79+pos_1
  2294                        ;	line++;
  2295                        	.line	293
  2296 00:0468: E6 1C        	inc	<L78+line_0
  2297                        ;
  2298                        ;	pos = k_put_string(pos,line,"FPGA Date :",15,0);
  2299                        	.line	295
  2300 00:046A: F4 00 00     	pea	#<$0
  2301 00:046D: F4 0F 00     	pea	#<$f
  2302 00:0470: F4 xx xx     	pea	#^L26+179
  2303 00:0473: F4 xx xx     	pea	#<L26+179
  2304 00:0476: D4 1C        	pei	<L78+line_0
  2305 00:0478: D4 15        	pei	<L79+pos_1
  2306 00:047A: 22 xx xx xx  	jsl	~~k_put_string
  2307 00:047E: 85 15        	sta	<L79+pos_1
  2308                        ;	k_get_fpga_date_month(krcBuffer);
  2309                        	.line	296
  2310 00:0480: F4 00 00     	pea	#0
  2311 00:0483: 18           	clc
  2312 00:0484: 7B           	tdc
  2313 00:0485: 69 05 00     	adc	#<L79+krcBuffer_1
  2314 00:0488: 48           	pha
  2315 00:0489: 22 xx xx xx  	jsl	~~k_get_fpga_date_month
  2316                        ;	pos = k_put_string(pos,line,k_strip_padding(krcB
                    uffer),15,0);
  2317                        	.line	297
  2318 00:048D: F4 00 00     	pea	#<$0
  2319 00:0490: F4 0F 00     	pea	#<$f
  2320 00:0493: F4 00 00     	pea	#0
  2321 00:0496: 18           	clc
  2322 00:0497: 7B           	tdc
  2323 00:0498: 69 05 00     	adc	#<L79+krcBuffer_1
  2324 00:049B: 48           	pha
  2325 00:049C: 22 xx xx xx  	jsl	~~k_strip_padding
  2326 00:04A0: 85 01        	sta	<R0
  2327 00:04A2: 86 03        	stx	<R0+2
  2328 00:04A4: DA           	phx
  2329 00:04A5: 48           	pha
  2330 00:04A6: D4 1C        	pei	<L78+line_0
  2331 00:04A8: D4 15        	pei	<L79+pos_1
  2332 00:04AA: 22 xx xx xx  	jsl	~~k_put_string
  2333 00:04AE: 85 15        	sta	<L79+pos_1
  2334                        ;	pos = k_put_string(pos,line,"/",15,0);
  2335                        	.line	298
  2336 00:04B0: F4 00 00     	pea	#<$0
  2337 00:04B3: F4 0F 00     	pea	#<$f
  2338 00:04B6: F4 xx xx     	pea	#^L26+191
  2339 00:04B9: F4 xx xx     	pea	#<L26+191
  2340 00:04BC: D4 1C        	pei	<L78+line_0
  2341 00:04BE: D4 15        	pei	<L79+pos_1
  2342 00:04C0: 22 xx xx xx  	jsl	~~k_put_string
  2343 00:04C4: 85 15        	sta	<L79+pos_1
  2344                        ;	k_get_fpga_date_day(krcBuffer);
  2345                        	.line	299
  2346 00:04C6: F4 00 00     	pea	#0
  Mon Aug  9 2021 16:52                                                Page 44


  2347 00:04C9: 18           	clc
  2348 00:04CA: 7B           	tdc
  2349 00:04CB: 69 05 00     	adc	#<L79+krcBuffer_1
  2350 00:04CE: 48           	pha
  2351 00:04CF: 22 xx xx xx  	jsl	~~k_get_fpga_date_day
  2352                        ;	pos = k_put_string(pos,line,k_strip_padding(krcB
                    uffer),15,0);
  2353                        	.line	300
  2354 00:04D3: F4 00 00     	pea	#<$0
  2355 00:04D6: F4 0F 00     	pea	#<$f
  2356 00:04D9: F4 00 00     	pea	#0
  2357 00:04DC: 18           	clc
  2358 00:04DD: 7B           	tdc
  2359 00:04DE: 69 05 00     	adc	#<L79+krcBuffer_1
  2360 00:04E1: 48           	pha
  2361 00:04E2: 22 xx xx xx  	jsl	~~k_strip_padding
  2362 00:04E6: 85 01        	sta	<R0
  2363 00:04E8: 86 03        	stx	<R0+2
  2364 00:04EA: DA           	phx
  2365 00:04EB: 48           	pha
  2366 00:04EC: D4 1C        	pei	<L78+line_0
  2367 00:04EE: D4 15        	pei	<L79+pos_1
  2368 00:04F0: 22 xx xx xx  	jsl	~~k_put_string
  2369 00:04F4: 85 15        	sta	<L79+pos_1
  2370                        ;	pos = k_put_string(pos,line,"/",15,0);
  2371                        	.line	301
  2372 00:04F6: F4 00 00     	pea	#<$0
  2373 00:04F9: F4 0F 00     	pea	#<$f
  2374 00:04FC: F4 xx xx     	pea	#^L26+193
  2375 00:04FF: F4 xx xx     	pea	#<L26+193
  2376 00:0502: D4 1C        	pei	<L78+line_0
  2377 00:0504: D4 15        	pei	<L79+pos_1
  2378 00:0506: 22 xx xx xx  	jsl	~~k_put_string
  2379 00:050A: 85 15        	sta	<L79+pos_1
  2380                        ;	k_get_fpga_date_year(krcBuffer);
  2381                        	.line	302
  2382 00:050C: F4 00 00     	pea	#0
  2383 00:050F: 18           	clc
  2384 00:0510: 7B           	tdc
  2385 00:0511: 69 05 00     	adc	#<L79+krcBuffer_1
  2386 00:0514: 48           	pha
  2387 00:0515: 22 xx xx xx  	jsl	~~k_get_fpga_date_year
  2388                        ;	pos = k_put_string(pos,line,k_strip_padding(krcB
                    uffer),15,0);
  2389                        	.line	303
  2390 00:0519: F4 00 00     	pea	#<$0
  2391 00:051C: F4 0F 00     	pea	#<$f
  2392 00:051F: F4 00 00     	pea	#0
  2393 00:0522: 18           	clc
  2394 00:0523: 7B           	tdc
  2395 00:0524: 69 05 00     	adc	#<L79+krcBuffer_1
  2396 00:0527: 48           	pha
  2397 00:0528: 22 xx xx xx  	jsl	~~k_strip_padding
  2398 00:052C: 85 01        	sta	<R0
  2399 00:052E: 86 03        	stx	<R0+2
  2400 00:0530: DA           	phx
  2401 00:0531: 48           	pha
  2402 00:0532: D4 1C        	pei	<L78+line_0
  Mon Aug  9 2021 16:52                                                Page 45


  2403 00:0534: D4 15        	pei	<L79+pos_1
  2404 00:0536: 22 xx xx xx  	jsl	~~k_put_string
  2405 00:053A: 85 15        	sta	<L79+pos_1
  2406                        ;
  2407                        ;
  2408                        ;	return line;
  2409                        	.line	306
  2410 00:053C: A5 1C        	lda	<L78+line_0
  2411                        L81:
  2412 00:053E: A8           	tay
  2413 00:053F: A5 18        	lda	<L78+2
  2414 00:0541: 85 1C        	sta	<L78+2+4
  2415 00:0543: A5 17        	lda	<L78+1
  2416 00:0545: 85 1B        	sta	<L78+1+4
  2417 00:0547: 2B           	pld
  2418 00:0548: 3B           	tsc
  2419 00:0549: 18           	clc
  2420 00:054A: 69 1A 00     	adc	#L78+4
  2421 00:054D: 1B           	tcs
  2422 00:054E: 98           	tya
  2423 00:054F: 6B           	rtl
  2424                        ;}
  2425                        	.line	307
  2426                        	.endblock	307
  2427             00000016   L78	equ	22
  2428             00000005   L79	equ	5
  2429                        	ends
  2430                        	efunc
  2431                        	.endfunc	307,5,22
  2432                        	.line	307
  2433                        	data
  2434                        L26:
  2435 00:0061: 20 20 0B 0C  	db	$20,$20,$0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C,
                    $0B,$0C,$20,$43,$32
       00:0065: 0B 0C 0B 0C 
       00:0069: 0B 0C 0B 0C 
       00:006D: 20 43 32 
  2436 00:0070: 35 36 20 46  	db	$35,$36,$20,$46,$6F,$65,$6E,$69,$78,$20,
                    $44,$65,$76,$65,$6C
       00:0074: 6F 65 6E 69 
       00:0078: 78 20 44 65 
       00:007C: 76 65 6C 
  2437 00:007F: 6F 70 6D 65  	db	$6F,$70,$6D,$65,$6E,$74,$20,$53,$79,$73,
                    $74,$65,$6D,$00,$1D
       00:0083: 6E 74 20 53 
       00:0087: 79 73 74 65 
       00:008B: 6D 00 1D 
  2438 00:008E: 1D 1D 1D 8D  	db	$1D,$1D,$1D,$FFFFFF8D,$FFFFFF8D,$4D,$4D,
                    $2D,$2D,$5D,$5D,$00,$20,$0B,$0C
       00:0092: 8D 4D 4D 2D 
       00:0096: 2D 5D 5D 00 
       00:009A: 20 0B 0C 
  2439 00:009D: 0B 0C 0B 0C  	db	$0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C,$20,$20,
                    $41,$20,$68,$61,$72
       00:00A1: 0B 0C 0B 0C 
       00:00A5: 20 20 41 20 
       00:00A9: 68 61 72 
  2440 00:00AC: 64 77 61 72  	db	$64,$77,$61,$72,$65,$20,$70,$6C,$61,$74,
  Mon Aug  9 2021 16:52                                                Page 46


                    $66,$6F,$72,$6D,$20
       00:00B0: 65 20 70 6C 
       00:00B4: 61 74 66 6F 
       00:00B8: 72 6D 20 
  2441 00:00BB: 63 72 61 66  	db	$63,$72,$61,$66,$74,$65,$64,$20,$62,$79,
                    $3A,$20,$53,$74,$65
       00:00BF: 74 65 64 20 
       00:00C3: 62 79 3A 20 
       00:00C7: 53 74 65 
  2442 00:00CA: 66 61 6E 79  	db	$66,$61,$6E,$79,$20,$41,$6C,$6C,$61,$69,
                    $72,$65,$00,$1D,$1D
       00:00CE: 20 41 6C 6C 
       00:00D2: 61 69 72 65 
       00:00D6: 00 1D 1D 
  2443 00:00D9: 1D 8D 8D 4D  	db	$1D,$FFFFFF8D,$FFFFFF8D,$4D,$4D,$2D,$2D,
                    $5D,$5D,$5D,$00,$0B,$0C,$0B,$0C
       00:00DD: 4D 2D 2D 5D 
       00:00E1: 5D 5D 00 0B 
       00:00E5: 0C 0B 0C 
  2444 00:00E8: 0B 0C 0B 0C  	db	$0B,$0C,$0B,$0C,$0B,$0C,$20,$20,$20,$00,
                    $1D,$1D,$FFFFFF8D,$FFFFFF8D,$4D
       00:00EC: 0B 0C 20 20 
       00:00F0: 20 00 1D 1D 
       00:00F4: 8D 8D 4D 
  2445 00:00F7: 4D 2D 2D 5D  	db	$4D,$2D,$2D,$5D,$5D,$5D,$5D,$00,$43,$32,
                    $35,$36,$20,$42,$6F
       00:00FB: 5D 5D 5D 00 
       00:00FF: 43 32 35 36 
       00:0103: 20 42 6F 
  2446 00:0106: 61 72 64 20  	db	$61,$72,$64,$20,$52,$65,$76,$69,$73,$69,
                    $6F,$6E,$3A,$00,$46
       00:010A: 52 65 76 69 
       00:010E: 73 69 6F 6E 
       00:0112: 3A 00 46 
  2447 00:0115: 50 47 41 20  	db	$50,$47,$41,$20,$44,$61,$74,$65,$20,$3A,
                    $00,$2F,$00,$2F,$00
       00:0119: 44 61 74 65 
       00:011D: 20 3A 00 2F 
       00:0121: 00 2F 00 
  2448 00:0124:              	ends
  2449                        ;
  2450                        ;/*
  2451                        ; *
  2452                        ; *
  2453                        ; *
  2454                        ; *
  2455                        ; */
  2456                        ;void k_delay(int millisecs)
  2457                        ;{
  2458                        	.line	315
  2459                        	.line	316
  2460                        	code
  2461                        	xdef	~~k_delay
  2462                        	func
  2463                        	.function	316
  2464                        ~~k_delay:
  2465                        	longa	on
  2466                        	longi	on
  Mon Aug  9 2021 16:52                                                Page 47


  2467 00:0550: 3B           	tsc
  2468 00:0551: 38           	sec
  2469 00:0552: E9 04 00     	sbc	#L83
  2470 00:0555: 1B           	tcs
  2471 00:0556: 0B           	phd
  2472 00:0557: 5B           	tcd
  2473             00000004   millisecs_0	set	4
  2474                        	.block	316
  2475                        ;	int y = 0;
  2476                        ;	int i = 0;
  2477                        ;
  2478                        ;	for(y=0;y<millisecs;y++)
  2479             00000000   y_1	set	0
  2480             00000002   i_1	set	2
  2481                        	.sym	y,0,5,1,16
  2482                        	.sym	i,2,5,1,16
  2483                        	.sym	millisecs,4,5,6,16
  2484 00:0558: 64 01        	stz	<L84+y_1
  2485 00:055A: 64 03        	stz	<L84+i_1
  2486                        	.line	320
  2487 00:055C: 64 01        	stz	<L84+y_1
  2488 00:055E: 82 17 00     	brl	L10020
  2489                        L10019:
  2490                        ;	{
  2491                        	.line	321
  2492                        ;		for(i=0;i<0xFF;i++)
  2493                        	.line	322
  2494 00:0561: 64 03        	stz	<L84+i_1
  2495                        L10023:
  2496                        ;		{
  2497                        	.line	323
  2498                        ;			asm NOP;
  2499                        	.line	324
  2500                        	asmstart
  2501 00:0563: EA           	NOP
  2502                        	asmend
  2503                        ;		}
  2504                        	.line	325
  2505                        L10021:
  2506 00:0564: E6 03        	inc	<L84+i_1
  2507 00:0566: 38           	sec
  2508 00:0567: A5 03        	lda	<L84+i_1
  2509 00:0569: E9 FF 00     	sbc	#<$ff
  2510 00:056C: 70 03        	bvs	L86
  2511 00:056E: 49 00 80     	eor	#$8000
  2512                        L86:
  2513 00:0571: 30 03        	bmi	L87
  2514 00:0573: 82 ED FF     	brl	L10023
  2515                        L87:
  2516                        L10022:
  2517                        ;	}
  2518                        	.line	326
  2519                        L10017:
  2520 00:0576: E6 01        	inc	<L84+y_1
  2521                        L10020:
  2522 00:0578: 38           	sec
  2523 00:0579: A5 01        	lda	<L84+y_1
  2524 00:057B: E5 08        	sbc	<L83+millisecs_0
  Mon Aug  9 2021 16:52                                                Page 48


  2525 00:057D: 70 03        	bvs	L88
  2526 00:057F: 49 00 80     	eor	#$8000
  2527                        L88:
  2528 00:0582: 30 03        	bmi	L89
  2529 00:0584: 82 DA FF     	brl	L10019
  2530                        L89:
  2531                        L10018:
  2532                        ;}
  2533                        	.line	327
  2534                        L90:
  2535 00:0587: A5 06        	lda	<L83+2
  2536 00:0589: 85 08        	sta	<L83+2+2
  2537 00:058B: A5 05        	lda	<L83+1
  2538 00:058D: 85 07        	sta	<L83+1+2
  2539 00:058F: 2B           	pld
  2540 00:0590: 3B           	tsc
  2541 00:0591: 18           	clc
  2542 00:0592: 69 06 00     	adc	#L83+2
  2543 00:0595: 1B           	tcs
  2544 00:0596: 6B           	rtl
  2545                        	.endblock	327
  2546             00000004   L83	equ	4
  2547             00000001   L84	equ	1
  2548                        	ends
  2549                        	efunc
  2550                        	.endfunc	327,1,4
  2551                        	.line	327
  2552                        ;/*
  2553                        ; *
  2554                        ; *
  2555                        ; *
  2556                        ; *
  2557                        ; */
  2558                        ;void k_debug_string(char FAR* debugString)
  2559                        ;{
  2560                        	.line	334
  2561                        	.line	335
  2562                        	code
  2563                        	xdef	~~k_debug_string
  2564                        	func
  2565                        	.function	335
  2566                        ~~k_debug_string:
  2567                        	longa	on
  2568                        	longi	on
  2569 00:0597: 3B           	tsc
  2570 00:0598: 38           	sec
  2571 00:0599: E9 00 00     	sbc	#L91
  2572 00:059C: 1B           	tcs
  2573 00:059D: 0B           	phd
  2574 00:059E: 5B           	tcd
  2575             00000004   debugString_0	set	4
  2576                        	.block	335
  2577                        ;#ifdef USE_FX256_FMX
  2578                        ;	k_debug_string_com1(debugString);
  2579                        ;#elif USE_FX256_U
  2580                        ;	k_debug_string_com1(debugString);
  2581                        	.sym	debugString,4,142,6,32
  2582                        	.line	339
  Mon Aug  9 2021 16:52                                                Page 49


  2583 00:059F: D4 06        	pei	<L91+debugString_0+2
  2584 00:05A1: D4 04        	pei	<L91+debugString_0
  2585 00:05A3: 22 xx xx xx  	jsl	~~k_debug_string_com1
  2586                        ;#else
  2587                        ;	//k_debug_string_com2(debugString);
  2588                        ;	k_debug_string_com1(debugString);
  2589                        ;#endif
  2590                        ;}
  2591                        	.line	344
  2592                        L94:
  2593 00:05A7: A5 02        	lda	<L91+2
  2594 00:05A9: 85 06        	sta	<L91+2+4
  2595 00:05AB: A5 01        	lda	<L91+1
  2596 00:05AD: 85 05        	sta	<L91+1+4
  2597 00:05AF: 2B           	pld
  2598 00:05B0: 3B           	tsc
  2599 00:05B1: 18           	clc
  2600 00:05B2: 69 04 00     	adc	#L91+4
  2601 00:05B5: 1B           	tcs
  2602 00:05B6: 6B           	rtl
  2603                        	.endblock	344
  2604             00000000   L91	equ	0
  2605             00000001   L92	equ	1
  2606                        	ends
  2607                        	efunc
  2608                        	.endfunc	344,1,0
  2609                        	.line	344
  2610                        ;
  2611                        ;VOID k_DebugOutString(VOID)
  2612                        ;{
  2613                        	.line	346
  2614                        	.line	347
  2615                        	code
  2616                        	xdef	~~k_DebugOutString
  2617                        	func
  2618                        	.function	347
  2619                        ~~k_DebugOutString:
  2620                        	longa	on
  2621                        	longi	on
  2622 00:05B7: 3B           	tsc
  2623 00:05B8: 38           	sec
  2624 00:05B9: E9 00 00     	sbc	#L95
  2625 00:05BC: 1B           	tcs
  2626 00:05BD: 0B           	phd
  2627 00:05BE: 5B           	tcd
  2628                        	.block	347
  2629                        ;	//PFXZEROPAGE zp = k_getZeroPage();
  2630                        ;
  2631                        ;	//k_debug_pointer("k_DebugOutString1:",zp->kerne
                    lFunctionCallParameter);
  2632                        ;
  2633                        ;
  2634                        ;	//k_debug_string(zp->kernelFunctionCallParameter
                    );
  2635                        ;	k_debug_string("k_DebugOutString!!!!\r\n");
  2636                        	.line	354
  2637 00:05BF: F4 xx xx     	pea	#^L82
  2638 00:05C2: F4 xx xx     	pea	#<L82
  Mon Aug  9 2021 16:52                                                Page 50


  2639 00:05C5: 22 xx xx xx  	jsl	~~k_debug_string
  2640                        ;
  2641                        ;}
  2642                        	.line	356
  2643                        L98:
  2644 00:05C9: 2B           	pld
  2645 00:05CA: 3B           	tsc
  2646 00:05CB: 18           	clc
  2647 00:05CC: 69 00 00     	adc	#L95
  2648 00:05CF: 1B           	tcs
  2649 00:05D0: 6B           	rtl
  2650                        	.endblock	356
  2651             00000000   L95	equ	0
  2652             00000001   L96	equ	1
  2653                        	ends
  2654                        	efunc
  2655                        	.endfunc	356,1,0
  2656                        	.line	356
  2657                        	data
  2658                        L82:
  2659 00:0124: 6B 5F 44 65  	db	$6B,$5F,$44,$65,$62,$75,$67,$4F,$75,$74,
                    $53,$74,$72,$69,$6E
       00:0128: 62 75 67 4F 
       00:012C: 75 74 53 74 
       00:0130: 72 69 6E 
  2660 00:0133: 67 21 21 21  	db	$67,$21,$21,$21,$21,$0D,$0A,$00
       00:0137: 21 0D 0A 00 
  2661 00:013B:              	ends
  2662                        ;
  2663                        ;void k_debug_nstring(char FAR* debugString,int ns
                    ize)
  2664                        ;{
  2665                        	.line	358
  2666                        	.line	359
  2667                        	code
  2668                        	xdef	~~k_debug_nstring
  2669                        	func
  2670                        	.function	359
  2671                        ~~k_debug_nstring:
  2672                        	longa	on
  2673                        	longi	on
  2674 00:05D1: 3B           	tsc
  2675 00:05D2: 38           	sec
  2676 00:05D3: E9 00 00     	sbc	#L100
  2677 00:05D6: 1B           	tcs
  2678 00:05D7: 0B           	phd
  2679 00:05D8: 5B           	tcd
  2680             00000004   debugString_0	set	4
  2681             00000008   nsize_0	set	8
  2682                        	.block	359
  2683                        ;	//k_debug_nstring_com2(debugString,nsize);
  2684                        ;	//k_debug_nstring_com1(debugString,nsize);
  2685                        ;#ifdef USE_FX256_FMX
  2686                        ;	k_debug_nstring_com1(debugString,nsize);
  2687                        ;#elif USE_FX256_U
  2688                        ;	k_debug_nstring_com2(debugString,nsize);
  2689                        	.sym	debugString,4,142,6,32
  2690                        	.sym	nsize,8,5,6,16
  Mon Aug  9 2021 16:52                                                Page 51


  2691                        	.line	365
  2692 00:05D9: D4 08        	pei	<L100+nsize_0
  2693 00:05DB: D4 06        	pei	<L100+debugString_0+2
  2694 00:05DD: D4 04        	pei	<L100+debugString_0
  2695 00:05DF: 22 xx xx xx  	jsl	~~k_debug_nstring_com2
  2696                        ;#else
  2697                        ;	//k_debug_nstring_com2(debugString,nsize);
  2698                        ;	k_debug_nstring_com1(debugString,nsize);
  2699                        ;#endif
  2700                        ;}
  2701                        	.line	370
  2702                        L103:
  2703 00:05E3: A5 02        	lda	<L100+2
  2704 00:05E5: 85 08        	sta	<L100+2+6
  2705 00:05E7: A5 01        	lda	<L100+1
  2706 00:05E9: 85 07        	sta	<L100+1+6
  2707 00:05EB: 2B           	pld
  2708 00:05EC: 3B           	tsc
  2709 00:05ED: 18           	clc
  2710 00:05EE: 69 06 00     	adc	#L100+6
  2711 00:05F1: 1B           	tcs
  2712 00:05F2: 6B           	rtl
  2713                        	.endblock	370
  2714             00000000   L100	equ	0
  2715             00000001   L101	equ	1
  2716                        	ends
  2717                        	efunc
  2718                        	.endfunc	370,1,0
  2719                        	.line	370
  2720                        ;
  2721                        ;/*
  2722                        ; *
  2723                        ; *
  2724                        ; *
  2725                        ; *
  2726                        ; */
  2727                        ;void k_debug_string_com1(char FAR* debugString)
  2728                        ;{
  2729                        	.line	378
  2730                        	.line	379
  2731                        	code
  2732                        	xdef	~~k_debug_string_com1
  2733                        	func
  2734                        	.function	379
  2735                        ~~k_debug_string_com1:
  2736                        	longa	on
  2737                        	longi	on
  2738 00:05F3: 3B           	tsc
  2739 00:05F4: 38           	sec
  2740 00:05F5: E9 04 00     	sbc	#L104
  2741 00:05F8: 1B           	tcs
  2742 00:05F9: 0B           	phd
  2743 00:05FA: 5B           	tcd
  2744             00000004   debugString_0	set	4
  2745                        	.block	379
  2746                        ;	char FAR* ptr = debugString;
  2747                        ;
  2748                        ;	if(!k_user_IsOSDebug())
  Mon Aug  9 2021 16:52                                                Page 52


  2749             00000000   ptr_1	set	0
  2750                        	.sym	ptr,0,142,1,32
  2751                        	.sym	debugString,4,142,6,32
  2752 00:05FB: A5 08        	lda	<L104+debugString_0
  2753 00:05FD: 85 01        	sta	<L105+ptr_1
  2754 00:05FF: A5 0A        	lda	<L104+debugString_0+2
  2755 00:0601: 85 03        	sta	<L105+ptr_1+2
  2756                        	.line	382
  2757                        ;		return;
  2758 00:0603: 22 xx xx xx  	jsl	~~k_user_IsOSDebug
  2759 00:0607: 29 FF 00     	and	#$ff
  2760 00:060A: F0 03        	beq	L107
  2761 00:060C: 82 10 00     	brl	L10024
  2762                        L107:
  2763                        	.line	383
  2764                        L108:
  2765 00:060F: A5 06        	lda	<L104+2
  2766 00:0611: 85 0A        	sta	<L104+2+4
  2767 00:0613: A5 05        	lda	<L104+1
  2768 00:0615: 85 09        	sta	<L104+1+4
  2769 00:0617: 2B           	pld
  2770 00:0618: 3B           	tsc
  2771 00:0619: 18           	clc
  2772 00:061A: 69 08 00     	adc	#L104+4
  2773 00:061D: 1B           	tcs
  2774 00:061E: 6B           	rtl
  2775                        ;
  2776                        ;	k_lock_irq();
  2777                        L10024:
  2778                        	.line	385
  2779 00:061F: 22 xx xx xx  	jsl	~~k_lock_irq
  2780                        ;	while(*ptr)
  2781                        	.line	386
  2782                        L10025:
  2783 00:0623: A7 01        	lda	[<L105+ptr_1]
  2784 00:0625: 29 FF 00     	and	#$ff
  2785 00:0628: D0 03        	bne	L109
  2786 00:062A: 82 25 00     	brl	L10026
  2787                        L109:
  2788                        ;	{
  2789                        	.line	387
  2790                        ;		while(!(UART1_BASE[5] & 0x20))
  2791                        	.line	388
  2792                        L10027:
  2793 00:062D: E2 20        	sep	#$20
  2794                        	longa	off
  2795 00:062F: AF FD 18 AF  	lda	>11475197	; volatile
  2796 00:0633: 29 20        	and	#<$20
  2797 00:0635: C2 20        	rep	#$20
  2798                        	longa	on
  2799 00:0637: F0 03        	beq	L110
  2800 00:0639: 82 03 00     	brl	L10028
  2801                        L110:
  2802                        ;		{
  2803                        	.line	389
  2804                        ;		}
  2805                        	.line	390
  2806 00:063C: 82 EE FF     	brl	L10027
  Mon Aug  9 2021 16:52                                                Page 53


  2807                        L10028:
  2808                        ;		UART1_BASE[0] = *ptr;
  2809                        	.line	391
  2810 00:063F: E2 20        	sep	#$20
  2811                        	longa	off
  2812 00:0641: A7 01        	lda	[<L105+ptr_1]
  2813 00:0643: 8F F8 18 AF  	sta	>11475192	; volatile
  2814 00:0647: C2 20        	rep	#$20
  2815                        	longa	on
  2816                        ;		ptr++;
  2817                        	.line	392
  2818 00:0649: E6 01        	inc	<L105+ptr_1
  2819 00:064B: D0 02        	bne	L111
  2820 00:064D: E6 03        	inc	<L105+ptr_1+2
  2821                        L111:
  2822                        ;	}
  2823                        	.line	393
  2824 00:064F: 82 D1 FF     	brl	L10025
  2825                        L10026:
  2826                        ;	k_unlock_irq();
  2827                        	.line	394
  2828 00:0652: 22 xx xx xx  	jsl	~~k_unlock_irq
  2829                        ;	return;
  2830                        	.line	395
  2831 00:0656: 82 B6 FF     	brl	L108
  2832                        ;}
  2833                        	.line	396
  2834                        	.endblock	396
  2835             00000004   L104	equ	4
  2836             00000001   L105	equ	1
  2837                        	ends
  2838                        	efunc
  2839                        	.endfunc	396,1,4
  2840                        	.line	396
  2841                        ;/*
  2842                        ; *
  2843                        ; *
  2844                        ; *
  2845                        ; *
  2846                        ; */
  2847                        ;
  2848                        ;void k_debug_string_com2(char FAR* debugString)
  2849                        ;{
  2850                        	.line	404
  2851                        	.line	405
  2852                        	code
  2853                        	xdef	~~k_debug_string_com2
  2854                        	func
  2855                        	.function	405
  2856                        ~~k_debug_string_com2:
  2857                        	longa	on
  2858                        	longi	on
  2859 00:0659: 3B           	tsc
  2860 00:065A: 38           	sec
  2861 00:065B: E9 04 00     	sbc	#L112
  2862 00:065E: 1B           	tcs
  2863 00:065F: 0B           	phd
  2864 00:0660: 5B           	tcd
  Mon Aug  9 2021 16:52                                                Page 54


  2865             00000004   debugString_0	set	4
  2866                        	.block	405
  2867                        ;	char FAR* ptr = debugString;
  2868                        ;
  2869                        ;	if(!k_user_IsOSDebug())
  2870             00000000   ptr_1	set	0
  2871                        	.sym	ptr,0,142,1,32
  2872                        	.sym	debugString,4,142,6,32
  2873 00:0661: A5 08        	lda	<L112+debugString_0
  2874 00:0663: 85 01        	sta	<L113+ptr_1
  2875 00:0665: A5 0A        	lda	<L112+debugString_0+2
  2876 00:0667: 85 03        	sta	<L113+ptr_1+2
  2877                        	.line	408
  2878                        ;		return;
  2879 00:0669: 22 xx xx xx  	jsl	~~k_user_IsOSDebug
  2880 00:066D: 29 FF 00     	and	#$ff
  2881 00:0670: F0 03        	beq	L115
  2882 00:0672: 82 10 00     	brl	L10029
  2883                        L115:
  2884                        	.line	409
  2885                        L116:
  2886 00:0675: A5 06        	lda	<L112+2
  2887 00:0677: 85 0A        	sta	<L112+2+4
  2888 00:0679: A5 05        	lda	<L112+1
  2889 00:067B: 85 09        	sta	<L112+1+4
  2890 00:067D: 2B           	pld
  2891 00:067E: 3B           	tsc
  2892 00:067F: 18           	clc
  2893 00:0680: 69 08 00     	adc	#L112+4
  2894 00:0683: 1B           	tcs
  2895 00:0684: 6B           	rtl
  2896                        ;
  2897                        ;	k_lock_irq();
  2898                        L10029:
  2899                        	.line	411
  2900 00:0685: 22 xx xx xx  	jsl	~~k_lock_irq
  2901                        ;	while(*ptr)
  2902                        	.line	412
  2903                        L10030:
  2904 00:0689: A7 01        	lda	[<L113+ptr_1]
  2905 00:068B: 29 FF 00     	and	#$ff
  2906 00:068E: D0 03        	bne	L117
  2907 00:0690: 82 25 00     	brl	L10031
  2908                        L117:
  2909                        ;	{
  2910                        	.line	413
  2911                        ;		while(!(UART2_BASE[5] & 0x20))
  2912                        	.line	414
  2913                        L10032:
  2914 00:0693: E2 20        	sep	#$20
  2915                        	longa	off
  2916 00:0695: AF FD 18 AF  	lda	>11475197	; volatile
  2917 00:0699: 29 20        	and	#<$20
  2918 00:069B: C2 20        	rep	#$20
  2919                        	longa	on
  2920 00:069D: F0 03        	beq	L118
  2921 00:069F: 82 03 00     	brl	L10033
  2922                        L118:
  Mon Aug  9 2021 16:52                                                Page 55


  2923                        ;		{
  2924                        	.line	415
  2925                        ;		}
  2926                        	.line	416
  2927 00:06A2: 82 EE FF     	brl	L10032
  2928                        L10033:
  2929                        ;		UART2_BASE[0] = *ptr;
  2930                        	.line	417
  2931 00:06A5: E2 20        	sep	#$20
  2932                        	longa	off
  2933 00:06A7: A7 01        	lda	[<L113+ptr_1]
  2934 00:06A9: 8F F8 18 AF  	sta	>11475192	; volatile
  2935 00:06AD: C2 20        	rep	#$20
  2936                        	longa	on
  2937                        ;		ptr++;
  2938                        	.line	418
  2939 00:06AF: E6 01        	inc	<L113+ptr_1
  2940 00:06B1: D0 02        	bne	L119
  2941 00:06B3: E6 03        	inc	<L113+ptr_1+2
  2942                        L119:
  2943                        ;	}
  2944                        	.line	419
  2945 00:06B5: 82 D1 FF     	brl	L10030
  2946                        L10031:
  2947                        ;	k_unlock_irq();
  2948                        	.line	420
  2949 00:06B8: 22 xx xx xx  	jsl	~~k_unlock_irq
  2950                        ;	return;
  2951                        	.line	421
  2952 00:06BC: 82 B6 FF     	brl	L116
  2953                        ;}
  2954                        	.line	422
  2955                        	.endblock	422
  2956             00000004   L112	equ	4
  2957             00000001   L113	equ	1
  2958                        	ends
  2959                        	efunc
  2960                        	.endfunc	422,1,4
  2961                        	.line	422
  2962                        ;
  2963                        ;void k_debug_nstring_com1(char FAR* debugString,i
                    nt nsize)
  2964                        ;{
  2965                        	.line	424
  2966                        	.line	425
  2967                        	code
  2968                        	xdef	~~k_debug_nstring_com1
  2969                        	func
  2970                        	.function	425
  2971                        ~~k_debug_nstring_com1:
  2972                        	longa	on
  2973                        	longi	on
  2974 00:06BF: 3B           	tsc
  2975 00:06C0: 38           	sec
  2976 00:06C1: E9 06 00     	sbc	#L120
  2977 00:06C4: 1B           	tcs
  2978 00:06C5: 0B           	phd
  2979 00:06C6: 5B           	tcd
  Mon Aug  9 2021 16:52                                                Page 56


  2980             00000004   debugString_0	set	4
  2981             00000008   nsize_0	set	8
  2982                        	.block	425
  2983                        ;	int i = 0;
  2984                        ;	char FAR* ptr = debugString;
  2985                        ;
  2986                        ;	if(!k_user_IsOSDebug())
  2987             00000000   i_1	set	0
  2988             00000002   ptr_1	set	2
  2989                        	.sym	i,0,5,1,16
  2990                        	.sym	ptr,2,142,1,32
  2991                        	.sym	debugString,4,142,6,32
  2992                        	.sym	nsize,8,5,6,16
  2993 00:06C7: 64 01        	stz	<L121+i_1
  2994 00:06C9: A5 0A        	lda	<L120+debugString_0
  2995 00:06CB: 85 03        	sta	<L121+ptr_1
  2996 00:06CD: A5 0C        	lda	<L120+debugString_0+2
  2997 00:06CF: 85 05        	sta	<L121+ptr_1+2
  2998                        	.line	429
  2999                        ;		return;
  3000 00:06D1: 22 xx xx xx  	jsl	~~k_user_IsOSDebug
  3001 00:06D5: 29 FF 00     	and	#$ff
  3002 00:06D8: F0 03        	beq	L123
  3003 00:06DA: 82 10 00     	brl	L10034
  3004                        L123:
  3005                        	.line	430
  3006                        L124:
  3007 00:06DD: A5 08        	lda	<L120+2
  3008 00:06DF: 85 0E        	sta	<L120+2+6
  3009 00:06E1: A5 07        	lda	<L120+1
  3010 00:06E3: 85 0D        	sta	<L120+1+6
  3011 00:06E5: 2B           	pld
  3012 00:06E6: 3B           	tsc
  3013 00:06E7: 18           	clc
  3014 00:06E8: 69 0C 00     	adc	#L120+6
  3015 00:06EB: 1B           	tcs
  3016 00:06EC: 6B           	rtl
  3017                        ;
  3018                        ;	for(i=0;i<nsize;i++)
  3019                        L10034:
  3020                        	.line	432
  3021 00:06ED: 64 01        	stz	<L121+i_1
  3022 00:06EF: 82 20 00     	brl	L10038
  3023                        L10037:
  3024                        ;	{
  3025                        	.line	433
  3026                        ;		while(!(UART1_BASE[5] & 0x20))
  3027                        	.line	434
  3028                        L10039:
  3029 00:06F2: E2 20        	sep	#$20
  3030                        	longa	off
  3031 00:06F4: AF FD 18 AF  	lda	>11475197	; volatile
  3032 00:06F8: 29 20        	and	#<$20
  3033 00:06FA: C2 20        	rep	#$20
  3034                        	longa	on
  3035 00:06FC: F0 03        	beq	L125
  3036 00:06FE: 82 03 00     	brl	L10040
  3037                        L125:
  Mon Aug  9 2021 16:52                                                Page 57


  3038                        ;		{
  3039                        	.line	435
  3040                        ;		}
  3041                        	.line	436
  3042 00:0701: 82 EE FF     	brl	L10039
  3043                        L10040:
  3044                        ;		//UART1_BASE[0] = *ptr;
  3045                        ;		//ptr++;
  3046                        ;		UART1_BASE[0] = debugString[i];
  3047                        	.line	439
  3048 00:0704: E2 20        	sep	#$20
  3049                        	longa	off
  3050 00:0706: A4 01        	ldy	<L121+i_1
  3051 00:0708: B7 0A        	lda	[<L120+debugString_0],Y
  3052 00:070A: 8F F8 18 AF  	sta	>11475192	; volatile
  3053 00:070E: C2 20        	rep	#$20
  3054                        	longa	on
  3055                        ;	}
  3056                        	.line	440
  3057                        L10035:
  3058 00:0710: E6 01        	inc	<L121+i_1
  3059                        L10038:
  3060 00:0712: 38           	sec
  3061 00:0713: A5 01        	lda	<L121+i_1
  3062 00:0715: E5 0E        	sbc	<L120+nsize_0
  3063 00:0717: 70 03        	bvs	L126
  3064 00:0719: 49 00 80     	eor	#$8000
  3065                        L126:
  3066 00:071C: 30 03        	bmi	L127
  3067 00:071E: 82 D1 FF     	brl	L10037
  3068                        L127:
  3069                        L10036:
  3070                        ;	return;
  3071                        	.line	441
  3072 00:0721: 82 B9 FF     	brl	L124
  3073                        ;}
  3074                        	.line	442
  3075                        	.endblock	442
  3076             00000006   L120	equ	6
  3077             00000001   L121	equ	1
  3078                        	ends
  3079                        	efunc
  3080                        	.endfunc	442,1,6
  3081                        	.line	442
  3082                        ;
  3083                        ;void k_debug_nstring_com2(char FAR* debugString,i
                    nt nsize)
  3084                        ;{
  3085                        	.line	444
  3086                        	.line	445
  3087                        	code
  3088                        	xdef	~~k_debug_nstring_com2
  3089                        	func
  3090                        	.function	445
  3091                        ~~k_debug_nstring_com2:
  3092                        	longa	on
  3093                        	longi	on
  3094 00:0724: 3B           	tsc
  Mon Aug  9 2021 16:52                                                Page 58


  3095 00:0725: 38           	sec
  3096 00:0726: E9 06 00     	sbc	#L128
  3097 00:0729: 1B           	tcs
  3098 00:072A: 0B           	phd
  3099 00:072B: 5B           	tcd
  3100             00000004   debugString_0	set	4
  3101             00000008   nsize_0	set	8
  3102                        	.block	445
  3103                        ;	int i = 0;
  3104                        ;	char FAR* ptr = debugString;
  3105                        ;
  3106                        ;	if(!k_user_IsOSDebug())
  3107             00000000   i_1	set	0
  3108             00000002   ptr_1	set	2
  3109                        	.sym	i,0,5,1,16
  3110                        	.sym	ptr,2,142,1,32
  3111                        	.sym	debugString,4,142,6,32
  3112                        	.sym	nsize,8,5,6,16
  3113 00:072C: 64 01        	stz	<L129+i_1
  3114 00:072E: A5 0A        	lda	<L128+debugString_0
  3115 00:0730: 85 03        	sta	<L129+ptr_1
  3116 00:0732: A5 0C        	lda	<L128+debugString_0+2
  3117 00:0734: 85 05        	sta	<L129+ptr_1+2
  3118                        	.line	449
  3119                        ;		return;
  3120 00:0736: 22 xx xx xx  	jsl	~~k_user_IsOSDebug
  3121 00:073A: 29 FF 00     	and	#$ff
  3122 00:073D: F0 03        	beq	L131
  3123 00:073F: 82 10 00     	brl	L10041
  3124                        L131:
  3125                        	.line	450
  3126                        L132:
  3127 00:0742: A5 08        	lda	<L128+2
  3128 00:0744: 85 0E        	sta	<L128+2+6
  3129 00:0746: A5 07        	lda	<L128+1
  3130 00:0748: 85 0D        	sta	<L128+1+6
  3131 00:074A: 2B           	pld
  3132 00:074B: 3B           	tsc
  3133 00:074C: 18           	clc
  3134 00:074D: 69 0C 00     	adc	#L128+6
  3135 00:0750: 1B           	tcs
  3136 00:0751: 6B           	rtl
  3137                        ;
  3138                        ;	for(i=0;i<nsize;i++)
  3139                        L10041:
  3140                        	.line	452
  3141 00:0752: 64 01        	stz	<L129+i_1
  3142 00:0754: 82 20 00     	brl	L10045
  3143                        L10044:
  3144                        ;	{
  3145                        	.line	453
  3146                        ;		while(!(UART2_BASE[5] & 0x20))
  3147                        	.line	454
  3148                        L10046:
  3149 00:0757: E2 20        	sep	#$20
  3150                        	longa	off
  3151 00:0759: AF FD 18 AF  	lda	>11475197	; volatile
  3152 00:075D: 29 20        	and	#<$20
  Mon Aug  9 2021 16:52                                                Page 59


  3153 00:075F: C2 20        	rep	#$20
  3154                        	longa	on
  3155 00:0761: F0 03        	beq	L133
  3156 00:0763: 82 03 00     	brl	L10047
  3157                        L133:
  3158                        ;		{
  3159                        	.line	455
  3160                        ;		}
  3161                        	.line	456
  3162 00:0766: 82 EE FF     	brl	L10046
  3163                        L10047:
  3164                        ;		//UART2_BASE[0] = *ptr;
  3165                        ;		//ptr++;
  3166                        ;		UART2_BASE[0] = debugString[i];
  3167                        	.line	459
  3168 00:0769: E2 20        	sep	#$20
  3169                        	longa	off
  3170 00:076B: A4 01        	ldy	<L129+i_1
  3171 00:076D: B7 0A        	lda	[<L128+debugString_0],Y
  3172 00:076F: 8F F8 18 AF  	sta	>11475192	; volatile
  3173 00:0773: C2 20        	rep	#$20
  3174                        	longa	on
  3175                        ;	}
  3176                        	.line	460
  3177                        L10042:
  3178 00:0775: E6 01        	inc	<L129+i_1
  3179                        L10045:
  3180 00:0777: 38           	sec
  3181 00:0778: A5 01        	lda	<L129+i_1
  3182 00:077A: E5 0E        	sbc	<L128+nsize_0
  3183 00:077C: 70 03        	bvs	L134
  3184 00:077E: 49 00 80     	eor	#$8000
  3185                        L134:
  3186 00:0781: 30 03        	bmi	L135
  3187 00:0783: 82 D1 FF     	brl	L10044
  3188                        L135:
  3189                        L10043:
  3190                        ;	return;
  3191                        	.line	461
  3192 00:0786: 82 B9 FF     	brl	L132
  3193                        ;}
  3194                        	.line	462
  3195                        	.endblock	462
  3196             00000006   L128	equ	6
  3197             00000001   L129	equ	1
  3198                        	ends
  3199                        	efunc
  3200                        	.endfunc	462,1,6
  3201                        	.line	462
  3202                        ;/*
  3203                        ; *
  3204                        ; *
  3205                        ; *
  3206                        ; *
  3207                        ; */
  3208                        ;
  3209                        ;
  3210                        ;void k_debug_char_com1(char c)
  Mon Aug  9 2021 16:52                                                Page 60


  3211                        ;{
  3212                        	.line	471
  3213                        	.line	472
  3214                        	code
  3215                        	xdef	~~k_debug_char_com1
  3216                        	func
  3217                        	.function	472
  3218                        ~~k_debug_char_com1:
  3219                        	longa	on
  3220                        	longi	on
  3221 00:0789: 3B           	tsc
  3222 00:078A: 38           	sec
  3223 00:078B: E9 00 00     	sbc	#L136
  3224 00:078E: 1B           	tcs
  3225 00:078F: 0B           	phd
  3226 00:0790: 5B           	tcd
  3227             00000004   c_0	set	4
  3228                        	.block	472
  3229                        ;	//if(!k_user_IsOSDebug())
  3230                        ;	//	return;
  3231                        ;
  3232                        ;	while(!(UART1_BASE[5] & 0x20))
  3233                        	.sym	c,4,14,6,8
  3234                        	.line	476
  3235                        L10048:
  3236 00:0791: E2 20        	sep	#$20
  3237                        	longa	off
  3238 00:0793: AF FD 18 AF  	lda	>11475197	; volatile
  3239 00:0797: 29 20        	and	#<$20
  3240 00:0799: C2 20        	rep	#$20
  3241                        	longa	on
  3242 00:079B: F0 03        	beq	L139
  3243 00:079D: 82 03 00     	brl	L10049
  3244                        L139:
  3245                        ;	{
  3246                        	.line	477
  3247                        ;	}
  3248                        	.line	478
  3249 00:07A0: 82 EE FF     	brl	L10048
  3250                        L10049:
  3251                        ;	UART1_BASE[0] = c;
  3252                        	.line	479
  3253 00:07A3: E2 20        	sep	#$20
  3254                        	longa	off
  3255 00:07A5: A5 04        	lda	<L136+c_0
  3256 00:07A7: 8F F8 18 AF  	sta	>11475192	; volatile
  3257 00:07AB: C2 20        	rep	#$20
  3258                        	longa	on
  3259                        ;
  3260                        ;	return;
  3261                        	.line	481
  3262                        L140:
  3263 00:07AD: A5 02        	lda	<L136+2
  3264 00:07AF: 85 04        	sta	<L136+2+2
  3265 00:07B1: A5 01        	lda	<L136+1
  3266 00:07B3: 85 03        	sta	<L136+1+2
  3267 00:07B5: 2B           	pld
  3268 00:07B6: 3B           	tsc
  Mon Aug  9 2021 16:52                                                Page 61


  3269 00:07B7: 18           	clc
  3270 00:07B8: 69 02 00     	adc	#L136+2
  3271 00:07BB: 1B           	tcs
  3272 00:07BC: 6B           	rtl
  3273                        ;}
  3274                        	.line	482
  3275                        	.endblock	482
  3276             00000000   L136	equ	0
  3277             00000001   L137	equ	1
  3278                        	ends
  3279                        	efunc
  3280                        	.endfunc	482,1,0
  3281                        	.line	482
  3282                        ;
  3283                        ;void k_debug_char_com2(char c)
  3284                        ;{
  3285                        	.line	484
  3286                        	.line	485
  3287                        	code
  3288                        	xdef	~~k_debug_char_com2
  3289                        	func
  3290                        	.function	485
  3291                        ~~k_debug_char_com2:
  3292                        	longa	on
  3293                        	longi	on
  3294 00:07BD: 3B           	tsc
  3295 00:07BE: 38           	sec
  3296 00:07BF: E9 00 00     	sbc	#L141
  3297 00:07C2: 1B           	tcs
  3298 00:07C3: 0B           	phd
  3299 00:07C4: 5B           	tcd
  3300             00000004   c_0	set	4
  3301                        	.block	485
  3302                        ;	//if(!k_user_IsOSDebug())
  3303                        ;	//	return;
  3304                        ;
  3305                        ;	while(!(UART2_BASE[5] & 0x20))
  3306                        	.sym	c,4,14,6,8
  3307                        	.line	489
  3308                        L10050:
  3309 00:07C5: E2 20        	sep	#$20
  3310                        	longa	off
  3311 00:07C7: AF FD 18 AF  	lda	>11475197	; volatile
  3312 00:07CB: 29 20        	and	#<$20
  3313 00:07CD: C2 20        	rep	#$20
  3314                        	longa	on
  3315 00:07CF: F0 03        	beq	L144
  3316 00:07D1: 82 03 00     	brl	L10051
  3317                        L144:
  3318                        ;	{
  3319                        	.line	490
  3320                        ;	}
  3321                        	.line	491
  3322 00:07D4: 82 EE FF     	brl	L10050
  3323                        L10051:
  3324                        ;	UART2_BASE[0] = c;
  3325                        	.line	492
  3326 00:07D7: E2 20        	sep	#$20
  Mon Aug  9 2021 16:52                                                Page 62


  3327                        	longa	off
  3328 00:07D9: A5 04        	lda	<L141+c_0
  3329 00:07DB: 8F F8 18 AF  	sta	>11475192	; volatile
  3330 00:07DF: C2 20        	rep	#$20
  3331                        	longa	on
  3332                        ;
  3333                        ;	return;
  3334                        	.line	494
  3335                        L145:
  3336 00:07E1: A5 02        	lda	<L141+2
  3337 00:07E3: 85 04        	sta	<L141+2+2
  3338 00:07E5: A5 01        	lda	<L141+1
  3339 00:07E7: 85 03        	sta	<L141+1+2
  3340 00:07E9: 2B           	pld
  3341 00:07EA: 3B           	tsc
  3342 00:07EB: 18           	clc
  3343 00:07EC: 69 02 00     	adc	#L141+2
  3344 00:07EF: 1B           	tcs
  3345 00:07F0: 6B           	rtl
  3346                        ;}
  3347                        	.line	495
  3348                        	.endblock	495
  3349             00000000   L141	equ	0
  3350             00000001   L142	equ	1
  3351                        	ends
  3352                        	efunc
  3353                        	.endfunc	495,1,0
  3354                        	.line	495
  3355                        ;
  3356                        ;
  3357                        ;void k_debug_pointer(char FAR* debugString, void 
                    FAR* p)
  3358                        ;{
  3359                        	.line	498
  3360                        	.line	499
  3361                        	code
  3362                        	xdef	~~k_debug_pointer
  3363                        	func
  3364                        	.function	499
  3365                        ~~k_debug_pointer:
  3366                        	longa	on
  3367                        	longi	on
  3368 00:07F1: 3B           	tsc
  3369 00:07F2: 38           	sec
  3370 00:07F3: E9 0C 00     	sbc	#L146
  3371 00:07F6: 1B           	tcs
  3372 00:07F7: 0B           	phd
  3373 00:07F8: 5B           	tcd
  3374             00000004   debugString_0	set	4
  3375             00000008   p_0	set	8
  3376                        	.block	499
  3377                        ;	k_debug_string(debugString);
  3378                        	.sym	debugString,4,142,6,32
  3379                        	.sym	p,8,129,6,32
  3380                        	.line	500
  3381 00:07F9: D4 12        	pei	<L146+debugString_0+2
  3382 00:07FB: D4 10        	pei	<L146+debugString_0
  3383 00:07FD: 22 xx xx xx  	jsl	~~k_debug_string
  Mon Aug  9 2021 16:52                                                Page 63


  3384                        ;
  3385                        ;	k_debug_string(k_bytetohex(H24BYTE(p),k16buffer)
                    );
  3386                        	.line	502
  3387 00:0801: A9 xx xx     	lda	#<~~k16buffer
  3388 00:0804: 85 01        	sta	<R0
  3389                        	xref	_BEG_DATA
  3390 00:0806: A9 xx xx     	lda	#_BEG_DATA>>16
  3391 00:0809: 85 03        	sta	<R0+2
  3392 00:080B: D4 03        	pei	<R0+2
  3393 00:080D: D4 01        	pei	<R0
  3394 00:080F: D4 16        	pei	<L146+p_0+2
  3395 00:0811: D4 14        	pei	<L146+p_0
  3396 00:0813: A9 10 00     	lda	#$10
  3397                        	xref	~~~llsr
  3398 00:0816: 22 xx xx xx  	jsl	~~~llsr
  3399 00:081A: 85 05        	sta	<R1
  3400 00:081C: 86 07        	stx	<R1+2
  3401 00:081E: A5 05        	lda	<R1
  3402 00:0820: 29 FF 00     	and	#<$ff
  3403 00:0823: 85 09        	sta	<R2
  3404 00:0825: 64 0B        	stz	<R2+2
  3405 00:0827: D4 09        	pei	<R2
  3406 00:0829: 22 xx xx xx  	jsl	~~k_bytetohex
  3407 00:082D: 85 05        	sta	<R1
  3408 00:082F: 86 07        	stx	<R1+2
  3409 00:0831: DA           	phx
  3410 00:0832: 48           	pha
  3411 00:0833: 22 xx xx xx  	jsl	~~k_debug_string
  3412                        ;	k_debug_string(k_bytetohex(M24BYTE(p),k16buffer)
                    );
  3413                        	.line	503
  3414 00:0837: A9 xx xx     	lda	#<~~k16buffer
  3415 00:083A: 85 01        	sta	<R0
  3416                        	xref	_BEG_DATA
  3417 00:083C: A9 xx xx     	lda	#_BEG_DATA>>16
  3418 00:083F: 85 03        	sta	<R0+2
  3419 00:0841: D4 03        	pei	<R0+2
  3420 00:0843: D4 01        	pei	<R0
  3421 00:0845: D4 16        	pei	<L146+p_0+2
  3422 00:0847: D4 14        	pei	<L146+p_0
  3423 00:0849: A9 08 00     	lda	#$8
  3424                        	xref	~~~llsr
  3425 00:084C: 22 xx xx xx  	jsl	~~~llsr
  3426 00:0850: 85 05        	sta	<R1
  3427 00:0852: 86 07        	stx	<R1+2
  3428 00:0854: A5 05        	lda	<R1
  3429 00:0856: 29 FF 00     	and	#<$ff
  3430 00:0859: 85 09        	sta	<R2
  3431 00:085B: 64 0B        	stz	<R2+2
  3432 00:085D: D4 09        	pei	<R2
  3433 00:085F: 22 xx xx xx  	jsl	~~k_bytetohex
  3434 00:0863: 85 05        	sta	<R1
  3435 00:0865: 86 07        	stx	<R1+2
  3436 00:0867: DA           	phx
  3437 00:0868: 48           	pha
  3438 00:0869: 22 xx xx xx  	jsl	~~k_debug_string
  3439                        ;	k_debug_string(k_bytetohex(L24BYTE(p),k16buffer)
  Mon Aug  9 2021 16:52                                                Page 64


                    );
  3440                        	.line	504
  3441 00:086D: A9 xx xx     	lda	#<~~k16buffer
  3442 00:0870: 85 01        	sta	<R0
  3443                        	xref	_BEG_DATA
  3444 00:0872: A9 xx xx     	lda	#_BEG_DATA>>16
  3445 00:0875: 85 03        	sta	<R0+2
  3446 00:0877: D4 03        	pei	<R0+2
  3447 00:0879: D4 01        	pei	<R0
  3448 00:087B: D4 14        	pei	<L146+p_0
  3449 00:087D: 22 xx xx xx  	jsl	~~k_bytetohex
  3450 00:0881: 85 05        	sta	<R1
  3451 00:0883: 86 07        	stx	<R1+2
  3452 00:0885: DA           	phx
  3453 00:0886: 48           	pha
  3454 00:0887: 22 xx xx xx  	jsl	~~k_debug_string
  3455                        ;
  3456                        ;	k_debug_string("\r\n");
  3457                        	.line	506
  3458 00:088B: F4 xx xx     	pea	#^L99
  3459 00:088E: F4 xx xx     	pea	#<L99
  3460 00:0891: 22 xx xx xx  	jsl	~~k_debug_string
  3461                        ;
  3462                        ;	return;
  3463                        	.line	508
  3464                        L149:
  3465 00:0895: A5 0E        	lda	<L146+2
  3466 00:0897: 85 16        	sta	<L146+2+8
  3467 00:0899: A5 0D        	lda	<L146+1
  3468 00:089B: 85 15        	sta	<L146+1+8
  3469 00:089D: 2B           	pld
  3470 00:089E: 3B           	tsc
  3471 00:089F: 18           	clc
  3472 00:08A0: 69 14 00     	adc	#L146+8
  3473 00:08A3: 1B           	tcs
  3474 00:08A4: 6B           	rtl
  3475                        ;}
  3476                        	.line	509
  3477                        	.endblock	509
  3478             0000000C   L146	equ	12
  3479             0000000D   L147	equ	13
  3480                        	ends
  3481                        	efunc
  3482                        	.endfunc	509,13,12
  3483                        	.line	509
  3484                        	data
  3485                        L99:
  3486 00:013B: 0D 0A 00     	db	$0D,$0A,$00
  3487 00:013E:              	ends
  3488                        ;/*
  3489                        ; *
  3490                        ; *
  3491                        ; *
  3492                        ; *
  3493                        ; */
  3494                        ;void k_debug_char(char FAR* debugString, UCHAR n)
  3495                        ;{
  3496                        	.line	516
  Mon Aug  9 2021 16:52                                                Page 65


  3497                        	.line	517
  3498                        	code
  3499                        	xdef	~~k_debug_char
  3500                        	func
  3501                        	.function	517
  3502                        ~~k_debug_char:
  3503                        	longa	on
  3504                        	longi	on
  3505 00:08A5: 3B           	tsc
  3506 00:08A6: 38           	sec
  3507 00:08A7: E9 02 00     	sbc	#L151
  3508 00:08AA: 1B           	tcs
  3509 00:08AB: 0B           	phd
  3510 00:08AC: 5B           	tcd
  3511             00000004   debugString_0	set	4
  3512             00000008   n_0	set	8
  3513                        	.block	517
  3514                        ;	char b[2];
  3515                        ;
  3516                        ;	b[0] = n;
  3517             00000000   b_1	set	0
  3518                        	.sym	b,0,110,1,0,2
  3519                        	.sym	debugString,4,142,6,32
  3520                        	.sym	n,8,14,6,8
  3521                        	.line	520
  3522 00:08AD: E2 20        	sep	#$20
  3523                        	longa	off
  3524 00:08AF: A5 0A        	lda	<L151+n_0
  3525 00:08B1: 85 01        	sta	<L152+b_1
  3526 00:08B3: C2 20        	rep	#$20
  3527                        	longa	on
  3528                        ;	b[1] = 0;
  3529                        	.line	521
  3530 00:08B5: E2 20        	sep	#$20
  3531                        	longa	off
  3532 00:08B7: 64 02        	stz	<L152+b_1+1
  3533 00:08B9: C2 20        	rep	#$20
  3534                        	longa	on
  3535                        ;
  3536                        ;	k_debug_string(debugString);
  3537                        	.line	523
  3538 00:08BB: D4 08        	pei	<L151+debugString_0+2
  3539 00:08BD: D4 06        	pei	<L151+debugString_0
  3540 00:08BF: 22 xx xx xx  	jsl	~~k_debug_string
  3541                        ;
  3542                        ;	k_debug_string(b);
  3543                        	.line	525
  3544 00:08C3: F4 00 00     	pea	#0
  3545 00:08C6: 18           	clc
  3546 00:08C7: 7B           	tdc
  3547 00:08C8: 69 01 00     	adc	#<L152+b_1
  3548 00:08CB: 48           	pha
  3549 00:08CC: 22 xx xx xx  	jsl	~~k_debug_string
  3550                        ;
  3551                        ;	k_debug_string("\r\n");
  3552                        	.line	527
  3553 00:08D0: F4 xx xx     	pea	#^L150
  3554 00:08D3: F4 xx xx     	pea	#<L150
  Mon Aug  9 2021 16:52                                                Page 66


  3555 00:08D6: 22 xx xx xx  	jsl	~~k_debug_string
  3556                        ;
  3557                        ;	return;
  3558                        	.line	529
  3559                        L154:
  3560 00:08DA: A5 04        	lda	<L151+2
  3561 00:08DC: 85 0A        	sta	<L151+2+6
  3562 00:08DE: A5 03        	lda	<L151+1
  3563 00:08E0: 85 09        	sta	<L151+1+6
  3564 00:08E2: 2B           	pld
  3565 00:08E3: 3B           	tsc
  3566 00:08E4: 18           	clc
  3567 00:08E5: 69 08 00     	adc	#L151+6
  3568 00:08E8: 1B           	tcs
  3569 00:08E9: 6B           	rtl
  3570                        ;}
  3571                        	.line	530
  3572                        	.endblock	530
  3573             00000002   L151	equ	2
  3574             00000001   L152	equ	1
  3575                        	ends
  3576                        	efunc
  3577                        	.endfunc	530,1,2
  3578                        	.line	530
  3579                        	data
  3580                        L150:
  3581 00:013E: 0D 0A 00     	db	$0D,$0A,$00
  3582 00:0141:              	ends
  3583                        ;/*
  3584                        ; *
  3585                        ; *
  3586                        ; *
  3587                        ; *
  3588                        ; */
  3589                        ;void k_debug_integer(char FAR* debugString, UINT 
                    n)
  3590                        ;{
  3591                        	.line	537
  3592                        	.line	538
  3593                        	code
  3594                        	xdef	~~k_debug_integer
  3595                        	func
  3596                        	.function	538
  3597                        ~~k_debug_integer:
  3598                        	longa	on
  3599                        	longi	on
  3600 00:08EA: 3B           	tsc
  3601 00:08EB: 38           	sec
  3602 00:08EC: E9 08 00     	sbc	#L156
  3603 00:08EF: 1B           	tcs
  3604 00:08F0: 0B           	phd
  3605 00:08F1: 5B           	tcd
  3606             00000004   debugString_0	set	4
  3607             00000008   n_0	set	8
  3608                        	.block	538
  3609                        ;	k_debug_string(debugString);
  3610                        	.sym	debugString,4,142,6,32
  3611                        	.sym	n,8,16,6,16
  Mon Aug  9 2021 16:52                                                Page 67


  3612                        	.line	539
  3613 00:08F2: D4 0E        	pei	<L156+debugString_0+2
  3614 00:08F4: D4 0C        	pei	<L156+debugString_0
  3615 00:08F6: 22 xx xx xx  	jsl	~~k_debug_string
  3616                        ;
  3617                        ;	k_debug_string(k_inttodec(n,k16buffer));
  3618                        	.line	541
  3619 00:08FA: A9 xx xx     	lda	#<~~k16buffer
  3620 00:08FD: 85 01        	sta	<R0
  3621                        	xref	_BEG_DATA
  3622 00:08FF: A9 xx xx     	lda	#_BEG_DATA>>16
  3623 00:0902: 85 03        	sta	<R0+2
  3624 00:0904: D4 03        	pei	<R0+2
  3625 00:0906: D4 01        	pei	<R0
  3626 00:0908: D4 10        	pei	<L156+n_0
  3627 00:090A: 22 xx xx xx  	jsl	~~k_inttodec
  3628 00:090E: 85 05        	sta	<R1
  3629 00:0910: 86 07        	stx	<R1+2
  3630 00:0912: DA           	phx
  3631 00:0913: 48           	pha
  3632 00:0914: 22 xx xx xx  	jsl	~~k_debug_string
  3633                        ;
  3634                        ;	k_debug_string("\r\n");
  3635                        	.line	543
  3636 00:0918: F4 xx xx     	pea	#^L155
  3637 00:091B: F4 xx xx     	pea	#<L155
  3638 00:091E: 22 xx xx xx  	jsl	~~k_debug_string
  3639                        ;
  3640                        ;	return;
  3641                        	.line	545
  3642                        L159:
  3643 00:0922: A5 0A        	lda	<L156+2
  3644 00:0924: 85 10        	sta	<L156+2+6
  3645 00:0926: A5 09        	lda	<L156+1
  3646 00:0928: 85 0F        	sta	<L156+1+6
  3647 00:092A: 2B           	pld
  3648 00:092B: 3B           	tsc
  3649 00:092C: 18           	clc
  3650 00:092D: 69 0E 00     	adc	#L156+6
  3651 00:0930: 1B           	tcs
  3652 00:0931: 6B           	rtl
  3653                        ;}
  3654                        	.line	546
  3655                        	.endblock	546
  3656             00000008   L156	equ	8
  3657             00000009   L157	equ	9
  3658                        	ends
  3659                        	efunc
  3660                        	.endfunc	546,9,8
  3661                        	.line	546
  3662                        	data
  3663                        L155:
  3664 00:0141: 0D 0A 00     	db	$0D,$0A,$00
  3665 00:0144:              	ends
  3666                        ;
  3667                        ;void k_debug_hex_integer(char FAR* debugString, U
                    INT n)
  3668                        ;{
  Mon Aug  9 2021 16:52                                                Page 68


  3669                        	.line	548
  3670                        	.line	549
  3671                        	code
  3672                        	xdef	~~k_debug_hex_integer
  3673                        	func
  3674                        	.function	549
  3675                        ~~k_debug_hex_integer:
  3676                        	longa	on
  3677                        	longi	on
  3678 00:0932: 3B           	tsc
  3679 00:0933: 38           	sec
  3680 00:0934: E9 08 00     	sbc	#L161
  3681 00:0937: 1B           	tcs
  3682 00:0938: 0B           	phd
  3683 00:0939: 5B           	tcd
  3684             00000004   debugString_0	set	4
  3685             00000008   n_0	set	8
  3686                        	.block	549
  3687                        ;	k_debug_string(debugString);
  3688                        	.sym	debugString,4,142,6,32
  3689                        	.sym	n,8,16,6,16
  3690                        	.line	550
  3691 00:093A: D4 0E        	pei	<L161+debugString_0+2
  3692 00:093C: D4 0C        	pei	<L161+debugString_0
  3693 00:093E: 22 xx xx xx  	jsl	~~k_debug_string
  3694                        ;
  3695                        ;	k_debug_string("0x");
  3696                        	.line	552
  3697 00:0942: F4 xx xx     	pea	#^L160
  3698 00:0945: F4 xx xx     	pea	#<L160
  3699 00:0948: 22 xx xx xx  	jsl	~~k_debug_string
  3700                        ;	k_debug_string(k_bytetohex(  ((LPSTR)&n)[1]  ,k1
                    6buffer));
  3701                        	.line	553
  3702 00:094C: A9 xx xx     	lda	#<~~k16buffer
  3703 00:094F: 85 01        	sta	<R0
  3704                        	xref	_BEG_DATA
  3705 00:0951: A9 xx xx     	lda	#_BEG_DATA>>16
  3706 00:0954: 85 03        	sta	<R0+2
  3707 00:0956: D4 03        	pei	<R0+2
  3708 00:0958: D4 01        	pei	<R0
  3709 00:095A: D4 11        	pei	<L161+n_0+1
  3710 00:095C: 22 xx xx xx  	jsl	~~k_bytetohex
  3711 00:0960: 85 05        	sta	<R1
  3712 00:0962: 86 07        	stx	<R1+2
  3713 00:0964: DA           	phx
  3714 00:0965: 48           	pha
  3715 00:0966: 22 xx xx xx  	jsl	~~k_debug_string
  3716                        ;	k_debug_string(k_bytetohex(  ((LPSTR)&n)[0]  ,k1
                    6buffer));
  3717                        	.line	554
  3718 00:096A: A9 xx xx     	lda	#<~~k16buffer
  3719 00:096D: 85 01        	sta	<R0
  3720                        	xref	_BEG_DATA
  3721 00:096F: A9 xx xx     	lda	#_BEG_DATA>>16
  3722 00:0972: 85 03        	sta	<R0+2
  3723 00:0974: D4 03        	pei	<R0+2
  3724 00:0976: D4 01        	pei	<R0
  Mon Aug  9 2021 16:52                                                Page 69


  3725 00:0978: D4 10        	pei	<L161+n_0
  3726 00:097A: 22 xx xx xx  	jsl	~~k_bytetohex
  3727 00:097E: 85 05        	sta	<R1
  3728 00:0980: 86 07        	stx	<R1+2
  3729 00:0982: DA           	phx
  3730 00:0983: 48           	pha
  3731 00:0984: 22 xx xx xx  	jsl	~~k_debug_string
  3732                        ;
  3733                        ;	k_debug_string("\r\n");
  3734                        	.line	556
  3735 00:0988: F4 xx xx     	pea	#^L160+3
  3736 00:098B: F4 xx xx     	pea	#<L160+3
  3737 00:098E: 22 xx xx xx  	jsl	~~k_debug_string
  3738                        ;
  3739                        ;	return;
  3740                        	.line	558
  3741                        L164:
  3742 00:0992: A5 0A        	lda	<L161+2
  3743 00:0994: 85 10        	sta	<L161+2+6
  3744 00:0996: A5 09        	lda	<L161+1
  3745 00:0998: 85 0F        	sta	<L161+1+6
  3746 00:099A: 2B           	pld
  3747 00:099B: 3B           	tsc
  3748 00:099C: 18           	clc
  3749 00:099D: 69 0E 00     	adc	#L161+6
  3750 00:09A0: 1B           	tcs
  3751 00:09A1: 6B           	rtl
  3752                        ;}
  3753                        	.line	559
  3754                        	.endblock	559
  3755             00000008   L161	equ	8
  3756             00000009   L162	equ	9
  3757                        	ends
  3758                        	efunc
  3759                        	.endfunc	559,9,8
  3760                        	.line	559
  3761                        	data
  3762                        L160:
  3763 00:0144: 30 78 00 0D  	db	$30,$78,$00,$0D,$0A,$00
       00:0148: 0A 00 
  3764 00:014A:              	ends
  3765                        ;
  3766                        ;void k_debug_integers(char FAR* format, int nHowM
                    any, ...)
  3767                        ;{
  3768                        	.line	561
  3769                        	.line	562
  3770                        	code
  3771                        	xdef	~~k_debug_integers
  3772                        	func
  3773                        	.function	562
  3774                        ~~k_debug_integers:
  3775                        	longa	on
  3776                        	longi	on
  3777 00:09A2: 3B           	tsc
  3778 00:09A3: 38           	sec
  3779 00:09A4: E9 0C 00     	sbc	#L166
  3780 00:09A7: 1B           	tcs
  Mon Aug  9 2021 16:52                                                Page 70


  3781 00:09A8: 0B           	phd
  3782 00:09A9: 5B           	tcd
  3783             00000006   format_0	set	6
  3784             0000000A   nHowMany_0	set	10
  3785                        	.block	562
  3786                        ;	int i = 0;
  3787                        ;	int nSum = 0;
  3788                        ;
  3789                        ;	va_list intArgumentPointer;
  3790                        ;	va_start(intArgumentPointer, nHowMany);
  3791             00000000   i_1	set	0
  3792             00000002   nSum_1	set	2
  3793             00000004   intArgumentPointer_1	set	4
  3794                        	.sym	i,0,5,1,16
  3795                        	.sym	nSum,2,5,1,16
  3796                        	.sym	intArgumentPointer,4,142,1,32
  3797                        	.sym	format,6,142,6,32
  3798                        	.sym	nHowMany,10,5,6,16
  3799 00:09AA: 64 05        	stz	<L167+i_1
  3800 00:09AC: 64 07        	stz	<L167+nSum_1
  3801                        	.line	567
  3802 00:09AE: 18           	clc
  3803 00:09AF: 7B           	tdc
  3804 00:09B0: 69 18 00     	adc	#<L166+nHowMany_0+2
  3805 00:09B3: 85 09        	sta	<L167+intArgumentPointer_1
  3806 00:09B5: A9 00 00     	lda	#$0
  3807 00:09B8: 85 0B        	sta	<L167+intArgumentPointer_1+2
  3808                        ;
  3809                        ;
  3810                        ;	for (i = 0; i < nHowMany; i++)
  3811                        	.line	570
  3812 00:09BA: 64 05        	stz	<L167+i_1
  3813 00:09BC: 82 24 00     	brl	L10055
  3814                        L10054:
  3815                        ;		nSum += va_arg(intArgumentPointer, int);
  3816                        	.line	571
  3817 00:09BF: 18           	clc
  3818 00:09C0: A9 02 00     	lda	#$2
  3819 00:09C3: 65 09        	adc	<L167+intArgumentPointer_1
  3820 00:09C5: 85 09        	sta	<L167+intArgumentPointer_1
  3821 00:09C7: 90 02        	bcc	L169
  3822 00:09C9: E6 0B        	inc	<L167+intArgumentPointer_1+2
  3823                        L169:
  3824 00:09CB: 18           	clc
  3825 00:09CC: A9 FE FF     	lda	#$fffe
  3826 00:09CF: 65 09        	adc	<L167+intArgumentPointer_1
  3827 00:09D1: 85 01        	sta	<R0
  3828 00:09D3: A9 FF FF     	lda	#$ffff
  3829 00:09D6: 65 0B        	adc	<L167+intArgumentPointer_1+2
  3830 00:09D8: 85 03        	sta	<R0+2
  3831 00:09DA: 18           	clc
  3832 00:09DB: A7 01        	lda	[<R0]
  3833 00:09DD: 65 07        	adc	<L167+nSum_1
  3834 00:09DF: 85 07        	sta	<L167+nSum_1
  3835                        L10052:
  3836 00:09E1: E6 05        	inc	<L167+i_1
  3837                        L10055:
  3838 00:09E3: 38           	sec
  Mon Aug  9 2021 16:52                                                Page 71


  3839 00:09E4: A5 05        	lda	<L167+i_1
  3840 00:09E6: E5 16        	sbc	<L166+nHowMany_0
  3841 00:09E8: 70 03        	bvs	L170
  3842 00:09EA: 49 00 80     	eor	#$8000
  3843                        L170:
  3844 00:09ED: 30 03        	bmi	L171
  3845 00:09EF: 82 CD FF     	brl	L10054
  3846                        L171:
  3847                        L10053:
  3848                        ;
  3849                        ;	va_end(intArgumentPointer);
  3850                        	.line	573
  3851                        ;
  3852                        ;	k_debug_integer(format, nSum);
  3853                        	.line	575
  3854 00:09F2: D4 07        	pei	<L167+nSum_1
  3855 00:09F4: D4 14        	pei	<L166+format_0+2
  3856 00:09F6: D4 12        	pei	<L166+format_0
  3857 00:09F8: 22 xx xx xx  	jsl	~~k_debug_integer
  3858                        ;}
  3859                        	.line	576
  3860                        L172:
  3861 00:09FC: DA           	phx
  3862 00:09FD: A6 10        	ldx	<L166+4
  3863 00:09FF: A5 0E        	lda	<L166+2
  3864 00:0A01: 95 0E        	sta	<L166+2,X
  3865 00:0A03: A5 0D        	lda	<L166+1
  3866 00:0A05: 95 0D        	sta	<L166+1,X
  3867 00:0A07: 8A           	txa
  3868 00:0A08: FA           	plx
  3869 00:0A09: 2B           	pld
  3870 00:0A0A: 48           	pha
  3871 00:0A0B: 3B           	tsc
  3872 00:0A0C: 18           	clc
  3873 00:0A0D: 69 0E 00     	adc	#L166+2
  3874 00:0A10: 63 01        	adc	<1,s
  3875 00:0A12: 1B           	tcs
  3876 00:0A13: 6B           	rtl
  3877                        	.endblock	576
  3878             0000000C   L166	equ	12
  3879             00000005   L167	equ	5
  3880                        	ends
  3881                        	efunc
  3882                        	.endfunc	576,5,12
  3883                        	.line	576
  3884                        ;
  3885                        ;/*
  3886                        ; *
  3887                        ; *
  3888                        ; *
  3889                        ; *
  3890                        ; */
  3891                        ;void k_debug_integer_array(char FAR* debugString,
                    UINT FAR *n,UINT size)
  3892                        ;{
  3893                        	.line	584
  3894                        	.line	585
  3895                        	code
  Mon Aug  9 2021 16:52                                                Page 72


  3896                        	xdef	~~k_debug_integer_array
  3897                        	func
  3898                        	.function	585
  3899                        ~~k_debug_integer_array:
  3900                        	longa	on
  3901                        	longi	on
  3902 00:0A14: 3B           	tsc
  3903 00:0A15: 38           	sec
  3904 00:0A16: E9 12 00     	sbc	#L173
  3905 00:0A19: 1B           	tcs
  3906 00:0A1A: 0B           	phd
  3907 00:0A1B: 5B           	tcd
  3908             00000004   debugString_0	set	4
  3909             00000008   n_0	set	8
  3910             0000000C   size_0	set	12
  3911                        	.block	585
  3912                        ;	int i = 0;
  3913                        ;	k_debug_string(debugString);
  3914             00000000   i_1	set	0
  3915                        	.sym	i,0,5,1,16
  3916                        	.sym	debugString,4,142,6,32
  3917                        	.sym	n,8,144,6,32
  3918                        	.sym	size,12,16,6,16
  3919 00:0A1C: 64 11        	stz	<L174+i_1
  3920                        	.line	587
  3921 00:0A1E: D4 18        	pei	<L173+debugString_0+2
  3922 00:0A20: D4 16        	pei	<L173+debugString_0
  3923 00:0A22: 22 xx xx xx  	jsl	~~k_debug_string
  3924                        ;
  3925                        ;	for(i=0;i<size;i++)
  3926                        	.line	589
  3927 00:0A26: 64 11        	stz	<L174+i_1
  3928 00:0A28: 82 5A 00     	brl	L10059
  3929                        L10058:
  3930                        ;	{
  3931                        	.line	590
  3932                        ;		if(i!=0)
  3933                        	.line	591
  3934                        ;			k_debug_string(",");
  3935 00:0A2B: A5 11        	lda	<L174+i_1
  3936 00:0A2D: D0 03        	bne	L176
  3937 00:0A2F: 82 0A 00     	brl	L10060
  3938                        L176:
  3939                        	.line	592
  3940 00:0A32: F4 xx xx     	pea	#^L165
  3941 00:0A35: F4 xx xx     	pea	#<L165
  3942 00:0A38: 22 xx xx xx  	jsl	~~k_debug_string
  3943                        ;
  3944                        ;		k_debug_string(k_inttodec(n[i],k16buffer
                    ));
  3945                        L10060:
  3946                        	.line	594
  3947 00:0A3C: A9 xx xx     	lda	#<~~k16buffer
  3948 00:0A3F: 85 01        	sta	<R0
  3949                        	xref	_BEG_DATA
  3950 00:0A41: A9 xx xx     	lda	#_BEG_DATA>>16
  3951 00:0A44: 85 03        	sta	<R0+2
  3952 00:0A46: D4 03        	pei	<R0+2
  Mon Aug  9 2021 16:52                                                Page 73


  3953 00:0A48: D4 01        	pei	<R0
  3954 00:0A4A: A0 00 00     	ldy	#$0
  3955 00:0A4D: A5 11        	lda	<L174+i_1
  3956 00:0A4F: 10 01        	bpl	L177
  3957 00:0A51: 88           	dey
  3958                        L177:
  3959 00:0A52: 85 09        	sta	<R2
  3960 00:0A54: 84 0B        	sty	<R2+2
  3961 00:0A56: D4 0B        	pei	<R2+2
  3962 00:0A58: D4 09        	pei	<R2
  3963 00:0A5A: A9 01 00     	lda	#$1
  3964                        	xref	~~~lasl
  3965 00:0A5D: 22 xx xx xx  	jsl	~~~lasl
  3966 00:0A61: 85 05        	sta	<R1
  3967 00:0A63: 86 07        	stx	<R1+2
  3968 00:0A65: 18           	clc
  3969 00:0A66: A5 1A        	lda	<L173+n_0
  3970 00:0A68: 65 05        	adc	<R1
  3971 00:0A6A: 85 0D        	sta	<R3
  3972 00:0A6C: A5 1C        	lda	<L173+n_0+2
  3973 00:0A6E: 65 07        	adc	<R1+2
  3974 00:0A70: 85 0F        	sta	<R3+2
  3975 00:0A72: A7 0D        	lda	[<R3]
  3976 00:0A74: 48           	pha
  3977 00:0A75: 22 xx xx xx  	jsl	~~k_inttodec
  3978 00:0A79: 85 05        	sta	<R1
  3979 00:0A7B: 86 07        	stx	<R1+2
  3980 00:0A7D: DA           	phx
  3981 00:0A7E: 48           	pha
  3982 00:0A7F: 22 xx xx xx  	jsl	~~k_debug_string
  3983                        ;	}
  3984                        	.line	595
  3985                        L10056:
  3986 00:0A83: E6 11        	inc	<L174+i_1
  3987                        L10059:
  3988 00:0A85: A5 11        	lda	<L174+i_1
  3989 00:0A87: C5 1E        	cmp	<L173+size_0
  3990 00:0A89: B0 03        	bcs	L178
  3991 00:0A8B: 82 9D FF     	brl	L10058
  3992                        L178:
  3993                        L10057:
  3994                        ;
  3995                        ;	k_debug_string("\r\n");
  3996                        	.line	597
  3997 00:0A8E: F4 xx xx     	pea	#^L165+2
  3998 00:0A91: F4 xx xx     	pea	#<L165+2
  3999 00:0A94: 22 xx xx xx  	jsl	~~k_debug_string
  4000                        ;
  4001                        ;	return;
  4002                        	.line	599
  4003                        L179:
  4004 00:0A98: A5 14        	lda	<L173+2
  4005 00:0A9A: 85 1E        	sta	<L173+2+10
  4006 00:0A9C: A5 13        	lda	<L173+1
  4007 00:0A9E: 85 1D        	sta	<L173+1+10
  4008 00:0AA0: 2B           	pld
  4009 00:0AA1: 3B           	tsc
  4010 00:0AA2: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 74


  4011 00:0AA3: 69 1C 00     	adc	#L173+10
  4012 00:0AA6: 1B           	tcs
  4013 00:0AA7: 6B           	rtl
  4014                        ;}
  4015                        	.line	600
  4016                        	.endblock	600
  4017             00000012   L173	equ	18
  4018             00000011   L174	equ	17
  4019                        	ends
  4020                        	efunc
  4021                        	.endfunc	600,17,18
  4022                        	.line	600
  4023                        	data
  4024                        L165:
  4025 00:014A: 2C 00 0D 0A  	db	$2C,$00,$0D,$0A,$00
       00:014E: 00 
  4026 00:014F:              	ends
  4027                        ;
  4028                        ;/*
  4029                        ; *
  4030                        ; *
  4031                        ; *
  4032                        ; *
  4033                        ; */
  4034                        ;void k_debug_long(char FAR* debugString, ULONG n)
  4035                        ;{
  4036                        	.line	608
  4037                        	.line	609
  4038                        	code
  4039                        	xdef	~~k_debug_long
  4040                        	func
  4041                        	.function	609
  4042                        ~~k_debug_long:
  4043                        	longa	on
  4044                        	longi	on
  4045 00:0AA8: 3B           	tsc
  4046 00:0AA9: 38           	sec
  4047 00:0AAA: E9 08 00     	sbc	#L181
  4048 00:0AAD: 1B           	tcs
  4049 00:0AAE: 0B           	phd
  4050 00:0AAF: 5B           	tcd
  4051             00000004   debugString_0	set	4
  4052             00000008   n_0	set	8
  4053                        	.block	609
  4054                        ;	k_debug_string(debugString);
  4055                        	.sym	debugString,4,142,6,32
  4056                        	.sym	n,8,18,6,32
  4057                        	.line	610
  4058 00:0AB0: D4 0E        	pei	<L181+debugString_0+2
  4059 00:0AB2: D4 0C        	pei	<L181+debugString_0
  4060 00:0AB4: 22 xx xx xx  	jsl	~~k_debug_string
  4061                        ;
  4062                        ;	k_debug_string(k_longtodec(n,k16buffer));
  4063                        	.line	612
  4064 00:0AB8: A9 xx xx     	lda	#<~~k16buffer
  4065 00:0ABB: 85 01        	sta	<R0
  4066                        	xref	_BEG_DATA
  4067 00:0ABD: A9 xx xx     	lda	#_BEG_DATA>>16
  Mon Aug  9 2021 16:52                                                Page 75


  4068 00:0AC0: 85 03        	sta	<R0+2
  4069 00:0AC2: D4 03        	pei	<R0+2
  4070 00:0AC4: D4 01        	pei	<R0
  4071 00:0AC6: D4 12        	pei	<L181+n_0+2
  4072 00:0AC8: D4 10        	pei	<L181+n_0
  4073 00:0ACA: 22 xx xx xx  	jsl	~~k_longtodec
  4074 00:0ACE: 85 05        	sta	<R1
  4075 00:0AD0: 86 07        	stx	<R1+2
  4076 00:0AD2: DA           	phx
  4077 00:0AD3: 48           	pha
  4078 00:0AD4: 22 xx xx xx  	jsl	~~k_debug_string
  4079                        ;
  4080                        ;	k_debug_string("\r\n");
  4081                        	.line	614
  4082 00:0AD8: F4 xx xx     	pea	#^L180
  4083 00:0ADB: F4 xx xx     	pea	#<L180
  4084 00:0ADE: 22 xx xx xx  	jsl	~~k_debug_string
  4085                        ;
  4086                        ;	return;
  4087                        	.line	616
  4088                        L184:
  4089 00:0AE2: A5 0A        	lda	<L181+2
  4090 00:0AE4: 85 12        	sta	<L181+2+8
  4091 00:0AE6: A5 09        	lda	<L181+1
  4092 00:0AE8: 85 11        	sta	<L181+1+8
  4093 00:0AEA: 2B           	pld
  4094 00:0AEB: 3B           	tsc
  4095 00:0AEC: 18           	clc
  4096 00:0AED: 69 10 00     	adc	#L181+8
  4097 00:0AF0: 1B           	tcs
  4098 00:0AF1: 6B           	rtl
  4099                        ;}
  4100                        	.line	617
  4101                        	.endblock	617
  4102             00000008   L181	equ	8
  4103             00000009   L182	equ	9
  4104                        	ends
  4105                        	efunc
  4106                        	.endfunc	617,9,8
  4107                        	.line	617
  4108                        	data
  4109                        L180:
  4110 00:014F: 0D 0A 00     	db	$0D,$0A,$00
  4111 00:0152:              	ends
  4112                        ;/*
  4113                        ; *
  4114                        ; *
  4115                        ; *
  4116                        ; *
  4117                        ; */
  4118                        ;void k_debug_hex(LPSTR debugString, UCHAR n)
  4119                        ;{
  4120                        	.line	624
  4121                        	.line	625
  4122                        	code
  4123                        	xdef	~~k_debug_hex
  4124                        	func
  4125                        	.function	625
  Mon Aug  9 2021 16:52                                                Page 76


  4126                        ~~k_debug_hex:
  4127                        	longa	on
  4128                        	longi	on
  4129 00:0AF2: 3B           	tsc
  4130 00:0AF3: 38           	sec
  4131 00:0AF4: E9 08 00     	sbc	#L186
  4132 00:0AF7: 1B           	tcs
  4133 00:0AF8: 0B           	phd
  4134 00:0AF9: 5B           	tcd
  4135             00000004   debugString_0	set	4
  4136             00000008   n_0	set	8
  4137                        	.block	625
  4138                        ;	k_debug_string(debugString);
  4139                        	.sym	debugString,4,142,6,32
  4140                        	.sym	n,8,14,6,8
  4141                        	.line	626
  4142 00:0AFA: D4 0E        	pei	<L186+debugString_0+2
  4143 00:0AFC: D4 0C        	pei	<L186+debugString_0
  4144 00:0AFE: 22 xx xx xx  	jsl	~~k_debug_string
  4145                        ;
  4146                        ;	k_debug_string(k_bytetohex(n,k16buffer));
  4147                        	.line	628
  4148 00:0B02: A9 xx xx     	lda	#<~~k16buffer
  4149 00:0B05: 85 01        	sta	<R0
  4150                        	xref	_BEG_DATA
  4151 00:0B07: A9 xx xx     	lda	#_BEG_DATA>>16
  4152 00:0B0A: 85 03        	sta	<R0+2
  4153 00:0B0C: D4 03        	pei	<R0+2
  4154 00:0B0E: D4 01        	pei	<R0
  4155 00:0B10: D4 10        	pei	<L186+n_0
  4156 00:0B12: 22 xx xx xx  	jsl	~~k_bytetohex
  4157 00:0B16: 85 05        	sta	<R1
  4158 00:0B18: 86 07        	stx	<R1+2
  4159 00:0B1A: DA           	phx
  4160 00:0B1B: 48           	pha
  4161 00:0B1C: 22 xx xx xx  	jsl	~~k_debug_string
  4162                        ;
  4163                        ;	k_debug_string("\r\n");
  4164                        	.line	630
  4165 00:0B20: F4 xx xx     	pea	#^L185
  4166 00:0B23: F4 xx xx     	pea	#<L185
  4167 00:0B26: 22 xx xx xx  	jsl	~~k_debug_string
  4168                        ;
  4169                        ;	return;
  4170                        	.line	632
  4171                        L189:
  4172 00:0B2A: A5 0A        	lda	<L186+2
  4173 00:0B2C: 85 10        	sta	<L186+2+6
  4174 00:0B2E: A5 09        	lda	<L186+1
  4175 00:0B30: 85 0F        	sta	<L186+1+6
  4176 00:0B32: 2B           	pld
  4177 00:0B33: 3B           	tsc
  4178 00:0B34: 18           	clc
  4179 00:0B35: 69 0E 00     	adc	#L186+6
  4180 00:0B38: 1B           	tcs
  4181 00:0B39: 6B           	rtl
  4182                        ;}
  4183                        	.line	633
  Mon Aug  9 2021 16:52                                                Page 77


  4184                        	.endblock	633
  4185             00000008   L186	equ	8
  4186             00000009   L187	equ	9
  4187                        	ends
  4188                        	efunc
  4189                        	.endfunc	633,9,8
  4190                        	.line	633
  4191                        	data
  4192                        L185:
  4193 00:0152: 0D 0A 00     	db	$0D,$0A,$00
  4194 00:0155:              	ends
  4195                        ;
  4196                        ;void k_debug_message(char FAR* debugString,char F
                    AR *message)
  4197                        ;{
  4198                        	.line	635
  4199                        	.line	636
  4200                        	code
  4201                        	xdef	~~k_debug_message
  4202                        	func
  4203                        	.function	636
  4204                        ~~k_debug_message:
  4205                        	longa	on
  4206                        	longi	on
  4207 00:0B3A: 3B           	tsc
  4208 00:0B3B: 38           	sec
  4209 00:0B3C: E9 00 00     	sbc	#L191
  4210 00:0B3F: 1B           	tcs
  4211 00:0B40: 0B           	phd
  4212 00:0B41: 5B           	tcd
  4213             00000004   debugString_0	set	4
  4214             00000008   message_0	set	8
  4215                        	.block	636
  4216                        ;	k_debug_string(debugString);
  4217                        	.sym	debugString,4,142,6,32
  4218                        	.sym	message,8,142,6,32
  4219                        	.line	637
  4220 00:0B42: D4 06        	pei	<L191+debugString_0+2
  4221 00:0B44: D4 04        	pei	<L191+debugString_0
  4222 00:0B46: 22 xx xx xx  	jsl	~~k_debug_string
  4223                        ;
  4224                        ;	k_debug_string(message);
  4225                        	.line	639
  4226 00:0B4A: D4 0A        	pei	<L191+message_0+2
  4227 00:0B4C: D4 08        	pei	<L191+message_0
  4228 00:0B4E: 22 xx xx xx  	jsl	~~k_debug_string
  4229                        ;
  4230                        ;	k_debug_string("\r\n");
  4231                        	.line	641
  4232 00:0B52: F4 xx xx     	pea	#^L190
  4233 00:0B55: F4 xx xx     	pea	#<L190
  4234 00:0B58: 22 xx xx xx  	jsl	~~k_debug_string
  4235                        ;
  4236                        ;	return;
  4237                        	.line	643
  4238                        L194:
  4239 00:0B5C: A5 02        	lda	<L191+2
  4240 00:0B5E: 85 0A        	sta	<L191+2+8
  Mon Aug  9 2021 16:52                                                Page 78


  4241 00:0B60: A5 01        	lda	<L191+1
  4242 00:0B62: 85 09        	sta	<L191+1+8
  4243 00:0B64: 2B           	pld
  4244 00:0B65: 3B           	tsc
  4245 00:0B66: 18           	clc
  4246 00:0B67: 69 08 00     	adc	#L191+8
  4247 00:0B6A: 1B           	tcs
  4248 00:0B6B: 6B           	rtl
  4249                        ;}
  4250                        	.line	644
  4251                        	.endblock	644
  4252             00000000   L191	equ	0
  4253             00000001   L192	equ	1
  4254                        	ends
  4255                        	efunc
  4256                        	.endfunc	644,1,0
  4257                        	.line	644
  4258                        	data
  4259                        L190:
  4260 00:0155: 0D 0A 00     	db	$0D,$0A,$00
  4261 00:0158:              	ends
  4262                        ;
  4263                        ;void k_debug_strings(char FAR* debugString,char F
                    AR *message)
  4264                        ;{
  4265                        	.line	646
  4266                        	.line	647
  4267                        	code
  4268                        	xdef	~~k_debug_strings
  4269                        	func
  4270                        	.function	647
  4271                        ~~k_debug_strings:
  4272                        	longa	on
  4273                        	longi	on
  4274 00:0B6C: 3B           	tsc
  4275 00:0B6D: 38           	sec
  4276 00:0B6E: E9 00 00     	sbc	#L196
  4277 00:0B71: 1B           	tcs
  4278 00:0B72: 0B           	phd
  4279 00:0B73: 5B           	tcd
  4280             00000004   debugString_0	set	4
  4281             00000008   message_0	set	8
  4282                        	.block	647
  4283                        ;	k_debug_message(debugString,message);
  4284                        	.sym	debugString,4,142,6,32
  4285                        	.sym	message,8,142,6,32
  4286                        	.line	648
  4287 00:0B74: D4 0A        	pei	<L196+message_0+2
  4288 00:0B76: D4 08        	pei	<L196+message_0
  4289 00:0B78: D4 06        	pei	<L196+debugString_0+2
  4290 00:0B7A: D4 04        	pei	<L196+debugString_0
  4291 00:0B7C: 22 xx xx xx  	jsl	~~k_debug_message
  4292                        ;}
  4293                        	.line	649
  4294                        L199:
  4295 00:0B80: A5 02        	lda	<L196+2
  4296 00:0B82: 85 0A        	sta	<L196+2+8
  4297 00:0B84: A5 01        	lda	<L196+1
  Mon Aug  9 2021 16:52                                                Page 79


  4298 00:0B86: 85 09        	sta	<L196+1+8
  4299 00:0B88: 2B           	pld
  4300 00:0B89: 3B           	tsc
  4301 00:0B8A: 18           	clc
  4302 00:0B8B: 69 08 00     	adc	#L196+8
  4303 00:0B8E: 1B           	tcs
  4304 00:0B8F: 6B           	rtl
  4305                        	.endblock	649
  4306             00000000   L196	equ	0
  4307             00000001   L197	equ	1
  4308                        	ends
  4309                        	efunc
  4310                        	.endfunc	649,1,0
  4311                        	.line	649
  4312                        ;
  4313                        ;
  4314                        ;void k_debug_nmessage(char FAR* debugString,char 
                    FAR *message,UINT size)
  4315                        ;{
  4316                        	.line	652
  4317                        	.line	653
  4318                        	code
  4319                        	xdef	~~k_debug_nmessage
  4320                        	func
  4321                        	.function	653
  4322                        ~~k_debug_nmessage:
  4323                        	longa	on
  4324                        	longi	on
  4325 00:0B90: 3B           	tsc
  4326 00:0B91: 38           	sec
  4327 00:0B92: E9 00 00     	sbc	#L200
  4328 00:0B95: 1B           	tcs
  4329 00:0B96: 0B           	phd
  4330 00:0B97: 5B           	tcd
  4331             00000004   debugString_0	set	4
  4332             00000008   message_0	set	8
  4333             0000000C   size_0	set	12
  4334                        	.block	653
  4335                        ;	k_debug_string(debugString);
  4336                        	.sym	debugString,4,142,6,32
  4337                        	.sym	message,8,142,6,32
  4338                        	.sym	size,12,16,6,16
  4339                        	.line	654
  4340 00:0B98: D4 06        	pei	<L200+debugString_0+2
  4341 00:0B9A: D4 04        	pei	<L200+debugString_0
  4342 00:0B9C: 22 xx xx xx  	jsl	~~k_debug_string
  4343                        ;	k_debug_string("[");
  4344                        	.line	655
  4345 00:0BA0: F4 xx xx     	pea	#^L195
  4346 00:0BA3: F4 xx xx     	pea	#<L195
  4347 00:0BA6: 22 xx xx xx  	jsl	~~k_debug_string
  4348                        ;	k_debug_nstring(message,size);
  4349                        	.line	656
  4350 00:0BAA: D4 0C        	pei	<L200+size_0
  4351 00:0BAC: D4 0A        	pei	<L200+message_0+2
  4352 00:0BAE: D4 08        	pei	<L200+message_0
  4353 00:0BB0: 22 xx xx xx  	jsl	~~k_debug_nstring
  4354                        ;	k_debug_string("]");
  Mon Aug  9 2021 16:52                                                Page 80


  4355                        	.line	657
  4356 00:0BB4: F4 xx xx     	pea	#^L195+2
  4357 00:0BB7: F4 xx xx     	pea	#<L195+2
  4358 00:0BBA: 22 xx xx xx  	jsl	~~k_debug_string
  4359                        ;	k_debug_string("\r\n");
  4360                        	.line	658
  4361 00:0BBE: F4 xx xx     	pea	#^L195+4
  4362 00:0BC1: F4 xx xx     	pea	#<L195+4
  4363 00:0BC4: 22 xx xx xx  	jsl	~~k_debug_string
  4364                        ;
  4365                        ;	return;
  4366                        	.line	660
  4367                        L203:
  4368 00:0BC8: A5 02        	lda	<L200+2
  4369 00:0BCA: 85 0C        	sta	<L200+2+10
  4370 00:0BCC: A5 01        	lda	<L200+1
  4371 00:0BCE: 85 0B        	sta	<L200+1+10
  4372 00:0BD0: 2B           	pld
  4373 00:0BD1: 3B           	tsc
  4374 00:0BD2: 18           	clc
  4375 00:0BD3: 69 0A 00     	adc	#L200+10
  4376 00:0BD6: 1B           	tcs
  4377 00:0BD7: 6B           	rtl
  4378                        ;}
  4379                        	.line	661
  4380                        	.endblock	661
  4381             00000000   L200	equ	0
  4382             00000001   L201	equ	1
  4383                        	ends
  4384                        	efunc
  4385                        	.endfunc	661,1,0
  4386                        	.line	661
  4387                        	data
  4388                        L195:
  4389 00:0158: 5B 00 5D 00  	db	$5B,$00,$5D,$00,$0D,$0A,$00
       00:015C: 0D 0A 00 
  4390 00:015F:              	ends
  4391                        ;
  4392                        ;void k_debug_nstrings(char FAR* debugString,char 
                    FAR *message,UINT size)
  4393                        ;{
  4394                        	.line	663
  4395                        	.line	664
  4396                        	code
  4397                        	xdef	~~k_debug_nstrings
  4398                        	func
  4399                        	.function	664
  4400                        ~~k_debug_nstrings:
  4401                        	longa	on
  4402                        	longi	on
  4403 00:0BD8: 3B           	tsc
  4404 00:0BD9: 38           	sec
  4405 00:0BDA: E9 00 00     	sbc	#L205
  4406 00:0BDD: 1B           	tcs
  4407 00:0BDE: 0B           	phd
  4408 00:0BDF: 5B           	tcd
  4409             00000004   debugString_0	set	4
  4410             00000008   message_0	set	8
  Mon Aug  9 2021 16:52                                                Page 81


  4411             0000000C   size_0	set	12
  4412                        	.block	664
  4413                        ;	k_debug_nmessage(debugString,message,size);
  4414                        	.sym	debugString,4,142,6,32
  4415                        	.sym	message,8,142,6,32
  4416                        	.sym	size,12,16,6,16
  4417                        	.line	665
  4418 00:0BE0: D4 0C        	pei	<L205+size_0
  4419 00:0BE2: D4 0A        	pei	<L205+message_0+2
  4420 00:0BE4: D4 08        	pei	<L205+message_0
  4421 00:0BE6: D4 06        	pei	<L205+debugString_0+2
  4422 00:0BE8: D4 04        	pei	<L205+debugString_0
  4423 00:0BEA: 22 xx xx xx  	jsl	~~k_debug_nmessage
  4424                        ;}
  4425                        	.line	666
  4426                        L208:
  4427 00:0BEE: A5 02        	lda	<L205+2
  4428 00:0BF0: 85 0C        	sta	<L205+2+10
  4429 00:0BF2: A5 01        	lda	<L205+1
  4430 00:0BF4: 85 0B        	sta	<L205+1+10
  4431 00:0BF6: 2B           	pld
  4432 00:0BF7: 3B           	tsc
  4433 00:0BF8: 18           	clc
  4434 00:0BF9: 69 0A 00     	adc	#L205+10
  4435 00:0BFC: 1B           	tcs
  4436 00:0BFD: 6B           	rtl
  4437                        	.endblock	666
  4438             00000000   L205	equ	0
  4439             00000001   L206	equ	1
  4440                        	ends
  4441                        	efunc
  4442                        	.endfunc	666,1,0
  4443                        	.line	666
  4444                        ;
  4445                        ;/*
  4446                        ; *
  4447                        ; *
  4448                        ; *
  4449                        ; *
  4450                        ; */
  4451                        ;void k_debug_hexchar(LPSTR debugString, UCHAR n)
  4452                        ;{
  4453                        	.line	674
  4454                        	.line	675
  4455                        	code
  4456                        	xdef	~~k_debug_hexchar
  4457                        	func
  4458                        	.function	675
  4459                        ~~k_debug_hexchar:
  4460                        	longa	on
  4461                        	longi	on
  4462 00:0BFE: 3B           	tsc
  4463 00:0BFF: 38           	sec
  4464 00:0C00: E9 0A 00     	sbc	#L209
  4465 00:0C03: 1B           	tcs
  4466 00:0C04: 0B           	phd
  4467 00:0C05: 5B           	tcd
  4468             00000004   debugString_0	set	4
  Mon Aug  9 2021 16:52                                                Page 82


  4469             00000008   n_0	set	8
  4470                        	.block	675
  4471                        ;	char b[2];
  4472                        ;
  4473                        ;	b[0] = n;
  4474             00000000   b_1	set	0
  4475                        	.sym	b,0,110,1,0,2
  4476                        	.sym	debugString,4,142,6,32
  4477                        	.sym	n,8,14,6,8
  4478                        	.line	678
  4479 00:0C06: E2 20        	sep	#$20
  4480                        	longa	off
  4481 00:0C08: A5 12        	lda	<L209+n_0
  4482 00:0C0A: 85 09        	sta	<L210+b_1
  4483 00:0C0C: C2 20        	rep	#$20
  4484                        	longa	on
  4485                        ;	b[1] = 0;
  4486                        	.line	679
  4487 00:0C0E: E2 20        	sep	#$20
  4488                        	longa	off
  4489 00:0C10: 64 0A        	stz	<L210+b_1+1
  4490 00:0C12: C2 20        	rep	#$20
  4491                        	longa	on
  4492                        ;
  4493                        ;	k_debug_string(debugString);
  4494                        	.line	681
  4495 00:0C14: D4 10        	pei	<L209+debugString_0+2
  4496 00:0C16: D4 0E        	pei	<L209+debugString_0
  4497 00:0C18: 22 xx xx xx  	jsl	~~k_debug_string
  4498                        ;
  4499                        ;	k_debug_string(k_bytetohex(n,k16buffer));
  4500                        	.line	683
  4501 00:0C1C: A9 xx xx     	lda	#<~~k16buffer
  4502 00:0C1F: 85 01        	sta	<R0
  4503                        	xref	_BEG_DATA
  4504 00:0C21: A9 xx xx     	lda	#_BEG_DATA>>16
  4505 00:0C24: 85 03        	sta	<R0+2
  4506 00:0C26: D4 03        	pei	<R0+2
  4507 00:0C28: D4 01        	pei	<R0
  4508 00:0C2A: D4 12        	pei	<L209+n_0
  4509 00:0C2C: 22 xx xx xx  	jsl	~~k_bytetohex
  4510 00:0C30: 85 05        	sta	<R1
  4511 00:0C32: 86 07        	stx	<R1+2
  4512 00:0C34: DA           	phx
  4513 00:0C35: 48           	pha
  4514 00:0C36: 22 xx xx xx  	jsl	~~k_debug_string
  4515                        ;	k_debug_string("(");
  4516                        	.line	684
  4517 00:0C3A: F4 xx xx     	pea	#^L204
  4518 00:0C3D: F4 xx xx     	pea	#<L204
  4519 00:0C40: 22 xx xx xx  	jsl	~~k_debug_string
  4520                        ;	k_debug_string(b);
  4521                        	.line	685
  4522 00:0C44: F4 00 00     	pea	#0
  4523 00:0C47: 18           	clc
  4524 00:0C48: 7B           	tdc
  4525 00:0C49: 69 09 00     	adc	#<L210+b_1
  4526 00:0C4C: 48           	pha
  Mon Aug  9 2021 16:52                                                Page 83


  4527 00:0C4D: 22 xx xx xx  	jsl	~~k_debug_string
  4528                        ;	k_debug_string(")");
  4529                        	.line	686
  4530 00:0C51: F4 xx xx     	pea	#^L204+2
  4531 00:0C54: F4 xx xx     	pea	#<L204+2
  4532 00:0C57: 22 xx xx xx  	jsl	~~k_debug_string
  4533                        ;	k_debug_string("\r\n");
  4534                        	.line	687
  4535 00:0C5B: F4 xx xx     	pea	#^L204+4
  4536 00:0C5E: F4 xx xx     	pea	#<L204+4
  4537 00:0C61: 22 xx xx xx  	jsl	~~k_debug_string
  4538                        ;
  4539                        ;	return;
  4540                        	.line	689
  4541                        L212:
  4542 00:0C65: A5 0C        	lda	<L209+2
  4543 00:0C67: 85 12        	sta	<L209+2+6
  4544 00:0C69: A5 0B        	lda	<L209+1
  4545 00:0C6B: 85 11        	sta	<L209+1+6
  4546 00:0C6D: 2B           	pld
  4547 00:0C6E: 3B           	tsc
  4548 00:0C6F: 18           	clc
  4549 00:0C70: 69 10 00     	adc	#L209+6
  4550 00:0C73: 1B           	tcs
  4551 00:0C74: 6B           	rtl
  4552                        ;}
  4553                        	.line	690
  4554                        	.endblock	690
  4555             0000000A   L209	equ	10
  4556             00000009   L210	equ	9
  4557                        	ends
  4558                        	efunc
  4559                        	.endfunc	690,9,10
  4560                        	.line	690
  4561                        	data
  4562                        L204:
  4563 00:015F: 28 00 29 00  	db	$28,$00,$29,$00,$0D,$0A,$00
       00:0163: 0D 0A 00 
  4564 00:0166:              	ends
  4565                        ;
  4566                        ;void k_debug_on(UCHAR n)
  4567                        ;{
  4568                        	.line	692
  4569                        	.line	693
  4570                        	code
  4571                        	xdef	~~k_debug_on
  4572                        	func
  4573                        	.function	693
  4574                        ~~k_debug_on:
  4575                        	longa	on
  4576                        	longi	on
  4577 00:0C75: 3B           	tsc
  4578 00:0C76: 38           	sec
  4579 00:0C77: E9 00 00     	sbc	#L214
  4580 00:0C7A: 1B           	tcs
  4581 00:0C7B: 0B           	phd
  4582 00:0C7C: 5B           	tcd
  4583             00000004   n_0	set	4
  Mon Aug  9 2021 16:52                                                Page 84


  4584                        	.block	693
  4585                        ;	if(n == 0)
  4586                        	.sym	n,4,14,6,8
  4587                        	.line	694
  4588                        ;	{
  4589 00:0C7D: A5 04        	lda	<L214+n_0
  4590 00:0C7F: 29 FF 00     	and	#$ff
  4591 00:0C82: F0 03        	beq	L217
  4592 00:0C84: 82 0D 00     	brl	L10061
  4593                        L217:
  4594                        	.line	695
  4595                        ;		k_debug_string("0");
  4596                        	.line	696
  4597 00:0C87: F4 xx xx     	pea	#^L213
  4598 00:0C8A: F4 xx xx     	pea	#<L213
  4599 00:0C8D: 22 xx xx xx  	jsl	~~k_debug_string
  4600                        ;	}
  4601                        	.line	697
  4602                        ;	else
  4603 00:0C91: 82 0A 00     	brl	L10062
  4604                        L10061:
  4605                        ;	{
  4606                        	.line	699
  4607                        ;		k_debug_string("1");
  4608                        	.line	700
  4609 00:0C94: F4 xx xx     	pea	#^L213+2
  4610 00:0C97: F4 xx xx     	pea	#<L213+2
  4611 00:0C9A: 22 xx xx xx  	jsl	~~k_debug_string
  4612                        ;	}
  4613                        	.line	701
  4614                        L10062:
  4615                        ;}
  4616                        	.line	702
  4617                        L218:
  4618 00:0C9E: A5 02        	lda	<L214+2
  4619 00:0CA0: 85 04        	sta	<L214+2+2
  4620 00:0CA2: A5 01        	lda	<L214+1
  4621 00:0CA4: 85 03        	sta	<L214+1+2
  4622 00:0CA6: 2B           	pld
  4623 00:0CA7: 3B           	tsc
  4624 00:0CA8: 18           	clc
  4625 00:0CA9: 69 02 00     	adc	#L214+2
  4626 00:0CAC: 1B           	tcs
  4627 00:0CAD: 6B           	rtl
  4628                        	.endblock	702
  4629             00000000   L214	equ	0
  4630             00000001   L215	equ	1
  4631                        	ends
  4632                        	efunc
  4633                        	.endfunc	702,1,0
  4634                        	.line	702
  4635                        	data
  4636                        L213:
  4637 00:0166: 30 00 31 00  	db	$30,$00,$31,$00
  4638 00:016A:              	ends
  4639                        ;
  4640                        ;void k_debug_bits(LPSTR debugString, UCHAR n)
  4641                        ;{
  Mon Aug  9 2021 16:52                                                Page 85


  4642                        	.line	704
  4643                        	.line	705
  4644                        	code
  4645                        	xdef	~~k_debug_bits
  4646                        	func
  4647                        	.function	705
  4648                        ~~k_debug_bits:
  4649                        	longa	on
  4650                        	longi	on
  4651 00:0CAE: 3B           	tsc
  4652 00:0CAF: 38           	sec
  4653 00:0CB0: E9 08 00     	sbc	#L220
  4654 00:0CB3: 1B           	tcs
  4655 00:0CB4: 0B           	phd
  4656 00:0CB5: 5B           	tcd
  4657             00000004   debugString_0	set	4
  4658             00000008   n_0	set	8
  4659                        	.block	705
  4660                        ;	PDEBUGBYTEBITS pbits = (PDEBUGBYTEBITS)&n;
  4661                        ;
  4662                        ;	k_debug_string(debugString);
  4663             00000000   pbits_1	set	0
  4664                        	.sym	pbits,0,138,1,32,85
  4665                        	.sym	debugString,4,142,6,32
  4666                        	.sym	n,8,14,6,8
  4667 00:0CB6: 18           	clc
  4668 00:0CB7: 7B           	tdc
  4669 00:0CB8: 69 10 00     	adc	#<L220+n_0
  4670 00:0CBB: 85 05        	sta	<L221+pbits_1
  4671 00:0CBD: A9 00 00     	lda	#$0
  4672 00:0CC0: 85 07        	sta	<L221+pbits_1+2
  4673                        	.line	708
  4674 00:0CC2: D4 0E        	pei	<L220+debugString_0+2
  4675 00:0CC4: D4 0C        	pei	<L220+debugString_0
  4676 00:0CC6: 22 xx xx xx  	jsl	~~k_debug_string
  4677                        ;
  4678                        ;
  4679                        ;	/*
  4680                        ;	k_debug_on(pbits->bit7);
  4681                        ;	k_debug_on(pbits->bit6);
  4682                        ;	k_debug_on(pbits->bit5);
  4683                        ;	k_debug_on(pbits->bit4);
  4684                        ;	k_debug_on(pbits->bit3);
  4685                        ;	k_debug_on(pbits->bit2);
  4686                        ;	k_debug_on(pbits->bit1);
  4687                        ;	k_debug_on(pbits->bit0);
  4688                        ;	*/
  4689                        ;
  4690                        ;	k_debug_on(pbits->bit0);
  4691                        	.line	722
  4692 00:0CCA: E2 20        	sep	#$20
  4693                        	longa	off
  4694 00:0CCC: A7 05        	lda	[<L221+pbits_1]
  4695 00:0CCE: 85 01        	sta	<R0
  4696 00:0CD0: C2 20        	rep	#$20
  4697                        	longa	on
  4698 00:0CD2: E2 20        	sep	#$20
  4699                        	longa	off
  Mon Aug  9 2021 16:52                                                Page 86


  4700 00:0CD4: 46 01        	lsr	<R0
  4701 00:0CD6: 46 01        	lsr	<R0
  4702 00:0CD8: 46 01        	lsr	<R0
  4703 00:0CDA: 46 01        	lsr	<R0
  4704 00:0CDC: 46 01        	lsr	<R0
  4705 00:0CDE: 46 01        	lsr	<R0
  4706 00:0CE0: 46 01        	lsr	<R0
  4707 00:0CE2: C2 20        	rep	#$20
  4708                        	longa	on
  4709 00:0CE4: D4 01        	pei	<R0
  4710 00:0CE6: 22 xx xx xx  	jsl	~~k_debug_on
  4711                        ;	k_debug_on(pbits->bit1);
  4712                        	.line	723
  4713 00:0CEA: E2 20        	sep	#$20
  4714                        	longa	off
  4715 00:0CEC: A7 05        	lda	[<L221+pbits_1]
  4716 00:0CEE: 85 01        	sta	<R0
  4717 00:0CF0: C2 20        	rep	#$20
  4718                        	longa	on
  4719 00:0CF2: E2 20        	sep	#$20
  4720                        	longa	off
  4721 00:0CF4: 46 01        	lsr	<R0
  4722 00:0CF6: 46 01        	lsr	<R0
  4723 00:0CF8: 46 01        	lsr	<R0
  4724 00:0CFA: 46 01        	lsr	<R0
  4725 00:0CFC: 46 01        	lsr	<R0
  4726 00:0CFE: 46 01        	lsr	<R0
  4727 00:0D00: C2 20        	rep	#$20
  4728                        	longa	on
  4729 00:0D02: E2 20        	sep	#$20
  4730                        	longa	off
  4731 00:0D04: A5 01        	lda	<R0
  4732 00:0D06: 29 01        	and	#<$1
  4733 00:0D08: 85 01        	sta	<R0
  4734 00:0D0A: C2 20        	rep	#$20
  4735                        	longa	on
  4736 00:0D0C: D4 01        	pei	<R0
  4737 00:0D0E: 22 xx xx xx  	jsl	~~k_debug_on
  4738                        ;	k_debug_on(pbits->bit2);
  4739                        	.line	724
  4740 00:0D12: E2 20        	sep	#$20
  4741                        	longa	off
  4742 00:0D14: A7 05        	lda	[<L221+pbits_1]
  4743 00:0D16: 85 01        	sta	<R0
  4744 00:0D18: C2 20        	rep	#$20
  4745                        	longa	on
  4746 00:0D1A: E2 20        	sep	#$20
  4747                        	longa	off
  4748 00:0D1C: 46 01        	lsr	<R0
  4749 00:0D1E: 46 01        	lsr	<R0
  4750 00:0D20: 46 01        	lsr	<R0
  4751 00:0D22: 46 01        	lsr	<R0
  4752 00:0D24: 46 01        	lsr	<R0
  4753 00:0D26: C2 20        	rep	#$20
  4754                        	longa	on
  4755 00:0D28: E2 20        	sep	#$20
  4756                        	longa	off
  4757 00:0D2A: A5 01        	lda	<R0
  Mon Aug  9 2021 16:52                                                Page 87


  4758 00:0D2C: 29 01        	and	#<$1
  4759 00:0D2E: 85 01        	sta	<R0
  4760 00:0D30: C2 20        	rep	#$20
  4761                        	longa	on
  4762 00:0D32: D4 01        	pei	<R0
  4763 00:0D34: 22 xx xx xx  	jsl	~~k_debug_on
  4764                        ;	k_debug_on(pbits->bit3);
  4765                        	.line	725
  4766 00:0D38: E2 20        	sep	#$20
  4767                        	longa	off
  4768 00:0D3A: A7 05        	lda	[<L221+pbits_1]
  4769 00:0D3C: 85 01        	sta	<R0
  4770 00:0D3E: C2 20        	rep	#$20
  4771                        	longa	on
  4772 00:0D40: E2 20        	sep	#$20
  4773                        	longa	off
  4774 00:0D42: 46 01        	lsr	<R0
  4775 00:0D44: 46 01        	lsr	<R0
  4776 00:0D46: 46 01        	lsr	<R0
  4777 00:0D48: 46 01        	lsr	<R0
  4778 00:0D4A: C2 20        	rep	#$20
  4779                        	longa	on
  4780 00:0D4C: E2 20        	sep	#$20
  4781                        	longa	off
  4782 00:0D4E: A5 01        	lda	<R0
  4783 00:0D50: 29 01        	and	#<$1
  4784 00:0D52: 85 01        	sta	<R0
  4785 00:0D54: C2 20        	rep	#$20
  4786                        	longa	on
  4787 00:0D56: D4 01        	pei	<R0
  4788 00:0D58: 22 xx xx xx  	jsl	~~k_debug_on
  4789                        ;	k_debug_on(pbits->bit4);
  4790                        	.line	726
  4791 00:0D5C: E2 20        	sep	#$20
  4792                        	longa	off
  4793 00:0D5E: A7 05        	lda	[<L221+pbits_1]
  4794 00:0D60: 85 01        	sta	<R0
  4795 00:0D62: C2 20        	rep	#$20
  4796                        	longa	on
  4797 00:0D64: E2 20        	sep	#$20
  4798                        	longa	off
  4799 00:0D66: 46 01        	lsr	<R0
  4800 00:0D68: 46 01        	lsr	<R0
  4801 00:0D6A: 46 01        	lsr	<R0
  4802 00:0D6C: C2 20        	rep	#$20
  4803                        	longa	on
  4804 00:0D6E: E2 20        	sep	#$20
  4805                        	longa	off
  4806 00:0D70: A5 01        	lda	<R0
  4807 00:0D72: 29 01        	and	#<$1
  4808 00:0D74: 85 01        	sta	<R0
  4809 00:0D76: C2 20        	rep	#$20
  4810                        	longa	on
  4811 00:0D78: D4 01        	pei	<R0
  4812 00:0D7A: 22 xx xx xx  	jsl	~~k_debug_on
  4813                        ;	k_debug_on(pbits->bit5);
  4814                        	.line	727
  4815 00:0D7E: E2 20        	sep	#$20
  Mon Aug  9 2021 16:52                                                Page 88


  4816                        	longa	off
  4817 00:0D80: A7 05        	lda	[<L221+pbits_1]
  4818 00:0D82: 85 01        	sta	<R0
  4819 00:0D84: C2 20        	rep	#$20
  4820                        	longa	on
  4821 00:0D86: E2 20        	sep	#$20
  4822                        	longa	off
  4823 00:0D88: 46 01        	lsr	<R0
  4824 00:0D8A: 46 01        	lsr	<R0
  4825 00:0D8C: C2 20        	rep	#$20
  4826                        	longa	on
  4827 00:0D8E: E2 20        	sep	#$20
  4828                        	longa	off
  4829 00:0D90: A5 01        	lda	<R0
  4830 00:0D92: 29 01        	and	#<$1
  4831 00:0D94: 85 01        	sta	<R0
  4832 00:0D96: C2 20        	rep	#$20
  4833                        	longa	on
  4834 00:0D98: D4 01        	pei	<R0
  4835 00:0D9A: 22 xx xx xx  	jsl	~~k_debug_on
  4836                        ;	k_debug_on(pbits->bit6);
  4837                        	.line	728
  4838 00:0D9E: E2 20        	sep	#$20
  4839                        	longa	off
  4840 00:0DA0: A7 05        	lda	[<L221+pbits_1]
  4841 00:0DA2: 85 01        	sta	<R0
  4842 00:0DA4: C2 20        	rep	#$20
  4843                        	longa	on
  4844 00:0DA6: E2 20        	sep	#$20
  4845                        	longa	off
  4846 00:0DA8: 46 01        	lsr	<R0
  4847 00:0DAA: C2 20        	rep	#$20
  4848                        	longa	on
  4849 00:0DAC: E2 20        	sep	#$20
  4850                        	longa	off
  4851 00:0DAE: A5 01        	lda	<R0
  4852 00:0DB0: 29 01        	and	#<$1
  4853 00:0DB2: 85 01        	sta	<R0
  4854 00:0DB4: C2 20        	rep	#$20
  4855                        	longa	on
  4856 00:0DB6: D4 01        	pei	<R0
  4857 00:0DB8: 22 xx xx xx  	jsl	~~k_debug_on
  4858                        ;	k_debug_on(pbits->bit7);
  4859                        	.line	729
  4860 00:0DBC: E2 20        	sep	#$20
  4861                        	longa	off
  4862 00:0DBE: A7 05        	lda	[<L221+pbits_1]
  4863 00:0DC0: 85 01        	sta	<R0
  4864 00:0DC2: C2 20        	rep	#$20
  4865                        	longa	on
  4866 00:0DC4: E2 20        	sep	#$20
  4867                        	longa	off
  4868 00:0DC6: A5 01        	lda	<R0
  4869 00:0DC8: 29 01        	and	#<$1
  4870 00:0DCA: 85 01        	sta	<R0
  4871 00:0DCC: C2 20        	rep	#$20
  4872                        	longa	on
  4873 00:0DCE: D4 01        	pei	<R0
  Mon Aug  9 2021 16:52                                                Page 89


  4874 00:0DD0: 22 xx xx xx  	jsl	~~k_debug_on
  4875                        ;
  4876                        ;
  4877                        ;	/*
  4878                        ;	k_debug_string(k_bytetohex(pbits->bit7,k16buffer
                    ));
  4879                        ;	k_debug_string(k_bytetohex(pbits->bit6,k16buffer
                    ));
  4880                        ;	k_debug_string(k_bytetohex(pbits->bit5,k16buffer
                    ));
  4881                        ;	k_debug_string(k_bytetohex(pbits->bit4,k16buffer
                    ));
  4882                        ;	k_debug_string(k_bytetohex(pbits->bit3,k16buffer
                    ));
  4883                        ;	k_debug_string(k_bytetohex(pbits->bit2,k16buffer
                    ));
  4884                        ;	k_debug_string(k_bytetohex(pbits->bit1,k16buffer
                    ));
  4885                        ;	k_debug_string(k_bytetohex(pbits->bit0,k16buffer
                    ));
  4886                        ;	*/
  4887                        ;
  4888                        ;	k_debug_string("\r\n");
  4889                        	.line	743
  4890 00:0DD4: F4 xx xx     	pea	#^L219
  4891 00:0DD7: F4 xx xx     	pea	#<L219
  4892 00:0DDA: 22 xx xx xx  	jsl	~~k_debug_string
  4893                        ;}
  4894                        	.line	744
  4895                        L223:
  4896 00:0DDE: A5 0A        	lda	<L220+2
  4897 00:0DE0: 85 10        	sta	<L220+2+6
  4898 00:0DE2: A5 09        	lda	<L220+1
  4899 00:0DE4: 85 0F        	sta	<L220+1+6
  4900 00:0DE6: 2B           	pld
  4901 00:0DE7: 3B           	tsc
  4902 00:0DE8: 18           	clc
  4903 00:0DE9: 69 0E 00     	adc	#L220+6
  4904 00:0DEC: 1B           	tcs
  4905 00:0DED: 6B           	rtl
  4906                        	.endblock	744
  4907             00000008   L220	equ	8
  4908             00000005   L221	equ	5
  4909                        	ends
  4910                        	efunc
  4911                        	.endfunc	744,5,8
  4912                        	.line	744
  4913                        	data
  4914                        L219:
  4915 00:016A: 0D 0A 00     	db	$0D,$0A,$00
  4916 00:016D:              	ends
  4917                        ;
  4918                        ;void k_debug_byte_array(LPCHAR debugString,PBYTE 
                    n,ULONG size)
  4919                        ;{
  4920                        	.line	746
  4921                        	.line	747
  4922                        	code
  Mon Aug  9 2021 16:52                                                Page 90


  4923                        	xdef	~~k_debug_byte_array
  4924                        	func
  4925                        	.function	747
  4926                        ~~k_debug_byte_array:
  4927                        	longa	on
  4928                        	longi	on
  4929 00:0DEE: 3B           	tsc
  4930 00:0DEF: 38           	sec
  4931 00:0DF0: E9 0C 00     	sbc	#L225
  4932 00:0DF3: 1B           	tcs
  4933 00:0DF4: 0B           	phd
  4934 00:0DF5: 5B           	tcd
  4935             00000004   debugString_0	set	4
  4936             00000008   n_0	set	8
  4937             0000000C   size_0	set	12
  4938                        	.block	747
  4939                        ;	ULONG i = 0;
  4940                        ;	k_debug_string(debugString);
  4941             00000000   i_1	set	0
  4942                        	.sym	i,0,18,1,32
  4943                        	.sym	debugString,4,142,6,32
  4944                        	.sym	n,8,142,6,32
  4945                        	.sym	size,12,18,6,32
  4946 00:0DF6: 64 09        	stz	<L226+i_1
  4947 00:0DF8: 64 0B        	stz	<L226+i_1+2
  4948                        	.line	749
  4949 00:0DFA: D4 12        	pei	<L225+debugString_0+2
  4950 00:0DFC: D4 10        	pei	<L225+debugString_0
  4951 00:0DFE: 22 xx xx xx  	jsl	~~k_debug_string
  4952                        ;
  4953                        ;	for(i=0;i<size;i++)
  4954                        	.line	751
  4955 00:0E02: 64 09        	stz	<L226+i_1
  4956 00:0E04: 64 0B        	stz	<L226+i_1+2
  4957 00:0E06: 82 45 00     	brl	L10066
  4958                        L10065:
  4959                        ;	{
  4960                        	.line	752
  4961                        ;		if(i!=0)
  4962                        	.line	753
  4963                        ;			k_debug_string(" ");
  4964 00:0E09: A5 09        	lda	<L226+i_1
  4965 00:0E0B: 05 0B        	ora	<L226+i_1+2
  4966 00:0E0D: D0 03        	bne	L228
  4967 00:0E0F: 82 0A 00     	brl	L10067
  4968                        L228:
  4969                        	.line	754
  4970 00:0E12: F4 xx xx     	pea	#^L224
  4971 00:0E15: F4 xx xx     	pea	#<L224
  4972 00:0E18: 22 xx xx xx  	jsl	~~k_debug_string
  4973                        ;
  4974                        ;		k_debug_string(k_bytetohex(n[i],k16buffe
                    r));
  4975                        L10067:
  4976                        	.line	756
  4977 00:0E1C: A9 xx xx     	lda	#<~~k16buffer
  4978 00:0E1F: 85 01        	sta	<R0
  4979                        	xref	_BEG_DATA
  Mon Aug  9 2021 16:52                                                Page 91


  4980 00:0E21: A9 xx xx     	lda	#_BEG_DATA>>16
  4981 00:0E24: 85 03        	sta	<R0+2
  4982 00:0E26: D4 03        	pei	<R0+2
  4983 00:0E28: D4 01        	pei	<R0
  4984 00:0E2A: 18           	clc
  4985 00:0E2B: A5 14        	lda	<L225+n_0
  4986 00:0E2D: 65 09        	adc	<L226+i_1
  4987 00:0E2F: 85 05        	sta	<R1
  4988 00:0E31: A5 16        	lda	<L225+n_0+2
  4989 00:0E33: 65 0B        	adc	<L226+i_1+2
  4990 00:0E35: 85 07        	sta	<R1+2
  4991 00:0E37: A7 05        	lda	[<R1]
  4992 00:0E39: 48           	pha
  4993 00:0E3A: 22 xx xx xx  	jsl	~~k_bytetohex
  4994 00:0E3E: 85 05        	sta	<R1
  4995 00:0E40: 86 07        	stx	<R1+2
  4996 00:0E42: DA           	phx
  4997 00:0E43: 48           	pha
  4998 00:0E44: 22 xx xx xx  	jsl	~~k_debug_string
  4999                        ;	}
  5000                        	.line	757
  5001                        L10063:
  5002 00:0E48: E6 09        	inc	<L226+i_1
  5003 00:0E4A: D0 02        	bne	L229
  5004 00:0E4C: E6 0B        	inc	<L226+i_1+2
  5005                        L229:
  5006                        L10066:
  5007 00:0E4E: A5 09        	lda	<L226+i_1
  5008 00:0E50: C5 18        	cmp	<L225+size_0
  5009 00:0E52: A5 0B        	lda	<L226+i_1+2
  5010 00:0E54: E5 1A        	sbc	<L225+size_0+2
  5011 00:0E56: B0 03        	bcs	L230
  5012 00:0E58: 82 AE FF     	brl	L10065
  5013                        L230:
  5014                        L10064:
  5015                        ;
  5016                        ;	k_debug_string("\r\n");
  5017                        	.line	759
  5018 00:0E5B: F4 xx xx     	pea	#^L224+2
  5019 00:0E5E: F4 xx xx     	pea	#<L224+2
  5020 00:0E61: 22 xx xx xx  	jsl	~~k_debug_string
  5021                        ;
  5022                        ;	return;
  5023                        	.line	761
  5024                        L231:
  5025 00:0E65: A5 0E        	lda	<L225+2
  5026 00:0E67: 85 1A        	sta	<L225+2+12
  5027 00:0E69: A5 0D        	lda	<L225+1
  5028 00:0E6B: 85 19        	sta	<L225+1+12
  5029 00:0E6D: 2B           	pld
  5030 00:0E6E: 3B           	tsc
  5031 00:0E6F: 18           	clc
  5032 00:0E70: 69 18 00     	adc	#L225+12
  5033 00:0E73: 1B           	tcs
  5034 00:0E74: 6B           	rtl
  5035                        ;}
  5036                        	.line	762
  5037                        	.endblock	762
  Mon Aug  9 2021 16:52                                                Page 92


  5038             0000000C   L225	equ	12
  5039             00000009   L226	equ	9
  5040                        	ends
  5041                        	efunc
  5042                        	.endfunc	762,9,12
  5043                        	.line	762
  5044                        	data
  5045                        L224:
  5046 00:016D: 20 00 0D 0A  	db	$20,$00,$0D,$0A,$00
       00:0171: 00 
  5047 00:0172:              	ends
  5048                        ;
  5049                        ;
  5050                        ;/**
  5051                        ; *
  5052                        ; *
  5053                        ; */
  5054                        ;void k_debug_node(PFXNODE node)
  5055                        ;{
  5056                        	.line	769
  5057                        	.line	770
  5058                        	code
  5059                        	xdef	~~k_debug_node
  5060                        	func
  5061                        	.function	770
  5062                        ~~k_debug_node:
  5063                        	longa	on
  5064                        	longi	on
  5065 00:0E75: 3B           	tsc
  5066 00:0E76: 38           	sec
  5067 00:0E77: E9 04 00     	sbc	#L233
  5068 00:0E7A: 1B           	tcs
  5069 00:0E7B: 0B           	phd
  5070 00:0E7C: 5B           	tcd
  5071             00000004   node_0	set	4
  5072                        	.block	770
  5073                        ;	k_debug_pointer("     NODE:",node);
  5074                        	.sym	node,4,138,6,32,5
  5075                        	.line	771
  5076 00:0E7D: D4 0A        	pei	<L233+node_0+2
  5077 00:0E7F: D4 08        	pei	<L233+node_0
  5078 00:0E81: F4 xx xx     	pea	#^L232
  5079 00:0E84: F4 xx xx     	pea	#<L232
  5080 00:0E87: 22 xx xx xx  	jsl	~~k_debug_pointer
  5081                        ;	if(node && node->name)
  5082                        	.line	772
  5083                        ;	{
  5084 00:0E8B: A5 08        	lda	<L233+node_0
  5085 00:0E8D: 05 0A        	ora	<L233+node_0+2
  5086 00:0E8F: D0 03        	bne	L236
  5087 00:0E91: 82 74 00     	brl	L10068
  5088                        L236:
  5089 00:0E94: 18           	clc
  5090 00:0E95: A9 0E 00     	lda	#$e
  5091 00:0E98: 65 08        	adc	<L233+node_0
  5092 00:0E9A: 85 01        	sta	<R0
  5093 00:0E9C: A9 00 00     	lda	#$0
  5094 00:0E9F: 65 0A        	adc	<L233+node_0+2
  Mon Aug  9 2021 16:52                                                Page 93


  5095 00:0EA1: 85 03        	sta	<R0+2
  5096 00:0EA3: A5 01        	lda	<R0
  5097 00:0EA5: 05 03        	ora	<R0+2
  5098 00:0EA7: D0 03        	bne	L237
  5099 00:0EA9: 82 5C 00     	brl	L10068
  5100                        L237:
  5101                        	.line	773
  5102                        ;		node->name[31] = 0;
  5103                        	.line	774
  5104 00:0EAC: E2 20        	sep	#$20
  5105                        	longa	off
  5106 00:0EAE: A9 00        	lda	#$0
  5107 00:0EB0: A0 2D 00     	ldy	#$2d
  5108 00:0EB3: 97 08        	sta	[<L233+node_0],Y
  5109 00:0EB5: C2 20        	rep	#$20
  5110                        	longa	on
  5111                        ;		k_debug_string("NODE NAME:");
  5112                        	.line	775
  5113 00:0EB7: F4 xx xx     	pea	#^L232+11
  5114 00:0EBA: F4 xx xx     	pea	#<L232+11
  5115 00:0EBD: 22 xx xx xx  	jsl	~~k_debug_string
  5116                        ;		k_debug_string(node->name);
  5117                        	.line	776
  5118 00:0EC1: 18           	clc
  5119 00:0EC2: A9 0E 00     	lda	#$e
  5120 00:0EC5: 65 08        	adc	<L233+node_0
  5121 00:0EC7: 85 01        	sta	<R0
  5122 00:0EC9: A9 00 00     	lda	#$0
  5123 00:0ECC: 65 0A        	adc	<L233+node_0+2
  5124 00:0ECE: 85 03        	sta	<R0+2
  5125 00:0ED0: D4 03        	pei	<R0+2
  5126 00:0ED2: D4 01        	pei	<R0
  5127 00:0ED4: 22 xx xx xx  	jsl	~~k_debug_string
  5128                        ;		k_debug_string("\r\n");
  5129                        	.line	777
  5130 00:0ED8: F4 xx xx     	pea	#^L232+22
  5131 00:0EDB: F4 xx xx     	pea	#<L232+22
  5132 00:0EDE: 22 xx xx xx  	jsl	~~k_debug_string
  5133                        ;
  5134                        ;		k_debug_integer("     TYPE:",node->type)
                    ;
  5135                        	.line	779
  5136 00:0EE2: A7 08        	lda	[<L233+node_0]
  5137 00:0EE4: 29 FF 00     	and	#$ff
  5138 00:0EE7: 48           	pha
  5139 00:0EE8: F4 xx xx     	pea	#^L232+25
  5140 00:0EEB: F4 xx xx     	pea	#<L232+25
  5141 00:0EEE: 22 xx xx xx  	jsl	~~k_debug_integer
  5142                        ;		k_debug_pointer("  POINTER:",node->data)
                    ;
  5143                        	.line	780
  5144 00:0EF2: A0 04 00     	ldy	#$4
  5145 00:0EF5: B7 08        	lda	[<L233+node_0],Y
  5146 00:0EF7: 48           	pha
  5147 00:0EF8: A0 02 00     	ldy	#$2
  5148 00:0EFB: B7 08        	lda	[<L233+node_0],Y
  5149 00:0EFD: 48           	pha
  5150 00:0EFE: F4 xx xx     	pea	#^L232+36
  Mon Aug  9 2021 16:52                                                Page 94


  5151 00:0F01: F4 xx xx     	pea	#<L232+36
  5152 00:0F04: 22 xx xx xx  	jsl	~~k_debug_pointer
  5153                        ;
  5154                        ;	}
  5155                        	.line	782
  5156                        ;}
  5157                        L10068:
  5158                        	.line	783
  5159                        L238:
  5160 00:0F08: A5 06        	lda	<L233+2
  5161 00:0F0A: 85 0A        	sta	<L233+2+4
  5162 00:0F0C: A5 05        	lda	<L233+1
  5163 00:0F0E: 85 09        	sta	<L233+1+4
  5164 00:0F10: 2B           	pld
  5165 00:0F11: 3B           	tsc
  5166 00:0F12: 18           	clc
  5167 00:0F13: 69 08 00     	adc	#L233+4
  5168 00:0F16: 1B           	tcs
  5169 00:0F17: 6B           	rtl
  5170                        	.endblock	783
  5171             00000004   L233	equ	4
  5172             00000005   L234	equ	5
  5173                        	ends
  5174                        	efunc
  5175                        	.endfunc	783,5,4
  5176                        	.line	783
  5177                        	data
  5178                        L232:
  5179 00:0172: 20 20 20 20  	db	$20,$20,$20,$20,$20,$4E,$4F,$44,$45,$3A,
                    $00,$4E,$4F,$44,$45
       00:0176: 20 4E 4F 44 
       00:017A: 45 3A 00 4E 
       00:017E: 4F 44 45 
  5180 00:0181: 20 4E 41 4D  	db	$20,$4E,$41,$4D,$45,$3A,$00,$0D,$0A,$00,
                    $20,$20,$20,$20,$20
       00:0185: 45 3A 00 0D 
       00:0189: 0A 00 20 20 
       00:018D: 20 20 20 
  5181 00:0190: 54 59 50 45  	db	$54,$59,$50,$45,$3A,$00,$20,$20,$50,$4F,
                    $49,$4E,$54,$45,$52
       00:0194: 3A 00 20 20 
       00:0198: 50 4F 49 4E 
       00:019C: 54 45 52 
  5182 00:019F: 3A 00        	db	$3A,$00
  5183 00:01A1:              	ends
  5184                        ;/**
  5185                        ; *
  5186                        ; *
  5187                        ; */
  5188                        ;void k_debug_nodelist(PFXNODE head)
  5189                        ;{
  5190                        	.line	788
  5191                        	.line	789
  5192                        	code
  5193                        	xdef	~~k_debug_nodelist
  5194                        	func
  5195                        	.function	789
  5196                        ~~k_debug_nodelist:
  Mon Aug  9 2021 16:52                                                Page 95


  5197                        	longa	on
  5198                        	longi	on
  5199 00:0F18: 3B           	tsc
  5200 00:0F19: 38           	sec
  5201 00:0F1A: E9 08 00     	sbc	#L240
  5202 00:0F1D: 1B           	tcs
  5203 00:0F1E: 0B           	phd
  5204 00:0F1F: 5B           	tcd
  5205             00000004   head_0	set	4
  5206                        	.block	789
  5207                        ;	PFXNODE ptr = head;
  5208                        ;	while(ptr!=NULL)
  5209             00000000   ptr_1	set	0
  5210                        	.sym	ptr,0,138,1,32,5
  5211                        	.sym	head,4,138,6,32,5
  5212 00:0F20: A5 0C        	lda	<L240+head_0
  5213 00:0F22: 85 05        	sta	<L241+ptr_1
  5214 00:0F24: A5 0E        	lda	<L240+head_0+2
  5215 00:0F26: 85 07        	sta	<L241+ptr_1+2
  5216                        	.line	791
  5217                        L10069:
  5218 00:0F28: A5 05        	lda	<L241+ptr_1
  5219 00:0F2A: 05 07        	ora	<L241+ptr_1+2
  5220 00:0F2C: D0 03        	bne	L243
  5221 00:0F2E: 82 21 00     	brl	L10070
  5222                        L243:
  5223                        ;	{
  5224                        	.line	792
  5225                        ;		k_debug_node(ptr);
  5226                        	.line	793
  5227 00:0F31: D4 07        	pei	<L241+ptr_1+2
  5228 00:0F33: D4 05        	pei	<L241+ptr_1
  5229 00:0F35: 22 xx xx xx  	jsl	~~k_debug_node
  5230                        ;		ptr = ptr->next;
  5231                        	.line	794
  5232 00:0F39: A0 0A 00     	ldy	#$a
  5233 00:0F3C: B7 05        	lda	[<L241+ptr_1],Y
  5234 00:0F3E: 85 01        	sta	<R0
  5235 00:0F40: A0 0C 00     	ldy	#$c
  5236 00:0F43: B7 05        	lda	[<L241+ptr_1],Y
  5237 00:0F45: 85 03        	sta	<R0+2
  5238 00:0F47: A5 01        	lda	<R0
  5239 00:0F49: 85 05        	sta	<L241+ptr_1
  5240 00:0F4B: A5 03        	lda	<R0+2
  5241 00:0F4D: 85 07        	sta	<L241+ptr_1+2
  5242                        ;	}
  5243                        	.line	795
  5244 00:0F4F: 82 D6 FF     	brl	L10069
  5245                        L10070:
  5246                        ;}
  5247                        	.line	796
  5248                        L244:
  5249 00:0F52: A5 0A        	lda	<L240+2
  5250 00:0F54: 85 0E        	sta	<L240+2+4
  5251 00:0F56: A5 09        	lda	<L240+1
  5252 00:0F58: 85 0D        	sta	<L240+1+4
  5253 00:0F5A: 2B           	pld
  5254 00:0F5B: 3B           	tsc
  Mon Aug  9 2021 16:52                                                Page 96


  5255 00:0F5C: 18           	clc
  5256 00:0F5D: 69 0C 00     	adc	#L240+4
  5257 00:0F60: 1B           	tcs
  5258 00:0F61: 6B           	rtl
  5259                        	.endblock	796
  5260             00000008   L240	equ	8
  5261             00000005   L241	equ	5
  5262                        	ends
  5263                        	efunc
  5264                        	.endfunc	796,5,8
  5265                        	.line	796
  5266                        ;
  5267                        ;/**
  5268                        ; *
  5269                        ; *
  5270                        ; */
  5271                        ;void k_debug_nodelist_list(PFXNODELIST list,FOREA
                    CHNODE handler)
  5272                        ;{
  5273                        	.line	802
  5274                        	.line	803
  5275                        	code
  5276                        	xdef	~~k_debug_nodelist_list
  5277                        	func
  5278                        	.function	803
  5279                        ~~k_debug_nodelist_list:
  5280                        	longa	on
  5281                        	longi	on
  5282 00:0F62: 3B           	tsc
  5283 00:0F63: 38           	sec
  5284 00:0F64: E9 08 00     	sbc	#L245
  5285 00:0F67: 1B           	tcs
  5286 00:0F68: 0B           	phd
  5287 00:0F69: 5B           	tcd
  5288             00000004   list_0	set	4
  5289             00000008   handler_0	set	8
  5290                        	.block	803
  5291                        ;	PFXNODE ptr = list->listhead->next;
  5292                        ;
  5293                        ;	k_debug_strings("NODELIST:",(LPCHAR)list->listhe
                    ad->data);
  5294             00000000   ptr_1	set	0
  5295                        	.sym	ptr,0,138,1,32,5
  5296                        	.sym	list,4,138,6,32,6
  5297                        	.sym	handler,8,641,6,32
  5298 00:0F6A: A7 0C        	lda	[<L245+list_0]
  5299 00:0F6C: 85 01        	sta	<R0
  5300 00:0F6E: A0 02 00     	ldy	#$2
  5301 00:0F71: B7 0C        	lda	[<L245+list_0],Y
  5302 00:0F73: 85 03        	sta	<R0+2
  5303 00:0F75: A0 0A 00     	ldy	#$a
  5304 00:0F78: B7 01        	lda	[<R0],Y
  5305 00:0F7A: 85 05        	sta	<L246+ptr_1
  5306 00:0F7C: A0 0C 00     	ldy	#$c
  5307 00:0F7F: B7 01        	lda	[<R0],Y
  5308 00:0F81: 85 07        	sta	<L246+ptr_1+2
  5309                        	.line	806
  5310 00:0F83: A7 0C        	lda	[<L245+list_0]
  Mon Aug  9 2021 16:52                                                Page 97


  5311 00:0F85: 85 01        	sta	<R0
  5312 00:0F87: A0 02 00     	ldy	#$2
  5313 00:0F8A: B7 0C        	lda	[<L245+list_0],Y
  5314 00:0F8C: 85 03        	sta	<R0+2
  5315 00:0F8E: A0 04 00     	ldy	#$4
  5316 00:0F91: B7 01        	lda	[<R0],Y
  5317 00:0F93: 48           	pha
  5318 00:0F94: A0 02 00     	ldy	#$2
  5319 00:0F97: B7 01        	lda	[<R0],Y
  5320 00:0F99: 48           	pha
  5321 00:0F9A: F4 xx xx     	pea	#^L239
  5322 00:0F9D: F4 xx xx     	pea	#<L239
  5323 00:0FA0: 22 xx xx xx  	jsl	~~k_debug_strings
  5324                        ;
  5325                        ;	k_debug_nodelist_with_data(list->listhead->next,
                    handler);
  5326                        	.line	808
  5327 00:0FA4: D4 12        	pei	<L245+handler_0+2
  5328 00:0FA6: D4 10        	pei	<L245+handler_0
  5329 00:0FA8: A7 0C        	lda	[<L245+list_0]
  5330 00:0FAA: 85 01        	sta	<R0
  5331 00:0FAC: A0 02 00     	ldy	#$2
  5332 00:0FAF: B7 0C        	lda	[<L245+list_0],Y
  5333 00:0FB1: 85 03        	sta	<R0+2
  5334 00:0FB3: A0 0C 00     	ldy	#$c
  5335 00:0FB6: B7 01        	lda	[<R0],Y
  5336 00:0FB8: 48           	pha
  5337 00:0FB9: A0 0A 00     	ldy	#$a
  5338 00:0FBC: B7 01        	lda	[<R0],Y
  5339 00:0FBE: 48           	pha
  5340 00:0FBF: 22 xx xx xx  	jsl	~~k_debug_nodelist_with_data
  5341                        ;}
  5342                        	.line	809
  5343                        L248:
  5344 00:0FC3: A5 0A        	lda	<L245+2
  5345 00:0FC5: 85 12        	sta	<L245+2+8
  5346 00:0FC7: A5 09        	lda	<L245+1
  5347 00:0FC9: 85 11        	sta	<L245+1+8
  5348 00:0FCB: 2B           	pld
  5349 00:0FCC: 3B           	tsc
  5350 00:0FCD: 18           	clc
  5351 00:0FCE: 69 10 00     	adc	#L245+8
  5352 00:0FD1: 1B           	tcs
  5353 00:0FD2: 6B           	rtl
  5354                        	.endblock	809
  5355             00000008   L245	equ	8
  5356             00000005   L246	equ	5
  5357                        	ends
  5358                        	efunc
  5359                        	.endfunc	809,5,8
  5360                        	.line	809
  5361                        	data
  5362                        L239:
  5363 00:01A1: 4E 4F 44 45  	db	$4E,$4F,$44,$45,$4C,$49,$53,$54,$3A,$00
       00:01A5: 4C 49 53 54 
       00:01A9: 3A 00 
  5364 00:01AB:              	ends
  5365                        ;
  Mon Aug  9 2021 16:52                                                Page 98


  5366                        ;
  5367                        ;void k_debug_nodelist_with_data(PFXNODE head,FORE
                    ACHNODE handler)
  5368                        ;{
  5369                        	.line	812
  5370                        	.line	813
  5371                        	code
  5372                        	xdef	~~k_debug_nodelist_with_data
  5373                        	func
  5374                        	.function	813
  5375                        ~~k_debug_nodelist_with_data:
  5376                        	longa	on
  5377                        	longi	on
  5378 00:0FD3: 3B           	tsc
  5379 00:0FD4: 38           	sec
  5380 00:0FD5: E9 08 00     	sbc	#L250
  5381 00:0FD8: 1B           	tcs
  5382 00:0FD9: 0B           	phd
  5383 00:0FDA: 5B           	tcd
  5384             00000004   head_0	set	4
  5385             00000008   handler_0	set	8
  5386                        	.block	813
  5387                        ;	PFXNODE ptr = head;
  5388                        ;	while(ptr!=NULL)
  5389             00000000   ptr_1	set	0
  5390                        	.sym	ptr,0,138,1,32,5
  5391                        	.sym	head,4,138,6,32,5
  5392                        	.sym	handler,8,641,6,32
  5393 00:0FDB: A5 0C        	lda	<L250+head_0
  5394 00:0FDD: 85 05        	sta	<L251+ptr_1
  5395 00:0FDF: A5 0E        	lda	<L250+head_0+2
  5396 00:0FE1: 85 07        	sta	<L251+ptr_1+2
  5397                        	.line	815
  5398                        L10071:
  5399 00:0FE3: A5 05        	lda	<L251+ptr_1
  5400 00:0FE5: 05 07        	ora	<L251+ptr_1+2
  5401 00:0FE7: D0 03        	bne	L253
  5402 00:0FE9: 82 44 00     	brl	L10072
  5403                        L253:
  5404                        ;	{
  5405                        	.line	816
  5406                        ;		k_debug_node(ptr);
  5407                        	.line	817
  5408 00:0FEC: D4 07        	pei	<L251+ptr_1+2
  5409 00:0FEE: D4 05        	pei	<L251+ptr_1
  5410 00:0FF0: 22 xx xx xx  	jsl	~~k_debug_node
  5411                        ;		if(handler)
  5412                        	.line	818
  5413                        ;			handler(NULL,ptr->data);
  5414 00:0FF4: A5 10        	lda	<L250+handler_0
  5415 00:0FF6: 05 12        	ora	<L250+handler_0+2
  5416 00:0FF8: D0 03        	bne	L254
  5417 00:0FFA: 82 1A 00     	brl	L10073
  5418                        L254:
  5419                        	.line	819
  5420 00:0FFD: A0 04 00     	ldy	#$4
  5421 00:1000: B7 05        	lda	[<L251+ptr_1],Y
  5422 00:1002: 48           	pha
  Mon Aug  9 2021 16:52                                                Page 99


  5423 00:1003: A0 02 00     	ldy	#$2
  5424 00:1006: B7 05        	lda	[<L251+ptr_1],Y
  5425 00:1008: 48           	pha
  5426 00:1009: F4 00 00     	pea	#^$0
  5427 00:100C: F4 00 00     	pea	#<$0
  5428 00:100F: A6 12        	ldx	<L250+handler_0+2
  5429 00:1011: A5 10        	lda	<L250+handler_0
  5430                        	xref	~~~lcal
  5431 00:1013: 22 xx xx xx  	jsl	~~~lcal
  5432                        ;		ptr = ptr->next;
  5433                        L10073:
  5434                        	.line	820
  5435 00:1017: A0 0A 00     	ldy	#$a
  5436 00:101A: B7 05        	lda	[<L251+ptr_1],Y
  5437 00:101C: 85 01        	sta	<R0
  5438 00:101E: A0 0C 00     	ldy	#$c
  5439 00:1021: B7 05        	lda	[<L251+ptr_1],Y
  5440 00:1023: 85 03        	sta	<R0+2
  5441 00:1025: A5 01        	lda	<R0
  5442 00:1027: 85 05        	sta	<L251+ptr_1
  5443 00:1029: A5 03        	lda	<R0+2
  5444 00:102B: 85 07        	sta	<L251+ptr_1+2
  5445                        ;	}
  5446                        	.line	821
  5447 00:102D: 82 B3 FF     	brl	L10071
  5448                        L10072:
  5449                        ;}
  5450                        	.line	822
  5451                        L255:
  5452 00:1030: A5 0A        	lda	<L250+2
  5453 00:1032: 85 12        	sta	<L250+2+8
  5454 00:1034: A5 09        	lda	<L250+1
  5455 00:1036: 85 11        	sta	<L250+1+8
  5456 00:1038: 2B           	pld
  5457 00:1039: 3B           	tsc
  5458 00:103A: 18           	clc
  5459 00:103B: 69 10 00     	adc	#L250+8
  5460 00:103E: 1B           	tcs
  5461 00:103F: 6B           	rtl
  5462                        	.endblock	822
  5463             00000008   L250	equ	8
  5464             00000005   L251	equ	5
  5465                        	ends
  5466                        	efunc
  5467                        	.endfunc	822,5,8
  5468                        	.line	822
  5469                        ;/*
  5470                        ; *
  5471                        ; *
  5472                        ; *
  5473                        ; */
  5474                        ;void k_debug_crlf(void)
  5475                        ;{
  5476                        	.line	828
  5477                        	.line	829
  5478                        	code
  5479                        	xdef	~~k_debug_crlf
  5480                        	func
  Mon Aug  9 2021 16:52                                                Page 100


  5481                        	.function	829
  5482                        ~~k_debug_crlf:
  5483                        	longa	on
  5484                        	longi	on
  5485 00:1040: 3B           	tsc
  5486 00:1041: 38           	sec
  5487 00:1042: E9 00 00     	sbc	#L256
  5488 00:1045: 1B           	tcs
  5489 00:1046: 0B           	phd
  5490 00:1047: 5B           	tcd
  5491                        	.block	829
  5492                        ;	k_debug_string("\r\n");
  5493                        	.line	830
  5494 00:1048: F4 xx xx     	pea	#^L249
  5495 00:104B: F4 xx xx     	pea	#<L249
  5496 00:104E: 22 xx xx xx  	jsl	~~k_debug_string
  5497                        ;}
  5498                        	.line	831
  5499                        L259:
  5500 00:1052: 2B           	pld
  5501 00:1053: 3B           	tsc
  5502 00:1054: 18           	clc
  5503 00:1055: 69 00 00     	adc	#L256
  5504 00:1058: 1B           	tcs
  5505 00:1059: 6B           	rtl
  5506                        	.endblock	831
  5507             00000000   L256	equ	0
  5508             00000001   L257	equ	1
  5509                        	ends
  5510                        	efunc
  5511                        	.endfunc	831,1,0
  5512                        	.line	831
  5513                        	data
  5514                        L249:
  5515 00:01AB: 0D 0A 00     	db	$0D,$0A,$00
  5516 00:01AE:              	ends
  5517                        ;/*
  5518                        ;void k_debug_uart_status_com1(int lc)
  5519                        ;{
  5520                        ;	char uartbuffer[3];
  5521                        ;	int lcp = 0;
  5522                        ;
  5523                        ;	//lcp = k_put_string(lcp,lc,"XX",15,0);
  5524                        ;	//k_put_char(lcp,lc,'-',15,0);lcp++;
  5525                        ;	lcp = k_put_string(lcp,lc,k_bytetohex(UART1_BASE
                    [UART_DLH],uartbuffer),15,0);
  5526                        ;
  5527                        ;	k_put_char(lcp,lc,'-',15,0);lcp++;
  5528                        ;
  5529                        ;	lcp = k_put_string(lcp,lc,k_bytetohex(UART1_BASE
                    [UART_FCR],uartbuffer),15,0);
  5530                        ;
  5531                        ;	k_put_char(lcp,lc,'-',15,0);lcp++;
  5532                        ;
  5533                        ;	lcp = k_put_string(lcp,lc,k_bytetohex(UART1_BASE
                    [UART_DLH],uartbuffer),15,0);
  5534                        ;
  5535                        ;	k_put_char(lcp,lc,'-',15,0);lcp++;
  Mon Aug  9 2021 16:52                                                Page 101


  5536                        ;
  5537                        ;	lcp = k_put_string(lcp,lc,k_bytetohex(UART1_BASE
                    [UART_LCR],uartbuffer),15,0);
  5538                        ;
  5539                        ;	k_put_char(lcp,lc,'-',15,0);lcp++;
  5540                        ;
  5541                        ;	lcp = k_put_string(lcp,lc,k_bytetohex(UART1_BASE
                    [UART_MCR],uartbuffer),15,0);
  5542                        ;
  5543                        ;	k_put_char(lcp,lc,'-',15,0);lcp++;
  5544                        ;
  5545                        ;	lcp = k_put_string(lcp,lc,k_bytetohex(UART1_BASE
                    [UART_MSR],uartbuffer),15,0);
  5546                        ;}
  5547                        ;
  5548                        ;void k_debug_uart_status_com2(int lc)
  5549                        ;{
  5550                        ;	char uartbuffer[3];
  5551                        ;	int lcp = 0;
  5552                        ;
  5553                        ;	//lcp = k_put_string(lcp,lc,"XX",15,0);
  5554                        ;	//k_put_char(lcp,lc,'-',15,0);lcp++;
  5555                        ;	lcp = k_put_string(lcp,lc,k_bytetohex(UART2_BASE
                    [UART_DLH],uartbuffer),15,0);
  5556                        ;
  5557                        ;	k_put_char(lcp,lc,'-',15,0);lcp++;
  5558                        ;
  5559                        ;	lcp = k_put_string(lcp,lc,k_bytetohex(UART2_BASE
                    [UART_FCR],uartbuffer),15,0);
  5560                        ;
  5561                        ;	k_put_char(lcp,lc,'-',15,0);lcp++;
  5562                        ;
  5563                        ;	lcp = k_put_string(lcp,lc,k_bytetohex(UART2_BASE
                    [UART_DLH],uartbuffer),15,0);
  5564                        ;
  5565                        ;	k_put_char(lcp,lc,'-',15,0);lcp++;
  5566                        ;
  5567                        ;	lcp = k_put_string(lcp,lc,k_bytetohex(UART2_BASE
                    [UART_LCR],uartbuffer),15,0);
  5568                        ;
  5569                        ;	k_put_char(lcp,lc,'-',15,0);lcp++;
  5570                        ;
  5571                        ;	lcp = k_put_string(lcp,lc,k_bytetohex(UART2_BASE
                    [UART_MCR],uartbuffer),15,0);
  5572                        ;
  5573                        ;	k_put_char(lcp,lc,'-',15,0);lcp++;
  5574                        ;
  5575                        ;	lcp = k_put_string(lcp,lc,k_bytetohex(UART2_BASE
                    [UART_MSR],uartbuffer),15,0);
  5576                        ;}
  5577                        ;*/
  5578                        ;void k_debug_rect(LPCSTR message,PRECT prect)
  5579                        ;{
  5580                        	.line	893
  5581                        	.line	894
  5582                        	code
  5583                        	xdef	~~k_debug_rect
  5584                        	func
  Mon Aug  9 2021 16:52                                                Page 102


  5585                        	.function	894
  5586                        ~~k_debug_rect:
  5587                        	longa	on
  5588                        	longi	on
  5589 00:105A: 3B           	tsc
  5590 00:105B: 38           	sec
  5591 00:105C: E9 10 00     	sbc	#L261
  5592 00:105F: 1B           	tcs
  5593 00:1060: 0B           	phd
  5594 00:1061: 5B           	tcd
  5595             00000004   message_0	set	4
  5596             00000008   prect_0	set	8
  5597                        	.block	894
  5598                        ;	char buffer[16];
  5599                        ;
  5600                        ;	k_debug_string((LPCHAR)message);
  5601             00000000   buffer_1	set	0
  5602                        	.sym	buffer,0,110,1,0,16
  5603                        	.sym	message,4,142,6,32
  5604                        	.sym	prect,8,138,6,32,26
  5605                        	.line	897
  5606 00:1062: D4 16        	pei	<L261+message_0+2
  5607 00:1064: D4 14        	pei	<L261+message_0
  5608 00:1066: 22 xx xx xx  	jsl	~~k_debug_string
  5609                        ;	k_debug_crlf();
  5610                        	.line	898
  5611 00:106A: 22 xx xx xx  	jsl	~~k_debug_crlf
  5612                        ;	k_debug_integer("    RECT X:",prect->x);
  5613                        	.line	899
  5614 00:106E: A7 18        	lda	[<L261+prect_0]
  5615 00:1070: 48           	pha
  5616 00:1071: F4 xx xx     	pea	#^L260
  5617 00:1074: F4 xx xx     	pea	#<L260
  5618 00:1077: 22 xx xx xx  	jsl	~~k_debug_integer
  5619                        ;	k_debug_integer("    RECT Y:",prect->y);
  5620                        	.line	900
  5621 00:107B: A0 02 00     	ldy	#$2
  5622 00:107E: B7 18        	lda	[<L261+prect_0],Y
  5623 00:1080: 48           	pha
  5624 00:1081: F4 xx xx     	pea	#^L260+12
  5625 00:1084: F4 xx xx     	pea	#<L260+12
  5626 00:1087: 22 xx xx xx  	jsl	~~k_debug_integer
  5627                        ;	k_debug_integer("    RECT W:",prect->width);
  5628                        	.line	901
  5629 00:108B: A0 08 00     	ldy	#$8
  5630 00:108E: B7 18        	lda	[<L261+prect_0],Y
  5631 00:1090: 48           	pha
  5632 00:1091: F4 xx xx     	pea	#^L260+24
  5633 00:1094: F4 xx xx     	pea	#<L260+24
  5634 00:1097: 22 xx xx xx  	jsl	~~k_debug_integer
  5635                        ;	k_debug_integer("    RECT H:",prect->height);
  5636                        	.line	902
  5637 00:109B: A0 0A 00     	ldy	#$a
  5638 00:109E: B7 18        	lda	[<L261+prect_0],Y
  5639 00:10A0: 48           	pha
  5640 00:10A1: F4 xx xx     	pea	#^L260+36
  5641 00:10A4: F4 xx xx     	pea	#<L260+36
  5642 00:10A7: 22 xx xx xx  	jsl	~~k_debug_integer
  Mon Aug  9 2021 16:52                                                Page 103


  5643                        ;}
  5644                        	.line	903
  5645                        L264:
  5646 00:10AB: A5 12        	lda	<L261+2
  5647 00:10AD: 85 1A        	sta	<L261+2+8
  5648 00:10AF: A5 11        	lda	<L261+1
  5649 00:10B1: 85 19        	sta	<L261+1+8
  5650 00:10B3: 2B           	pld
  5651 00:10B4: 3B           	tsc
  5652 00:10B5: 18           	clc
  5653 00:10B6: 69 18 00     	adc	#L261+8
  5654 00:10B9: 1B           	tcs
  5655 00:10BA: 6B           	rtl
  5656                        	.endblock	903
  5657             00000010   L261	equ	16
  5658             00000001   L262	equ	1
  5659                        	ends
  5660                        	efunc
  5661                        	.endfunc	903,1,16
  5662                        	.line	903
  5663                        	data
  5664                        L260:
  5665 00:01AE: 20 20 20 20  	db	$20,$20,$20,$20,$52,$45,$43,$54,$20,$58,
                    $3A,$00,$20,$20,$20
       00:01B2: 52 45 43 54 
       00:01B6: 20 58 3A 00 
       00:01BA: 20 20 20 
  5666 00:01BD: 20 52 45 43  	db	$20,$52,$45,$43,$54,$20,$59,$3A,$00,$20,
                    $20,$20,$20,$52,$45
       00:01C1: 54 20 59 3A 
       00:01C5: 00 20 20 20 
       00:01C9: 20 52 45 
  5667 00:01CC: 43 54 20 57  	db	$43,$54,$20,$57,$3A,$00,$20,$20,$20,$20,
                    $52,$45,$43,$54,$20
       00:01D0: 3A 00 20 20 
       00:01D4: 20 20 52 45 
       00:01D8: 43 54 20 
  5668 00:01DB: 48 3A 00     	db	$48,$3A,$00
  5669 00:01DE:              	ends
  5670                        ;
  5671                        ;UINT k_get_rtc_hour(void)
  5672                        ;{
  5673                        	.line	905
  5674                        	.line	906
  5675                        	code
  5676                        	xdef	~~k_get_rtc_hour
  5677                        	func
  5678                        	.function	906
  5679                        ~~k_get_rtc_hour:
  5680                        	longa	on
  5681                        	longi	on
  5682 00:10BB: 3B           	tsc
  5683 00:10BC: 38           	sec
  5684 00:10BD: E9 08 00     	sbc	#L266
  5685 00:10C0: 1B           	tcs
  5686 00:10C1: 0B           	phd
  5687 00:10C2: 5B           	tcd
  5688                        	.block	906
  Mon Aug  9 2021 16:52                                                Page 104


  5689                        ;	return (((RTC_HRS[0]&0x30)>>4) * 10)  + (RTC_HRS
                    [0]&0x0F) ;
  5690                        	.line	907
  5691 00:10C3: AF 04 08 AF  	lda	>11470852
  5692 00:10C7: 29 0F 00     	and	#<$f
  5693 00:10CA: 85 01        	sta	<R0
  5694 00:10CC: AF 04 08 AF  	lda	>11470852
  5695 00:10D0: 29 30 00     	and	#<$30
  5696 00:10D3: A2 04 00     	ldx	#<$4
  5697                        	xref	~~~asr
  5698 00:10D6: 22 xx xx xx  	jsl	~~~asr
  5699 00:10DA: 85 05        	sta	<R1
  5700 00:10DC: A5 05        	lda	<R1
  5701 00:10DE: 0A           	asl	A
  5702 00:10DF: 0A           	asl	A
  5703 00:10E0: 65 05        	adc	<R1
  5704 00:10E2: 0A           	asl	A
  5705 00:10E3: 85 05        	sta	<R1
  5706 00:10E5: 18           	clc
  5707 00:10E6: A5 05        	lda	<R1
  5708 00:10E8: 65 01        	adc	<R0
  5709                        L269:
  5710 00:10EA: A8           	tay
  5711 00:10EB: 2B           	pld
  5712 00:10EC: 3B           	tsc
  5713 00:10ED: 18           	clc
  5714 00:10EE: 69 08 00     	adc	#L266
  5715 00:10F1: 1B           	tcs
  5716 00:10F2: 98           	tya
  5717 00:10F3: 6B           	rtl
  5718                        ;}
  5719                        	.line	908
  5720                        	.endblock	908
  5721             00000008   L266	equ	8
  5722             00000009   L267	equ	9
  5723                        	ends
  5724                        	efunc
  5725                        	.endfunc	908,9,8
  5726                        	.line	908
  5727                        ;
  5728                        ;UINT k_get_rtc_minute(void)
  5729                        ;{
  5730                        	.line	910
  5731                        	.line	911
  5732                        	code
  5733                        	xdef	~~k_get_rtc_minute
  5734                        	func
  5735                        	.function	911
  5736                        ~~k_get_rtc_minute:
  5737                        	longa	on
  5738                        	longi	on
  5739 00:10F4: 3B           	tsc
  5740 00:10F5: 38           	sec
  5741 00:10F6: E9 08 00     	sbc	#L270
  5742 00:10F9: 1B           	tcs
  5743 00:10FA: 0B           	phd
  5744 00:10FB: 5B           	tcd
  5745                        	.block	911
  Mon Aug  9 2021 16:52                                                Page 105


  5746                        ;	return (((RTC_MIN[0]&0x70)>>4) * 10)  + (RTC_MIN
                    [0]&0x0F);
  5747                        	.line	912
  5748 00:10FC: AF 02 08 AF  	lda	>11470850
  5749 00:1100: 29 0F 00     	and	#<$f
  5750 00:1103: 85 01        	sta	<R0
  5751 00:1105: AF 02 08 AF  	lda	>11470850
  5752 00:1109: 29 70 00     	and	#<$70
  5753 00:110C: A2 04 00     	ldx	#<$4
  5754                        	xref	~~~asr
  5755 00:110F: 22 xx xx xx  	jsl	~~~asr
  5756 00:1113: 85 05        	sta	<R1
  5757 00:1115: A5 05        	lda	<R1
  5758 00:1117: 0A           	asl	A
  5759 00:1118: 0A           	asl	A
  5760 00:1119: 65 05        	adc	<R1
  5761 00:111B: 0A           	asl	A
  5762 00:111C: 85 05        	sta	<R1
  5763 00:111E: 18           	clc
  5764 00:111F: A5 05        	lda	<R1
  5765 00:1121: 65 01        	adc	<R0
  5766                        L273:
  5767 00:1123: A8           	tay
  5768 00:1124: 2B           	pld
  5769 00:1125: 3B           	tsc
  5770 00:1126: 18           	clc
  5771 00:1127: 69 08 00     	adc	#L270
  5772 00:112A: 1B           	tcs
  5773 00:112B: 98           	tya
  5774 00:112C: 6B           	rtl
  5775                        ;}
  5776                        	.line	913
  5777                        	.endblock	913
  5778             00000008   L270	equ	8
  5779             00000009   L271	equ	9
  5780                        	ends
  5781                        	efunc
  5782                        	.endfunc	913,9,8
  5783                        	.line	913
  5784                        ;
  5785                        ;UINT k_get_rtc_second(void)
  5786                        ;{
  5787                        	.line	915
  5788                        	.line	916
  5789                        	code
  5790                        	xdef	~~k_get_rtc_second
  5791                        	func
  5792                        	.function	916
  5793                        ~~k_get_rtc_second:
  5794                        	longa	on
  5795                        	longi	on
  5796 00:112D: 3B           	tsc
  5797 00:112E: 38           	sec
  5798 00:112F: E9 08 00     	sbc	#L274
  5799 00:1132: 1B           	tcs
  5800 00:1133: 0B           	phd
  5801 00:1134: 5B           	tcd
  5802                        	.block	916
  Mon Aug  9 2021 16:52                                                Page 106


  5803                        ;	return (((RTC_SEC[0]&0x70)>>4) * 10)  + (RTC_SEC
                    [0]&0x0F);
  5804                        	.line	917
  5805 00:1135: AF 00 08 AF  	lda	>11470848
  5806 00:1139: 29 0F 00     	and	#<$f
  5807 00:113C: 85 01        	sta	<R0
  5808 00:113E: AF 00 08 AF  	lda	>11470848
  5809 00:1142: 29 70 00     	and	#<$70
  5810 00:1145: A2 04 00     	ldx	#<$4
  5811                        	xref	~~~asr
  5812 00:1148: 22 xx xx xx  	jsl	~~~asr
  5813 00:114C: 85 05        	sta	<R1
  5814 00:114E: A5 05        	lda	<R1
  5815 00:1150: 0A           	asl	A
  5816 00:1151: 0A           	asl	A
  5817 00:1152: 65 05        	adc	<R1
  5818 00:1154: 0A           	asl	A
  5819 00:1155: 85 05        	sta	<R1
  5820 00:1157: 18           	clc
  5821 00:1158: A5 05        	lda	<R1
  5822 00:115A: 65 01        	adc	<R0
  5823                        L277:
  5824 00:115C: A8           	tay
  5825 00:115D: 2B           	pld
  5826 00:115E: 3B           	tsc
  5827 00:115F: 18           	clc
  5828 00:1160: 69 08 00     	adc	#L274
  5829 00:1163: 1B           	tcs
  5830 00:1164: 98           	tya
  5831 00:1165: 6B           	rtl
  5832                        ;}
  5833                        	.line	918
  5834                        	.endblock	918
  5835             00000008   L274	equ	8
  5836             00000009   L275	equ	9
  5837                        	ends
  5838                        	efunc
  5839                        	.endfunc	918,9,8
  5840                        	.line	918
  5841                        ;
  5842                        ;UINT k_get_rtc_month(void)
  5843                        ;{
  5844                        	.line	920
  5845                        	.line	921
  5846                        	code
  5847                        	xdef	~~k_get_rtc_month
  5848                        	func
  5849                        	.function	921
  5850                        ~~k_get_rtc_month:
  5851                        	longa	on
  5852                        	longi	on
  5853 00:1166: 3B           	tsc
  5854 00:1167: 38           	sec
  5855 00:1168: E9 08 00     	sbc	#L278
  5856 00:116B: 1B           	tcs
  5857 00:116C: 0B           	phd
  5858 00:116D: 5B           	tcd
  5859                        	.block	921
  Mon Aug  9 2021 16:52                                                Page 107


  5860                        ;	return  (((RTC_MONTH[0]&0x10)>>4)  * 10)  + (RTC
                    _MONTH[0]&0x0F) ;
  5861                        	.line	922
  5862 00:116E: AF 09 08 AF  	lda	>11470857
  5863 00:1172: 29 0F 00     	and	#<$f
  5864 00:1175: 85 01        	sta	<R0
  5865 00:1177: AF 09 08 AF  	lda	>11470857
  5866 00:117B: 29 10 00     	and	#<$10
  5867 00:117E: A2 04 00     	ldx	#<$4
  5868                        	xref	~~~asr
  5869 00:1181: 22 xx xx xx  	jsl	~~~asr
  5870 00:1185: 85 05        	sta	<R1
  5871 00:1187: A5 05        	lda	<R1
  5872 00:1189: 0A           	asl	A
  5873 00:118A: 0A           	asl	A
  5874 00:118B: 65 05        	adc	<R1
  5875 00:118D: 0A           	asl	A
  5876 00:118E: 85 05        	sta	<R1
  5877 00:1190: 18           	clc
  5878 00:1191: A5 05        	lda	<R1
  5879 00:1193: 65 01        	adc	<R0
  5880                        L281:
  5881 00:1195: A8           	tay
  5882 00:1196: 2B           	pld
  5883 00:1197: 3B           	tsc
  5884 00:1198: 18           	clc
  5885 00:1199: 69 08 00     	adc	#L278
  5886 00:119C: 1B           	tcs
  5887 00:119D: 98           	tya
  5888 00:119E: 6B           	rtl
  5889                        ;}
  5890                        	.line	923
  5891                        	.endblock	923
  5892             00000008   L278	equ	8
  5893             00000009   L279	equ	9
  5894                        	ends
  5895                        	efunc
  5896                        	.endfunc	923,9,8
  5897                        	.line	923
  5898                        ;
  5899                        ;UINT k_get_rtc_day(void)
  5900                        ;{
  5901                        	.line	925
  5902                        	.line	926
  5903                        	code
  5904                        	xdef	~~k_get_rtc_day
  5905                        	func
  5906                        	.function	926
  5907                        ~~k_get_rtc_day:
  5908                        	longa	on
  5909                        	longi	on
  5910 00:119F: 3B           	tsc
  5911 00:11A0: 38           	sec
  5912 00:11A1: E9 08 00     	sbc	#L282
  5913 00:11A4: 1B           	tcs
  5914 00:11A5: 0B           	phd
  5915 00:11A6: 5B           	tcd
  5916                        	.block	926
  Mon Aug  9 2021 16:52                                                Page 108


  5917                        ;	return (((RTC_DAY[0]&0x10)>>4)    * 10)  + (RTC_
                    DAY[0]&0x0F) ;
  5918                        	.line	927
  5919 00:11A7: AF 06 08 AF  	lda	>11470854
  5920 00:11AB: 29 0F 00     	and	#<$f
  5921 00:11AE: 85 01        	sta	<R0
  5922 00:11B0: AF 06 08 AF  	lda	>11470854
  5923 00:11B4: 29 10 00     	and	#<$10
  5924 00:11B7: A2 04 00     	ldx	#<$4
  5925                        	xref	~~~asr
  5926 00:11BA: 22 xx xx xx  	jsl	~~~asr
  5927 00:11BE: 85 05        	sta	<R1
  5928 00:11C0: A5 05        	lda	<R1
  5929 00:11C2: 0A           	asl	A
  5930 00:11C3: 0A           	asl	A
  5931 00:11C4: 65 05        	adc	<R1
  5932 00:11C6: 0A           	asl	A
  5933 00:11C7: 85 05        	sta	<R1
  5934 00:11C9: 18           	clc
  5935 00:11CA: A5 05        	lda	<R1
  5936 00:11CC: 65 01        	adc	<R0
  5937                        L285:
  5938 00:11CE: A8           	tay
  5939 00:11CF: 2B           	pld
  5940 00:11D0: 3B           	tsc
  5941 00:11D1: 18           	clc
  5942 00:11D2: 69 08 00     	adc	#L282
  5943 00:11D5: 1B           	tcs
  5944 00:11D6: 98           	tya
  5945 00:11D7: 6B           	rtl
  5946                        ;}
  5947                        	.line	928
  5948                        	.endblock	928
  5949             00000008   L282	equ	8
  5950             00000009   L283	equ	9
  5951                        	ends
  5952                        	efunc
  5953                        	.endfunc	928,9,8
  5954                        	.line	928
  5955                        ;
  5956                        ;UINT k_get_rtc_year(void)
  5957                        ;{
  5958                        	.line	930
  5959                        	.line	931
  5960                        	code
  5961                        	xdef	~~k_get_rtc_year
  5962                        	func
  5963                        	.function	931
  5964                        ~~k_get_rtc_year:
  5965                        	longa	on
  5966                        	longi	on
  5967 00:11D8: 3B           	tsc
  5968 00:11D9: 38           	sec
  5969 00:11DA: E9 08 00     	sbc	#L286
  5970 00:11DD: 1B           	tcs
  5971 00:11DE: 0B           	phd
  5972 00:11DF: 5B           	tcd
  5973                        	.block	931
  Mon Aug  9 2021 16:52                                                Page 109


  5974                        ;	return  (((RTC_YEAR[0]&0xF0)>>4)   * 10)  + (RTC
                    _YEAR[0]&0x0F);
  5975                        	.line	932
  5976 00:11E0: AF 0A 08 AF  	lda	>11470858
  5977 00:11E4: 29 0F 00     	and	#<$f
  5978 00:11E7: 85 01        	sta	<R0
  5979 00:11E9: AF 0A 08 AF  	lda	>11470858
  5980 00:11ED: 29 F0 00     	and	#<$f0
  5981 00:11F0: A2 04 00     	ldx	#<$4
  5982                        	xref	~~~asr
  5983 00:11F3: 22 xx xx xx  	jsl	~~~asr
  5984 00:11F7: 85 05        	sta	<R1
  5985 00:11F9: A5 05        	lda	<R1
  5986 00:11FB: 0A           	asl	A
  5987 00:11FC: 0A           	asl	A
  5988 00:11FD: 65 05        	adc	<R1
  5989 00:11FF: 0A           	asl	A
  5990 00:1200: 85 05        	sta	<R1
  5991 00:1202: 18           	clc
  5992 00:1203: A5 05        	lda	<R1
  5993 00:1205: 65 01        	adc	<R0
  5994                        L289:
  5995 00:1207: A8           	tay
  5996 00:1208: 2B           	pld
  5997 00:1209: 3B           	tsc
  5998 00:120A: 18           	clc
  5999 00:120B: 69 08 00     	adc	#L286
  6000 00:120E: 1B           	tcs
  6001 00:120F: 98           	tya
  6002 00:1210: 6B           	rtl
  6003                        ;}
  6004                        	.line	933
  6005                        	.endblock	933
  6006             00000008   L286	equ	8
  6007             00000009   L287	equ	9
  6008                        	ends
  6009                        	efunc
  6010                        	.endfunc	933,9,8
  6011                        	.line	933
  6012                        ;
  6013                        ;UINT k_get_rtc_century(void)
  6014                        ;{
  6015                        	.line	935
  6016                        	.line	936
  6017                        	code
  6018                        	xdef	~~k_get_rtc_century
  6019                        	func
  6020                        	.function	936
  6021                        ~~k_get_rtc_century:
  6022                        	longa	on
  6023                        	longi	on
  6024 00:1211: 3B           	tsc
  6025 00:1212: 38           	sec
  6026 00:1213: E9 08 00     	sbc	#L290
  6027 00:1216: 1B           	tcs
  6028 00:1217: 0B           	phd
  6029 00:1218: 5B           	tcd
  6030                        	.block	936
  Mon Aug  9 2021 16:52                                                Page 110


  6031                        ;	return (((RTC_CENTURY[0]&0xF0)>>4)* 10)  + (RTC_
                    CENTURY[0]&0x0F);
  6032                        	.line	937
  6033 00:1219: AF 0F 08 AF  	lda	>11470863
  6034 00:121D: 29 0F 00     	and	#<$f
  6035 00:1220: 85 01        	sta	<R0
  6036 00:1222: AF 0F 08 AF  	lda	>11470863
  6037 00:1226: 29 F0 00     	and	#<$f0
  6038 00:1229: A2 04 00     	ldx	#<$4
  6039                        	xref	~~~asr
  6040 00:122C: 22 xx xx xx  	jsl	~~~asr
  6041 00:1230: 85 05        	sta	<R1
  6042 00:1232: A5 05        	lda	<R1
  6043 00:1234: 0A           	asl	A
  6044 00:1235: 0A           	asl	A
  6045 00:1236: 65 05        	adc	<R1
  6046 00:1238: 0A           	asl	A
  6047 00:1239: 85 05        	sta	<R1
  6048 00:123B: 18           	clc
  6049 00:123C: A5 05        	lda	<R1
  6050 00:123E: 65 01        	adc	<R0
  6051                        L293:
  6052 00:1240: A8           	tay
  6053 00:1241: 2B           	pld
  6054 00:1242: 3B           	tsc
  6055 00:1243: 18           	clc
  6056 00:1244: 69 08 00     	adc	#L290
  6057 00:1247: 1B           	tcs
  6058 00:1248: 98           	tya
  6059 00:1249: 6B           	rtl
  6060                        ;}
  6061                        	.line	938
  6062                        	.endblock	938
  6063             00000008   L290	equ	8
  6064             00000009   L291	equ	9
  6065                        	ends
  6066                        	efunc
  6067                        	.endfunc	938,9,8
  6068                        	.line	938
  6069                        ;
  6070                        ;void k_get_fpga_date_day(char *buffer)
  6071                        ;{
  6072                        	.line	940
  6073                        	.line	941
  6074                        	code
  6075                        	xdef	~~k_get_fpga_date_day
  6076                        	func
  6077                        	.function	941
  6078                        ~~k_get_fpga_date_day:
  6079                        	longa	on
  6080                        	longi	on
  6081 00:124A: 3B           	tsc
  6082 00:124B: 38           	sec
  6083 00:124C: E9 00 00     	sbc	#L294
  6084 00:124F: 1B           	tcs
  6085 00:1250: 0B           	phd
  6086 00:1251: 5B           	tcd
  6087             00000004   buffer_0	set	4
  Mon Aug  9 2021 16:52                                                Page 111


  6088                        	.block	941
  6089                        ;	k_bytetodec(FPGA_DOR[0],buffer);
  6090                        	.sym	buffer,4,142,6,32
  6091                        	.line	942
  6092 00:1252: D4 06        	pei	<L294+buffer_0+2
  6093 00:1254: D4 04        	pei	<L294+buffer_0
  6094 00:1256: AF 0D 07 AF  	lda	>11470605
  6095 00:125A: 48           	pha
  6096 00:125B: 22 xx xx xx  	jsl	~~k_bytetodec
  6097                        ;}
  6098                        	.line	943
  6099                        L297:
  6100 00:125F: A5 02        	lda	<L294+2
  6101 00:1261: 85 06        	sta	<L294+2+4
  6102 00:1263: A5 01        	lda	<L294+1
  6103 00:1265: 85 05        	sta	<L294+1+4
  6104 00:1267: 2B           	pld
  6105 00:1268: 3B           	tsc
  6106 00:1269: 18           	clc
  6107 00:126A: 69 04 00     	adc	#L294+4
  6108 00:126D: 1B           	tcs
  6109 00:126E: 6B           	rtl
  6110                        	.endblock	943
  6111             00000000   L294	equ	0
  6112             00000001   L295	equ	1
  6113                        	ends
  6114                        	efunc
  6115                        	.endfunc	943,1,0
  6116                        	.line	943
  6117                        ;
  6118                        ;void k_get_fpga_date_month(char *buffer)
  6119                        ;{
  6120                        	.line	945
  6121                        	.line	946
  6122                        	code
  6123                        	xdef	~~k_get_fpga_date_month
  6124                        	func
  6125                        	.function	946
  6126                        ~~k_get_fpga_date_month:
  6127                        	longa	on
  6128                        	longi	on
  6129 00:126F: 3B           	tsc
  6130 00:1270: 38           	sec
  6131 00:1271: E9 00 00     	sbc	#L298
  6132 00:1274: 1B           	tcs
  6133 00:1275: 0B           	phd
  6134 00:1276: 5B           	tcd
  6135             00000004   buffer_0	set	4
  6136                        	.block	946
  6137                        ;	k_bytetodec(FPGA_MOR[0],buffer);
  6138                        	.sym	buffer,4,142,6,32
  6139                        	.line	947
  6140 00:1277: D4 06        	pei	<L298+buffer_0+2
  6141 00:1279: D4 04        	pei	<L298+buffer_0
  6142 00:127B: AF 0E 07 AF  	lda	>11470606
  6143 00:127F: 48           	pha
  6144 00:1280: 22 xx xx xx  	jsl	~~k_bytetodec
  6145                        ;}
  Mon Aug  9 2021 16:52                                                Page 112


  6146                        	.line	948
  6147                        L301:
  6148 00:1284: A5 02        	lda	<L298+2
  6149 00:1286: 85 06        	sta	<L298+2+4
  6150 00:1288: A5 01        	lda	<L298+1
  6151 00:128A: 85 05        	sta	<L298+1+4
  6152 00:128C: 2B           	pld
  6153 00:128D: 3B           	tsc
  6154 00:128E: 18           	clc
  6155 00:128F: 69 04 00     	adc	#L298+4
  6156 00:1292: 1B           	tcs
  6157 00:1293: 6B           	rtl
  6158                        	.endblock	948
  6159             00000000   L298	equ	0
  6160             00000001   L299	equ	1
  6161                        	ends
  6162                        	efunc
  6163                        	.endfunc	948,1,0
  6164                        	.line	948
  6165                        ;
  6166                        ;void k_get_fpga_date_year(char *buffer)
  6167                        ;{
  6168                        	.line	950
  6169                        	.line	951
  6170                        	code
  6171                        	xdef	~~k_get_fpga_date_year
  6172                        	func
  6173                        	.function	951
  6174                        ~~k_get_fpga_date_year:
  6175                        	longa	on
  6176                        	longi	on
  6177 00:1294: 3B           	tsc
  6178 00:1295: 38           	sec
  6179 00:1296: E9 00 00     	sbc	#L302
  6180 00:1299: 1B           	tcs
  6181 00:129A: 0B           	phd
  6182 00:129B: 5B           	tcd
  6183             00000004   buffer_0	set	4
  6184                        	.block	951
  6185                        ;	k_bytetodec(FPGA_YOR[0],buffer);
  6186                        	.sym	buffer,4,142,6,32
  6187                        	.line	952
  6188 00:129C: D4 06        	pei	<L302+buffer_0+2
  6189 00:129E: D4 04        	pei	<L302+buffer_0
  6190 00:12A0: AF 0F 07 AF  	lda	>11470607
  6191 00:12A4: 48           	pha
  6192 00:12A5: 22 xx xx xx  	jsl	~~k_bytetodec
  6193                        ;}
  6194                        	.line	953
  6195                        L305:
  6196 00:12A9: A5 02        	lda	<L302+2
  6197 00:12AB: 85 06        	sta	<L302+2+4
  6198 00:12AD: A5 01        	lda	<L302+1
  6199 00:12AF: 85 05        	sta	<L302+1+4
  6200 00:12B1: 2B           	pld
  6201 00:12B2: 3B           	tsc
  6202 00:12B3: 18           	clc
  6203 00:12B4: 69 04 00     	adc	#L302+4
  Mon Aug  9 2021 16:52                                                Page 113


  6204 00:12B7: 1B           	tcs
  6205 00:12B8: 6B           	rtl
  6206                        	.endblock	953
  6207             00000000   L302	equ	0
  6208             00000001   L303	equ	1
  6209                        	ends
  6210                        	efunc
  6211                        	.endfunc	953,1,0
  6212                        	.line	953
  6213                        ;
  6214                        ;void k_get_c256_major_version(char *buffer)
  6215                        ;{
  6216                        	.line	955
  6217                        	.line	956
  6218                        	code
  6219                        	xdef	~~k_get_c256_major_version
  6220                        	func
  6221                        	.function	956
  6222                        ~~k_get_c256_major_version:
  6223                        	longa	on
  6224                        	longi	on
  6225 00:12B9: 3B           	tsc
  6226 00:12BA: 38           	sec
  6227 00:12BB: E9 00 00     	sbc	#L306
  6228 00:12BE: 1B           	tcs
  6229 00:12BF: 0B           	phd
  6230 00:12C0: 5B           	tcd
  6231             00000004   buffer_0	set	4
  6232                        	.block	956
  6233                        ;	buffer[0] = *C256F_MODEL_MAJOR;
  6234                        	.sym	buffer,4,142,6,32
  6235                        	.line	957
  6236 00:12C1: E2 20        	sep	#$20
  6237                        	longa	off
  6238 00:12C3: AF 0B 07 AF  	lda	>11470603
  6239 00:12C7: 87 04        	sta	[<L306+buffer_0]
  6240 00:12C9: C2 20        	rep	#$20
  6241                        	longa	on
  6242                        ;	buffer[1] = 0;
  6243                        	.line	958
  6244 00:12CB: E2 20        	sep	#$20
  6245                        	longa	off
  6246 00:12CD: A9 00        	lda	#$0
  6247 00:12CF: A0 01 00     	ldy	#$1
  6248 00:12D2: 97 04        	sta	[<L306+buffer_0],Y
  6249 00:12D4: C2 20        	rep	#$20
  6250                        	longa	on
  6251                        ;}
  6252                        	.line	959
  6253                        L309:
  6254 00:12D6: A5 02        	lda	<L306+2
  6255 00:12D8: 85 06        	sta	<L306+2+4
  6256 00:12DA: A5 01        	lda	<L306+1
  6257 00:12DC: 85 05        	sta	<L306+1+4
  6258 00:12DE: 2B           	pld
  6259 00:12DF: 3B           	tsc
  6260 00:12E0: 18           	clc
  6261 00:12E1: 69 04 00     	adc	#L306+4
  Mon Aug  9 2021 16:52                                                Page 114


  6262 00:12E4: 1B           	tcs
  6263 00:12E5: 6B           	rtl
  6264                        	.endblock	959
  6265             00000000   L306	equ	0
  6266             00000001   L307	equ	1
  6267                        	ends
  6268                        	efunc
  6269                        	.endfunc	959,1,0
  6270                        	.line	959
  6271                        ;
  6272                        ;void k_get_c256_minor_version(char *buffer)
  6273                        ;{
  6274                        	.line	961
  6275                        	.line	962
  6276                        	code
  6277                        	xdef	~~k_get_c256_minor_version
  6278                        	func
  6279                        	.function	962
  6280                        ~~k_get_c256_minor_version:
  6281                        	longa	on
  6282                        	longi	on
  6283 00:12E6: 3B           	tsc
  6284 00:12E7: 38           	sec
  6285 00:12E8: E9 00 00     	sbc	#L310
  6286 00:12EB: 1B           	tcs
  6287 00:12EC: 0B           	phd
  6288 00:12ED: 5B           	tcd
  6289             00000004   buffer_0	set	4
  6290                        	.block	962
  6291                        ;	buffer[0] = *C256F_MODEL_MINOR;
  6292                        	.sym	buffer,4,142,6,32
  6293                        	.line	963
  6294 00:12EE: E2 20        	sep	#$20
  6295                        	longa	off
  6296 00:12F0: AF 0C 07 AF  	lda	>11470604
  6297 00:12F4: 87 04        	sta	[<L310+buffer_0]
  6298 00:12F6: C2 20        	rep	#$20
  6299                        	longa	on
  6300                        ;	buffer[1] = 0;
  6301                        	.line	964
  6302 00:12F8: E2 20        	sep	#$20
  6303                        	longa	off
  6304 00:12FA: A9 00        	lda	#$0
  6305 00:12FC: A0 01 00     	ldy	#$1
  6306 00:12FF: 97 04        	sta	[<L310+buffer_0],Y
  6307 00:1301: C2 20        	rep	#$20
  6308                        	longa	on
  6309                        ;}
  6310                        	.line	965
  6311                        L313:
  6312 00:1303: A5 02        	lda	<L310+2
  6313 00:1305: 85 06        	sta	<L310+2+4
  6314 00:1307: A5 01        	lda	<L310+1
  6315 00:1309: 85 05        	sta	<L310+1+4
  6316 00:130B: 2B           	pld
  6317 00:130C: 3B           	tsc
  6318 00:130D: 18           	clc
  6319 00:130E: 69 04 00     	adc	#L310+4
  Mon Aug  9 2021 16:52                                                Page 115


  6320 00:1311: 1B           	tcs
  6321 00:1312: 6B           	rtl
  6322                        	.endblock	965
  6323             00000000   L310	equ	0
  6324             00000001   L311	equ	1
  6325                        	ends
  6326                        	efunc
  6327                        	.endfunc	965,1,0
  6328                        	.line	965
  6329                        ;
  6330                        ;void k_get_c256_release(char *buffer)
  6331                        ;{
  6332                        	.line	967
  6333                        	.line	968
  6334                        	code
  6335                        	xdef	~~k_get_c256_release
  6336                        	func
  6337                        	.function	968
  6338                        ~~k_get_c256_release:
  6339                        	longa	on
  6340                        	longi	on
  6341 00:1313: 3B           	tsc
  6342 00:1314: 38           	sec
  6343 00:1315: E9 00 00     	sbc	#L314
  6344 00:1318: 1B           	tcs
  6345 00:1319: 0B           	phd
  6346 00:131A: 5B           	tcd
  6347             00000004   buffer_0	set	4
  6348                        	.block	968
  6349                        ;	buffer[0] = *C256F_MODEL_MAJOR;
  6350                        	.sym	buffer,4,142,6,32
  6351                        	.line	969
  6352 00:131B: E2 20        	sep	#$20
  6353                        	longa	off
  6354 00:131D: AF 0B 07 AF  	lda	>11470603
  6355 00:1321: 87 04        	sta	[<L314+buffer_0]
  6356 00:1323: C2 20        	rep	#$20
  6357                        	longa	on
  6358                        ;	buffer[1] = *C256F_MODEL_MINOR;
  6359                        	.line	970
  6360 00:1325: E2 20        	sep	#$20
  6361                        	longa	off
  6362 00:1327: AF 0C 07 AF  	lda	>11470604
  6363 00:132B: A0 01 00     	ldy	#$1
  6364 00:132E: 97 04        	sta	[<L314+buffer_0],Y
  6365 00:1330: C2 20        	rep	#$20
  6366                        	longa	on
  6367                        ;	buffer[2] = 0;
  6368                        	.line	971
  6369 00:1332: E2 20        	sep	#$20
  6370                        	longa	off
  6371 00:1334: A9 00        	lda	#$0
  6372 00:1336: A0 02 00     	ldy	#$2
  6373 00:1339: 97 04        	sta	[<L314+buffer_0],Y
  6374 00:133B: C2 20        	rep	#$20
  6375                        	longa	on
  6376                        ;}
  6377                        	.line	972
  Mon Aug  9 2021 16:52                                                Page 116


  6378                        L317:
  6379 00:133D: A5 02        	lda	<L314+2
  6380 00:133F: 85 06        	sta	<L314+2+4
  6381 00:1341: A5 01        	lda	<L314+1
  6382 00:1343: 85 05        	sta	<L314+1+4
  6383 00:1345: 2B           	pld
  6384 00:1346: 3B           	tsc
  6385 00:1347: 18           	clc
  6386 00:1348: 69 04 00     	adc	#L314+4
  6387 00:134B: 1B           	tcs
  6388 00:134C: 6B           	rtl
  6389                        	.endblock	972
  6390             00000000   L314	equ	0
  6391             00000001   L315	equ	1
  6392                        	ends
  6393                        	efunc
  6394                        	.endfunc	972,1,0
  6395                        	.line	972
  6396                        ;
  6397                        ;BOOL k_user_IsOSDebug(VOID)
  6398                        ;{
  6399                        	.line	974
  6400                        	.line	975
  6401                        	code
  6402                        	xdef	~~k_user_IsOSDebug
  6403                        	func
  6404                        	.function	975
  6405                        ~~k_user_IsOSDebug:
  6406                        	longa	on
  6407                        	longi	on
  6408 00:134D: 3B           	tsc
  6409 00:134E: 38           	sec
  6410 00:134F: E9 00 00     	sbc	#L318
  6411 00:1352: 1B           	tcs
  6412 00:1353: 0B           	phd
  6413 00:1354: 5B           	tcd
  6414                        	.block	975
  6415                        ;	return _k_isOSDebug;
  6416                        	.line	976
  6417 00:1355: AD xx xx     	lda	|~~_k_isOSDebug
  6418 00:1358: 29 FF 00     	and	#$ff
  6419                        L321:
  6420 00:135B: A8           	tay
  6421 00:135C: 2B           	pld
  6422 00:135D: 3B           	tsc
  6423 00:135E: 18           	clc
  6424 00:135F: 69 00 00     	adc	#L318
  6425 00:1362: 1B           	tcs
  6426 00:1363: 98           	tya
  6427 00:1364: 6B           	rtl
  6428                        ;}
  6429                        	.line	977
  6430                        	.endblock	977
  6431             00000000   L318	equ	0
  6432             00000001   L319	equ	1
  6433                        	ends
  6434                        	efunc
  6435                        	.endfunc	977,1,0
  Mon Aug  9 2021 16:52                                                Page 117


  6436                        	.line	977
  6437                        ;
  6438                        ;VOID k_user_EnableOSDebug(VOID)
  6439                        ;{
  6440                        	.line	979
  6441                        	.line	980
  6442                        	code
  6443                        	xdef	~~k_user_EnableOSDebug
  6444                        	func
  6445                        	.function	980
  6446                        ~~k_user_EnableOSDebug:
  6447                        	longa	on
  6448                        	longi	on
  6449 00:1365: 3B           	tsc
  6450 00:1366: 38           	sec
  6451 00:1367: E9 00 00     	sbc	#L322
  6452 00:136A: 1B           	tcs
  6453 00:136B: 0B           	phd
  6454 00:136C: 5B           	tcd
  6455                        	.block	980
  6456                        ;	_k_isOSDebug = TRUE;
  6457                        	.line	981
  6458 00:136D: E2 20        	sep	#$20
  6459                        	longa	off
  6460 00:136F: A9 01        	lda	#$1
  6461 00:1371: 8D xx xx     	sta	|~~_k_isOSDebug
  6462 00:1374: C2 20        	rep	#$20
  6463                        	longa	on
  6464                        ;}
  6465                        	.line	982
  6466                        L325:
  6467 00:1376: 2B           	pld
  6468 00:1377: 3B           	tsc
  6469 00:1378: 18           	clc
  6470 00:1379: 69 00 00     	adc	#L322
  6471 00:137C: 1B           	tcs
  6472 00:137D: 6B           	rtl
  6473                        	.endblock	982
  6474             00000000   L322	equ	0
  6475             00000001   L323	equ	1
  6476                        	ends
  6477                        	efunc
  6478                        	.endfunc	982,1,0
  6479                        	.line	982
  6480                        ;
  6481                        ;VOID k_user_DisableOSDebug(VOID)
  6482                        ;{
  6483                        	.line	984
  6484                        	.line	985
  6485                        	code
  6486                        	xdef	~~k_user_DisableOSDebug
  6487                        	func
  6488                        	.function	985
  6489                        ~~k_user_DisableOSDebug:
  6490                        	longa	on
  6491                        	longi	on
  6492 00:137E: 3B           	tsc
  6493 00:137F: 38           	sec
  Mon Aug  9 2021 16:52                                                Page 118


  6494 00:1380: E9 00 00     	sbc	#L326
  6495 00:1383: 1B           	tcs
  6496 00:1384: 0B           	phd
  6497 00:1385: 5B           	tcd
  6498                        	.block	985
  6499                        ;	_k_isOSDebug = FALSE;
  6500                        	.line	986
  6501 00:1386: E2 20        	sep	#$20
  6502                        	longa	off
  6503 00:1388: 9C xx xx     	stz	|~~_k_isOSDebug
  6504 00:138B: C2 20        	rep	#$20
  6505                        	longa	on
  6506                        ;}
  6507                        	.line	987
  6508                        L329:
  6509 00:138D: 2B           	pld
  6510 00:138E: 3B           	tsc
  6511 00:138F: 18           	clc
  6512 00:1390: 69 00 00     	adc	#L326
  6513 00:1393: 1B           	tcs
  6514 00:1394: 6B           	rtl
  6515                        	.endblock	987
  6516             00000000   L326	equ	0
  6517             00000001   L327	equ	1
  6518                        	ends
  6519                        	efunc
  6520                        	.endfunc	987,1,0
  6521                        	.line	987
  6522                        ;
  6523                        ;VOID k_exec_throw_exception(LPVOID ctxId,ULONG er
                    rorId,LPVOID exceptionMessage,UINT exMsgSize)
  6524                        ;{
  6525                        	.line	989
  6526                        	.line	990
  6527                        	code
  6528                        	xdef	~~k_exec_throw_exception
  6529                        	func
  6530                        	.function	990
  6531                        ~~k_exec_throw_exception:
  6532                        	longa	on
  6533                        	longi	on
  6534 00:1395: 3B           	tsc
  6535 00:1396: 38           	sec
  6536 00:1397: E9 06 00     	sbc	#L330
  6537 00:139A: 1B           	tcs
  6538 00:139B: 0B           	phd
  6539 00:139C: 5B           	tcd
  6540             00000004   ctxId_0	set	4
  6541             00000008   errorId_0	set	8
  6542             0000000C   exceptionMessage_0	set	12
  6543             00000010   exMsgSize_0	set	16
  6544                        	.block	990
  6545                        ;	UINT len = 0;
  6546                        ;
  6547                        ;	//k_enable_text_mode();
  6548                        ;
  6549                        ;	if(exceptionMessage)
  6550             00000000   len_1	set	0
  Mon Aug  9 2021 16:52                                                Page 119


  6551                        	.sym	len,0,16,1,16
  6552                        	.sym	ctxId,4,129,6,32
  6553                        	.sym	errorId,8,18,6,32
  6554                        	.sym	exceptionMessage,12,129,6,32
  6555                        	.sym	exMsgSize,16,16,6,16
  6556 00:139D: 64 05        	stz	<L331+len_1
  6557                        	.line	995
  6558                        ;		k_debug_strings("k_exec_throw_exception:
                    ",(LPSTR)exceptionMessage);
  6559 00:139F: A5 12        	lda	<L330+exceptionMessage_0
  6560 00:13A1: 05 14        	ora	<L330+exceptionMessage_0+2
  6561 00:13A3: D0 03        	bne	L333
  6562 00:13A5: 82 0E 00     	brl	L10074
  6563                        L333:
  6564                        	.line	996
  6565 00:13A8: D4 14        	pei	<L330+exceptionMessage_0+2
  6566 00:13AA: D4 12        	pei	<L330+exceptionMessage_0
  6567 00:13AC: F4 xx xx     	pea	#^L265
  6568 00:13AF: F4 xx xx     	pea	#<L265
  6569 00:13B2: 22 xx xx xx  	jsl	~~k_debug_strings
  6570                        ;
  6571                        ;	_k_exec_context 	= (ULONG)ctxId;
  6572                        L10074:
  6573                        	.line	998
  6574 00:13B6: A5 0A        	lda	<L330+ctxId_0
  6575 00:13B8: 8D xx xx     	sta	|~~_k_exec_context
  6576 00:13BB: A5 0C        	lda	<L330+ctxId_0+2
  6577 00:13BD: 8D xx xx     	sta	|~~_k_exec_context+2
  6578                        ;	_k_exec_error		= errorId;
  6579                        	.line	999
  6580 00:13C0: A5 0E        	lda	<L330+errorId_0
  6581 00:13C2: 8D xx xx     	sta	|~~_k_exec_error
  6582 00:13C5: A5 10        	lda	<L330+errorId_0+2
  6583 00:13C7: 8D xx xx     	sta	|~~_k_exec_error+2
  6584                        ;
  6585                        ;	if(exMsgSize == -1)
  6586                        	.line	1001
  6587                        ;	{
  6588 00:13CA: A5 16        	lda	<L330+exMsgSize_0
  6589 00:13CC: C9 FF FF     	cmp	#<$ffffffff
  6590 00:13CF: F0 03        	beq	L334
  6591 00:13D1: 82 20 00     	brl	L10075
  6592                        L334:
  6593                        	.line	1002
  6594                        ;		len = strlen(exceptionMessage);
  6595                        	.line	1003
  6596 00:13D4: D4 14        	pei	<L330+exceptionMessage_0+2
  6597 00:13D6: D4 12        	pei	<L330+exceptionMessage_0
  6598 00:13D8: 22 xx xx xx  	jsl	~~strlen
  6599 00:13DC: 85 05        	sta	<L331+len_1
  6600                        ;		if(len < 64)
  6601                        	.line	1004
  6602                        ;			exMsgSize = len;
  6603 00:13DE: A5 05        	lda	<L331+len_1
  6604 00:13E0: C9 40 00     	cmp	#<$40
  6605 00:13E3: 90 03        	bcc	L335
  6606 00:13E5: 82 07 00     	brl	L10076
  6607                        L335:
  Mon Aug  9 2021 16:52                                                Page 120


  6608                        	.line	1005
  6609 00:13E8: A5 05        	lda	<L331+len_1
  6610 00:13EA: 85 16        	sta	<L330+exMsgSize_0
  6611                        ;		else
  6612 00:13EC: 82 05 00     	brl	L10077
  6613                        L10076:
  6614                        ;			exMsgSize = 63;
  6615                        	.line	1007
  6616 00:13EF: A9 3F 00     	lda	#$3f
  6617 00:13F2: 85 16        	sta	<L330+exMsgSize_0
  6618                        L10077:
  6619                        ;	}
  6620                        	.line	1008
  6621                        ;
  6622                        ;	memcpy(_k_exec_message,exceptionMessage,exMsgSiz
                    e);
  6623                        L10075:
  6624                        	.line	1010
  6625 00:13F4: D4 16        	pei	<L330+exMsgSize_0
  6626 00:13F6: D4 14        	pei	<L330+exceptionMessage_0+2
  6627 00:13F8: D4 12        	pei	<L330+exceptionMessage_0
  6628 00:13FA: A9 xx xx     	lda	#<~~_k_exec_message
  6629 00:13FD: 85 01        	sta	<R0
  6630                        	xref	_BEG_DATA
  6631 00:13FF: A9 xx xx     	lda	#_BEG_DATA>>16
  6632 00:1402: 85 03        	sta	<R0+2
  6633 00:1404: D4 03        	pei	<R0+2
  6634 00:1406: D4 01        	pei	<R0
  6635 00:1408: 22 xx xx xx  	jsl	~~memcpy
  6636                        ;
  6637                        ;	asm BRK;
  6638                        	.line	1012
  6639                        	asmstart
  6640 00:140C: 00 00        	BRK
  6641                        	asmend
  6642                        ;}
  6643                        	.line	1013
  6644                        L336:
  6645 00:140E: A5 08        	lda	<L330+2
  6646 00:1410: 85 16        	sta	<L330+2+14
  6647 00:1412: A5 07        	lda	<L330+1
  6648 00:1414: 85 15        	sta	<L330+1+14
  6649 00:1416: 2B           	pld
  6650 00:1417: 3B           	tsc
  6651 00:1418: 18           	clc
  6652 00:1419: 69 14 00     	adc	#L330+14
  6653 00:141C: 1B           	tcs
  6654 00:141D: 6B           	rtl
  6655                        	.endblock	1013
  6656             00000006   L330	equ	6
  6657             00000005   L331	equ	5
  6658                        	ends
  6659                        	efunc
  6660                        	.endfunc	1013,5,6
  6661                        	.line	1013
  6662                        	data
  6663                        L265:
  6664 00:01DE: 6B 5F 65 78  	db	$6B,$5F,$65,$78,$65,$63,$5F,$74,$68,$72,
  Mon Aug  9 2021 16:52                                                Page 121


                    $6F,$77,$5F,$65,$78
       00:01E2: 65 63 5F 74 
       00:01E6: 68 72 6F 77 
       00:01EA: 5F 65 78 
  6665 00:01ED: 63 65 70 74  	db	$63,$65,$70,$74,$69,$6F,$6E,$3A,$00
       00:01F1: 69 6F 6E 3A 
       00:01F5: 00 
  6666 00:01F6:              	ends
  6667                        ;
  6668                        ;
  6669                        ;UINT k_irq_register_handler(BYTE bus,BYTE irq,DEV
                    ICEDRIVER_IRQ handler)
  6670                        ;{
  6671                        	.line	1016
  6672                        	.line	1017
  6673                        	code
  6674                        	xdef	~~k_irq_register_handler
  6675                        	func
  6676                        	.function	1017
  6677                        ~~k_irq_register_handler:
  6678                        	longa	on
  6679                        	longi	on
  6680 00:141E: 3B           	tsc
  6681 00:141F: 38           	sec
  6682 00:1420: E9 14 00     	sbc	#L338
  6683 00:1423: 1B           	tcs
  6684 00:1424: 0B           	phd
  6685 00:1425: 5B           	tcd
  6686             00000004   bus_0	set	4
  6687             00000006   irq_0	set	6
  6688             00000008   handler_0	set	8
  6689                        	.block	1017
  6690                        ;	int index = 0;
  6691                        ;	int i = 0;
  6692                        ;	if(handler)
  6693             00000000   index_1	set	0
  6694             00000002   i_1	set	2
  6695                        	.sym	index,0,5,1,16
  6696                        	.sym	i,2,5,1,16
  6697                        	.sym	bus,4,14,6,8
  6698                        	.sym	irq,6,14,6,8
  6699                        	.sym	handler,8,641,6,32
  6700 00:1426: 64 11        	stz	<L339+index_1
  6701 00:1428: 64 13        	stz	<L339+i_1
  6702                        	.line	1020
  6703                        ;	{
  6704 00:142A: A5 1C        	lda	<L338+handler_0
  6705 00:142C: 05 1E        	ora	<L338+handler_0+2
  6706 00:142E: D0 03        	bne	L341
  6707 00:1430: 82 AC 00     	brl	L10078
  6708                        L341:
  6709                        	.line	1021
  6710                        ;		k_lock_irq();
  6711                        	.line	1022
  6712 00:1433: 22 xx xx xx  	jsl	~~k_lock_irq
  6713                        ;		for(i=1;i<4;i++)
  6714                        	.line	1023
  6715 00:1437: A9 01 00     	lda	#$1
  Mon Aug  9 2021 16:52                                                Page 122


  6716 00:143A: 85 13        	sta	<L339+i_1
  6717                        L10081:
  6718                        ;		{
  6719                        	.line	1024
  6720                        ;			if(g_irq_handlers[bus][irq].hand
                    lers[i] == NULL)
  6721                        	.line	1025
  6722                        ;			{
  6723 00:143C: A5 13        	lda	<L339+i_1
  6724 00:143E: 0A           	asl	A
  6725 00:143F: 0A           	asl	A
  6726 00:1440: 85 01        	sta	<R0
  6727 00:1442: A5 1A        	lda	<L338+irq_0
  6728 00:1444: 29 FF 00     	and	#$ff
  6729 00:1447: 85 09        	sta	<R2
  6730 00:1449: A5 09        	lda	<R2
  6731 00:144B: 0A           	asl	A
  6732 00:144C: 0A           	asl	A
  6733 00:144D: 0A           	asl	A
  6734 00:144E: 0A           	asl	A
  6735 00:144F: 85 05        	sta	<R1
  6736 00:1451: A5 18        	lda	<L338+bus_0
  6737 00:1453: 29 FF 00     	and	#$ff
  6738 00:1456: A2 07 00     	ldx	#<$7
  6739                        	xref	~~~asl
  6740 00:1459: 22 xx xx xx  	jsl	~~~asl
  6741 00:145D: 85 09        	sta	<R2
  6742 00:145F: 18           	clc
  6743 00:1460: A5 09        	lda	<R2
  6744 00:1462: 65 05        	adc	<R1
  6745 00:1464: 85 0D        	sta	<R3
  6746 00:1466: 18           	clc
  6747 00:1467: A5 0D        	lda	<R3
  6748 00:1469: 65 01        	adc	<R0
  6749 00:146B: 85 05        	sta	<R1
  6750 00:146D: 18           	clc
  6751 00:146E: A9 xx xx     	lda	#<~~g_irq_handlers
  6752 00:1471: 65 05        	adc	<R1
  6753 00:1473: 85 01        	sta	<R0
  6754 00:1475: B2 01        	lda	(<R0)
  6755 00:1477: A0 02 00     	ldy	#$2
  6756 00:147A: 11 01        	ora	(<R0),Y
  6757 00:147C: F0 03        	beq	L342
  6758 00:147E: 82 4B 00     	brl	L10082
  6759                        L342:
  6760                        	.line	1026
  6761                        ;				g_irq_handlers[bus][irq]
                    .handlers[i] = handler;
  6762                        	.line	1027
  6763 00:1481: A5 13        	lda	<L339+i_1
  6764 00:1483: 0A           	asl	A
  6765 00:1484: 0A           	asl	A
  6766 00:1485: 85 01        	sta	<R0
  6767 00:1487: A5 1A        	lda	<L338+irq_0
  6768 00:1489: 29 FF 00     	and	#$ff
  6769 00:148C: 85 09        	sta	<R2
  6770 00:148E: A5 09        	lda	<R2
  6771 00:1490: 0A           	asl	A
  Mon Aug  9 2021 16:52                                                Page 123


  6772 00:1491: 0A           	asl	A
  6773 00:1492: 0A           	asl	A
  6774 00:1493: 0A           	asl	A
  6775 00:1494: 85 05        	sta	<R1
  6776 00:1496: A5 18        	lda	<L338+bus_0
  6777 00:1498: 29 FF 00     	and	#$ff
  6778 00:149B: A2 07 00     	ldx	#<$7
  6779                        	xref	~~~asl
  6780 00:149E: 22 xx xx xx  	jsl	~~~asl
  6781 00:14A2: 85 09        	sta	<R2
  6782 00:14A4: 18           	clc
  6783 00:14A5: A5 09        	lda	<R2
  6784 00:14A7: 65 05        	adc	<R1
  6785 00:14A9: 85 0D        	sta	<R3
  6786 00:14AB: 18           	clc
  6787 00:14AC: A5 0D        	lda	<R3
  6788 00:14AE: 65 01        	adc	<R0
  6789 00:14B0: 85 05        	sta	<R1
  6790 00:14B2: 18           	clc
  6791 00:14B3: A9 xx xx     	lda	#<~~g_irq_handlers
  6792 00:14B6: 65 05        	adc	<R1
  6793 00:14B8: 85 01        	sta	<R0
  6794 00:14BA: A5 1C        	lda	<L338+handler_0
  6795 00:14BC: 92 01        	sta	(<R0)
  6796 00:14BE: A5 1E        	lda	<L338+handler_0+2
  6797 00:14C0: A0 02 00     	ldy	#$2
  6798 00:14C3: 91 01        	sta	(<R0),Y
  6799                        ;				index = i;
  6800                        	.line	1028
  6801 00:14C5: A5 13        	lda	<L339+i_1
  6802 00:14C7: 85 11        	sta	<L339+index_1
  6803                        ;				break;
  6804                        	.line	1029
  6805 00:14C9: 82 0F 00     	brl	L10080
  6806                        ;			}
  6807                        	.line	1030
  6808                        ;		}
  6809                        L10082:
  6810                        	.line	1031
  6811                        L10079:
  6812 00:14CC: E6 13        	inc	<L339+i_1
  6813 00:14CE: A5 13        	lda	<L339+i_1
  6814 00:14D0: 30 06        	bmi	L343
  6815 00:14D2: 3A           	dea
  6816 00:14D3: 3A           	dea
  6817 00:14D4: 3A           	dea
  6818 00:14D5: 3A           	dea
  6819 00:14D6: 10 03        	bpl	L344
  6820                        L343:
  6821 00:14D8: 82 61 FF     	brl	L10081
  6822                        L344:
  6823                        L10080:
  6824                        ;		k_unlock_irq();
  6825                        	.line	1032
  6826 00:14DB: 22 xx xx xx  	jsl	~~k_unlock_irq
  6827                        ;	}
  6828                        	.line	1033
  6829                        ;
  Mon Aug  9 2021 16:52                                                Page 124


  6830                        ;	return index;
  6831                        L10078:
  6832                        	.line	1035
  6833 00:14DF: A5 11        	lda	<L339+index_1
  6834                        L345:
  6835 00:14E1: A8           	tay
  6836 00:14E2: A5 16        	lda	<L338+2
  6837 00:14E4: 85 1E        	sta	<L338+2+8
  6838 00:14E6: A5 15        	lda	<L338+1
  6839 00:14E8: 85 1D        	sta	<L338+1+8
  6840 00:14EA: 2B           	pld
  6841 00:14EB: 3B           	tsc
  6842 00:14EC: 18           	clc
  6843 00:14ED: 69 1C 00     	adc	#L338+8
  6844 00:14F0: 1B           	tcs
  6845 00:14F1: 98           	tya
  6846 00:14F2: 6B           	rtl
  6847                        ;}
  6848                        	.line	1036
  6849                        	.endblock	1036
  6850             00000014   L338	equ	20
  6851             00000011   L339	equ	17
  6852                        	ends
  6853                        	efunc
  6854                        	.endfunc	1036,17,20
  6855                        	.line	1036
  6856                        ;
  6857                        ;DEVICEDRIVER_IRQ k_irq_replace_handler(BYTE id,BY
                    TE bus,BYTE irq,DEVICEDRIVER_IRQ handler)
  6858                        ;{
  6859                        	.line	1038
  6860                        	.line	1039
  6861                        	code
  6862                        	xdef	~~k_irq_replace_handler
  6863                        	func
  6864                        	.function	1039
  6865                        ~~k_irq_replace_handler:
  6866                        	longa	on
  6867                        	longi	on
  6868 00:14F3: 3B           	tsc
  6869 00:14F4: 38           	sec
  6870 00:14F5: E9 16 00     	sbc	#L346
  6871 00:14F8: 1B           	tcs
  6872 00:14F9: 0B           	phd
  6873 00:14FA: 5B           	tcd
  6874             00000004   id_0	set	4
  6875             00000006   bus_0	set	6
  6876             00000008   irq_0	set	8
  6877             0000000A   handler_0	set	10
  6878                        	.block	1039
  6879                        ;	int i = 0;
  6880                        ;	DEVICEDRIVER_IRQ prev = NULL;
  6881                        ;
  6882                        ;	if(handler && (id > 0 && id < 4))
  6883             00000000   i_1	set	0
  6884             00000002   prev_1	set	2
  6885                        	.sym	i,0,5,1,16
  6886                        	.sym	prev,2,641,1,32
  Mon Aug  9 2021 16:52                                                Page 125


  6887                        	.sym	id,4,14,6,8
  6888                        	.sym	bus,6,14,6,8
  6889                        	.sym	irq,8,14,6,8
  6890                        	.sym	handler,10,641,6,32
  6891 00:14FB: 64 11        	stz	<L347+i_1
  6892 00:14FD: 64 13        	stz	<L347+prev_1
  6893 00:14FF: 64 15        	stz	<L347+prev_1+2
  6894                        	.line	1043
  6895                        ;	{
  6896 00:1501: A5 20        	lda	<L346+handler_0
  6897 00:1503: 05 22        	ora	<L346+handler_0+2
  6898 00:1505: D0 03        	bne	L349
  6899 00:1507: 82 B8 00     	brl	L10083
  6900                        L349:
  6901 00:150A: E2 20        	sep	#$20
  6902                        	longa	off
  6903 00:150C: A9 00        	lda	#$0
  6904 00:150E: C5 1A        	cmp	<L346+id_0
  6905 00:1510: C2 20        	rep	#$20
  6906                        	longa	on
  6907 00:1512: 90 03        	bcc	L350
  6908 00:1514: 82 AB 00     	brl	L10083
  6909                        L350:
  6910 00:1517: E2 20        	sep	#$20
  6911                        	longa	off
  6912 00:1519: A5 1A        	lda	<L346+id_0
  6913 00:151B: C9 04        	cmp	#<$4
  6914 00:151D: C2 20        	rep	#$20
  6915                        	longa	on
  6916 00:151F: 90 03        	bcc	L351
  6917 00:1521: 82 9E 00     	brl	L10083
  6918                        L351:
  6919                        	.line	1044
  6920                        ;		k_lock_irq();
  6921                        	.line	1045
  6922 00:1524: 22 xx xx xx  	jsl	~~k_lock_irq
  6923                        ;		prev = g_irq_handlers[bus][irq].handlers
                    [id];
  6924                        	.line	1046
  6925 00:1528: A5 1A        	lda	<L346+id_0
  6926 00:152A: 29 FF 00     	and	#$ff
  6927 00:152D: 85 05        	sta	<R1
  6928 00:152F: A5 05        	lda	<R1
  6929 00:1531: 0A           	asl	A
  6930 00:1532: 0A           	asl	A
  6931 00:1533: 85 01        	sta	<R0
  6932 00:1535: A5 1E        	lda	<L346+irq_0
  6933 00:1537: 29 FF 00     	and	#$ff
  6934 00:153A: 85 09        	sta	<R2
  6935 00:153C: A5 09        	lda	<R2
  6936 00:153E: 0A           	asl	A
  6937 00:153F: 0A           	asl	A
  6938 00:1540: 0A           	asl	A
  6939 00:1541: 0A           	asl	A
  6940 00:1542: 85 05        	sta	<R1
  6941 00:1544: A5 1C        	lda	<L346+bus_0
  6942 00:1546: 29 FF 00     	and	#$ff
  6943 00:1549: A2 07 00     	ldx	#<$7
  Mon Aug  9 2021 16:52                                                Page 126


  6944                        	xref	~~~asl
  6945 00:154C: 22 xx xx xx  	jsl	~~~asl
  6946 00:1550: 85 09        	sta	<R2
  6947 00:1552: 18           	clc
  6948 00:1553: A5 09        	lda	<R2
  6949 00:1555: 65 05        	adc	<R1
  6950 00:1557: 85 0D        	sta	<R3
  6951 00:1559: 18           	clc
  6952 00:155A: A5 0D        	lda	<R3
  6953 00:155C: 65 01        	adc	<R0
  6954 00:155E: 85 05        	sta	<R1
  6955 00:1560: 18           	clc
  6956 00:1561: A9 xx xx     	lda	#<~~g_irq_handlers
  6957 00:1564: 65 05        	adc	<R1
  6958 00:1566: 85 01        	sta	<R0
  6959 00:1568: B2 01        	lda	(<R0)
  6960 00:156A: 85 13        	sta	<L347+prev_1
  6961 00:156C: A0 02 00     	ldy	#$2
  6962 00:156F: B1 01        	lda	(<R0),Y
  6963 00:1571: 85 15        	sta	<L347+prev_1+2
  6964                        ;		g_irq_handlers[bus][irq].handlers[id] = 
                    handler;
  6965                        	.line	1047
  6966 00:1573: A5 1A        	lda	<L346+id_0
  6967 00:1575: 29 FF 00     	and	#$ff
  6968 00:1578: 85 05        	sta	<R1
  6969 00:157A: A5 05        	lda	<R1
  6970 00:157C: 0A           	asl	A
  6971 00:157D: 0A           	asl	A
  6972 00:157E: 85 01        	sta	<R0
  6973 00:1580: A5 1E        	lda	<L346+irq_0
  6974 00:1582: 29 FF 00     	and	#$ff
  6975 00:1585: 85 09        	sta	<R2
  6976 00:1587: A5 09        	lda	<R2
  6977 00:1589: 0A           	asl	A
  6978 00:158A: 0A           	asl	A
  6979 00:158B: 0A           	asl	A
  6980 00:158C: 0A           	asl	A
  6981 00:158D: 85 05        	sta	<R1
  6982 00:158F: A5 1C        	lda	<L346+bus_0
  6983 00:1591: 29 FF 00     	and	#$ff
  6984 00:1594: A2 07 00     	ldx	#<$7
  6985                        	xref	~~~asl
  6986 00:1597: 22 xx xx xx  	jsl	~~~asl
  6987 00:159B: 85 09        	sta	<R2
  6988 00:159D: 18           	clc
  6989 00:159E: A5 09        	lda	<R2
  6990 00:15A0: 65 05        	adc	<R1
  6991 00:15A2: 85 0D        	sta	<R3
  6992 00:15A4: 18           	clc
  6993 00:15A5: A5 0D        	lda	<R3
  6994 00:15A7: 65 01        	adc	<R0
  6995 00:15A9: 85 05        	sta	<R1
  6996 00:15AB: 18           	clc
  6997 00:15AC: A9 xx xx     	lda	#<~~g_irq_handlers
  6998 00:15AF: 65 05        	adc	<R1
  6999 00:15B1: 85 01        	sta	<R0
  7000 00:15B3: A5 20        	lda	<L346+handler_0
  Mon Aug  9 2021 16:52                                                Page 127


  7001 00:15B5: 92 01        	sta	(<R0)
  7002 00:15B7: A5 22        	lda	<L346+handler_0+2
  7003 00:15B9: A0 02 00     	ldy	#$2
  7004 00:15BC: 91 01        	sta	(<R0),Y
  7005                        ;		k_unlock_irq();
  7006                        	.line	1048
  7007 00:15BE: 22 xx xx xx  	jsl	~~k_unlock_irq
  7008                        ;	}
  7009                        	.line	1049
  7010                        ;
  7011                        ;	return prev;
  7012                        L10083:
  7013                        	.line	1051
  7014 00:15C2: A6 15        	ldx	<L347+prev_1+2
  7015 00:15C4: A5 13        	lda	<L347+prev_1
  7016                        L352:
  7017 00:15C6: A8           	tay
  7018 00:15C7: A5 18        	lda	<L346+2
  7019 00:15C9: 85 22        	sta	<L346+2+10
  7020 00:15CB: A5 17        	lda	<L346+1
  7021 00:15CD: 85 21        	sta	<L346+1+10
  7022 00:15CF: 2B           	pld
  7023 00:15D0: 3B           	tsc
  7024 00:15D1: 18           	clc
  7025 00:15D2: 69 20 00     	adc	#L346+10
  7026 00:15D5: 1B           	tcs
  7027 00:15D6: 98           	tya
  7028 00:15D7: 6B           	rtl
  7029                        ;}
  7030                        	.line	1052
  7031                        	.endblock	1052
  7032             00000016   L346	equ	22
  7033             00000011   L347	equ	17
  7034                        	ends
  7035                        	efunc
  7036                        	.endfunc	1052,17,22
  7037                        	.line	1052
  7038                        ;
  7039                        ;
  7040                        ;
  7041                        ;VOID k_irq_unregister_handler(BYTE bus,BYTE irq,D
                    EVICEDRIVER_IRQ handler)
  7042                        ;{
  7043                        	.line	1056
  7044                        	.line	1057
  7045                        	code
  7046                        	xdef	~~k_irq_unregister_handler
  7047                        	func
  7048                        	.function	1057
  7049                        ~~k_irq_unregister_handler:
  7050                        	longa	on
  7051                        	longi	on
  7052 00:15D8: 3B           	tsc
  7053 00:15D9: 38           	sec
  7054 00:15DA: E9 12 00     	sbc	#L353
  7055 00:15DD: 1B           	tcs
  7056 00:15DE: 0B           	phd
  7057 00:15DF: 5B           	tcd
  Mon Aug  9 2021 16:52                                                Page 128


  7058             00000004   bus_0	set	4
  7059             00000006   irq_0	set	6
  7060             00000008   handler_0	set	8
  7061                        	.block	1057
  7062                        ;	int i = 0;
  7063                        ;	if(handler)
  7064             00000000   i_1	set	0
  7065                        	.sym	i,0,5,1,16
  7066                        	.sym	bus,4,14,6,8
  7067                        	.sym	irq,6,14,6,8
  7068                        	.sym	handler,8,641,6,32
  7069 00:15E0: 64 11        	stz	<L354+i_1
  7070                        	.line	1059
  7071                        ;	{
  7072 00:15E2: A5 1A        	lda	<L353+handler_0
  7073 00:15E4: 05 1C        	ora	<L353+handler_0+2
  7074 00:15E6: D0 03        	bne	L356
  7075 00:15E8: 82 B0 00     	brl	L10084
  7076                        L356:
  7077                        	.line	1060
  7078                        ;		k_lock_irq();
  7079                        	.line	1061
  7080 00:15EB: 22 xx xx xx  	jsl	~~k_lock_irq
  7081                        ;		for(i=1;i<4;i++)
  7082                        	.line	1062
  7083 00:15EF: A9 01 00     	lda	#$1
  7084 00:15F2: 85 11        	sta	<L354+i_1
  7085                        L10087:
  7086                        ;		{
  7087                        	.line	1063
  7088                        ;			if(g_irq_handlers[bus][irq].hand
                    lers[i] == handler)
  7089                        	.line	1064
  7090                        ;			{
  7091 00:15F4: A5 11        	lda	<L354+i_1
  7092 00:15F6: 0A           	asl	A
  7093 00:15F7: 0A           	asl	A
  7094 00:15F8: 85 01        	sta	<R0
  7095 00:15FA: A5 18        	lda	<L353+irq_0
  7096 00:15FC: 29 FF 00     	and	#$ff
  7097 00:15FF: 85 09        	sta	<R2
  7098 00:1601: A5 09        	lda	<R2
  7099 00:1603: 0A           	asl	A
  7100 00:1604: 0A           	asl	A
  7101 00:1605: 0A           	asl	A
  7102 00:1606: 0A           	asl	A
  7103 00:1607: 85 05        	sta	<R1
  7104 00:1609: A5 16        	lda	<L353+bus_0
  7105 00:160B: 29 FF 00     	and	#$ff
  7106 00:160E: A2 07 00     	ldx	#<$7
  7107                        	xref	~~~asl
  7108 00:1611: 22 xx xx xx  	jsl	~~~asl
  7109 00:1615: 85 09        	sta	<R2
  7110 00:1617: 18           	clc
  7111 00:1618: A5 09        	lda	<R2
  7112 00:161A: 65 05        	adc	<R1
  7113 00:161C: 85 0D        	sta	<R3
  7114 00:161E: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 129


  7115 00:161F: A5 0D        	lda	<R3
  7116 00:1621: 65 01        	adc	<R0
  7117 00:1623: 85 05        	sta	<R1
  7118 00:1625: 18           	clc
  7119 00:1626: A9 xx xx     	lda	#<~~g_irq_handlers
  7120 00:1629: 65 05        	adc	<R1
  7121 00:162B: 85 01        	sta	<R0
  7122 00:162D: B2 01        	lda	(<R0)
  7123 00:162F: C5 1A        	cmp	<L353+handler_0
  7124 00:1631: D0 07        	bne	L357
  7125 00:1633: A0 02 00     	ldy	#$2
  7126 00:1636: B1 01        	lda	(<R0),Y
  7127 00:1638: C5 1C        	cmp	<L353+handler_0+2
  7128                        L357:
  7129 00:163A: F0 03        	beq	L358
  7130 00:163C: 82 49 00     	brl	L10088
  7131                        L358:
  7132                        	.line	1065
  7133                        ;				g_irq_handlers[bus][irq]
                    .handlers[i] = NULL;
  7134                        	.line	1066
  7135 00:163F: A5 11        	lda	<L354+i_1
  7136 00:1641: 0A           	asl	A
  7137 00:1642: 0A           	asl	A
  7138 00:1643: 85 01        	sta	<R0
  7139 00:1645: A5 18        	lda	<L353+irq_0
  7140 00:1647: 29 FF 00     	and	#$ff
  7141 00:164A: 85 09        	sta	<R2
  7142 00:164C: A5 09        	lda	<R2
  7143 00:164E: 0A           	asl	A
  7144 00:164F: 0A           	asl	A
  7145 00:1650: 0A           	asl	A
  7146 00:1651: 0A           	asl	A
  7147 00:1652: 85 05        	sta	<R1
  7148 00:1654: A5 16        	lda	<L353+bus_0
  7149 00:1656: 29 FF 00     	and	#$ff
  7150 00:1659: A2 07 00     	ldx	#<$7
  7151                        	xref	~~~asl
  7152 00:165C: 22 xx xx xx  	jsl	~~~asl
  7153 00:1660: 85 09        	sta	<R2
  7154 00:1662: 18           	clc
  7155 00:1663: A5 09        	lda	<R2
  7156 00:1665: 65 05        	adc	<R1
  7157 00:1667: 85 0D        	sta	<R3
  7158 00:1669: 18           	clc
  7159 00:166A: A5 0D        	lda	<R3
  7160 00:166C: 65 01        	adc	<R0
  7161 00:166E: 85 05        	sta	<R1
  7162 00:1670: 18           	clc
  7163 00:1671: A9 xx xx     	lda	#<~~g_irq_handlers
  7164 00:1674: 65 05        	adc	<R1
  7165 00:1676: 85 01        	sta	<R0
  7166 00:1678: A9 00 00     	lda	#$0
  7167 00:167B: 92 01        	sta	(<R0)
  7168 00:167D: A9 00 00     	lda	#$0
  7169 00:1680: A0 02 00     	ldy	#$2
  7170 00:1683: 91 01        	sta	(<R0),Y
  7171                        ;				break;
  Mon Aug  9 2021 16:52                                                Page 130


  7172                        	.line	1067
  7173 00:1685: 82 0F 00     	brl	L10086
  7174                        ;			}
  7175                        	.line	1068
  7176                        ;		}
  7177                        L10088:
  7178                        	.line	1069
  7179                        L10085:
  7180 00:1688: E6 11        	inc	<L354+i_1
  7181 00:168A: A5 11        	lda	<L354+i_1
  7182 00:168C: 30 06        	bmi	L359
  7183 00:168E: 3A           	dea
  7184 00:168F: 3A           	dea
  7185 00:1690: 3A           	dea
  7186 00:1691: 3A           	dea
  7187 00:1692: 10 03        	bpl	L360
  7188                        L359:
  7189 00:1694: 82 5D FF     	brl	L10087
  7190                        L360:
  7191                        L10086:
  7192                        ;		k_unlock_irq();
  7193                        	.line	1070
  7194 00:1697: 22 xx xx xx  	jsl	~~k_unlock_irq
  7195                        ;	}
  7196                        	.line	1071
  7197                        ;
  7198                        ;	return;
  7199                        L10084:
  7200                        	.line	1073
  7201                        L361:
  7202 00:169B: A5 14        	lda	<L353+2
  7203 00:169D: 85 1C        	sta	<L353+2+8
  7204 00:169F: A5 13        	lda	<L353+1
  7205 00:16A1: 85 1B        	sta	<L353+1+8
  7206 00:16A3: 2B           	pld
  7207 00:16A4: 3B           	tsc
  7208 00:16A5: 18           	clc
  7209 00:16A6: 69 1A 00     	adc	#L353+8
  7210 00:16A9: 1B           	tcs
  7211 00:16AA: 6B           	rtl
  7212                        ;}
  7213                        	.line	1074
  7214                        	.endblock	1074
  7215             00000012   L353	equ	18
  7216             00000011   L354	equ	17
  7217                        	ends
  7218                        	efunc
  7219                        	.endfunc	1074,17,18
  7220                        	.line	1074
  7221                        ;
  7222                        	.line	1074
  7223                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.c",1056
  7224                        	xref	~~_k_initialize_call_table
  7225                        	xref	~~k_put_color
  7226                        	xref	~~k_put_string
  7227                        	xref	~~k_longtodec
  7228                        	xref	~~k_inttodec
  Mon Aug  9 2021 16:52                                                Page 131


  7229                        	xref	~~k_bytetodec
  7230                        	xref	~~k_bytetohex
  7231                        	xref	~~k_strip_padding
  7232                        	xref	~~strlen
  7233                        	xref	~~memset
  7234                        	xref	~~memcpy
  7235                        	xref	~~malloc
  7236                        	udata
  7237                        	xdef	~~_k_exec_message
  7238                        ~~_k_exec_message
  7239 00:0000:              	ds	64
  7240 00:0040:              	ends
  7241                        	udata
  7242                        	xdef	~~g_irq_handlers
  7243                        ~~g_irq_handlers
  7244 00:0040:              	ds	512
  7245 00:0240:              	ends
  7246                        	udata
  7247                        ~~KERNEL_FUNCTION_TABLE
  7248 00:0240:              	ds	4
  7249 00:0244:              	ends
  7250                        	udata
  7251                        ~~k16buffer
  7252 00:0244:              	ds	16
  7253 00:0254:              	ends
  7254                        	.sym	~~_k_lock_depth,~~_k_lock_depth,5,2,16
  7255                        	.sym	~~_k_lock_enabled,~~_k_lock_enabled,14,2
                    ,8
  7256                        	.sym	~~_k_in_irq_enabled,~~_k_in_irq_enabled,
                    14,2,8
  7257                        	.sym	~~_k_exec_message,~~_k_exec_message,110,
                    2,0,64
  7258                        	.sym	~~_k_exec_error,~~_k_exec_error,18,2,32
  7259                        	.sym	~~_k_exec_context,~~_k_exec_context,18,2
                    ,32
  7260                        	.sym	~~_system_timer,~~_system_timer,18,2,32
  7261                        	.sym	~~g_irq_handlers,~~g_irq_handlers,874,2,
                    0,89,4,8
  7262                        	.sym	~~KERNEL_FUNCTION_TABLE,~~KERNEL_FUNCTIO
                    N_TABLE,5249,3,32
  7263                        	.sym	~~k16buffer,~~k16buffer,110,3,0,16
  7264                        	.sym	~~_k_isOSDebug,~~_k_isOSDebug,14,3,8
  7265                        	.sym	~~FXOSVERSIONSTRING,~~FXOSVERSIONSTRING,
                    142,3,32
  7266                        	.sym	~~FXOSVERSION,~~FXOSVERSION,18,3,32
  7267                        	.sym	va_list,0,142,14,32
  7268                        	.sym	~~k_exec_throw_exception,~~k_exec_throw_
                    exception,65,2,0
  7269                        	.sym	~~k_irq_unregister_handler,~~k_irq_unreg
                    ister_handler,65,2,0
  7270                        	.sym	~~k_irq_replace_handler,~~k_irq_replace_
                    handler,5185,2,32
  7271                        	.sym	~~k_irq_register_handler,~~k_irq_registe
                    r_handler,80,2,0
  7272                        	.sym	PIRQCHAIN,0,138,14,32,89
  7273                        	.sym	IRQCHAIN,0,10,14,128,89
  7274                        	.sym	DEVICEDRIVER_COMMAND,0,654,14,32
  7275                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  Mon Aug  9 2021 16:52                                                Page 132


  7276                        	.sym	DEVICEDRIVER_WRITE,0,654,14,32
  7277                        	.sym	DEVICEDRIVER_READ,0,654,14,32
  7278                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  7279                        	.sym	DEVICEDRIVER_IRQ,0,641,14,32
  7280                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,88
  7281                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,88
  7282                        	.sym	GETDRIVERDEF,0,8842,14,32,87
  7283                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,87
  7284                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,87
  7285                        	.sym	~~k_DebugOutString,~~k_DebugOutString,65
                    ,2,0
  7286                        	.sym	~~k_exit_critical_section,~~k_exit_criti
                    cal_section,65,2,0
  7287                        	.sym	~~k_enter_critical_section,~~k_enter_cri
                    tical_section,78,2,0
  7288                        	.sym	~~k_get_c256_release,~~k_get_c256_releas
                    e,65,2,0
  7289                        	.sym	~~k_get_c256_minor_version,~~k_get_c256_
                    minor_version,65,2,0
  7290                        	.sym	~~k_get_c256_major_version,~~k_get_c256_
                    major_version,65,2,0
  7291                        	.sym	~~k_get_fpga_date_year,~~k_get_fpga_date
                    _year,65,2,0
  7292                        	.sym	~~k_get_fpga_date_month,~~k_get_fpga_dat
                    e_month,65,2,0
  7293                        	.sym	~~k_get_fpga_date_day,~~k_get_fpga_date_
                    day,65,2,0
  7294                        	.sym	~~k_get_rtc_century,~~k_get_rtc_century,
                    80,2,0
  7295                        	.sym	~~k_get_rtc_year,~~k_get_rtc_year,80,2,0
  7296                        	.sym	~~k_get_rtc_day,~~k_get_rtc_day,80,2,0
  7297                        	.sym	~~k_get_rtc_month,~~k_get_rtc_month,80,2
                    ,0
  7298                        	.sym	~~k_get_rtc_second,~~k_get_rtc_second,80
                    ,2,0
  7299                        	.sym	~~k_get_rtc_minute,~~k_get_rtc_minute,80
                    ,2,0
  7300                        	.sym	~~k_get_rtc_hour,~~k_get_rtc_hour,80,2,0
  7301                        	.sym	~~k_millis,~~k_millis,82,2,0
  7302                        	.sym	~~k_user_DisableOSDebug,~~k_user_Disable
                    OSDebug,65,2,0
  7303                        	.sym	~~k_user_EnableOSDebug,~~k_user_EnableOS
                    Debug,65,2,0
  7304                        	.sym	~~k_user_IsOSDebug,~~k_user_IsOSDebug,78
                    ,2,0
  7305                        	.sym	~~k_debug_nodelist_with_data,~~k_debug_n
                    odelist_with_data,65,2,0
  7306                        	.sym	~~k_debug_nodelist_list,~~k_debug_nodeli
                    st_list,65,2,0
  7307                        	.sym	~~k_debug_nodelist,~~k_debug_nodelist,65
                    ,2,0
  7308                        	.sym	~~k_debug_node,~~k_debug_node,65,2,0
  7309                        	.sym	~~k_debug_integers,~~k_debug_integers,65
                    ,2,0
  7310                        	.sym	~~k_debug_crlf,~~k_debug_crlf,65,2,0
  7311                        	.sym	~~k_debug_rect,~~k_debug_rect,65,2,0
  7312                        	.sym	~~k_debug_nstrings,~~k_debug_nstrings,65
                    ,2,0
  Mon Aug  9 2021 16:52                                                Page 133


  7313                        	.sym	~~k_debug_nmessage,~~k_debug_nmessage,65
                    ,2,0
  7314                        	.sym	~~k_debug_strings,~~k_debug_strings,65,2
                    ,0
  7315                        	.sym	~~k_debug_message,~~k_debug_message,65,2
                    ,0
  7316                        	.sym	~~k_debug_byte_array,~~k_debug_byte_arra
                    y,65,2,0
  7317                        	.sym	~~k_debug_on,~~k_debug_on,65,2,0
  7318                        	.sym	~~k_debug_bits,~~k_debug_bits,65,2,0
  7319                        	.sym	~~k_debug_hexchar,~~k_debug_hexchar,65,2
                    ,0
  7320                        	.sym	~~k_debug_hex,~~k_debug_hex,65,2,0
  7321                        	.sym	~~k_debug_long,~~k_debug_long,65,2,0
  7322                        	.sym	~~k_debug_integer_array,~~k_debug_intege
                    r_array,65,2,0
  7323                        	.sym	~~k_debug_hex_integer,~~k_debug_hex_inte
                    ger,65,2,0
  7324                        	.sym	~~k_debug_integer,~~k_debug_integer,65,2
                    ,0
  7325                        	.sym	~~k_debug_pointer,~~k_debug_pointer,65,2
                    ,0
  7326                        	.sym	~~k_debug_char,~~k_debug_char,65,2,0
  7327                        	.sym	~~k_debug_nstring,~~k_debug_nstring,65,2
                    ,0
  7328                        	.sym	~~k_debug_string,~~k_debug_string,65,2,0
  7329                        	.sym	~~k_enable_locking,~~k_enable_locking,65
                    ,2,0
  7330                        	.sym	~~k_unlock_irq,~~k_unlock_irq,80,2,0
  7331                        	.sym	~~k_lock_irq,~~k_lock_irq,80,2,0
  7332                        	.sym	~~k_lock_depth,~~k_lock_depth,80,2,0
  7333                        	.sym	~~k_debug_nstring_com1,~~k_debug_nstring
                    _com1,65,2,0
  7334                        	.sym	~~k_debug_nstring_com2,~~k_debug_nstring
                    _com2,65,2,0
  7335                        	.sym	~~k_debug_string_com2,~~k_debug_string_c
                    om2,65,2,0
  7336                        	.sym	~~k_debug_string_com1,~~k_debug_string_c
                    om1,65,2,0
  7337                        	.sym	~~k_debug_char_com2,~~k_debug_char_com2,
                    65,2,0
  7338                        	.sym	~~k_debug_char_com1,~~k_debug_char_com1,
                    65,2,0
  7339                        	.sym	~~k_delay,~~k_delay,65,2,0
  7340                        	.sym	~~k_report_configuration,~~k_report_conf
                    iguration,69,2,0
  7341                        	.sym	~~k_getFXOSVersionName,~~k_getFXOSVersio
                    nName,1102,2,32
  7342                        	.sym	~~sleep,~~sleep,65,2,0
  7343                        	.sym	~~k_delay_1ms,~~k_delay_1ms,65,2,0
  7344                        	.sym	~~k_delay_1,~~k_delay_1,65,2,0
  7345                        	.sym	~~k_delay_nop,~~k_delay_nop,65,2,0
  7346                        	.sym	PSEGMENTHEADER,0,138,14,32,86
  7347                        	.sym	SEGMENTHEADER,0,10,14,160,86
  7348                        	.sym	~~k_initializeZeroPage,~~k_initializeZer
                    oPage,1098,2,32,83
  7349                        	.sym	~~k_getKernelTrapTable,~~k_getKernelTrap
                    Table,42049,2,32
  Mon Aug  9 2021 16:52                                                Page 134


  7350                        	.sym	~~k_getZeroPage,~~k_getZeroPage,1098,2,3
                    2,83
  7351                        	.sym	PDEBUGBYTEBITS,0,138,14,32,85
  7352                        	.sym	DEBUGBYTEBITS,0,10,14,8,85
  7353                        	.sym	PFXENVIRONMENT,0,138,14,32,84
  7354                        	.sym	FXENVIRONMENT,0,10,14,96,84
  7355                        	.sym	~~_k_initialize_call_table,~~_k_initiali
                    ze_call_table,65,18,0
  7356                        	.sym	PFXZEROPAGE,0,138,14,32,83
  7357                        	.sym	FXZEROPAGE,0,10,14,720,83
  7358                        	.sym	IRQBUFFER,0,10,14,32,82
  7359                        	.sym	KERNELTRAPCALL,0,641,14,32
  7360                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,81
  7361                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,81
  7362                        	.sym	FRESULT,0,5,14,16
  7363                        	.sym	MKFS_PARM,0,10,14,80,80
  7364                        	.sym	FILINFO,0,10,14,2224,79
  7365                        	.sym	DIR,0,10,14,416,78
  7366                        	.sym	FIL,0,10,14,4400,77
  7367                        	.sym	FFOBJID,0,10,14,128,76
  7368                        	.sym	FATFS,0,10,14,4504,75
  7369                        	.sym	LBA_t,0,18,14,32
  7370                        	.sym	FSIZE_t,0,18,14,32
  7371                        	.sym	TCHAR,0,14,14,8
  7372                        	.sym	~~k_put_color,~~k_put_color,69,18,0
  7373                        	.sym	~~k_put_string,~~k_put_string,69,18,0
  7374                        	.sym	PCOMMANDARGS,0,138,14,32,74
  7375                        	.sym	COMMANDARGS,0,10,14,64,74
  7376                        	.sym	PTOKENIZESTATE,0,133,14,32
  7377                        	.sym	TOKENIZESTATE,0,5,14,16
  7378                        	.sym	PTOKEN,0,138,14,32,73
  7379                        	.sym	TOKEN,0,10,14,64,73
  7380                        	.sym	PTOKENTYPE,0,133,14,32
  7381                        	.sym	TOKENTYPE,0,5,14,16
  7382                        	.sym	FXCommandHandler,0,656,14,32
  7383                        	.sym	PCONSOLECTX,0,138,14,32,72
  7384                        	.sym	CONSOLECTX,0,10,14,1144,72
  7385                        	.sym	PSPINNERCTX,0,138,14,32,71
  7386                        	.sym	SPINNERCTX,0,10,14,48,71
  7387                        	.sym	HCLIP,0,138,14,32,70
  7388                        	.sym	PCLIPBOARD_DATA,0,138,14,32,70
  7389                        	.sym	CLIPBOARD_DATA,0,10,14,168,70
  7390                        	.sym	PEVENTMANAGER,0,138,14,32,69
  7391                        	.sym	EVENTMANAGER,0,10,14,192,69
  7392                        	.sym	EV_RUN,0,656,14,32
  7393                        	.sym	EV_QUERY_METRIC,0,656,14,32
  7394                        	.sym	EV_CONFIGURE,0,656,14,32
  7395                        	.sym	EV_UNINIT,0,641,14,32
  7396                        	.sym	EV_INIT,0,8833,14,32
  7397                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,68
  7398                        	.sym	MOUSE_MSG_STATE,0,10,14,184,68
  7399                        	.sym	PFXEVENTPROCESS,0,138,14,32,67
  7400                        	.sym	FXEVENTPROCESS,0,10,14,64,67
  7401                        	.sym	FXASYNCPROCESS,0,641,14,32
  7402                        	.sym	PMARSHALDATA,0,139,14,32,66
  7403                        	.sym	MARSHALDATA,0,11,14,32,66
  7404                        	.sym	FXIDLEPROCESS,0,641,14,32
  7405                        	.sym	FXEventProc,0,641,14,32
  Mon Aug  9 2021 16:52                                                Page 135


  7406                        	.sym	PMOUSEMSGDATA,0,138,14,32,65
  7407                        	.sym	MOUSEMSGDATA,0,10,14,64,65
  7408                        	.sym	MSGIRQ,0,5,14,16
  7409                        	.sym	MAINLOOPARGS,0,10,14,16,64
  7410                        	.sym	PEACHCHILD_MSG,0,138,14,32,63
  7411                        	.sym	EACHCHILD_MSG,0,10,14,64,63
  7412                        	.sym	PMSGBOX_DATA,0,138,14,32,62
  7413                        	.sym	MSGBOX_DATA,0,10,14,96,62
  7414                        	.sym	PDESKTOP_DATA,0,138,14,32,61
  7415                        	.sym	DESKTOP_DATA,0,10,14,64,61
  7416                        	.sym	PWINDOWMANAGER,0,138,14,32,60
  7417                        	.sym	WINDOWMANAGER,0,10,14,160,60
  7418                        	.sym	WM_DOPROCS,0,641,14,32
  7419                        	.sym	WM_QUERY_METRIC,0,656,14,32
  7420                        	.sym	WM_CONFIGURE,0,656,14,32
  7421                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
  7422                        	.sym	WM_EVENTS,0,641,14,32
  7423                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,59
  7424                        	.sym	CUR_PALETTE_MAP,0,10,14,400,59
  7425                        	.sym	PCLICKDETECTED,0,138,14,32,58
  7426                        	.sym	CLICKDETECTED,0,10,14,64,58
  7427                        	.sym	OBJECTCLICKED,0,641,14,32
  7428                        	.sym	PALLOCATIONHEADER,0,138,14,32,57
  7429                        	.sym	ALLOCATIONHEADER,0,10,14,80,57
  7430                        	.sym	PIPCPORT,0,138,14,32,56
  7431                        	.sym	IPCPORT,0,10,14,144,56
  7432                        	.sym	MemoryCallback,0,641,14,32
  7433                        	.sym	PFXMEMORYMAP,0,138,14,32,55
  7434                        	.sym	FXMEMORYMAP,0,10,14,2072,55
  7435                        	.sym	UMM_HEAP_INFO,0,10,14,256,54
  7436                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  7437                        	.sym	FOREACHNODE,0,641,14,32
  7438                        	.sym	PEXECUTIVE,0,138,14,32,53
  7439                        	.sym	EXECUTIVE,0,10,14,128,53
  7440                        	.sym	EX_QUERY_METRIC,0,656,14,32
  7441                        	.sym	EX_CONFIGURE,0,656,14,32
  7442                        	.sym	EX_UNINIT,0,641,14,32
  7443                        	.sym	EX_INIT,0,8833,14,32
  7444                        	.sym	~~k_longtodec,~~k_longtodec,1102,18,32
  7445                        	.sym	~~k_inttodec,~~k_inttodec,1102,18,32
  7446                        	.sym	~~k_bytetodec,~~k_bytetodec,1102,18,32
  7447                        	.sym	~~k_bytetohex,~~k_bytetohex,1102,18,32
  7448                        	.sym	~~k_strip_padding,~~k_strip_padding,1102
                    ,18,32
  7449                        	.sym	PFXSTRING,0,138,14,32,52
  7450                        	.sym	FXSTRING,0,10,14,64,52
  7451                        	.sym	PFXRFHEADER_STRING_ENTRY,0,138,14,32,51
  7452                        	.sym	FXRFHEADER_STRING_ENTRY,0,10,14,40,51
  7453                        	.sym	PFXRFHEADER_STRING,0,138,14,32,50
  7454                        	.sym	FXRFHEADER_STRING,0,10,14,32,50
  7455                        	.sym	PFXRFHEADER_FONT,0,138,14,32,49
  7456                        	.sym	FXRFHEADER_FONT,0,10,14,144,49
  7457                        	.sym	PFXRFHEADER,0,138,14,32,48
  7458                        	.sym	FXRFHEADER,0,10,14,72,48
  7459                        	.sym	PFXCOMBUFFER,0,138,14,32,47
  7460                        	.sym	FXCOMBUFFER,0,10,14,2080,47
  7461                        	.sym	PSUBMENULIST,0,138,14,32,46
  7462                        	.sym	SUBMENULIST,0,10,14,40,46
  Mon Aug  9 2021 16:52                                                Page 136


  7463                        	.sym	HSUBMENU,0,7,14,32
  7464                        	.sym	PSUBMENU,0,138,14,32,45
  7465                        	.sym	SUBMENU,0,10,14,64,45
  7466                        	.sym	MenuAction,0,641,14,32
  7467                        	.sym	PMENUANCHOR,0,138,14,32,44
  7468                        	.sym	MENUANCHOR,0,10,14,272,44
  7469                        	.sym	PMSGBOX,0,138,14,32,43
  7470                        	.sym	MSGBOX,0,10,14,144,43
  7471                        	.sym	PTEXTBOX,0,138,14,32,42
  7472                        	.sym	TEXTBOX,0,10,14,144,42
  7473                        	.sym	PLISTBOX,0,138,14,32,41
  7474                        	.sym	LISTBOX,0,10,14,240,41
  7475                        	.sym	PSCROLLBAR,0,138,14,32,40
  7476                        	.sym	SCROLLBAR,0,10,14,240,40
  7477                        	.sym	PBUTTON,0,138,14,32,39
  7478                        	.sym	BUTTON,0,10,14,96,39
  7479                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,38
  7480                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,38
  7481                        	.sym	PMENUTAG,0,138,14,32,37
  7482                        	.sym	MENUTAG,0,10,14,160,37
  7483                        	.sym	PMENU,0,138,14,32,36
  7484                        	.sym	MENU,0,10,14,280,36
  7485                        	.sym	HMENURESOURCE,0,129,14,32
  7486                        	.sym	FONTMETRIC,0,10,14,32,35
  7487                        	.sym	TITLE,0,142,14,32
  7488                        	.sym	PHANDLE,0,1153,14,32
  7489                        	.sym	HANDLE,0,129,14,32
  7490                        	.sym	PWINDOWEX,0,138,14,32,34
  7491                        	.sym	WINDOWEX,0,10,14,3880,34
  7492                        	.sym	PWINDOW,0,138,14,32,33
  7493                        	.sym	WINDOW,0,10,14,3904,33
  7494                        	.sym	PDRAGDATA,0,138,14,32,32
  7495                        	.sym	DRAGDATA,0,10,14,216,32
  7496                        	.sym	PNCCLICKABLE,0,138,14,32,31
  7497                        	.sym	NCCLICKABLE,0,10,14,136,31
  7498                        	.sym	HCLICKABLE,0,7,14,32
  7499                        	.sym	PCLICKABLE,0,138,14,32,30
  7500                        	.sym	CLICKABLE,0,10,14,152,30
  7501                        	.sym	PWNDCLASS,0,138,14,32,29
  7502                        	.sym	WNDCLASS,0,10,14,272,29
  7503                        	.sym	HBRUSH,0,129,14,32
  7504                        	.sym	HCURSOR,0,129,14,32
  7505                        	.sym	HICON,0,129,14,32
  7506                        	.sym	HINSTANCE,0,129,14,32
  7507                        	.sym	FXWndProc,0,654,14,32
  7508                        	.sym	PDRECT,0,138,14,32,28
  7509                        	.sym	DRECT,0,10,14,112,28
  7510                        	.sym	PRECTP,0,138,14,32,27
  7511                        	.sym	RECTP,0,10,14,96,27
  7512                        	.sym	PRECT,0,138,14,32,26
  7513                        	.sym	RECT,0,10,14,112,26
  7514                        	.sym	PPOINT,0,138,14,32,25
  7515                        	.sym	POINT,0,10,14,32,25
  7516                        	.sym	PFXPROPERTY,0,138,14,32,23
  7517                        	.sym	FXPROPERTY,0,10,14,384,23
  7518                        	.sym	PKEYSTATE,0,138,14,32,22
  7519                        	.sym	KEYSTATE,0,10,14,112,22
  7520                        	.sym	SCANCODE,0,14,14,8
  Mon Aug  9 2021 16:52                                                Page 137


  7521                        	.sym	KEYCODE,0,16,14,16
  7522                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,21
  7523                        	.sym	FXPROCESSMESSAGE,0,10,14,112,21
  7524                        	.sym	PFXPROCESS,0,138,14,32,20
  7525                        	.sym	FXPROCESS,0,10,14,800,20
  7526                        	.sym	PDESKTOP_CONTROL,0,138,14,32,19
  7527                        	.sym	DESKTOP_CONTROL,0,10,14,392,19
  7528                        	.sym	PCONSOLE_CONTROL,0,138,14,32,18
  7529                        	.sym	CONSOLE_CONTROL,0,10,14,448,18
  7530                        	.sym	FXProcessProc,0,641,14,32
  7531                        	.sym	PFXCMDMESSAGE,0,138,14,32,17
  7532                        	.sym	FXCMDMESSAGE,0,10,14,312,17
  7533                        	.sym	PFXOSMESSAGE,0,138,14,32,16
  7534                        	.sym	FXOSMESSAGE,0,10,14,312,16
  7535                        	.sym	PINT_REGS,0,138,14,32,15
  7536                        	.sym	INT_REGS,0,10,14,104,15
  7537                        	.sym	TASK_STACK,0,10,14,32,14
  7538                        	.sym	TASK,0,10,14,48,13
  7539                        	.sym	PIRQDATA,0,138,14,32,12
  7540                        	.sym	IRQDATA,0,10,14,48,12
  7541                        	.sym	HMENU,0,129,14,32
  7542                        	.sym	HWND,0,129,14,32
  7543                        	.sym	MSGDATA,0,14,14,8
  7544                        	.sym	MSGDEST,0,18,14,32
  7545                        	.sym	MSGSRC,0,18,14,32
  7546                        	.sym	MSGTYPE,0,16,14,16
  7547                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,6
  7548                        	.sym	PROCESS_TLS_LIST,0,138,14,32,6
  7549                        	.sym	SEMAPHORE_LIST,0,138,14,32,6
  7550                        	.sym	FILE_BLOCK_LIST,0,138,14,32,6
  7551                        	.sym	FILE_PATH_LIST,0,138,14,32,6
  7552                        	.sym	PROCEDURE_LIST,0,138,14,32,6
  7553                        	.sym	FILE_HANDLE,0,138,14,32,11
  7554                        	.sym	FILE_BLOCK,0,10,14,552,11
  7555                        	.sym	SEMAPHORE,0,10,14,16,10
  7556                        	.sym	PPROCESS_SIGNAL,0,138,14,32,9
  7557                        	.sym	PROCESS_SIGNAL,0,10,14,16,9
  7558                        	.sym	KRESULT,0,18,14,32
  7559                        	.sym	PKERNEL_ERROR,0,138,14,32,8
  7560                        	.sym	KERNEL_ERROR,0,10,14,32,8
  7561                        	.sym	PROCESS_STATUS,0,16,14,16
  7562                        	.sym	FILE_PATH_NAME,0,142,14,32
  7563                        	.sym	PROCESS_RESOURCE,0,129,14,32
  7564                        	.sym	PROCESS_TLS,0,129,14,32
  7565                        	.sym	PROCESS_CTX,0,129,14,32
  7566                        	.sym	USERID,0,16,14,16
  7567                        	.sym	PROCESS_ID,0,18,14,32
  7568                        	.sym	PROCESS_BANK,0,14,14,8
  7569                        	.sym	PFXQUEUE,0,138,14,32,7
  7570                        	.sym	FXQUEUE,0,10,14,80,7
  7571                        	.sym	PFXNODELIST,0,138,14,32,6
  7572                        	.sym	FXNODELIST,0,10,14,96,6
  7573                        	.sym	NodeListDeallocator,0,641,14,32
  7574                        	.sym	PFXNODE,0,138,14,32,5
  7575                        	.sym	FXNODE,0,10,14,384,5
  7576                        	.sym	PBYTEBITS,0,138,14,32,4
  7577                        	.sym	BYTEBITS,0,10,14,8,4
  7578                        	.sym	HRESULT,0,18,14,32
  Mon Aug  9 2021 16:52                                                Page 138


  7579                        	.sym	LPWCHAR,0,144,14,32
  7580                        	.sym	WCHAR,0,16,14,16
  7581                        	.sym	HSTRINGTABLE,0,129,14,32
  7582                        	.sym	HCOLOR,0,129,14,32
  7583                        	.sym	HFONT,0,129,14,32
  7584                        	.sym	HDC,0,129,14,32
  7585                        	.sym	HPOINTER,0,129,14,32
  7586                        	.sym	uint32_t,0,18,14,32
  7587                        	.sym	uint8_t,0,14,14,8
  7588                        	.sym	LPBOOL,0,142,14,32
  7589                        	.sym	BOOL,0,14,14,8
  7590                        	.sym	DWORD,0,18,14,32
  7591                        	.sym	ULONG,0,18,14,32
  7592                        	.sym	LPLONG,0,135,14,32
  7593                        	.sym	LONG,0,7,14,32
  7594                        	.sym	PUINT,0,144,14,32
  7595                        	.sym	USHORT,0,16,14,16
  7596                        	.sym	UINT,0,16,14,16
  7597                        	.sym	INT,0,5,14,16
  7598                        	.sym	WORD,0,5,14,16
  7599                        	.sym	PBYTE,0,142,14,32
  7600                        	.sym	BYTE,0,14,14,8
  7601                        	.sym	IOPORT,0,142,14,32
  7602                        	.sym	PUCHAR,0,142,14,32
  7603                        	.sym	UCHAR,0,14,14,8
  7604                        	.sym	LPWCSTR,0,142,14,32
  7605                        	.sym	LPCSTR,0,142,14,32
  7606                        	.sym	LPSTR,0,142,14,32
  7607                        	.sym	LPCHAR,0,142,14,32
  7608                        	.sym	CHAR,0,14,14,8
  7609                        	.sym	PUINT_32,0,146,14,32
  7610                        	.sym	UINT_32,0,18,14,32
  7611                        	.sym	PUINT_16,0,144,14,32
  7612                        	.sym	UINT_16,0,16,14,16
  7613                        	.sym	PUINT_8,0,142,14,32
  7614                        	.sym	UINT_8,0,14,14,8
  7615                        	.sym	LPVOID,0,129,14,32
  7616                        	.sym	VOID,0,1,14,32
  7617                        	.sym	~~strlen,~~strlen,80,18,0
  7618                        	.sym	~~memset,~~memset,1089,18,32
  7619                        	.sym	~~memcpy,~~memcpy,1089,18,32
  7620                        	.sym	Boolean_T,0,5,14,16
  7621                        	.sym	~~malloc,~~malloc,1089,18,32
  7622                        	.sym	ldiv_t,0,10,14,64,2
  7623                        	.sym	div_t,0,10,14,32,1
  7624                        	.sym	wctype_t,0,16,14,16
  7625                        	.sym	wint_t,0,16,14,16
  7626                        	.sym	wchar_t,0,14,14,8
  7627                        	.sym	ptrdiff_t,0,7,14,32
  7628                        	.sym	size_t,0,16,14,16
  7629                        	end


      Lines assembled: 7629
      Errors: 0
